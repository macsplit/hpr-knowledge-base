Episode: 379
Title: HPR0379: SSL Ep 1 
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0379/hpr0379.mp3
Transcribed: 2025-10-07 19:25:07

---

So
Hi everyone. This is Klaatu and this is Hacker Public Radio. My name is Klaatu. The show is Hacker Public Radio.
Anyway, I just got back recently from a very informative and very cool 2600 meeting and we were talking a lot about SSL certificates.
And SSL certificates, if you don't know, are essentially there very much like open GBG or PGP keys for internet, you know, for servers on the internet.
You can use it for other things too, but that's primarily where we see them.
And I've had to obtain SSL certificates both self-signed and purchased for a company that I used to work for and, you know, kind of maintain it and put it onto some test servers and things like that.
So I'm a little bit familiar with it. And I just thought I would mention some things about SSL and a really cool site that actually provides free SSL certificates.
Okay, so I'm going to save that for the very end so that you have to listen to the whole episode to find out what company it is.
And if you didn't even know SSL certificates weren't always free then prepare to learn something. So SSL certificates, you might have seen them, you know, if you're just an everyday user of the internet, you might have seen them when you go to a website and Firefox pops up a big warning message on your, you know, instead of taking you to the page,
it says this is an untrusted site. This is, you know, we cannot verify this site or it has a self-signed certificate and it says you want to add an exception or take me away from this page.
And it's like, it's a fairly drastic kind of, like, loud warning sign. And it's kind of, you know, a lot of people had kind of a big problem with it when, if I recall correctly, when Firefox 3 came out, this kind of, like,
really scary and sort of, like, not very well-explained warning comes up. And a lot of people don't even understand why they're getting that warning or what it means. So let's start out with what it does mean.
So if you go to a site, let's just say the badapples.info. Let's say you go to the badapples.info and Firefox warns you, hey, this is untrusted.
Well, you know that maybe you do some research. You look at, like, where the badapples is being hosted now and maybe you knew where it was hosted before and then the IP address checks out. And, you know, as far as you can tell, maybe you even do, like, a trace route or something.
Maybe you've done a trace route in the past on the badapples and happened it to have saved it on your hard drive. You can compare the two, you know? I mean, it's, you're sure that this is really the badapples.info.
So you go ahead and trust, you add an exception and you continue into the badapples. Okay. So what just happened? Well, what happened was that Firefox saw a little key in the badapples that I made, a self-signed SSL certificate.
And it is saying, well, this isn't from a big company. This is just like, this guy just made up a SSL certification. We don't really, we can't feel, we're not sure with any real certainty that this is really the badapples or that this certificate is worth anything.
So just, you know, that's your warning. And they don't really say that, of course. They just, they say this is an untrusted site and it looks really scary. But that's what they're saying. They're saying that I don't have a certificate that has really any, any kind of verifiable authenticity.
And then if you're saying, yeah, well, I trust it anyway, then you're importing my key into your little browser cache or something and you're continuing on into my site. So does this ring a bell?
It probably does if you're used to the SSH key system. Like if you're on your own network and you decide, okay, I want to SSH into the box across the room. So you SSH into the box across the room. It says, okay, well, you know, you've never been into this box before via SSH.
I detect a fingerprint of such and such. Is this, do you want to import this permanently for, or not a fingerprint, but a key such and such. Do you want to import this into your dot SSH folder slash authorized keys to file? And you can say yes. And then it's permanently added into your authorized keys file.
And from then on, when you SSH into the box across the room, it doesn't bug you about what kind of, what kind of key it has. It just assumes this is really the box because that, that initial, that initial key is now trusted. You've, you've imported that into your, into your dot SSH directory.
And it is, it assumes now that the box across the room really does have that key and you know what you're doing. Now if you ever SSH into that box, maybe when you weren't in clear line of sight of the box, you know, you, you, you just SSH into the IP address or the name of the box that you think should be there.
And someone, one of your, one of your fellow students or co-workers had come in and had swapped the boxes on you and put their own box in the, in, in there so that you'd be SSH into their box so that they could monitor your, your traffic or something.
Then your computer would tell you, I would say, wait a minute, the, you know, I'm SSH into the IP address, but the SSH key, RSA key is different. It's not going to be what's going on.
And if you, if you, if you can go verify that that's really the box across the room that you've been SSH into all month long, then you can go into your authorized keys file, delete the old key and re-import the new key.
You might want to find out why that key is changed, but you can do that. So this is the same idea with SSL. If you go into a server on the interwebs and they give you some kind of authorization key, like an SSL certificate, then, and, and you trust it, then you go onto that site.
And the next time you go and it says, you know, the bad apples, you went there once and it had this key, this SSL cert, and you said it was trusted, but today, this SSL cert is expired or it's a different, you know, it has a different key to it or something.
Then when you, you know, you need to kind of maybe step back and think, well, why did the bad apples dot info, which has had the same SSL cert information for the past three months? Why is it suddenly giving me completely different information on itself?
Now, if it's just some random site like the bad apples, honestly, it's probably not that. They give a deal, depending on what kind of security risk I guess you're willing to take. I mean, I wouldn't, I wouldn't feel that bad about going anyway.
If it was something like, you know, buy dot com or Tiger Director, new egg, you know, someplace that you're going to put your credit card information into, yeah, okay, it might be something to think about, you know, before you actually say, yeah, trust it anyway, let's go.
Or your bank, for instance, you know, that could be something you'd want to watch out for. So that's what SSL certs do. Now let's talk about the different kinds of SSL certs.
There are basically two kinds. There are self issued, and then there are, there are self signed, and then there are, there are vericined, you know, there are companies out there like vericined.
I think thought either was or is one of them, you know, places like that just look up SSL certs on Google, it will take you all over the place.
Go daddy, I think actually offers SL certs. Basically all these big companies that have sort of an internet presence and decided to get into the SSL cert business will sell you an SSL cert, which basically says that you've paid them a couple of thousand dollars, so you must be a good guy.
And so you put that SSL key on your server, and when people go to your server, Firefox, or Internet Explorer, or Safari, or Opera, or Conquer, or all these, you know, these big web browsers, I mean, they are kind of programmed usually.
I shouldn't speak for all of them, but the big browsers are usually pre-programmed that if they see an SSL cert that is authenticated, that can be authenticated as coming from something like vericined or sought.
Or, you know, whatever other companies go daddy, whatever sells the SSL certs, then they just take you there. They assume that the SSL cert is good, and they take you into the server and you're good to go.
Now, what's the problem with that theory? Well, one problem is that just because people buy an SSL cert for a couple of thousand dollars doesn't mean they're on the level, doesn't mean they have the best interests of you or humanity or anyone else in mind.
The idea, I think, is that if they are paying that much money, you know, they're not going down to the SSL cert, you know, the back alley and paying in cash, you know, giving a fake ID. I mean, they're like, you know, there's some kind of verification there in theory.
Having done an episode on how to, you know, make fake ID cards and things like that and doing a podcast called Hacker Public Radio, you can kind of assume that we all don't really believe in that theory 100%.
So, the whole, just because they bought it for a thousand bucks or a couple of thousand really, it's actually quite expensive, doesn't necessarily mean that they're the good guys.
So, that's just FYI. Now, so, if you're going to a site and it just automatically pops up and says, hey, I can't verify the SSL cert, that does not mean that there's anything wrong with that site.
It simply means that the vendor of that SSL cert or the person who made the SSL cert themselves, they just aren't lucky enough to be in the database of approved SSL cert people of that browser.
And, in fact, you can make an open SSL cert yourself really, really easily. It's just super simple. Most Linux distributions come with that on the system. It's not a big deal.
So, if you do a man open SSL, you'll see all the information that you need. It's like I say, it's really, really similar to something like GPG or even SSH.
It's the same kind of deal. You know, you're creating some kind of key and you're going to put one key on your server.
And that's your big super secret private key and that's really important and you have to back it up and all that other good stuff where you should.
And when people go there, you know, they're seeing the keys that they are allowed to see in import as the trusted thing and stuff like that.
You can make your own SSL keys and put it on your own server and that is that. It's not that big of a deal.
This would be like a self-signed key, though, or a self-signed certificate. And whether or not people are going to trust that as much, I guess, is one that people paid 20 grand for or five grand or whatever it was for.
I wasn't the person paying the money when I did it for the company that I used to work for, so I don't know. They just told me it was a lot of money.
I think it was, you know, I think it's a little bit expensive. But anyway, so there you go. I mean, that's all it is. You can make your own.
And all that does is say, my server has this key on it. And if you ever go to my server and it doesn't have this key on it, you need to think twice about coming into the server.
Because your signal might be being interrupted by someone intercepted and someone is trying to fool you that the bad apples has gone into being back to being a Mac OS podcast no longer as a Linux podcast.
Or worse yet, your bank account information is just going to be sucked up into something. But obviously, that's not going to be a self-signed certificate.
But you get the idea. The point is that, I mean, you can make an SSL cert yourself, put it on your server. And from then on, everyone knows, okay, that's that. That's the key. That's the fingerprint of your server.
If I ever go there and it's different, I will ask questions. I will do a trace route. I will do investigations. I will take it to the highest levels of the internet governance and find out what's going on.
Okay, so the cool thing is, no, yeah. And the disadvantage, again, for a self-signed certificate is that Firefox and all those other browsers will almost always definitely warn the user that it's a self-signed certificate.
And, you know, it depends on who your audience is. A lot of people are going to see any warning about the authenticity of a website. And, well, you know what, let's think about it. They're probably just going to go there anyway.
So, probably not that big of a deal. But in theory, I guess it might deter certain people from your website. But that does assume that people read warnings.
But I mean, at least in Firefox, I mean, in order to get to that site that is being warned, you have to go in and, like, quote, add an exception. And a lot of people, I mean, it's a couple of clicks. You know, it's a couple of clicks of the mouse. And it's big and scary. And they really do make it very, very serious looking for some reason.
So, the cool thing about this place called cacert.org, that is cacert.ert.org, is that it's a whole bunch of self-signed certificates, but it's a whole bunch of people vouching for each other.
So, you've got kind of a self-built network of people who more or less vouch for each other, kind of like GPG and NPGP keys, you know, where you literally have like key signing parties and things like that, where you actually meet the person in person.
You say, yeah, this person is for real. They showed me two forms of ID. I had some coffee with them. They seemed like they were good people. They must be good guys. I'll vouch for them.
Or if you're a little bit more restricted with your support, you can just vouch for the people that you actually know. You know, the point is that it is a network of people who do, they have to vouch for each other in order for them to get the certificates and stuff like that.
So, it's like a self-signed certificate, but it's not just a self-signed certificate. You know, it does have a little bit of a network behind it, a little bit of a group effort to say, yeah, these, you know, we're all, we're not shady characters, we're not trying to scam anyone out of their credit card information or personal information or whatever.
So, you get a little bit more of a feeling of security there. It's not fool-proof, it's not, you know, it's not, it's not really that much different than a self-signed certificate, especially in the sense that Firefox is still going to warn people that this is not a known SSL certificate.
It's not from their assigned, it's not from these big companies, from GoDaddy, whatever. So, it's still going to warn the user, hey, this is not something that we will just pass you into without any kind of warning.
It's going to warn the user, but savvy users will see the CA cert origin and say, okay, this is kind of cool. This isn't just some person creating this SSL cert for themselves.
You know, there's, they're a little bit, you know, they're a part of film community and this community has kind of given them the okay.
Whether CA cert will ever become big enough and popular enough, I guess, for browsers to kind of just recognize CA certs.
I feel they were just as good as verisign ones, I don't know, it could be, it could very well be possible.
And certainly I do like the idea of there being a community like that.
I mean, it's largely the same as GPG, you know, I mean, authenticating someone as themselves and as a quote-unquote good guy is about as an exact science as, you know, as really anything.
I mean, it's just, it's a complete, it's just really hard to do. And there is, at some point, it's just kind of breaks down to, well, I'm going to have to trust this, you know, because it's just kind of, that's how it is.
Apparently, there's somewhat trustworthy. Okay, I'll trust them. So it's really, I mean, don't think that SSL certs are any kind of, there's no, you know, background check or lie detector test that people take.
You know, it's not anything, it's not supernatural, it's not, it's not absolute in any way.
It's that they paid money for an SSL cert, and that's it, or they didn't, and that's it. So I mean, the difference really boils down to how much money someone paid.
Unfortunately, browsers are giving a lot more preference to the people who paid a lot of money.
Again, for financial institutions and stuff like that, this might be a good thing in a way. But really, you just have to understand that SSL certs are simple, are simply devices to verify that, ever, that since the last time you were there, you're still on the same server.
And that's really all it boils down to. But if you're doing web hosting or, you know, web, if you're hosting your own site or anything like that, and you want to look into getting an SSL cert, which, again, is not a bad idea because when your friends go there, they will be able to look at the site and say, okay, this is the same site that I went to yesterday, cool.
So if you're looking into that, by all means, read the man page of open SSL, or maybe I'll do an episode on how to generate and implement an SSL key at some point.
Look at that. And even more so, look into cacert.org. And if you, you know, if you're in IRC or something or if you're around, let me know. And maybe we can find each other's at cacert, you know, forms, and that way we can kind of start building up a little network, whatever.
So yeah, cacert.org, check it out, open SSL. It's really cool stuff. And hopefully it's a lot more clear now as to what exactly is going on with open SSL. And, and like I said, maybe I'll do an episode at some point on how to actually generate the keys and where to put them on the server and stuff like that.
So thank you for listening. As always, if you ever want to do an episode of hacker public radio, be do not hesitate to do an episode and then email either enigma at, I guess, hacker public radio, or maybe it's admin at hacker public radio, or clat to at hacker public radio.org.
And I will make sure that the correct people know that you've got an episode and it will get posted at some point. Yeah, that's it. That's about all I've got for you. So have a great rest of the day. Bye.
.
.
