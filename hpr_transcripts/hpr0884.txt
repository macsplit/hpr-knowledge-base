Episode: 884
Title: HPR0884: Cross Platform Streaming
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0884/hpr0884.mp3
Transcribed: 2025-10-08 04:06:30

---

..........
......
On the edge of real and cyberspace, there's one place you can go.
On the edge of real and cyberspace, there's one place you can go, and you found it.
Welcome to the nightcast.
The one and only podcast that tunes tech into your way of life and lets the technology
work for you.
My name is Knightwise and for the coming 60 minutes or so I'll be your host on this episode
of the nightcast entitled Crossplatform Streaming.
For more information and the show notes, head on over to the website www.nightwise.com.
That's K-N-I-G-H-T-W-I-S-E.com, where you'll find the links to everything that we talk
about and the place to plop down your feedback.
You'll also find the nightwise.com media feed, subscribe to this RSS feed and get all of
the nightwise.com content, the K-W-T-V screencasts, the nightcast podcasts, and the PDF
doke you casts, delivered to your pod catcher automatically.
Letting technology work for you, if you want to get in touch with us, you can.
Feedback at nightwise.com is the address for those of you who still use email.
You can find us on Twitter, twitter.com slash nightwise, or use the hashtag hashtag hashtag
deernightwise, or alternatively you can find us on Facebook, facebook.com slash nightwise
com, or you can even look for nightwise on Google plus.
And you can also set fire to a burning building, well you can set fire to a building which
makes it a burning building, setting fire to a burning building is kind of redundant.
But you can, you can set fire to a burning building, climb on top, wave your arms and
scream my name to get my intention.
The chances that I'll notice are slim.
The chances that I'll actually respond to that are even slimmer.
Hey guys and girls, how are you today?
Welcome to another episode of the nightcast.
As you can hear perhaps by the sound of the engine coming to you from the car I am on
my way to an appointment from work and I still have quite a lot of driving to do so I
thought it would be a good idea to sit back, relax and talk to you guys today.
So it's been a while since we did a nightcast, sorry for that, it's been a very very busy
period in my life, we've got some home renovations that we're going through, I've got some projects
on the side that are kicking around, and of course work is keeping me busy.
So I didn't have a lot of time to podcast, I did try to find the energy at multiple occasions
but it didn't always work but that's not important right now because I'm here and I'm
talking to you guys and that's all that matters.
So what are we going to talk about today?
Well we're going to talk about a project that I've got kicking around at home for quite
a while now and it's quite an elaborate project and I wanted to wait until I got it completely
done before I did a podcast about it.
Yesterday I almost got it working completely so I thought you know what I'm going to tell
the wise guys and the wise girls about it.
We are going to talk about home media streaming using several platforms and devices.
It's based on a true story as are most of my projects.
It's a project that I've been running through at home, I've got iPads, iPods, Linux devices,
Android smartphones, Linux servers, Windows virtual machines, I'm Max and God knows what
I'm kicking around at home and I'm one of those guys that likes to watch everything everywhere.
I don't believe in TV anymore, I don't believe in cable TV anymore.
I believe in downloading or streaming or watching the content that I want when I want it
on whatever device that I want.
Now if you walk into the proprietary Windows, Garden or into proprietary Apple LAN, it's
not that hard to set it all up as long as you stick to the same vendor and pay tribute
to the same God, but across platform, he's like me that has Windows and Max and Linux
machines and Android and iOS devices, kicking around and wants to do the same thing.
Well he has a little bit of a challenge ahead of him, but that challenge has been overcome.
So I'll talk about that today.
Now I watch anything I want anywhere I want it on any device in my house whenever I want
it using technology and letting technology work for me, that's what we're going to talk
today.
So enjoy this week's KWTV, no, no, not KWTV, a lot, enjoy this week's 9th cast cross-platform
streaming.
Let's get in to the meat of the matter.
To be honest, it would be the easiest if I would just start at the core.
The core of my network is an Amahi Linux server.
Amahi Linux is a flavor of Red Hat that gives you the ability to add functionalities and
services to your Linux server using a simple web interface and a point and click architecture.
Basically, if you want to add a functionality to your Amahi server, you just pick one from
the list, click on it, it is immediately installed and started added functions.
You can control your Amahi machine using a web-based interface and you can just add functionality
by getting functionalities from the standard list or the Amahi application store.
Like all what you want, it runs through a set of pre-built scripts and boom, the functionality
is there.
What Amahi has out of the box is quite impressive.
It has some file sharing.
It has DHCP and DNS.
So right off the bat, after installing Amahi, you have a web interface and all of these
basic services.
So I'll start out centrally, got a core to my network that does DHCP, that does DNS.
I think it's a bit bossy that it wants to do all of that, but I'll just let it have
its way.
And I store all my files on my Amahi machine.
Boom, my entire library is stored centrally, good.
That's not enough because I also want my aggregation to be done centrally.
Well, that's okay.
I've talked about this podcasting script that I wrote a while ago where I will automatically
download the podcasts to my Linux server using the application G-Potter and use a script
to scope out the latest episodes and put it in a separate folder so I can synchronize
it to my devices.
So central aggregation of new data can be done.
My new media are mostly podcasts using the G-Potter application on my Amahi server.
Storage of media, check.
Now for the hard part.
I have my pictures, my audio and my video stored on my Amahi server.
Also my podcasts are there.
But now I would like to watch that content on any device in the house.
Let's get started with question number one, streaming video from a central repository
to every device in your house.
How do we do it?
Streaming video was actually the easiest part, really, because Amahi comes with an application
that you can install just by pointing clicking called DLNA.
DLNA is an acronym that stands for Digital Lifestyle Network Association.
It is kind of a universal protocol that allows systems to stream content over a network
using a universal language.
It's kind of like the TCP-IP of multimedia.
What it means is that content stored on a DLNA server and that can be a Linux server or
that can even be a NAS can be published throughout your network using the DLNA protocol and
streamed by a client with the DLNA client installed on it.
In essence, it means that if you have one of these new fancy TVs that comes with the
DLNA client, that DLNA client will detect the DLNA server on the network and will stream
the content from the server on your fancy TV while your server will do all the crossing
coding and the heavy lifting.
It doesn't matter which brand you have, it doesn't matter which operating system you're
on, it doesn't matter what device you're working with.
It can be a NAS as a server and a TV as a client, but it can be a computer as a server.
It can be an iPad as a client.
If it has a DLNA server installed and a DLNA client, they can talk to each other through
the network.
So I installed Amahi DLNA, which is a DLNA server and pointed the configuration file,
which is very easy to set up to the directories where I have stored my video and my pictures
and that's about it, because my podcasts, I said podcasts are here, that's audio, videos
here, that's video and pictures are here, those are pictures, because you have to kind
of tell the DLNA server what is what in what directory, and then it came down to my clients.
Let's go through all of the clients.
First of all, my iPad.
There is a DLNA client for the iPad, it's called AirPlay, if I'm not mistaken, but I'll
check that and put that in the show notes, so I installed it on there.
AirPlay detected my Amahi server, saw all the media content on there and I was streaming
away, all of my download, it's my Ripped Star Trek episodes and I was watching them while
I was on the cross trainer and it worked flawlessly.
I also pointed it to the directory where the podcasts were downloaded and look, all
of the podcasts were there and I could just stream them, I only had to download them once
and I could just stream them to the iPad, that was fun.
Step 2, the iPod, oh, just installed the DLNA client on there and hoppa, same thing,
I could stream all the content on the device that I wanted to stream it on, it was great,
it worked, wow, I mean I only had to download the video podcast once and watch it and when
I wanted to watch a big bang theory episode or a Star Trek episode or a Firefly episode
I could do that on my iOS devices, that was great, that worked.
But I also have that TV upstairs that has my Xbox hooked up to it, so what do you know?
If you go to the media menu of your Xbox, it will detect the DLNA servers on your network
Awesome.
All I had to do was point it towards it and I could just browse through the videos and
the audio and the picture and play whatever I wanted to play, works great and I could
use the Xbox remote from the couch so it was awesome, worked, fine.
Now for the computers, I also wanted to stream, so what could I do, what could I do, I could
just look for a DLNA client, you know what has a DLNA client?
The boxy application, boxy is the app that we talked about earlier and boxy does detect
DLNA players or servers on the network.
So I installed boxy on my laptops and whenever I want to stream something, I just open up
boxy, browse through the folders and start playing the episode.
It works on my Macbook error and it works on my iMacs, great.
It also works on my Linux laptops that I have running around the house because boxy also
runs on Linux, great, it also works on my Windows laptop, I don't have Windows laptops
but it works on there, just great, fine.
Now there is a little bit of a trick to this, I've got boxy setup in such a way on my
iMac that it will display full screen on the second screen while leaving the primary
screen just intact to use as my desktop, which is great, I fire up boxy, it immediately
takes full screen control of my second screen and will start streaming the content from
the DLNA server whenever I want it to.
Downstairs on the TV, same issue, no problem, I've got a little Linux machine hooked
up to the TV there that I use as a media PC, it doesn't have any content but it doesn't
need to, it just has to have boxy, boost up boxy, does it full screen and boxy will take
care of streaming the DLNA content from the DLNA server throughout my entire network,
easy as pie, pretty cool.
Now there are also DLNA clients for my Android phone, now I haven't tried them, I must say
but I also only have a small Android phone, I don't watch a lot of media on my phone to
be honest and neither does Nihanna, so we didn't really look into that part of the problem
in all that depth, but boxy is a great DLNA client for all of my PCs and the rest of the
devices have a DLNA client that you can install or one that is there natively.
That was great for movies, that was great for podcasts that I downloaded, I absolutely
loved it, how about streaming, you know the content that you don't download, well that's
just great boxy has it all, boxy has it all I can do, you can subscribe to Geekbeat TV
or whatever channels that I want to watch streaming and all of the applications, these
are special apps that you can install on top of your boxy with special channels, are
just install that way and you can stream to your heart's desire from the internet, it's
a great interface we've talked in depth about boxy and boxy also takes care of that central
streaming thing where I have all of my streaming channels available on all of my devices without
having to go to the websites and stuff.
Just for my iPad it doesn't have a native boxy client, well it does have one now I think
I should try it actually if it does what it does, but I don't know if it does DLNA straight
from the boxy client, I'm not really sure I probably should check that out before I
confirmed that, haven't tested that one yet, should do it pretty soon.
So that was all the video part and I must say so far it works pretty great, the only
thing that I must say is that not all of the formats are supported by the DLNA server
and the clients, sometimes there's a video out there that has an MKV format and the Xbox
has a hard time playing that over DLNA, most codecs it can handle, as for the Macs and
PCs they can just about handle every codec and will stream everything over DLNA so that
works just fine.
The fun part with using boxy as an interface is that you can trigger your boxy to use
a remote, you can install a remote application on your iPad or your iPod touch and use that
as a remote, so what we do is we have, when I have the TV downstairs and I want to play
a movie or a TV series, I boot up the Linux machine that's hooked onto it, it automatically
boots boxy, the DLNA protocol looks for my MI server and all of the movies that I have
on there and I just use the remote, the iPod on the iPod touch to increase or decrease
the volume or pause or play, pause or play whatever I want to listen to or play, just
don't use the iPod touch as a remote without having to get up out of the couch.
That works great, we talked about boxy in some extent in one of the previous podcasts
and we also talked about my, I just hadn't talked about how I marry them together.
So that's great for video, now the next part is audio and audio is a little bit harder
because to be Craig Frank, I have all of my music, all of it in my iTunes directory.
It's about 25,000 songs and they are all in a massive iTunes directory and here I roll
straight into the whole Apple proprietary land and I was a little bit stoked or stumped
at how could I get all of this content to play on just about any device.
Not easy I tell you, not easy at all but we are looking for a way to do that.
Now I thought DLNA, I just copied the files or the iTunes library to my file server,
my Amahi file server and point the DLNA server towards it which is great but DLNA only
sees the files, it doesn't see the iTunes library and it doesn't see the playlist which
is kind of a bummer.
So I thought well DLNA is not really going to cut it.
So I still have a problem there where I cannot stream my iTunes library as the library to
for example my Xbox which only has a DLNA client.
But I also have an iPod, an iPad and two MacBooks and they are equipped with iTunes and
the iTunes streaming client because now you can stream your entire music library from
an iTunes library from a Mac to an iOS device or another Mac using iTunes sharing.
So I thought oh I can work this out, I just have to have another Mac running.
That didn't really work because one of the progress that I had was I only want one device.
One device running, not two devices, I've got, I don't have an hefty power bill but I am
kind of conscious about the environment and having several systems running was not part
of the deal.
We all wanted to do it from one device.
I came up with a beautiful little dirty hack that enabled me to do just that and how
I did that, well that's something we're going to talk about in the next chapter.
Welcome to the digital revolution.
On the edge of real and cyberspace there's one place you need to go, the white crust.
Now the iTunes library really troubles some little kid that I wanted to really beat
into submission.
How was I going to do that?
How was I going to share my iTunes library with 25,000 songs and all of the playlists on
all of my Macs from that one central location?
As I said before there were several options.
I could use the Amahi deal and a server and just point it at the folder with the music
files.
I would just copy my entire iTunes library to the Amahi server and point the DLNA server
at that folder.
I tried that and it worked and I saw all of the MP3s in there, they got all indexed but
there were no playlists.
So kind of hard to start looking in 25,000 songs if you have a lot of playlists that you
want to play.
Not really an option.
And my Macs didn't see it.
Only the DLNA client saw it, my iTunes clients didn't see it.
So I looked around a little bit, I found this service called Firefly which actually emulates
a shared iTunes directory.
So what it does is it runs as a service and you point it towards a certain folder where
all the music is.
And got it working long behold, iTunes clients saw another iTunes machine on the network
and when I clicked on it I saw all of my music but no playlists back to the drawing board.
So what was I going to do?
I mean the only thing that would really work is have this library inside iTunes and
share it out.
So all of the other Macs on my network and the iOS devices could see it as a shared iTunes
library with all of those playlists and everything.
So there were several options by a Mac running on there.
Not going to happen.
The second option, use a Mac that already have and let that run 24.7.
Not an option, I wanted one machine.
Okay, try a hacking dot solution where you actually run OSX on PC hardware.
Downloaded a distribution, play around with it a little bit and thought this is not really
what I want.
A, I can't get it to work and B, then I don't have, then I just have an extra Mac on the
system and I also want a Linux system and I want some more versatility.
Not going to happen.
We try running OSX inside a virtual machine using virtual box.
Now with OS, Lyon coming out, Apple has given the permission to the people of VMware
Fusion to run virtual instances of snow leopard in Lyon or virtual versions of Lyon in Lyon
as long as it's on a Mac OS on Apple hardware.
What I wanted to do is different.
I wanted to run a Mac OS system on virtual box on PC hardware on a Linux operating system.
Yes, I'm a complicated guy with complicated demands.
I have equally high demands of computers as I have of beauty of women.
That's why I married a gorgeous little girl who is super sweet.
So I thought, hmm, let's, let's look into this.
I had heard reports of people running their, their snow leopard CDs inside of virtual
box.
Basically running an instance of virtual box popping in a native snow leopard CD and running
a virtual copy of snow leopard.
Tried it, tinkered around with every virtual box settings I could squeeze in.
I should activate this and deactivate that and a lot of hurt and a lot of pain and it
didn't work.
Why?
Because even if it's a virtual machine, even if it emulates the Apple boots stuff, the
FE boot, a snow leopard, my vanilla snow leopard didn't want it.
On the other hand, I had this hacking test distribution that I downloaded called EATCOS.
I tried to install that physically on the system that didn't like the hardware either.
So I thought, how about taking the EATCOS distribution and running that inside a virtual machine?
The virtual machine will have an operating system that's a little bit tuned towards PC
hardware and the EATCOS distribution will have quite standard hardware surroundings inside
the virtual machine.
So virtual box, EATCOS CD booted it up and everything worked out of the box, just like that.
So suddenly I had a central Mac on my system, a virtual machine that ran in my Amahi machine
and that physically did not exist and everything worked.
All the other Macs thought like, hey, it's an extra Mac.
So I made the mistake of making the virtual machine only, I think about a hundred gigabytes,
but I have a 127 gigabytes iTunes directory.
So what I did inside the virtual machine, I added a virtual hard drive.
You can do this in virtual box by just adding a hard drive.
When I went back into the virtual machine, it said like, oh, you've connected a second
physical hard drive.
Oh, yes, please format it and put all the iTunes things, put all the iTunes music on there.
So what I had now was a virtual machine of OS X, which had a system drive of about a hundred
gigabytes and which had a data drive of 500 gigabytes.
Inside the virtual machine, that's what it looked like.
Physically, I had two files, a VMDK file, which is a virtual machine disk image file
with the OS X system and a virtual machine disk image with all of the data inside that system.
So what I did, copied over iTunes and activated the shared library.
And now all of my Macs in the house say like, hey, there's an extra Mac in the house.
That's just great.
And all of my I devices say like, hey, there's a shared iTunes library.
Let's play music.
And it works fine.
It's a physical PC with Linux on it and virtual box.
And on that is running a hacking touch virtual machine of Lion.
Cross platform, baby.
Now, I can't share out because of the sharing protocol of iTunes.
I can't share out my iTunes library to my Xbox and stuff.
But I'll get there someday.
I'll tinker a little bit.
I can always try to still use DLNA or Firebird to point at the directory with the files.
But I don't want to go there right now.
I'll just keep it inside the world garden.
But it works pretty great.
So that's how I do the music.
I told you how I do the videos.
I told you how I do the podcasts.
And I must say, with the combination of everything that I just talked about,
it works pretty fine.
I was thinking of using the iTunes inside the virtual machine
to download the podcasts and then hook up my iPod and iPad to sync with that wirelessly.
But I haven't gotten around to that.
I tried to hook up my iPod with the virtual machine.
But the USB kernel of virtual box had a kind of a HC fit and it didn't really work.
I need to do some updates, I think, and then I'll see to get it working.
But in all, what I've achieved is cross-platform power, maybe.
By the way, I can share my iTunes directory out to my Linux machines.
Because in Amorock or Banshee, one of the two,
there is the option to detect, shared iTunes libraries and play music from them.
So even in Linux, I have access to my music.
I haven't looked at Android just yet because I don't stream iTunes to my phone.
I've got my iOS systems for that.
But the great thing is we now have two iPod touches in the house.
And we have several speaker docs around the house.
Now, what we do is we carry around these iPod touches,
which also function as our boxy remotes and all kinds of things.
And we just plop them into the speakers wherever we are.
But instead of playing the content that is synchronized on them,
we just stream the content from the central iTunes server in the
EOTCOS Lion virtual machine with the central shared iTunes library.
So that works pretty great.
I do have to say one thing about EOTCOS.
Look, if you download this distribution or any hacking touch distribution,
it has a version of Lion, a copy of Lion or Snow Leopard.
Now, you don't buy it in the Apple Store,
so if you download a hacking touch version,
you are quite probably breaking a couple of rules.
You're breaking some Apple rules.
Like Apple says, you should not run hardware on non-macking touch systems.
We don't know, no, run OSX on non-macking touch systems.
Yeah, okay, we'll break that rule.
But the second one is you have purchased the copy of Lion without owning a license of Lion.
So what I suggest you do, and you should take this up with your own
prerogative, I have a copy of Lion.
I bought a copy of Lion, and I have a copy of Snow Leopard.
So my EOTCOS copy is kind of justified.
I'm doing air quotes here.
You can skip that, but you know, that's your own prerogative.
I don't just encourage it or condone it.
It's your own choice, but I do want to put a disclaimer out there that
not only in the EOTCOS copy,
without owning a representative license or an equal license to
a Lion or Snow Leopard is illegal.
And while running a magging touch,
sorry, OSX software on non-macking touch hardware is something that Apple doesn't like,
but hey, assuming.
No, no, no, don't so mean.
Well, whatever, you know what I mean.
I've gotten a question, meanwhile, on Google+, on doing a manual on how to do that.
It's not really that hard.
All you need to do is just basically set up a standard virtual machine
and put in the EOTCOS CD or DVD, and you're good to go.
So it's not that hard.
So, before we close up, I quickly want to mention how I back this up,
because quite frankly, I've got a lot of stuff stored centrally.
How do I back this up?
Well, my server's not really big.
I've got a one gigabyte system drive and a one gigabyte drive for my virtual machines.
On the system drive, I've got all of my files in my music.
On the external USB drives, I've got my virtual machines.
I also have two other USB drives hooked up.
One USB drive is used to store backups of all of my files,
using an R-sync script, all of the files that I have stored centrally on the server
get copied over to that second external USB disk.
The first internal USB disk that I have holds the virtual machines of my,
holds the files of my virtual machines.
I copy that over to another USB disk.
So I have three external USB disks and one internal one,
the internal one gigabyte one gets copied to a USB disk.
The external USB disk with the virtual machines gets copied to another USB disk.
I also use crash plan on a remote system.
So all the files that I have are stored on the network on a remote system.
So I have them on a third drive in a different location.
That is an option that I also have.
I don't have a lot of local data on my Macs, but I use or on my Linux machines,
but I use crash plan to also back those up and store them on a remote system.
I am going to go for the crash plan paid account next year.
So I store all of that in the cloud, but if I were to upload
three terabyte of data to the cloud with a 100 gigabyte bandwidth cap a month,
that would not really be so cool.
I also have an archive USB disk.
So what do I do?
I copy the files over to the archive disk, but with the virtual machines,
I just copy the virtual machine disk images over.
So instead of copying over the 25,000 files that are inside the Lion VMDK data disk image,
I just copy over the entire data disk image.
It's just one file.
It's actually a little bit easier.
The virtual machines themselves get snapshot it regularly,
so I have backups to go back to.
Should I mess something up?
So that's a great way to work with.
And in all, I am very, very pleased with my situation.
I've got just a summarized central and my machine, Red Hat Linux.
I've got Lion virtual machine on there.
I also have an Ubuntu virtual machine,
and a Windows virtual machine running on that permanently.
I've given the Yamahi server 12 gigs of RAM,
and using all of the services that I just mentioned,
and some fancy or just smart used client software,
I can get it all working.
Total cost, not that much.
The only thing I really had to pay for were the two,
what was the, I think it's called the AirPlay application on iOS.
That's about three euros or something,
to stream DLNA content.
And on my server, my Yamahi server,
I just plopped in 12 gigs of RAM,
which cost me about 70 euros.
And in all, I've got a perfectly working system,
cross-platform streaming my content to any device,
where I can listen or watch anything that I want to watch
or want to listen to whenever I want,
from wherever I want.
So, it's been a very technical talk.
I hope you got a lot of inspiration out of it.
It's been fun to give it.
And I just gave it off the top of my head,
because I finished off the project yesterday
into a kind of a working fashion,
and I just wanted to tell you about it.
It's kind of not scripted,
but I hope you get the general idea.
That's about it.
For this week, I'm almost home.
It's been a long, long day, it's 9.30 in the evening.
So excuse me for rambling a little bit.
Just want to say, you know where to go
if you want to send us feedback.
Feedback at nightwise.com,
or hook me up on Twitter, twitter.com slash nightwise.
Find me on Google Plus.
I mean, I'm having a lot of fun on Google Plus,
because all the conversations on Google Plus
are very technical and very insightful.
And I really love to hang out with you guys there.
Add me to your circles on Google Plus,
or you can find me on Facebook,
facebook.com slash nightwise.
Calm that's okay as well.
What I do want to say,
that if you want to do something for a nightcast,
or for nightwise.com,
and you want to pay it forward a little bit,
or do something back for us or for the community,
just to have one friend
subscribe to the nightcast.
Propose or present or introduce.
That's the word.
I'm getting tired.
I'm looking for words.
Introduce the nightcast to one of your geeky friends
that doesn't know about nightwise.com.
Show them the website.
Let them subscribe to the feed.
Add another wise guy to the wise guys,
or a wise guy we like wise guys as well,
especially if they're smart and pretty.
And judging by the birthday wishes I got a couple of weeks ago,
I am surrounded by smart and smart geeks and beautiful women.
So if you know a smart geek or a beautiful woman,
let her or him subscribe to the nightcast
and add another listener to the community.
That's about all I have time for today.
I'm almost on, I'm going to have my English call it supper.
Dinner?
No, dinner, lunch?
What is it?
What do you eat in the evening?
I know, the stuff you eat in the evening.
I think dinner, yes.
Yeah, lunch is in the afternoon,
or something like that.
Tea is in the afternoon, but it's not important.
I'm going to eat a little bit and then I'm going to turn in.
See you guys on the flip side.
Hope you have a great time
and find a little bit of inspiration
from this podcast.
Select technology, work for you and say the other way around.
Until then, this was your cyber lifestyle coach
as I dubbed myself,
which is quite appropriate.
I'm a cyber lifestyle coach.
I'm your lifestyle coach on the edge of real and cyber space.
See you guys on the flip side.
Like tech, work for you and stay on the other way around
and have a lot of fun.
See you next time.
Bye.
Thanks for coming to the edge of real and cyber space.
You have been listening to the Nightcast.
Send your feedback, questions,
prowasorans to Nightwise at Nightwise.com
or Skype us on Nightwise.
For more information, visit the site on www.nightwise.com
or look for us in iTunes by searching for the Nightcast.
Please remember, there's a real world beyond cyrus space
but it's not all that important.
You have been listening to Hacker Public Radio
or Hacker Public Radio, those are.
We are a community podcast network
that releases shows every weekday in Monday through Friday.
Today's show, like all our shows,
was contributed by a HBR listener by yourself.
If you ever consider recording a podcast,
then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound
and the economical and computer cloud.
HBR is funded by the binary revolution at binref.com
all binref projects are crowd-responsive by linear pages.
From shared hosting to custom private clouds,
go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released
under a creative comments,
attribution, share a like,
feed us our license.
