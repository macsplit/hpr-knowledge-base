Episode: 4268
Title: HPR4268: Book review and an Emacs rabbit-hole
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr4268/hpr4268.mp3
Transcribed: 2025-10-25 22:18:42

---

This is Hacker Public Radio Episode 4268 for Wednesday 11 December 2024.
Today's show is entitled Book Review and an E-Max Rabbit Hole.
It is hosted by Ennis Tello and is about 13 minutes long.
It carries a clean flag.
The summary is I talk about Mastering E-Max by Mickey Peterson.
Hello there, welcome to Hacker Public Radio. I'm your host Ennis Tello.
And in this episode I'll be reviewing a book called Mastering E-Max by Mickey Peterson.
First of all, a couple of items of business.
The audio quality on this podcast isn't perhaps up to decent standards.
I won't go into the reasons for that too deeply, but I'm recording somewhere different using slightly different kits, so please bear with me.
And the second thing of course is that Hacker Public Radio needs your episodes.
If you're a one time contributor or sometimes contributor and haven't contributed for a while, can I urge you to go and record another episode?
And if you've never recorded a podcast before, why not record your first and upload it to the site?
So the book I've been looking at is Mastering E-Max by Mickey Peterson, cost $49.
I've added a link in the show notes if you want to go and buy it.
And if you're interested in any way in E-Max or maybe you're an E-Max user of any really, but the most advanced level, I'd recommend that you check it out.
I'll give you a bit of background on this episode.
You should know, I guess, upfront that in order to pay the rent, I write for a living text as opposed to code.
And the other thing I guess is that I'm very prone to getting RSI in my right hand, which makes using a mouse or even worse actually a laptop touchpad for long periods of time, it makes it really problematic.
And so therefore I tend to prefer user interfaces that are very much keyboard centric.
Now some listeners to this podcast have just skipped to the next one.
And they're, I can't say blame them.
And they're probably them users though.
And the E-Max versus Vi or Vim in its later iteration, that trope is old.
And it's kind of funny, but it's kind of tiresome.
It's a bit like talking about whether you choose a phone operating system between iOS and Android and really to get the best out of either Android or iOS or Vi Vim or E-Max.
You have to use it for a long time to learn all its foibles and tricks and extensibilities and so on and so forth.
And that takes a while.
And then when you're conversant with that package or that operating system, you've made a significant investment in it.
Investment in time and in energy, learning it well.
And so therefore that tends to develop certain loyalties.
Now I've been learning E-Max and I can say that when I've mastered or fully absorbed all E-Max can offer, I will learn Vim or NeoVim or Vi.
However, what I have discovered is E-Max is so extensible and can do so many things that by the time I fully mastered every possibility that E-Max offers, the heat death of the universe will probably be about to arrive.
Now what I read on the internet, so I can't claim this in any way as original, is that the difference between Vim and E-Max is that Vim is a very extensible powerful text editor and E-Max is a very extensible powerful application that has a text editor.
Also, for me personally, in the UK Vim was and maybe still is, it's the trade name of a bleached based scouring powder.
And so for many years I found Vim references to Vim rather confusing, similarly actually being a bit of a thickie.
I found references to E-Max confusing for a long time because at one stage there was an apple all in one Mac that was made specifically for the education center called an E-Max.
So discussions of major modes in E-Max, confused me, a great deal.
So on to the book, Mastering E-Max by Mickey Peterson Price for $9.
Mickey writes a blog called Mastering E-Max.org and the book isn't so much derived from the blog as the blog caused him as he went along to make notes, those blog entries kind of became the book.
Now to begin with, I've been using E-Max for maybe three or four months before coming across Mastering E-Max.
And as I've read it and then reread bits of it, many things became much clearer.
Mickey makes the point that the best place to find out more about E-Max is in the E-Max help system or rather the E-Max help systems.
But it's very simple to find out what stuff does, what keyboard shortcuts are, what all the commands are, how things are structured, all by using E-Max's internal functionality.
And you can go as deep as you like, you can browse around the help sections, you can also look at info files, getting man pages, you can dive into functions, variables, every component.
And all of which, all these help systems are laid out in exactly the same way and they access to the same way.
And you can search them all generally as well using apropos. And they're all accessed in the same way.
Now the second thing I guess I wanted to come out with was that pretty early on in the book, Mickey talks about extensibility.
And I've got a little quote here, he says extensibility is important that emphasizing that importance is difficult.
If you don't know the scope of possibilities in E-Max, I've included just a few examples of what E-Max can do or more importantly still what E-Max can enable people to do.
And I think that's a very interesting point in that it's not really a case of exploring what E-Max can do.
It's a case of defining what you want to do with a computer and then finding out whether E-Max can help you with it.
And Mickey lists some of those things that people can do with E-Max.
The first one equates is a speech interface for blind users or visually impaired users.
And that's capability that's been around for 25 years. And E-Max will read to you and it will use kind of subtle inflections of speech to denote different font weights or context for instance, emails, web pages, text documents and so on.
So it's always had that commitment to users with different needs, which I think is pretty good.
He also then talks about the ability to work on remote systems inside the E-Max interface.
So for instance, you can shell into devices, for example, that have got no text editing capabilities at all, not even the mighty nano.
And use every function, redgex, grep or satellite command that you use on your computer locally and that affects or is working with the remote computer.
And obviously it's using the same keyboard shortcuts and the same commands and the same macros and so on and so forth.
There is also, as he points out, the mighty org mode, which is if you like, I think most people listen to this podcast will be aware of markdown.
Well, if you imagine markdown, that's a lot better. That's org mode. It takes notes obviously and formats them, which is what markdown does and creates links.
But as well as that, you can make calendar items to do lists, agendas and it's also a literate programming environment.
So org mode is a whole subject unto itself, which I'll be skipping over in this podcast.
Emax is also a music player and a file manager and a brilliant Git client. And it's an IDE that auto completes links, compiles, refactors from dozens, maybe hundreds of programming languages.
Now, none of those functions, apart from org mode, probably are unique. I mean, there are dozens of ideas and file managers and hundreds of Git interfaces and maybe thousands of music players.
But the big difference, as I said earlier, is that all the Emax tools and functions, the variables that govern the environment, the keyboard shortcuts, they're the same everywhere.
So you learn how to use maybe using it as a text editor or a code editor and all the things that you've learned now apply everywhere in your music player, in your Git client, in your IDE and so on and so forth.
So for instance, for a long time, I used Ranger as a file manager, which of course, unless you configure it very carefully, uses different keyboard shortcuts from anywhere else.
But inside Emax, there's Dear Ed, which is an inbuilt file manager and it works in exactly the same way as the text editor. So there's no relearning in order to use a file manager, which is particularly important, obviously, if you're keyboard centric.
Okay, so back to the book, because this podcast is in danger of becoming a kind of love story to Emax and I do want to keep it on the book.
So Mickey takes new users through the basic concepts of Emax and some of the terminology, some of which is rooted in history, rather than being deliberately difficult.
So for instance, you know, cut and paste is killing yank and things like that and he explains why fairly briefly and then he shows you just a few of the common ways that function to used and he shows functions that many users will appreciate regardless of their particular use case.
There's a lovely, it's not unique, but there's a lovely pair of commands that switch to items, letters or words, for instance.
Now, what's quite refreshing about the book is that Peterson isn't afraid to say that a built-in function is not that great and you do well to download and use this other function. So instead of Dear Ed, the file manager, for instance, there's Dear Ed plus and there are probably dozens of others.
He says, well Dear Ed is fine and this is how you use it, but why not use this one because it's better and unlike a lot of technical documentation that you get that there are several occasions where the author, Mickey will say that when you use this application, there are dozens of commands that you can use, but there's probably only a couple that you'll need and here they are.
But if readers want to find out more, he's already explained where you would find out more in Emax's help systems and where you can delve deep into the undocumented that the package ships with.
So what comes off the pages to me in conclusion is the author's enthusiasm for his subject. I mean, he really wants you to love Emax as much as he does and that actually is a real gift for an author of this type of book.
You know, technical documentation can be rather dry, can't it? Let's be honest, but he's also got that other skill which he's a good teacher again with documentation, especially when I'm reading stuff on the web and I'm a bit of a thick.
I can get lost very quickly in technical documentation as in not lost and time passes, but lost in I don't know what's going on.
But he's a good teacher and there are no sort of side tracks into semantics or descriptions of every single data type that can be passed that kind of would break the learning experience, not a word I like, but it would break that learning experience that the readers having.
And there are, you know, there are more technical side bars in typical documentation manner, they are separated out there in indented paragraphs.
So more experienced users can learn and relative noobs like me can skip them at least on that first reading.
So I'm going to leave it there. I hope that I bought the VIM users too much.
Do give Emax a go and certainly if you do want to give it a go even for an absolute beginner mastering Emax, Mickey Peterson, $49 quite a lot for a book.
Yeah, worth the money and you know, he's taking the time to put this book together. It's really good. Why not bring him $50?
Many thanks for listening. I've been Anna Stella with Lazy Sound Quality for Hacker Public Radio. Bye for now.
You have been listening to Hacker Public Radio at Hacker Public Radio does work. Today's show was contributed by a HBR listener like yourself.
If you ever thought of recording a podcast, you click on our contribute link to find out how easy it leads.
Hosting for HBR has been kindly provided by an honesthost.com, the internet archive and our sings.net.
On the Sadois status, today's show is released under Creative Commons, Attribution, 4.0 International License.
