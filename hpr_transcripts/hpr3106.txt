Episode: 3106
Title: HPR3106: Linux Inlaws S01E09 Postgres
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3106/hpr3106.mp3
Transcribed: 2025-10-24 16:56:16

---

This is Hacker Public Radio Episode 3106 for Monday, 29 June 2020. Today's show is entitled,
Linux in Laws Season 1 Episode 9 Postgres,
and is part of the series, Linux in Laws. It is hosted by Monochromec,
and is about 64 minutes long,
and carries an explicit flag. The summary is
the Lads talk to Bruce Momji and Postgres Evangelist.
This episode of HPR is brought to you by An Honesthost.com,
get 15% discount on all shared hosting with the offer code
HPR15, that's HPR15.
Better web hosting that's Honest and Fair at An Honesthost.com.
This is Linux in Laws, a podcast on topics around free and open source software,
any associated contraband, communism, the revolution in general,
and whatever else, fans is critical. Please note that this and other episodes
may contain strong language, offensive humor, and other certainly not politically correct language.
You have been warned. Our parents insisted on this disclaimer.
Happy Mom? That's the content is not suitable for consumption in the workplace,
especially when played back on a speaker in an open-plan office or similar environments.
Any miners under the age of 35, or any pets including fluffy little killer bunnies,
you trusted guide dog unless on speed, and Q2T Rexes are other associated dinosaurs.
This is Linux in Laws, season 1, episode 9, Postgres.
As long-time listeners will know, Linux in Laws is marked as explicit on most portals
which rip off hacker public radio, as episodes may contain graphic and strong language,
and may depict subjects including violence, drug abuse, nudity, such as the ultimate rule of free and open source software,
addictive operating systems, and negative databases.
This episode is no exception. As a matter of fact,
the listener's discretion is absolutely advised as you may encounter shocking facts.
About database in general, both SQL and NoSQL, Postgres in particular,
an ancient history going back to 1986. Never mind bitching about my sequel.
Faint hearted listeners are advised to skip this episode. You have been warned.
Due to technical challenges during the interview from an audio perspective,
the sound quality of the recording may not be up to the highest standards
you can expect from Linux in Laws. We would like to apologize for the circumstance
and shift the blame squarely to Verizon, and its rotten choice of crappy router hardware
not playing nice with free and open source software like big blue button.
Good morning Martin, how are things?
Good morning Chris, well how are you?
Can't complain.
Yeah another day, another episode, but before we get to the most important
interview guest, let's do some news.
Something I came across recently, apparently Mint has decided to do
with snaps in terms of if you want to install Chrome,
it tells you that, sorry, you can't do this because this is only available
as snap from Ubuntu, which is the underlying distro.
So if you want to install it, you have to do this manually, I'm afraid.
What do you make of this?
It doesn't sound very user friendly for a operating system that seems to be
more user friendly than Ubuntu.
Maybe we should get an extra storm in on the case. What do you think?
It might be worth doing. Do you actually know anybody who uses Mint personally?
Yes I do. You're talking one of them.
Okay.
You see I have a zoo of virtual machines that I just used to show
various people how great Linux is and one of them of course runs Mint.
Of course.
Because the beauty of Mint is actually the installation is a breeze
because essentially you put an ISO on a stick, you put the stick into
the router, you boot this up, and then Mint does pretty much all the rest,
including automatic partitioning and the whole Chibin.
So it also comes with quite a few non-free packages in terms of, for example,
multimedia codecs, which are, which normally are not bundled with the distro
because you have to install this separately because of, for example,
different licensing.
Yeah, when you say non-free, do we mean non-free in open source?
Sometimes dualized and sometimes even closed source.
It really depends on the implementation.
So Mint is somewhat of a hybrid, but it's not a pure open source system.
But maybe the community may be thinking differently about this.
Okay. Do you know what the uptake is of Mint?
I do not know. There's a watch I call distro watch, right?
Yes.
Let's see.
But the crack is.
If I can find this.
It's just typically, yeah, I don't know if people go to you,
but I'm sorry, I'll go to Alienics.
I haven't personally heard anybody's saying, oh, I'm going to run Mint now.
It's on position number three, at least according to distrowatch.com.
First position, first two positions are MX Linux.
Have I heard about this?
And of course, and interestingly enough,
Manjaro, which is an archspin.
Well, this is, okay.
What is this page it ranking?
Okay.
And, yes.
And position number four is Ubuntu and then Debian.
Yeah.
It's amazing.
Perhaps not not the right metric, is it?
It's amazing.
Well, this is distrowatch, right?
And make budget.
Well, make of it what you want.
Average number of hits per day.
That's kind of, yeah.
It's better, yes.
But, whatever that means.
Well, it means that you can have as many bots running as you want to to increase this number.
That's probably a high MX Linux, which I've never heard about.
Got you right.
Number one.
Interesting.
Yeah.
I think this is also a practice that's another.
Yeah.
It's software manufacturers use.
But...
Yeah.
But I mean...
Yeah.
But I mean, Manjaro is pretty cool.
Have you ever used it?
No, no, no.
I am not a personal zookeeper like you.
Fair enough.
Fair enough.
I don't know if you depend the pets that are of use to me.
No, Manjaro.
It's quite interesting because it's essentially arch art aims to be...
At people that like arch but without the pain.
So it comes with a graphical install or comes with a pre...
I think even with a pre-installed desktop.
Something that a pure arch user would have to do or manually
or use a Master Package or something like this,
based on their preferences.
I mean, if you install arch, there's a net install
and it gives you just a bad bone user land.
That doesn't even have a compiler.
It's just enough to boot up the system and then the real fun starts.
In terms of configuring the net wire, configuring the desktop
and all the rest of it.
And Manjaro takes the other approach in terms of...
I'm always trying to say it's similar to what Mint is for Ubuntu
is Manjaro for Arch.
But I wouldn't go that far.
Because as far as I know, Manjaro doesn't for example include
kind of multimedia codex right away.
But then I've never...
I think I only install it once just for a couple of hours just to play with it.
But then of course, being the arch-periods that I am,
I said, no, this is not for me.
But quite a few people use it and the project is quite active.
Talk to a number of the community...
Talk to a number of the members of the community at various open source events
when they were still around as in physical ones,
not as spiritual nonsense crap.
You can still talk to them even on the virtual level.
Yes, but what's the point?
Okay.
Yes, but...
Yes, but...
I mean, the social aspect is totally missing there.
You mean there?
No, the social aspect as in the body language,
the facial stuff and all the rest of it that makes...
human interaction so very important.
I mean...
Just for our listeners, Chris is quite an animated speaker.
Thank you.
Thank you.
Thank you for making sure you stand well back.
Go outside.
I see.
Anything else that our listeners should know about me Martin?
Why do you edit?
All will be ruined.
I see.
Okay.
Enough writing about Mint and...
Well, actually, and of course the implication is that
this restricts a certain level of freedom when it comes on software.
Yeah.
Needless to say, links will be in the show notes,
so feel free to check this out yourself
and make up your own mind, essentially.
Needless to say, if you have opinions about this,
there's this magical email address called Feedback at linuxinloss.eu.
Yeah, and like what if you are a Mint user,
at least you also do get in touch, surely.
Indeed, indeed, indeed, someone in the world.
Exactly.
And if you want to do a full episode of Mangaro
or Mint for that matter,
we do welcome guests.
Excellent.
So is there anything else we should talk about
before we should get on our guest speaking of which?
Yeah, now I'm just going to mention a piece of news that I...
that struck me this week, which is ties into our open source technology as well.
And also, sadly, related to our guests in terms of...
it's been a long-standing open source project member,
coordinator, contributor, but...
Yeah, so open source can be used quite badly as well.
It doesn't give you any guarantees to make a secure system, as we know.
And there was yet another breach in the UK,
this time on the health system,
which is happily sharing recordings of private consultations
with amongst their users,
so being able to see other people's video recordings of their health consultations
with their doctors.
And the fact is...
I don't just come to you a little bit from work-related activities
and they call Babylon Health,
so I'll do look them up.
Okay.
And don't sign up to their service unless you want your...
your doctor's appointments remotely shared through other users.
And that company was breached or...
No, it's basically, it sounds like a...
more of a...
A classroom.
A classroom.
Yes, that is the technical term.
It's a user term now, yes.
Interesting name that reminds me a little bit of something called Babylon 5,
which I think was a TV series.
A way back.
Yes, several minutes.
But they...
Apparently, they didn't encounter breaches,
at least on the episodes that I watched,
which weren't many, to be honest.
So how...
We could...
Yeah, we could rant about...
DevOps and...
all the agile development that happens these days...
Yeah, but...
...at certain cost.
But we won't, so that's okay.
Just a bit of custody.
How was this leak published?
It's on the BBC.
The British Broadcasting Corporation.
Okay, so it must be true.
Well...
It took...
It took...
Martinis took a second too long.
Sorry.
For those of you who don't know the BBC,
the BBC is a monopoly, I think.
It's called, in Great Britain,
basically, covering news in other items,
certain...
That's what I'm looking for.
Governments have used it as their disposal
to, with varying levels of success, I might add.
I know.
Well, the state fund...
Yes, it's state...
Exactly.
It's state-funded.
Some people like this.
Some people do not.
For example, there's a...
certain Mr. Johnson, apparently at the moment,
who is somewhat opposed to the idea of
continuing the BBC service as such.
Nevermind, given the fact that the BBC
is a bit of a tradition in the UK.
No, but...
I mean, you can say the same about the NHS
and the National Real and all these kind of things
right about you.
Where'd you go with privatisation or not
with all these companies, sir?
There is something to be said for,
but state funding of certain...
Functions, but then it also, as you can see,
become a monopoly, right?
In that respect and...
So, do you think that, actually,
Magistrate had aversion from communism
because that was prevailing government forum
and government-government type, right?
Before Maggie took that wrong turn,
was it in the right direction or not
for the country in general?
It, yeah, the idea is great,
but in practice, it was very...
It wasn't a very bad idea, right?
It's a bit of a problem.
Privatisation, okay.
Yes, yes.
I see.
But I mean...
The idea is, obviously, you know,
if you have privatisation, then you have competition,
and you get the best service,
you get a bubble of wine, the best price,
but, you know, with the real service
that doesn't work that well.
Funnily enough, if you're bringing up the rain service, yes.
Yeah, I can't...
By the way, I can recall
standing in front of science
about a year ago in Great Britain,
promising me to get...
that I get my money back
if the train is 15 minutes late.
So now, isn't it?
I thought I was 15 minutes.
No, no, no, no, no.
So now...
Okay.
Minutes, you get all your money back.
More information.
I'm not running at all.
Yeah, but then I can...
I can also recall being stuck in some...
in some train station in the middle of nowhere,
and that was quite late,
and all the trains that were supposed to go
for the remainder of the day,
which was, I think, an hour or something,
showed cancelled.
That wasn't impressive,
because I had to make my way back
using alternative means of transport,
which turned out to be quite expensive.
But that's another story, probably.
Okay.
Okay.
So, let's bring on our guest.
It's this time.
It's you want to introduce them?
Yeah.
So...
Them?
Him.
Sorry.
Oh, sorry.
So let's say here's the someone...
Mr...
No.
Him.
Do you want to introduce him?
Yes.
So this week's guest is
a Steam's Postgres project coordinator,
Bruce Momjan,
doing this for the PostgresQL database for...
Oh, over 25 years, I think.
I work with Bruce a fair bit.
He's a great speaker.
Very passionate about open-source.
Excellent.
Tonight, we have a special guest
by the name of Bruce Mombien,
community coordinator.
Of course, I get this wrong.
But Bruce, why don't you introduce yourself?
Yeah.
So, I'm Bruce Momjan.
I live in Philadelphia.
I've been working with Postgres for 24 years.
I've been working open-source probably five or six years
more than that.
I enjoy what I do.
I work for Enterprise DB.
I used to travel a lot, but not so much now.
But I do a lot of conferences.
Now I'm doing conferences online.
I'm one of the Postgres core team members
responsible for sort of, you know,
just managing the project and the team
and encouraging new developers.
It's a lot of fun.
So funny.
That's great.
Sorry.
Hang on to that.
If that's OK.
Yeah.
Go ahead, Mark.
I'm sorry.
Yeah.
I was just going to ask,
am I in with your long and standing open-source experience?
Is there one tip you would like to give
any budding open-source developers out?
Well, you know,
one of the one of the fundamental things
that I remember telling people,
and you know,
it haven't said it in so long,
because it actually must have sunk in.
But as open-source developers,
we are not creating software to create software.
OK.
We are creating software for people to use.
And what I had a problem with in the early years,
were people in the Postgres project
were so focused on solving problems
and on creating elegant solutions.
They didn't have a vision
where a focus on the user experience
and the user benefit
that was part of what they were doing.
So I would basically say,
you know,
we could just sit around and write software ourselves
for ourselves forever.
Right?
But this project is much more than that.
This project is about providing a service
and a utility to the IT professionals around the world
that gives them new capabilities
and new vision and new open-source
capabilities that did not exist before.
So that was probably my biggest thing
was getting out of the sort of
we're writing it for hobbyists,
we're writing it for ourselves.
And that's OK.
But we have to also realize
that we always have to have a connection to our community.
We always have to understand what are we doing
that's what if we're working on project on feature X,
how is that going to benefit our community?
Right?
Because a lot of times as engineers
are going to focus on our own needs
and our own,
let's solve this problem,
let's fix this problem,
let's figure out how to make this work.
I guess that's a big part of your role,
right?
As a coordinator for this project.
It's a brilliant voice.
Yeah, sorry.
Before we go in further,
maybe there are still about five to ten people
on this planet who do not know
what Postgres is.
Maybe you could,
for the benefit of these few people,
just starting to give an overview
of what this project is all about.
Yeah, in fact,
there's a lot more to it than you would guess.
So Postgres started in 1986
in University of California,
Berkeley by Michael Stonebreakers,
being the next generation of relational system.
That's why it's post-gress
or post-ingress at that point.
And for the first ten years,
it was really a research project,
funded by the US Department of Defense.
Similar to the way UNIX was supported
by the Department of Defense.
In 1996,
Postgres had really left the university.
It had been no longer being developed,
you know, full-time.
And I and a group of other people
sort of took over the code
from the few people at Berkeley
were still working on it
and brought it to Internet development.
We've been doing that for the past 24 years.
The early years were obviously
a lot of bug fixing,
adding enterprise features and so forth.
But what you have now
is a real world-class database
that probably does more than Oracle does
from a developer's perspective.
Probably does a little less than Oracle does
from an administrative perspective.
But it's really a first-class alternative
to the proprietary database
as just as Linux took over
the HPUXs and Solarisys
and AIXs of the world ten years ago.
And, you know,
they're proprietary companies,
some of them, like Fujitsu,
or Entity.
And, you know,
we're like, that's okay
because we're not dependent
on you if you go away,
like somebody else.
They contribute to the open-source code as well.
Oh, yeah, they contribute a lot.
And you kind of,
it's the same thing,
like you use the proprietary stuff
to forge your agenda.
But when things turn badly,
you have to have a clear exit strategy.
And that's why we host our own website.
We host our own email infrastructure.
We don't really rely on anything external
because we're scared of that.
But that's infrastructure.
It's hard to change.
Something like a podcast.
And, you know,
if you switch from Zoom to Google
to Zoom, you know,
Skype,
it's not really going to affect,
as long as your hosting platform is stable, right?
So that's another problem.
So you can move around
between different ones
as long as they're all there.
I think we definitely need an alternative.
That's for sure.
But, I mean,
from the project side,
this is, you know,
it's unlikely that purpose
is ever going to be,
you know,
taking over,
like one of those other open-source
projects,
I'm not sure if that anyone
can come to you, right?
This is the way it's been organized.
Yeah, we've always been really paranoid about that.
I think because,
you know,
my sequel situation was just so terrible.
I mean, you knew
they were just writing
that open-source distribution channel
with no open-source community
with very little open-source development.
You know,
and you knew they were just kind of writing that.
Similar, I guess,
to the way BitLocker did.
They wrote open-source
until the, you know,
until the big payday.
And you see that over and over again,
in so many open-source projects,
that when we, you know,
when we sort of set posters up,
we're like,
okay,
people are really in this,
for the technology.
They're not really in it,
for the paycheck.
There isn't any real,
one single commercial entity that controls it.
The core team can't be,
have more than a majority,
you know, can't have a majority
of people from anyone company.
And, you know,
I could reel off 10 different companies
in all GOs that support Postgres.
I remember one case,
the early company,
Great Bridge Hoops.
You know, we've always been aware
that there are certain companies
like my sequel,
who were really using open-source
as a vehicle to distribute their software.
Okay?
So it's kind of like,
you know,
sort of me putting on a jacket
that says them on it
in a certain team
and just running out on the field.
I'm not a football player,
but I look like one maybe, right?
So, you know,
there have been a lot of companies
that did that bit locker being one of them,
you know, my sequel.
And there's a ton of them active now,
Mongo, another big one,
who's really out there
to say, hey, we're open-source
and there's, you know,
there's no locking
or whatever that means.
And, you know, you should use us.
But, you know,
underlying that,
all of the product decisions,
all the development,
all the licensing,
is really run by a single company,
and Postgres has known
that that's been around for a long time.
And it's sort of structure
herself in a way that,
the companies know that they need us,
we don't need them.
If the companies go away,
Postgres will be fine.
If Postgres goes away,
those companies are dead, right?
I mean,
and that's all the companies
really understand that dependence
and anyone doesn't understand it,
they kind of don't last very long.
So, you know,
it's nice.
They can take the software
if they want and just go
and do whatever they want to do with it.
Green Plum did that for many years now.
They're trying to come back in the community.
You know,
there's another one,
you know,
you've got Aurora now,
which is a Fork of Postgres,
which, you know,
and Enterprise, you be as a Fork.
So, there's a lot of companies
kind of, you know,
you're not telling me
that Amazon have come back
to share this code with you then.
No, well Amazon,
Amazon did,
they did that,
what was that called,
they had a database based on Postgres 8,
or 8-1,
I can't remember the name,
most part of my head,
but anyway,
and that one sort of is still around,
and then they took Postgres,
they put in RDS,
which,
they did modify Postgres very much,
and then they have
an Aurora product
that also uses the Postgres code.
So, if some company wants to just go
and run with the code,
they're able to do that.
If some company wants to work
with the community
and do sort of code development,
which is the majority of companies,
obviously,
were there to do that,
but the way the core team
structured, the way the community
structured,
they're not the focus,
they don't control the sales channel,
they don't control the product,
the features,
you know,
that gets into the code,
that's all really determined
by this whole group of community people.
Yeah, great.
I mean, you've been
being done this Postgres
for such a long time, right?
And I don't think we touched on the,
how you got involved
with the projects to start with,
but is it something
that you think you'll be doing
for a while longer,
or have you looked at any other,
are there any other open source
projects out there that interest you,
or are of the same maturity,
do you think?
Yeah, you know, I'm in a,
I'm in a really,
I'm really,
it's almost a blessed sort of choice
years ago,
but I've always been interested
in SQL databases,
really from,
I guess, 1989,
when I started using them,
I always found it interesting,
and I tried writing my own
SQL database a couple times
before Postgres.
But I realized,
as I started coding it,
that the project was just way
way too complicated for me.
But the cool thing about
the database for me is,
I don't know,
I just like,
I just find it interesting,
I'm not sure there's another
place I would go.
You know,
fortunately,
there are a whole bunch of cases,
you know,
24 years, there's a whole bunch
of places I could have gotten
off, right?
Yeah.
You know,
this is not going where I wanted
to go,
or I find this other thing
I'm interested in.
Before to that,
you know,
I stuck with it just
because I kind of still find it
interesting.
We've always tried to have a
community that,
that is a place you want to be,
not a hostile place,
but a place that is,
is sort of affirming
and welcoming and a friendly place.
So I think that's a lot
of our value is,
you know,
if I look at a conference
from 2006,
which was our first conference
in Toronto,
you know,
80,
90 percent of those people
are still with us,
you know,
it's 13 years,
they're still with us.
Because I think
Postgres does provide
a platform
and an environment
that's pretty rare
in development
in general,
where you have,
these really complicated problems,
you have good funding,
you have good need
for the software
within a lot of industries
and at the same time,
it's a place to belong,
it's a place to provide value
to the world,
it's a place to solve interesting problems,
deal with interesting challenges,
grow as a developer,
and I think all those kind of
combined together
to make it kind of a great place
to be,
and I think that's how
we've been able to
retain so many people,
and because the software is so complicated,
we really need to retain them,
because it takes a couple years
before you're even really
up to the point
where you can add a major feature
to the database.
And technically,
it's a back here,
Bruce,
when I did a little bit of research
about Postgres,
but by the way,
runs on the majority
of my,
at least arm cores
doing various things,
I noticed that you were
heading for your own license
called Postgres license.
Maybe you can share
a little bit about
the decision behind this
and why you didn't go
for a more common license
in terms of MIT,
BSD,
three clause,
maybe even new,
and maybe you can also
elaborate on the context
of this in an open source
initiative perspective.
Sure, so we,
you know,
we were BSD,
when we started the project
in 96,
we thought we were BSD
licensed, right?
We came from Berkeley,
it looked like
the BSD license.
It's in terms of its content, right?
And what it covered.
So for years,
decades,
we would just say
we're BSD license,
a website would say that,
anyone who would ask us
we would say it,
and that meant
a whole bunch of things,
such as
you can create proprietary products
with it.
There's no, you know,
there's no sort of
copy left requirement.
You can, you know,
you can do whatever you want
with it will always be available.
What became clear about 10 years ago,
was that we are not BSD license,
although the content
is virtually the same as
the BSD Unix license,
which, of course,
came out of the same university,
the same funding structure.
The wording is slightly different.
And we don't feel
we have the right to change that,
because the license had been
done back in 86.
We don't,
one of the reasons
Postgres is so unusual is that
we, everyone who's active now,
really didn't get
involved till 96 or later.
So we sort of were given
this complete database in a way.
So nobody really wrote it
from scratch,
at least it's currently active.
So we don't,
we're kind of looking back
at the 10 years before we started,
and we're saying,
well, that's what they did.
We don't, we can't change that.
So what we ended up doing was
basically going to the,
you know,
open source,
oh, it's I,
and getting our license approved
as valid.
Now,
did we have to do it?
I don't know.
I mean, it looked like a
BSD license,
but lawyers basically said,
yeah, you kind of have to do it
because there's this one or two words
that are slightly different.
So we, effectively,
we are a BSD license.
We're a BSD license.
But there is this wording difference
that requires us to have a simple license.
I guess we could have made a whole big thing
and said,
we're just going to change the wording on a license,
but we still would have had to carry the old wording.
And it's kind of weird.
And you never considered,
kind of, to really enforce the open source,
very to go for a more,
what's what I'm looking for,
confide license,
like the GPL or something?
No.
There's a couple of reasons for that,
but what the GPL has really,
to us, the GPL is a pessimistic license.
It assumes that the software will be overtaken
by some other entity, right?
And that that other entity
will effectively close off the code
and do all the development
and then sort of starve the open source project.
Now, I'm sure there are open source projects
that that has happened to.
But from the Postgres case,
we look at it as we sort of,
I would say, approach the project
or the licensing in a confident way,
saying if you want to take the code
and create a fork of Postgres,
which dozens of companies have done,
go ahead.
You're not harming us.
Our community is strong enough to take that.
And we don't feel that that's really working against us.
There's a lot of companies
that have created proprietary versions of Postgres,
including my own employer enterprise DB,
but they still support open source Postgres
and a good portion of their business
is open source Postgres, right?
I think if we had had a BSD GPL style license,
they would have been too scared off
to get involved with Postgres.
So in a way, it's sort of like
if you're dating somebody
and you say, listen, before we get out,
go out, you got to do ABC.
The person's not going to go out with you, right?
Because you're giving them all these preconditions.
With Postgres, we kind of come and say,
here's the license, do whatever you want.
If you want to work at the community great,
if you don't want to, that's fine.
Green plums, a great example, took the code
about the closed version for a long period of time,
and then probably five years ago,
came back and said, you know,
Postgres has moved so forward
that our code, based on an overversion Postgres,
is really not as viable.
We want to get our code up to the version of Postgres
that's currently being shipped,
and we want to effectively start,
we want to open source our project.
So that's a great example where a single company
really couldn't keep up with Postgres
and decided, you know,
we're better off working with the community
and trying to fork and run.
And enterprise B does the same thing.
They work with the community.
They don't fork and run, you know, the way from it.
So Mr. Swarman, if you're listening,
that's another deviation from the true spirit of communism.
Some people may consider this to be a hampering innovation,
but then I can see both sides of the coin.
Martin, over to you.
I mean, obviously we have to mention
the rise of NoSQL,
and you already mentioned Monday to be earlier,
but having grown up with SQL,
then it is myself, I can see, you know, both sides of the coin.
But is there any,
I mean, is Postgres looking to do more in that area?
I mean, there are obviously some extra cases
that you already can, you know,
you can do JSON and things like that.
And are we still thinking as a project
being that all encompassing database
and not, you know,
where those niche,
or any specialized NoSQL databases
are very much a one-sided show.
So how do you see that going forward for Postgres?
I mean, obviously there is a lot of uptake
of the likes of the MongoDBs,
et cetera, of these worlds, right?
Yeah.
So again, it's a question of how you look at,
you know, your competitive landscape, right?
Do you see them as opportunities or threats, right?
Are they showing new workloads that, you know,
you can subsume,
or are they something that, you know,
you have to sort of fight against?
One of the interesting things about the way
the reason Postgres was developed in 1986 was
because even at that time,
as you were talking a lot how many years ago,
30 some years ago,
we're talking about a case where,
even then, it was clear that the relational model,
as good as it was,
was not able to handle every workload, right?
Couldn't handle things like GIS,
or geometry points.
Couldn't handle, obviously,
things like full text searches we've had.
GIS and JSON and a whole bunch of other stuff.
I even have a talk on my website that talks about
non-relational Postgres.
But the point is that we're continuing
because Postgres was designed as extendable back in 1986,
it makes it very easy for us to effectively improve Postgres
in a way that doesn't have to sort of rip out the relational part.
You're able to sort of move in new index types,
new data types, new languages,
and so forth without having to sort of throw away
the relational parts of the system.
At the time when I started in 1986,
that whole extendable object relational part
was a huge headache for us.
It seemed like a waste of time
made the system much more complicated.
But now, in 2000, when we're looking at the system,
that extendability has allowed us to effectively
subsume so many workloads.
In a lot of cases, we do the NoSQL workloads
better than the NoSQL systems do.
Even with the transaction handling,
even with the durability and so forth.
So it's kind of amazing that you're taking a system
wasn't designed for a lot of the things it does today,
but was designed as more of a data platform.
And I think as people, as we start to digitize things,
we never digitize before.
Your phone has so much need for data storage.
There's so much analytics going on Internet,
things analytics, data analytics that people never did before.
What's great is that Postgres is able to sort of
morph itself, not break itself,
but morph itself into these new workloads.
In a really seamless way,
that you would think was impossible for a relational system
that was written so many years ago.
But that's the cool thing,
and I think that's just going to continue.
If you're just the database that handles workloads
from the 1990s,
you're not going to be,
yeah, that's just not the place to be.
You've seen the rise of the various different models
at time series and graph over the time.
Are people actively working on all extensions
for that in Postgres as well?
Yeah, we do have in Postgres 11 and 12,
we added something called a storage manager.
So as you know, we have key value store.
We have JSON full-picked search,
stuff like that document store.
But there are now people working on different storage systems
for columnar,
which is something you can't do as efficiently in Postgres
as you can in a natural columnar database.
I know somebody's probably working on a graph database option.
I know there are people who are working on AI machine learning stuff.
There's a whole bunch of work going on.
It's actually been completed a couple of years ago.
Two of our Postgres that operate as a full data warehouse.
So you don't have to dump your relational data out into another system.
So some of that work from green from going back into Postgres.
Actually, I don't think we've had anything.
I can't even remember a patch from Green Plum.
It's mostly around bringing indexing.
Yeah, bringing indexing window functions came out of Japan.
Bringing index came out of second quadrant of Chile.
We had a cube and roll-up that came out of England.
Commentable expressions that also came out of Japan.
So it's just a lot of what's really amazing about Postgres is
because we have distributed team.
We're able to work in like five or six directions at the same time.
When you look at a Postgres release that we major release every year.
These releases have like improvements in usability,
improvements in scaling, improvements in performance data warehousing,
application stuff, tooling improvements, backup improvements.
So administrative, so that's the great stuff,
is you have different groups working on a whole bunch of different security,
working on different stuff independently,
and they all kind of come together to apply their patches to a common code base.
So instead of having to manage these teams and sort of get them all to march in one direction,
they all march in whatever direction they want,
they have to do it in a way that community approves,
but it does allow you to kind of do five things at once.
It's almost impossible for companies to do that.
But open source seems to be able to do it pretty well.
Which is the very nature of open source brews I reckon.
Going back to the no sequel discussion,
I can recall a project called ToroDB,
which actually bridge that gap in the document database space.
Given the fact that this project at least with regards to the GitHub commit seems to be pretty dormant,
do you know what the true story behind this is?
Oh sure, yeah, I know Avro Hernandez for many years.
You too.
Yeah, he's Adam Madrid.
In fact, he's been to the house a couple of times,
and he had a great conference in Abiza last year,
so really great guy.
He's more of a Java person,
and obviously had seen a need to create this Java layer on top of Postgres
that allowed Postgres to speak the Mongo protocol,
and then sort of split apart the Mongo document into pieces
which were then stored in Postgres.
But you know the problem you have with any kind of fork of Postgres,
sort of offshoot that isn't sort of in the main tray,
is you've really got to have a lot of momentum behind it,
because Postgres is moving so quickly,
and sort of closing up a bunch of problems,
or it's expanding so quickly,
you have to like have this sort of really amazing solution
to kind of distinguish yourself in that market.
I'm guessing that it worked really well.
I mean, I know him, I'm sure it was really well engineered.
But here's the thing, people,
and I'm even giving a talk about this in a couple of weeks,
but one of the crazy things that's happened over the years
is when Postgres started, you know,
it was nothing, right?
It was like what's Postgres, right?
And I'm just going to, if it's something I don't,
did I don't care about, or I have no money,
okay, maybe I'll use it, but if I,
if it's data I care about, or I have money, I'm not going to use it, right?
What you have in 2000 now,
are people say, you know,
I now have more confidence in Postgres than I do in Oracle or Microsoft.
In terms of longevity, in terms of ability to solve the problem,
in terms of fitness for purpose, right?
And that's a different environment.
Quality of code as well, right?
Quality of code, reliability of course.
So the issue now is you have,
and you're sort of like, okay,
now people are saying,
you know, instead of Postgres being below
the typical proprietary relational database,
it'll always above it, right?
So for somebody else to come in with another project,
even Green Plum, which is packed by Pivotal,
it's a huge thing, but at the same time,
people are like, yeah, I like Green Plum,
but this Postgres thing is more than a data warehouse, right?
And maybe I'd like that better,
people don't want a whole bunch of different databases
in their data center.
And I don't blame them because you've got to,
you've got to manage it, you've got to back it up,
you've got to make sure it's reliable,
a whole bunch of administrative problems that are
challenges to ask you have when you bring in a new database.
So I think the problem with TorridDB was not that it wasn't good,
but it had to solve a big enough problem to get in the door
against a community Postgres that already had
a very high reputation, right?
And that's the problem.
How do you do that?
Sometimes you can do it with an extension,
so you can create an extension to Postgres.
That's what Citus did,
which was purchased by Microsoft two years ago or so.
So Citus was an extension of the data warehousing,
and it was a little easier, I think, for them to get adoption
because you were still using Postgres,
you were using Postgres plus this extension.
I think with TorridDB,
maybe it was like a layer on top,
so you had a layer on top of Postgres,
but it's just very hard.
Postgres is now so big that it's really hard to get visibility
in that market.
I mean, let's look at, for example,
how many other relational open source databases are there today?
Like, there's Maria and Ma,
and there's Maria and MySQL, which are kind of it.
There used to be Firebird,
there used to be Interbase,
which was being Firebird.
There used to be a whole bunch of other ones,
but what's happened over the years
is Postgres has become so big that anybody who's doing
open source relational database development
pretty much is Postgres,
like that's pretty much it.
So, as you get bigger and bigger,
the problem is you cast a bigger shadow,
and it's harder for other projects to get mind share
and to get interest from customers.
And I think that's the biggest problem
because people just don't want
another database, another solution,
unless it solves a really critical problem,
and I guess maybe not enough people had the problem itself.
I'm not a Java guy,
I don't know Mongo very well,
so I'm not the guy who to guess that,
but I know that that is the typical challenge that anyone has,
when you're looking at Postgres,
that it's so big and so well known,
and has such a reputation.
Anything added to that is going to have a challenge.
Yeah, no, that doesn't make sense.
I mean, I know, you know,
obviously, I'm a great fan of Postgres,
and it's moving fast.
It's just wondering.
No, it's probably, you know,
it's as coming from...
Legacy rights.
Coming from a proprietary Oracle background,
and the first time being introduced,
it's supposed to be like,
wow, this stuff can do everything,
and it does it really well.
Okay, anyway.
But I think one thing that kind of,
what I've seen, maybe,
put a leg in behind a bit,
is the shorting story?
Has that been developed a little bit more?
Oh, that is so true.
I mean, that's one of those...
As I said before,
that's one of those where I'm going to get up,
and just like,
listen, we're not doing what we should do.
So the shorting story is really interesting.
It's the kind of,
so the narrative behind the shorting story,
and this is a weird example,
is that when somebody is choosing a database,
they want to know that it will scale
to multiple machines.
That's just like a checkbox now, right?
So even if you're a small company,
you're going to be the next Google, right?
Or the next Zoom, or the next whatever, right?
Oh, I don't care what database I choose.
I've got to choose something that can scale
to multiple servers.
And even though, you know,
a lot of large, large, large companies
are running Postgres without that shorting,
and running it very well for global workloads,
you know, credit card companies running Postgres, right?
You can imagine how much transactions they do.
On single machines.
Big machines, but single machines.
What happens is that you,
it's sort of this checkbox that's required.
The problem though,
is that once people realize what Postgres can do
on a single machine,
they realize that running it on multiple machines
is kind of like a headache.
Like, if I can run it on a single machine,
why would I want to short my data,
make it more harder to manage,
make it hard to back up?
Like, I don't need to do that.
Databases naturally want to do vertical scaling.
Horizontal scaling can work.
No SQL, you know, probably, you know,
really staked out its whole reason for being
on the horizontal scaling base.
But when you look at what most people use no SQL for,
even though that's really what it was done,
most people are running it on a single server, right?
They want the option of running on multiple servers,
but a lot of times,
if they're running two or three servers,
it's just for redundancy.
It's not for load balancing, right?
So the point is,
there's this disconnect between what people want
in shorting potentially
and what people actually are going to put in production.
So as much as I like shorting and continue to push it,
I have not been able to get enough community interest
around it to get all the pieces I think
are necessary to get it done.
I've been working on for three years.
I've got presentation on the website.
It's a combination of partitioning,
which we have now.
It's a combination of foreign data wrappers
that would push down, which we have now.
It's a combination of parallelism, which we have now.
But there are submissing parallelism pieces.
There are submissing transaction management pieces.
There are submissing snapshot distribution pieces
that we need to basically get a full production,
either as a data warehouse or as an OLTP cluster.
Solution.
So the good news is somebody emailed me this week.
They want to create a high go out of China
once to create sort of a working group around this
to sort of push shorting forward.
I think we have five or ten companies now interested in this.
So we're going to have meetings.
We have not even yet.
But just this week,
it looks like we now have more push on this.
I think it's almost there.
I don't think there's that much more work to do.
We have companies in China, Japan,
Russia, United States,
all interested in this.
So I'm hopeful we can get an answer.
But it's a disconnect between what people want initially
and what they actually need today
that I think has slowed down that project.
Right.
No, that's an interesting perspective,
because it's one of the biggest,
seven points of news.
Okay.
Just, uh, sorry.
Back to what I said before,
one of the great things about shorting
is it can be done in a,
in a holistic manner.
It doesn't have to be a bolted on.
Let's add 150,000 lines of code to make it happen.
You're basically just improving
foreign data,
as you're improving,
a pair of transactions,
you're improving sharp,
you know, the partitioning code.
And all of a sudden,
you get sharpening by just
expanding out in little places.
That's another example of how
this sort of grows organically
to handle these new workloads.
Okay, Bruce.
I think we have to wrap this up
in the interest of time.
There's a certain thing that we do
with all our guests called POX.
It's the pick of the week
in terms of something
that you've come across recently
as it doesn't have to be the week.
But rather that something,
something that interests you,
something that you care to remember.
And of course,
there's also entire POX,
which probably results
to Oracle,
my SQL server,
some sort of like this.
I'm just guessing.
Sorry, take your,
take your,
take your,
take your pick.
So you're interested in something interesting
I've seen recently?
Yeah, something that's
interesting to you, Ryan,
in the news.
Yeah, I think the big thing for me
is trying to understand,
you know, I've worked remotely
since 94 or so.
But trying to understand
what the new world is going to look
like going forward
in terms of travel,
in terms of online conferences,
online meetings,
how much of our world
going forward is going to be
more virtual,
more sort of electronic.
One of the interesting things
is I'm now talking to people
on the other side of the country
much more regularly now
than I did before.
Yeah.
Because now somebody's doing
a church event in California
and I'm attending it.
You know,
because we're all on Zoom
and we're doing that.
Tonight I have an event
with somebody in New York
who's doing a Bible study, right?
Out in New York.
Normally I would never
have gone to New York for that.
But now it's online.
So,
just as open source,
I think, is brought together
so many people
from so many different countries.
This, you know,
this sort of quarantine thing
is sort of allowing us
to connect virtually
to people who are pretty far away.
So we're creating our own
virtual communities in a way
in a way that we had before
and be interesting how
much of that sticks around
and how much of it goes
back to the way
we did things before.
That's kind of where I'm thinking.
Yeah.
Is interesting.
I mean,
you like to travel, right?
So we try to do the food.
I do.
I do.
You know, the weirdest thing
for me is I'm now
in the same bed every night.
Which just,
it took me about six weeks
to kind of hit me
as I'm in bed.
I'm thinking,
I've been here every night
for like weeks.
And because I'm always,
I'm always,
you know,
home long enough
and, you know,
for a couple of weeks,
you know,
the clock's always
ticking to the next trip.
And now it's not.
So I'm able to do
a lot more research.
I'm able to work
on a lot more bigger projects.
And of course,
I'm not spending a lot
of time kind of flying
all over the place.
I miss it.
I did have a very
busy travel schedule
at the end of 2019
and 2020.
So I was definitely ready
for a break
and I'm enjoying it.
But I do think things
are going to, you know,
start warming up
in the next couple of months.
Yeah.
I think so.
And do you have anything
on the reverse side
that you've completely
struck you for a negative reason
apart from what the obvious
said?
Um,
I, you know,
I'm a pretty positive guy.
I don't think I saw anything.
I've seen a whole lot
of negative now.
All right.
No, that's,
that, that, that,
that does it well.
That's fine.
So, um,
yeah, I mean,
as Chris said,
we, we've got to wrap this up.
Thank you very,
very much.
And, uh, you know,
I'm, I'm a great person
for this fan.
And I'm sure Chris will be
as well after this.
So, uh,
thank you.
So, uh,
so once again,
thank you for this.
Um,
and, uh, yeah,
keep, keep up the good work
with those questions.
I would say it's,
thank you so much.
All right.
Thank you again.
And I speak to you again
soon.
Sure.
Take care.
Martin, that was an excellent
interview.
Although,
there's a great interview.
Yeah.
Perfect.
Yeah.
Although, yes.
I like, by the way,
don't get me wrong.
Yes.
Oh, he's passionate, right?
And, uh,
and after I was spending that many
years on an open source,
perfect still,
having the drive,
it's right.
Hmm.
Okay.
Um, so,
all that remains
to be done is,
of course,
the lovely feedback that we got.
Uh-huh.
And, of course,
yes.
Um,
Luna Yurnberg,
or should I say,
Martin Yurnberg?
Not sure,
because,
yeah,
they're sharing the same email
address.
So, I'm not sure who,
if what,
what of the, um,
what of the two names
is the alies or not?
So, uh,
Luna slash Martin wrote in to say
that, um,
uh,
I let me read this out.
Hello and listen to the latest
episode.
Now,
missed, they were released,
but so,
it went scrolling
by the HDR feed
over the weekend.
Yes.
Luna slash Martin.
Thank you very much for the
for the feedback.
You're bringing up
a very important point.
We are hosted
on Hacker Public Radio.
So, where will you be
here at your podcast
from?
We now have our own RSS feed
on Hacker Public Radio.
We will continue to use
Hacker Public Radio
for the time being.
And if we should
decide to move elsewhere,
you will be, um,
the first to know in terms
of hearing it here first.
And then,
Luna wrote a second
mail saying that the Catalina
thing was fixed
later in May.
And, um,
of course, that was,
um,
a reference to
OST 2.4.
and of course, the
workaround that, um,
Catalina and
it's security measures
as in the latest
installment of the
OSX operating system.
Um,
has a certain limitation
when it comes down
to Apps accessing
the hardware,
the camera,
and, um,
the microphone.
And there's a workaround
that we kind of discussed.
And apparently,
the OCD team
fixed this in 2.4.1.
Um,
I'm having checked this
we'll do this shortly and of course Luna slash Martin is absolutely out Audacity is 20 years now
because this is basically what she or he wrote that now two decades have gone by with this lovely
tool that of course we also use for producing this podcast has been in existence. Any closing remarks
Martin before we closed off the episode. The Claudia responds to the response to the responses
are very absurd so do listen. If you're so inclined Claudia yes and we are looking for a review
of a review of the review of the review if you want to do one doesn't have to be a full episode
on HBR you can write to us the of course the email address is feedback at Martin. The next
so we do in laws in laws e dot EU yes excellent and of course the right our website is also
w w w dot limits in laws dot EU no dash just one word and looking forward to
having you with the next episode Martin take care thank you
this episode of Linux in laws is proud this sponsored by Oracle disappointed with too fast
database access when all you really need is a slow backend allow the user to have more time
to ponder about buying decisions for your e-commerce site becoming more and more tired with
getting the same precise results as never mind how ambiguous the query really is
fret not Oracle has you covered. Introducing the real Oracle the first database with such low
performance your customers will love the time they will have pondering your beautiful e-commerce site
while waiting for the shopping cart confirmation never mind the huge set of articles ranging from
tulips to potatoes to sex stars to choose from when all they are searching for is a simple bulb
real Oracle by Oracle you know you want it this podcast is licensed under the latest version
of the creative commons license type attribution share like credits for the entry music go to blue
zero stars for the songs of the market to twin flames for their piece called the flow used for
the second intros and finally to celestial ground for the songs we just use by the dark side
you find these and other details licensed under cc hmando a website dedicated to liberate
the music industry from choking copyright legislation and other crap concepts
you
hello hi okay that's painful again i don't know what this big blue marble is but if i see it one
more time i'm going to avoid it and run the other direction
oh i think we're russian i think yeah it's probably because he's on this phone
oh dear syshame isn't it it was going to be wrong
now some introduction to the project let's keep eroding and let's talk about
yeah that's just just did uh man okay oh fuck it
Brian if you're listening yeah this is crap
i find it a little bit weird that there's not many more people have this issue
right anyway let's go down it's coming back now yep
And no Verizon, I won't edit this out.
If you're listening to me about this,
does a way better job than you are.
Never mind whether I used to work for you or not.
Of course we do still accept sponsorships,
but that's probably another issue.
No Verizon, but you can't buy your way into this, no worries.
Anyway, Bruce isn't joining now?
Yes.
Maybe we can put this into the outtakes or something.
Anyway.
Yes.
He said something, isn't he?
Yeah.
Okay, cool.
So, yeah, so we were bitching about big blue button
and then some database data on.
Yeah, I don't know where I actually cut out or what I left.
What I was saying.
Yeah, you were talking about the my secret go to market
and the marketing front that Oracle use
subsequently, if I'm not sure if you correctly,
but then are you broke up later on?
So maybe you care to repeat, slash and elaborate?
Sure, yeah, so.
Okay, that was an excellent interview, I think.
But he's a bit of a talker, isn't he?
Oh, I thought you said cut.
And we can still edit this out.
What do we do now?
No, no, no, yes we are.
Okay, yes, I'm still ready.
You said cut, so this is about to.
Yeah, cut is actually after our cheese.
We have to, we have to do this has to be.
Oh, okay, fair enough.
No, we are after the interview, Martin.
Okay, and let's roll again.
There was a couple of days ago.
Yes, cut and roll.
You've been listening to Heckapublic Radio at HeckapublicRadio.org.
We are a community podcast network that releases shows
every weekday Monday through Friday.
Today's show, like all our shows,
was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast,
then click on our contributing to find out
how easy it really is.
Heckapublic Radio was founded by the digital dog pound
and the Infonomicon Computer Club
and is part of the binary revolution at binrev.com.
If you have comments on today's show,
please email the host directly,
leave a comment on the website
or record a follow-up episode yourself.
Unless otherwise stated,
today's show is released on the creative comments,
attribution, share a life, 3.0 license.
Thank you for watching.
