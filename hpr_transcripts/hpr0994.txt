Episode: 994
Title: HPR0994: NELF: John Maddog Hall Talking About Talking About Free Software
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0994/hpr0994.mp3
Transcribed: 2025-10-17 17:08:42

---

.
Happy St. Patrick's Day to you all.
I have my Kiss Me, I'm Irish button on here, but I'll turn off the little blinky lights
so it won't be too distracting for you.
So welcome.
At my talk today, for a lot of you, maybe review, a lot of you may be new information, a lot
of times I give a talk to Linux people and free software people because what I'm trying
to do is bring the arguments about free software from the back of your mind up to the front
so that when you talk with other people, you might be able to give them ideas as to why
they should be using free software.
So I go back in history a long time.
I started programming in 1969 and back in those days, most of the software that we worked
on would be what people would call today open source.
You got the source code for it.
And the reason for that was that the number of computers was relatively small.
They were all different types of architectures.
IBM had their architecture, you know, Hula Packard had their architecture, digital when it
came along, had their architecture, and there was a lot of different computer systems
built by universities and things like that.
There was no common instruction set at all and you know, bus, the idea of a bus hadn't
even been invented yet.
So consequently, there was no market that was big enough to really justify putting into
binary and packaging up software to be able to sell it as a product.
And consequently, when you wanted to have a piece of software written, you basically had
to, you know, I have to go up here and see something.
You basically made a contract to people as to what you wanted to have written and then
you would have them write it for you.
So it's basically software as a service.
You would define the types of inputs that you needed or you had and the types of outputs
that you needed and then the steps that you would take to be able to solve that problem.
And then you would hire somebody who would program that for you or perhaps you would
program it yourself.
A lot of people weren't, quote, professional programmers.
That was not the profession they listed on the resume.
They were doctors.
They were lawyers.
They were other people.
And basically, they were writing this software because they needed it.
Now today, when we talk about software as a service, a lot of people think, oh, a service
that's like flipping hamburgers or something like that.
But in reality, the service of writing software is more like the service of a brain surgeon.
You know, a brain surgeon doesn't create a product.
When you go to them, you don't end up with a second brain bolted on to the first one.
You don't have dual processing of your brain, stuff like that.
Basically they fix the brain you've got, but you don't go out to a newspaper and then
look for an advertisement that says, I do brain surgery cheap.
You know, I don't use last, I use last use CAT scan machine or something like that.
You don't look for that.
You look for the best brain surgeon you can because your brain is very important to you.
And consequently, when you're looking for somebody to provide you good computer services,
you look for the best person you can find because you wouldn't be done in an efficient
way, quick way, the best possible way you can for your business.
And if you ask any business person, they will tell you that their business is actually
more important than their brain, because they take my brain, I don't care, but leave
my business because that's important to me.
And so they'll pay you good money for good service.
Same type of thing with a lawyer.
I mean, God knows a lawyer doesn't produce anything, right?
But we pay them a lot of money as a service because we value their expertise and they
have to try and keep us out of trouble.
Now, I was a student back in 1969.
I was in university and back in those days, if you wanted to buy a compiler, you typically
had to pay about $100,000 per copy.
And now, of course, there's a lot of money for university student.
I didn't really have that in my pocket to give you an idea as to how much $100,000 was
back in those days.
My parents bought a house about the same time, three-bedroom house, all brick on a quarter
acre of land, very nice house, for $32,000.
So they're talking about three houses worth of software for this compiler.
But it was worth, wow, because it was going to go on your $2.5 billion computer.
And if that compiler could make your computer 10% faster, 10% better, there was really
worth the investment.
But I couldn't afford one.
So there was this organization called DECAS, Digital Equipment Corporation, Use of Society.
And IBM had one called Share and the other computer manufacturers had them.
And they had a library of software.
And you could purchase a listing of this library of software for $15.
You got a nice, thick catalog came, you know, and you started looking through that.
And you'd say, oh, I have a PDPA or a PDPA 11, and here's some nice piece of software
on there.
Maybe a text editor.
You'd say, oh, man, a text editor, that would cost me $5.
But $5 back in those days could buy you three pictures of beer.
And so you had this choice, text editor, with three pictures of beer.
I'd say, oh, man, you know, that's tough.
And I think you see what direction I went in, especially on St. Paddy's Day.
So, you know, but this was, this was in effect free software.
Now, back in those days, software copyright didn't apply.
There was no copyright you could apply to software, nor did it with their patents.
So consequently, this was free software by the very definition, but it was also open.
Because these people wanted you to help them make their software better.
And I bought my tape for $5, I got it, and then I went to the school store and I bought
new, you know, more paper tape, fresh paper tape, and I put it through my
teletype and duplicated it and sold those to my roommates for $1 a piece.
Now, what I was doing was providing the service of making copies of these.
First of all, I had taken the risk of ordering a text editor in the first place.
If it wasn't any good, it wasn't going to copy it.
But then, I made copies of the good stuff and sold them to my roommates.
So eventually, I had my text editor and my five pictures of beer.
So this was all good stuff.
And people say, well, why did people write software and give it away?
Again, remember, back in those days, it was incredibly hard to sell software.
Because there wasn't any large number of machines, all the same type or anything like that.
And people didn't want to have to go through the concept of advertising the software,
supporting the software, documenting the software.
Because those are all hard things to do.
And they were not programmers.
They were not software people.
They were doctors and lawyers and things like that.
So they would contribute their software to Deacus.
And then, maybe if you went to a Deacus meeting, somebody would say,
hey, that's a really great piece of software you wrote.
You know, let me buy you a beer.
Well, that's a really great piece of software you wrote.
Let me buy you dinner.
Well, that's a really great piece of software you wrote.
Let me give you a job.
And a lot of these reasons are why we write the software today.
Now, a lot of people say, you can't be really good software
because these people are not professional programmers.
Well, let me remind you of what the difference is between a professional and an amateur.
A professional gets paid money for what they do and an amateur doesn't.
Okay?
That's basically the big difference.
And so you can have amateur athletes who are just as good or just as good physical shape
as professional athletes.
I think all you have to do is take a look at American baseball players.
You can get the idea of what I'm talking about, right?
And so, you know, you can have a good, very good athlete.
Somebody who runs faster can throw further and stuff like that than the so-called professionals.
It's just the professionals who paid money for it.
And if you're an amateur painter, a lot of times you paint a painting.
You don't put it in a closet to hide it.
You put it up in the wall in your house to people to see because you're proud of your painting.
But you might take it to, you know, an art show and have people a little more experience
than you in painting.
Go along and say, oh, yeah, that's good, but if you mix your paints just a little bit
differently, then you can have a better sheen on the water.
Or if you do this, you have a little bit better perspective and so you learn from these
people.
And maybe every once in a while you sell a painting.
But even if you don't, you don't stop painting because you like the paint.
You enjoy painting.
And that's why a lot of people write free software.
Now, when the microprocessors came out, a lot of this stuff changed dramatically because
when the Intel microprocessors came out and systems like the Apple II or the IBM PC came
out, all of a sudden there was this large volume of hardware coming out.
And the price of hardware dropped dramatically.
Instead of being hundreds of thousands of dollars or millions of dollars per processor,
we're now down into maybe $13 to $15,000 per processor.
I still remember back in 1977 when I bought 64K of RAM of core memory for only $128,000.
Or a few years later, when I bought a megabyte of semiconductor memory for Vax11780 and
I paid only $23,000 for it.
So the price was dropping dramatically.
And people said, well, maybe we can manufacture software the same way that we're manufacturing
the hardware, do it one time and stamp it out like cookie cutters.
And that's what they did.
And so operating systems like CPM came out from digital research and MSDOS came out from
Microsoft and Apple came out with their first operating systems and the PC error came about.
Now before this time, there was no such thing as a computer store.
Because if there was, you'd have to have an 18 wheel tractor trailer truck, three phase
power in your house and a 20 ton air conditioner to use your computer.
But now the computer store started up and people found out that there was large margins
to have by selling not only the hardware, but that software over and over and over again.
Now in 1984, there was this guy at MIT, a student, by the name of Richard Stallman.
And he liked looking at the source code for operating systems and he liked the fact
he could change the code.
And he decided that he was going to buck this trend and he was going to create an entire
operating system that was going to be available in source code form.
And he called this project, the GNU project, because GNU was not UNIX.
UNIX had started out being, it affected open source operating system.
But over time, it had been closed down to being binary only and Richard objected to this.
Now Richard could have done a lot of things.
He could have started by writing the kernel of the operating system, which was the part
that controls the memory and the CPU and things like that.
But that would have been a disaster because you would have nothing to run on top of it.
So instead, he decided to write something almost as complicated, a thing called EMAX,
the text editor.
Some people say he could have stopped with EMAX because that in effect was an operating
system itself.
But EMAX was written so go across different operating systems.
You could get EMAX from VMS and EMAX for UNIX and EMAX for a whole range of different
operating systems.
And what he was showing people was the most important part was actually having the
putability of the user to be able to have this user using exactly the same functionality
across all of the different operating systems.
And later on, he developed a set of compiler suites, the GNU compiler suites starting off
with the C language and Fortran, and then breaking out into many, many different types
of languages, and also being able to run across many different operating systems.
And people started using that, and then a set of utilities and so forth.
Now there were other pieces of software out there that send mail, for example, which
was one of the largest mail transports, handles more e-mail than probably any other transport,
bind, which is the basis of our DNS system today.
And then later on postgres, which are databases, and finally, the Berkeley software distribution
known as BSD Unix itself, all of these were free or in effect open source distributions
that create huge amount of software out there.
But it was really the GNU project of the free software foundation that started to really
capture people's attention.
Now development was relatively slow by today's standards, because back when I started computing,
networking was carrying a bound a bunch of cards in a box, you know, down the hallway
to your friends, and we're sending a piece of paper tape through the postal mail service.
And computers were still very expensive, it was very difficult to get the ability to work
and have a bare piece of machinery that you could put in operating system on.
And there were fewer books and articles and things like that, telling how to create
an operating system.
But as time went on, a lot of these things began to change.
And in 1991, a young university student by the name of Lena's tour vaults decided that
he wanted to have a complete operating system, a complete distribution.
And he started the last real piece that was missing, which was the kernel project.
And this eventually became known as Linux.
He first wanted to call it freaks, but thank goodness I didn't go through.
And so by 1994, this project had grown enough.
There were about 124,000 people using the Linux project by that time.
Most of them were developers of things like that.
A lot of them were university professors and students and things.
It wasn't really commercial or anything.
But about 1994, there was enough of a kernel there that people started creating entire
distributions of Linux.
And distributions like soft landing systems and atrocils, ones that don't exist anymore
because they were a little bit too far ahead of the curve.
But other ones like Slackware and Red Hat started up in Sousa and a variety of others.
And Debian.
And then they became the distributions that most of us call Linux and various people called
GNU Linux.
And about this time, there was enough that people started using it as under a system,
as their main system that they were working on, instead of just something that they were
developing off the side.
Now in the period of 1994 to 1995, we were having a disaster in the computer industry.
The disaster was a company like Craig and ECL, makers of supercomputers were going out
of business.
And the reason this was a disaster is we absolutely need these computers for doing things.
And it was impossible to make a business out of them because you would go and you would
spend millions and millions and millions of dollars to develop these new supercomputers.
And then you would sell five of them because they were so expensive.
And two of those are probably good at universities that were never going to pay you anyway.
And then one or two of them would go to some government agency that we did not say their
names.
Right?
And so it really was, they were just going out of business.
And two people, Dr. Thomas Sterling and Donald Becker of NASA came up with the idea of
what would happen if we just used commodity-based, inexpensive computer systems and break these
problems up so they were massively parallel and be able to create these things that they
called Bayer Wolf systems.
Now even they don't know why they picked a name Bayer Wolf.
Today we call them high performance computing.
And but they were so successful that today of the top 500 fastest computers in the world,
98% of them use Linux.
Because they chose that kernel because it was open source and if fit their needs and they
put on top of it a few libraries called message passing interface, open mp and things
like that, that helped them break up their programs.
But they use Linux as a kernel.
It's the same Linux kernel that I'm using on my notebook over there.
Absolutely no difference at all.
And this was interesting too because it allowed you to have a supercomputer for about 140th
of the price that you would normally pay for a specially designed supercomputer or turning
it the other way around.
You get a computer that was 40 times more powerful for the same amount of money.
And so this was the really the first major use of Linux that opened up people's eyes
and said, oh my god, this is something that's really fantastic.
In 1995, the first 64-bit version of Linux came out.
I'm very happy to say that I was helped out with that considerably.
I gave me this tour vaults as first 64-bit system.
It was not only a 64-bit system, but it was also a risk processor because I wanted
him to make sure that the Linux kernel was very, very portable.
It's not only a matter of portability, it's a matter of stability because if you make
your kernel, so it runs across multiple different architectures, then you eliminate what we
call intelisms in the writing of the kernel.
And therefore, if the architecture changes underneath, the kernel does not destabilize
as much.
And this is one of the reasons why the kernel is so stable.
Now, I would like to point out that our first 64-bit version of Linux was 11 years before
Microsoft made their first truly 64-bit version of Vista.
We all know where Vista went.
By 1998, all of a sudden, the commercial databases started to take advantage of it.
And because of this, and because of the fact that Linux had everything in it, necessary
to create a real ISP, how many of you remember the days of ISPs you would sign up for an ISP
because they had a shell account?
Yes, that you could log in, you could actually get access to that shell account.
It wasn't just a web browser or web server or stuff like that.
It was the fact you could log in, you could get access, and you could do things with that.
Well, Linux had the ability to do that.
The operating system that a lot of ISPs used in that time was actually Solaris.
And they would have a Solaris server and stuff like that.
And Linux made a perfect replacement for that except the fact that it was about one-third
of the price because you didn't have to buy an expensive Spark system to put it on and
you didn't have to buy the Solaris operating system to put it on.
And so all of a sudden, ISPs started using Linux for their work.
And then the database vendors started to support it.
And one of the first database vendors to support it was Informix.
They actually put it in their database to that, followed quickly by Oracle, Cybase, and
the others.
In the year 2000, pardon me, two things actually happened.
The first thing was that commercial companies, like IBM, Hewlett Packard, and Digital,
started looking at this as for their commercial customers.
This is a major leap forward.
This was taking Linux from being the technical or hobbyist platform it had been to being
something that people were constantly thinking of as real business.
And the second thing that happened was that that time embedded system people started looking
at Linux.
Before this date, a lot of embedded systems were proprietary, written by various companies.
But the thing that started to kill this type of development of embedded systems was the
fact that they started to need to talk to the internet.
Creating an internet stack is not an easy thing.
Creating an efficient internet stack is definitely not an easy thing.
And all of these companies said, whoa, we see a major incremental hit for us.
And not only that, but there are all these different processors coming out, ARM chips,
Motorola chips, and we have to port our little operating systems to all of these.
This is very expensive.
Why don't we use Linux?
It already has a network stack.
It's already multitasking.
It's already multi-user.
It's already secure.
It's already ported to all these different architectures.
We can use Linux, and there's no royalty for it.
So all of a sudden, a lot of people that have been using closed source for proprietary embedded
system operating systems started to use Linux.
To be fair, there was another reason why they started to use Linux.
And that was the fact that the price of memory has started to drop like a rock.
And so it was not as important that your entire kernel fit inside of 128 bytes of memory.
You had a little bit more space to work with.
Now today, every commercial database on the market runs on Linux, as well as a lot of open
source ONS, like mySQL, except one, MSSQL doesn't run for some reason.
And every major browser works on next, except one, Internet Explorer for some reason.
And every major office package works on Linux natively, except one, Microsoft Office.
And even Microsoft Office works under wine, so even that could be said to run.
But I was talking about natively, so in fact, if you go out to source for it, you'll find
out that there's over 340,000 different packages out there, supported by 3.4 million
developers.
And a lot of people say to me, oh, mad dog, I've been out there.
A lot of these packages, people of abandoned are no longer working on them.
News flash.
Maybe the packages are done.
Maybe nobody's working on them because there's nothing left to do.
You know, when you sell commercial software, you always want to sell your customers the
next version because you want them to buy the license over again.
You know, you put in another little feature and you have to convince them, this is the
one you want.
Don't use the old one.
We say long dropping support for the old one, you can't get patches for that, anything
anymore.
So you have to buy the new one.
That's if you want to sell them something.
But if the software is done, then you don't do anything to it because all that does is
to introduce new bugs, right?
So some of that software is just done.
And people recompile it and put it on different systems over the years and it's still there.
You still can use it.
I've been using the same package to format my resume for a quarter of a century.
It's done as far as I'm concerned.
My resume is almost done, but that's another subject, okay?
So but there's another thing about these packages because people look at me and say, oh,
mad dog, there's, you know, 49,000 CD package for play CDs out there.
You know, all these different packages, how many MP3 players do you need?
Well, actually, I don't need any because I play on, but that's a different subject.
But sure, there's lots of packages out there to do the same thing, but if you just take
one tenth of all those packages and one tenth of all those developers, that's still more
packages and more developers than any other company has in the face of the earth for software.
Microsoft has about 70,000 people working for them and other 70,000 people, 28,000 of
them are in sales and marketing and therefore have no useful purpose.
Other people are left.
Not all of them are software developers.
There are some people who are working cafeterias.
There are some people who paint lines on the driveways.
There are guards, security people, stuff like that.
There's people who put software into boxes as people take software out of boxes.
There's all sorts of people.
And if a company decides to Microsoft, if you really take a look at the number of people
to have the word software developer after their name, it's probably about five to six thousand
of them compared that to 10% of 3.4 million.
And this is without a lot of different people being one board yet.
So expected numbers will go up.
Now what type of software is out there, almost any type of software you could ever think
about.
All categorized and stuff like that you could search for the software.
But the other thing is you don't need to use all of the software.
Let's say you're developing a new piece of software and you say, you know, I'd like to
develop a new point of sale terminal software.
Do you have to start from the very beginning?
No.
Because there's point of sale software already out there.
Maybe you can use it as it comes, just pull it down and use it.
Maybe pull it down and say, I don't like this feature of it.
I can change it into something else.
And depending on the licensing is there, you could actually fork the entire thing and
create an entirely new piece of point of sale software, but still utilize parts of the
old one.
Maybe creating a new type of search engine.
Well, you'd go out there and look at all the other search software that's out there
or even pieces of software and use just the pieces so you don't have to start everything
from the beginning.
Now, when we talk about openness and freeness and stuff like that, what are we really
talking about?
Well, it's more than just having a source code for the software.
If that was the only thing, then it really isn't that important.
However, it's also about having open standards and open standards are standards which are
clearly written, which are agreed upon by a whole bunch of people who know the subject
matter and sit there and argue about it for years and days and decades of stuff.
One time Ken Olson, the head of digital equipment corporation, was at a press conference and
somehow the conversation got around to standards.
He said standards are as interesting as a Russian truck, which kind of surprised me working
for digital because we spent a lot of money supporting standards, committees and things
like that working on standards.
So finally one day I asked him about it.
He says, you know, he says, I wish I hadn't said that.
He says, but that was just a personal thing for me.
He said, I'm an engineer and I hate the nitpicking type of stuff that goes into making
standards.
I hate doing that.
But once the standard has been finalized as an engineer, I love implementing that standard
in the fastest, smallest, most expandable, most scalable, best way.
He says, it's just a personal thing of mine that I don't like the nitpicking and arguing
that goes for it.
He says, thank God it's done.
Thanks God somebody apparently likes doing it, but it's just not me.
That's just thank you.
That was very good.
It's an open development model where the customers, the end users, the people that use
the code can actually participate in doing that.
I used to work for digital.
We had product managers who would go out and talk to customers.
You ever played that game sitting around the campfire with whispers or something into
somebody's ear.
They whisper to the next person and it goes around and comes back and that's what happens
when customers talk to product managers and fact managers talk to engineers, right?
Well, you ever see that the car did the drawing about the swings where, you know, this is
what the customer wanted versus what the engineer heard and that's the same thing, okay?
But with an open development model, you all get to talk to each other directly and you
get to see the preliminary stuff coming out that you get the director to come back and
say, hey, I think you're going off the beam here.
This is what we asked for, okay?
Open hardware, well defined, well specified hardware.
Businesses that don't use binary blobs that will work for a certain period of time and
they break over time or you're trying to have them go to a different piece of hardware
and the APIs for the hardware are not supported the same.
It's open software, it's open service and it's open acceptance.
Being a meritocracy of people who, naturally, the best people rise to the top and that's
very important.
How many of you know the chief programmer or Microsoft office?
Well, this is a bad group.
Maybe if I asked some Windows people, they wouldn't know because this person is hidden behind
Microsoft.
They may know the head of the project or something like that but they don't know the programmers
that are in it.
Well you have open source code, the names of those people are in there, the mailing list
has those people in there and so they tend to do their best work because if they do
shoddy work, they're left out.
When Mark Shodoworth was starting to design the distribution of Ubuntu, he took his laptop
with the Debian mailing list on it and a Debian source code went down to Antarctica for
six months.
By this time, Mark was a multi-multi-millionaire so he had afford to go to Antarctica for six
months.
He sat down there with his notebook and he went through the mailing list looking at who
was giving the best discussions, who did the best coding, who had the best ideas, who
was the least argumentative and when he came back, he said, I want you and you and you
and you to come with me and work on Ubuntu.
That's how he picked up.
No HR person, no resumes.
We just looked at the code.
Now open standards means written standards, not just the fact or standards, not just I
create a program, everybody's using it, therefore it's a standard, I mean that's not really
a standard.
Okay.
A written standard that has specifications and tests to make sure that the code is written
to those specifications actually support them and maybe even sample code.
Now when we were developing OSF-1, which is the open software foundations code or kernel
that was supposedly the redefinition of what Unix was going to be, they created gazillions
of pages of standards, written standards.
The problem with that is it's really tedious to read them and then to go back and try
and implement something from the beginning.
They also create a whole series of test suites.
Well, test suites are great, it's just that they always tell you one in one thing.
You haven't implemented what you're supposed to, it doesn't tell you what you're supposed
to implement.
It's just you haven't done it yet.
And then finally they create the most important thing, which was a sample code so that you
could look at the sample code and see how to implement something.
And if the sample code was different than the written standard, well you changed one
of the other until they came together.
And if the test suites run against the sample code didn't work, well then you change
one of all three to make them come together.
But it's a try up for it of those three and make a good software standard.
Now we compare that, for example, with ODF, the open document format versus OOXML, which
is the so-called standard from Microsoft for Microsoft Office documents.
The last time I looked at OOXML, it was something like 5,600 pages of stuff, which had some
descriptions in it that this functionality works the same way as Microsoft Office 3.1,
okay, which basically doesn't describe anything.
And therefore, OOXML from my viewpoint was a completely unimplementable standard.
You could not implement an office format from it because it was a specified enough.
And there was no real sample code, which showed how to do it.
So finally, from my viewpoint, open standards are most important when they are not covered
by software patents.
If you create a standard which you have a patent assigned somewhere to that standard,
it's unimplementable unless you violate that patent, that, to me, is just driving people
to pay your royalties and not really implementing a usable piece of code.
And page three and then page four and the various other codex of the movie industry are that way,
versus the augwerbus formats and augura and different types of aug, which are not covered
by any patents that we know of. And they're therefore implementable in a freeway.
You also want an open development model. You want to be able to see the plans openly, see where
people are going to help to influence that. You want to be able to see what bugs exist.
You don't want them to be hidden behind a closed door. It's very important to find out
that this thing that you're experiencing is already known as a bug. Somebody's working on it,
going to try and fix it or something, or maybe nobody's working on it. That too tells you something.
Okay, maybe you need to find a workaround or maybe you need to hire somebody to go in and fix that
bug for you so that you have the bug fixed in a period of time. Now, a lot of people say,
well, I can send bug reports to my manufacturer of closed source code. Well, I will point out
that in the end days of Sun Microsystems, they were actually charging people $500 to actually
submit a bug to them because they had so many bugs and they had so many people submitting bugs
that just to filter through all of them was costing them money. They said, well,
there's this one mailing list you can send the bug to and maybe we'll look at it someday.
And then there's this other thing where you can submit the bug, but you have to pay $500 to do that
because we want to make sure you're serious about the bug. And finally, you should be able to test
to see if these things have actually been done. Now, so far we've been talking about open software,
but there's now a movement on to have open hardware done too. I have the hardware capabilities
all of them specified and to be able to make sure that all of those are documented and that all
the hardware manuals are available. Now, there's various pieces of hardware that unfortunately
the free software community can't really support very well because the hardware documentation
people have not documented them for a variety of reasons. Sometimes they're embarrassed about
the documentation they have. It's got different things and different comments in there about their
own suppliers and they don't want to have that exposed. Sometimes they feel that they may have
violated some other company's patents and they don't want to document their functionality
enough that the other company would find that out. But for whatever reason, they don't document
their hardware completely. And that's why whenever I buy new hardware, I try and make sure
that all of the different components in there are fully documented so that I know that the
device drivers in there can be supported for all of time. Now, there are also mega projects
which are available and these are things typically where foundations will come together to give them
support like the Apache Foundation or the Eclipse Foundation or Linux Foundation for the
kernel and parts of Linux itself. And there are projects like GNOME, KDE, MythTV that are really,
really very large projects. And I see that some of these can be a cursing and a bless and a curse,
a blessing and a curse. Some of these projects can really suck you into them that you end up
spending all of your time working on these projects because it's just so much fun and there's
so much functionality to them. But so you have to make conscious decisions about where you spend
your time on these things. Now, a lot of people say to me, mad dog, what distribution do you run
on your laptop? And I tell them, it doesn't make any difference what distribution I run.
Number one, because I'm a consultant. I go around, I do consulting jobs for various companies.
So if I do a consulting job for Red Hat, I probably will be running for door on my notebook.
If I do a consulting job for Sussa, I'll probably be running open Sussa on my notebook.
Okay, so you really can't ask me what I use. You should be using the distribution as best for
yourself. Okay, you should try out several of them. Maybe you should look for what your local
user Linux users group is using if they're all using one type of distribution and you're new to
Linux, you might decide to use that distribution yourself so that you can depend on them for a
little bit of your support in getting started. But for the most part, all the distributions
utilize a lot of the same software packages. And so if you go from distribution to distribution,
it might be because you like a particular feature of one or another, but if eventually you go
to a different one, it's not really a big hardship that I've ever seen.
So what does the type of stuff? Why should you be using free software in the first place?
Well, you know, this is the United States and I'm very, very proud of living this country.
But it's interesting when you look back at the Constitution of the United States,
it actually, the Constitution, as it was first written, was actually taking 50 or 13 small
countries and pulling them together. It was kind of like the EU of the United States, right?
And before that, each state had their own money, each state had their own militia,
each state had their own taxes as you cross the borders and stuff like that. And the founding
father said, this is crazy. We can't create a country this way. We have to have one currency,
we have to eliminate all these tariffs and things like that. But still, there's a certain amount
of autonomy that's given to every state. And our states compete with each other. You know,
Massachusetts competes with New Hampshire, particularly on the sales tanks, okay?
Licker prices, cigarette prices. You guys all come up because we're cheap. We're cheap.
You know, we make a lot of good maple syrup, too. You guys have a lot of other good stuff.
I'll think of it sooner or later. But all of this, you know, this is competition that goes
between us. So the thing is, the question should be asked for yourself is, why should you be
spending any of your money for software outside of your state? You have people in your state who
are programmers who would love to make a living writing software. So why shouldn't you pay your
programmers who are then going to buy local housing, local food, pay local taxes, help support
your local schools rather than sending all of your money out to Redmond, Washington.
You know, a long time ago, I found out that there's only so much maple syrup to build and drain.
Okay. He certainly doesn't like cow tipping. Okay. So there's really nothing that attracts him to
New Hampshire. Okay. So I object to keep sending all my money out there or to make the Silicon Valley.
No, I don't want to send my money there either. So I could just pull down software off the net
and take all those royalty prices that I would be sending to those two places and I could pay a
local programmer here in Massachusetts or New Hampshire. Now, I get a second advantage out of that.
It's the advantage of creating technology savvy people in those areas. Because if I don't create
interesting jobs that pay people good salaries, they're going to move. And they're going to move
to Seattle, Washington. They're going to move to Silicon Valley. But if I have these people local,
I can utilize them for other things. So with some type of new project comes along, I have a base
of people I could pull forth that are good programmers that are technologically savvy,
that know how to use this software to fix my problems. And this helps to attract new industry
to the state also. It's lowering a barrier between the producers and the consumers so that the
producers and the consumers can sit down next to each other and say, this is what I want.
Oh, okay. I can do that. This is like we were doing back in 1969, right? The producer and the
consumers are down doing next to each other to really show what they want to do. And open
sources, everybody is scratching their own itch, but then contributing that back into the greater good.
Now, we've so far been talking about open software in general, but I tend to go towards free
software specific, where it follows a GPL. And I believe that you can make a business off of this,
if you're business oriented towards the service that you're giving your customers.
Now, there's two types of things that people buy. They buy products and they buy services.
We went into a little bit of this before, but let's say I live in New York City. I don't want
the product of a car because a product of a car in New York City is a pain. You have to find a
place to park it. Then you leave your house, you have to drive down town, you have to find another
place to park it. You know, there's all the traffic. There's a taxi drivers who want to kill you.
So I really want the service of transportation. I want to come out of my house, have my
stretch limousine sitting there. I get in the back. Actually, the driver opens the door for me. I get
in the back. I spread all my papers. I'm reading and doing work while he's driving down down, dodging
the taxi drivers. He gets in front of the building. I get out, I go inside, he drives it away. I don't
care. It's a service of transportation. A lot of people like cooking food. I don't.
I don't like going to the shopping for it. I don't like going to the store. I like the service
of food, which is called a restaurant. I go in and say, hello, are you doing Mr. Hall?
What's your favorite wine tonight? It's all I'm going to get it. Bring it out. It's chilled for me,
put it in the wine. I sit there. I ordered a food. I eat the food. They clean up the dishes,
everything is great. I simply pay them for it. Service of food. So a lot of people went to service
of software or solution. And it's actually a solution is what you should be selling, because that's
what people really want. Okay. Now another thing about binary only software, I really hate.
This every once in a while, you simply lose it. I left digital grip and corporation before they
were bought by actually after they bought by compact, but before they bought by Hula Packers,
I can tell you huge amounts of software simply vanished. It was the projects that were done
and everything like that. These companies had a collision of two projects. They canceled one.
The software was gone. There was good technology in that software. It simply disappeared.
And the people that were using that particular software were now forced to migrate to some other
piece of software simply because the company that owned the software felt that it was not valuable
enough to keep it going. It was too small or focused of a market or it was too hard to sell it
or they had two products were basically doing the same thing and they made the business decision
to get rid of it. Now a good example of software that was going out of business was the software
blender. How many people know what blender is? Good. It's basically a 3D creation, a software
creation that's used for creating games, that's used for creating 3D movies and animation.
And it was a piece of software that was designed by a bunch of artists. You look at the interface
and say, oh, this is really complex, but once you start to use it, you say, wow, this interface
is what an artist wants. But the company that was making it went out of business, the software
was about to disappear and all of a sudden the customers of it, the small number of customers of it
bought the intellectual property, turned it into an organization, turned it into a free software
project and now blender is doing better than ever. And not only is it creating the software that
creates it, but free movies where you get to intermediate parts of the movie, you can change it
to a new ending or new characters and stuff like that and people like doing that too.
Now a lot of times I talk about software freedom and a lot of people in this country sometimes have
trouble understanding the word freedom. Certainly some of our politicians these days have troubles
understanding that word. I won't say which party, probably both. So I often talk about software
slavery because people understand slavery a lot better than they understand freedom.
Okay, when you're a slave, you told where to go, who to marry, when to have children,
you don't own any property, you know, your master tells you everything. When you're a software
slave, the company that produces a software tells you when to upgrade, how many systems to put it
on, how many people can use it and they just find everything about it. That makes you a software
slave. Very easy to understand. Now people say to me, mad dog, I love the concept of free software,
but I'm not a programmer. You know, I don't know how to program. I can't change this software to
meet my needs and stuff like that. Well, folks, you may not have to. Just pull it down off the
net the way it exists. And you may be good enough for you. I haven't gone into change open
office, you know, or I haven't changed any of those. I just use them. And if it's if you're using
proprietary software, you've got a proprietary vendor. If you're using free software, there's a
developer out there someplace. You can actually talk to them. Oh, there we go. With free software,
you can also be a distribution integrator. And you can do that with proprietary software too.
You could be a var or consultant. You get your support from them. You get your support from a
third party. And that third party could be just as good at understanding that free software as
a proprietary vendor is an understanding their proprietary software. So in free software, you can
support from all these different types of people instead of just a proprietary vendor or even a
college to give them a couple of six packs of beer and you'd be surprised what a college
dude could do for you. For even you. So freedom here in this case is the choice that you have
of where you get your support. Now, where you want to spend your money? Well, you can't spend
your money paying royalties or having a support contract. So I'm going to ask your question, folks,
people in the room. How many of you have ever had a problem with closed source proprietary software?
Please raise your hand. How many of you keep your hands raised? How many of you have ever taken
the time to actually turn in a bug report on that software because you paid money for it?
How many of you keep your hands raised? How many of you have ever gotten back a well-worded
work around or bug fixed for that problem? Ever. Okay, well, back in the early days you may have,
right, because people still counted about an account on that for that. So I ask this question a lot,
right? And maybe maybe I have a thousand business people in the room and I ask a question a lot.
And invariably, all the hands in the room go down except for maybe two or three. I say, Mr. Gates,
you don't count. Okay. But this is the problem. Okay, you're spending all the money on that stuff,
but you're still not getting the bug fixes. And I mean, I used to work for digital. I know how this
works. We tried to fix the bugs, but there were too many. And if the bug gets fixed, it was typically
because the bug happened to exist in a piece of code that we were going to rewrite anyway. So yeah,
your bug was fixed in a future release, but it was fixed by accident. And I introduced the fix,
introduced new bugs. So you didn't have the old bugs, but you had new bugs. Okay. With open hardware,
I don't even go back for a second. But with free and open source code, you can actually affect the
bugs that are fixed. You put your money to fix the bug. You get the bug fixed in the time frame
that you want it to have a fixed. And you submit that upstream and the person is probably happy
to get the bug patch. With open hardware, you can choose the services support and applications that
you want to have. Think non iPhone. You know, Steve is dead. But I still remember the time that he came
out with one of the iPhones, and he had the antenna problem. He said, you're holding the phone
wrong. Okay. And before we forget, there's one more part of openness. And that's creative comments.
Creative comments is to art. What the free software foundation and GPL is to software. Creative
comments allows you to license out your art, whether it be digital photographs, your paintings,
your music or anything else, so that you maintain control of the intellectual property,
which you make it easy for the person to be able to know what they can do with that intellectual
property. Do not think that creative comments is simply about giving away stuff. Because if the
person doesn't like the way you license it on the creative comments, they're still able to come
back to you, the copyright holder, and get another type of license available from you to meet
their specific needs. But what creative comments does is allow people to license their their
intellectual property freely to cover the most of what people would want to get out of it,
and what you as a creator would want them to have. Now, we're here. How much time do I have?
Okay, we're here at a university, so I'm not, I always take time when I'm at a university to
talk about free software in education. A lot of universities feel that the reason that they're here
is to teach people how to have a job, get students a job, that is not the reason they're here.
The reason that universities are here are to teach people how to think and to teach people how to
sift through data and get information, and then teach people how to be effective leaders and
engineers of the next century. Because if we didn't have that, we would all go back to using sticks
to plow the surface of the earth. Because steel takes technology. So if you're going to be teaching
computer science, use free operating system kernels to illustrate what you're doing.
Now, Andy Tannenbaum, I've known Andy for about a quarter of a century,
Andy Tannenbaum invented the operating system Minix. It was a nice,
illustrative operating system for how operating systems work. Unfortunately, there's nobody who
uses Minix in the real world. If you use Linux or the BSDs, you find out that you get an operating
system that is used by hundreds of thousands of people, if not millions of people around the world,
and that you can actually apply the information that you know, and now, as you know,
after you leave university, you can also use things like free DOS, which is an open source
implementation of the DOS operating system. You can look at the entire GNU compiler suite.
The only existing implementation for implementation of ADA is actually a free software project.
You can look at the, you can use compatibility tools on top of Microsoft to be able to teach things
like shell crunch and shell scripting. But you should use portable languages, not visual
basic or visual scene. Use the portable languages to come from the GNU compiler suite to teach
programming. If you want to teach.net, for God's sakes, use mono instead. Mono allows you to write
code one time and run it across a variety of different operating systems on top of a.net framework.
And then use Linux because it's used on one half of all the server system shipping today,
most of the supercomputers in the world, and a lot of the embedded systems.
But it's not just computer science we're talking about. If you're teaching engineering and
sciences, 3900 applications are on source forage for things like chemistry, astronomy, and all those.
You can look, if you're teaching humanities, this project Gutenberg, which has over 100,000 out of
copyright texts, copies of Mark Twain, Huckleberry Finn, you can teach English as a second language.
Why make your people buy books when they can get this stuff? And this is searchable electronically
so you can you can search and find passages and things like that.
If you're teaching business, give them to think about open source projects and open source
businesses. How do you make money using open source? Challenge them to do that.
K through 12, there's lots of software out there for that. And MIT is developing a lot of software,
race, university, live universities, put into software. There of course is open a net for free so
you can learn from them. If you're looking for a administrative software, it's a project called
SAGOO. It's used as 60 different universities, compare this to having to pay millions of dollars
for something like people soft and still not having it work. There's programs for running
libraries, there's content management systems for putting up websites like Drupal Plone,
Jumlin, others. You can introduce free software to your students. If you have a university program
for giving them inexpensive laptops, don't pay the Microsoft tax of having that. Use free software
instead. And you can create CDs of free software that exist both for Windows and for Linux to be
able to make it so they don't have to worry about paying licensing fees for open for Microsoft
Office or other higher level programs. You should contribute to the open source movement. Make
your code GPL whenever possible. There may be times you feel I just can't do that. That's okay.
It's your right. You created the software. You can contribute to the community, whether it be old
hardware, do you contributing documentation or even new hardware. Buy somebody a video card you
would like to see supported. Higher free software developers. If you're hiring a systems administrator
for your company, if you're hiring a programmer for your company, why not hire a free software
developer? Why hire somebody that's only worked on proprietary software? Why not hire somebody that
has experience with both places? If everything is equal, hire the free software programmer.
Instigate. You can wait for somebody else to do something or you can do it yourself. You are in
control. You can create a community. You can form a lug. You can have an mailing list set up.
You can start things going. Evangelize about free software. Tell your friends and your neighbors
about what you're doing. Write articles. Talk at conferences. Pick out a subject that you would
like to learn about. You can be just as expert on that particular thing as anybody else.
You can start to write the articles and talk at the conferences and fly around the world.
I can retire. Then fight for your rights with regard to copyright patents and DRM
and bring two windows to the next Linux conference, and particularly this one.
Support your distribution vendors, port your vendors who use free software and a community in general.
We not only have a cute penguin as a mascot, he also drinks beer. I think he's Irish.
And in summary, open software is not just about the software itself. It's about openness everywhere,
including our government. And just remember on the internet, nobody knows that you're a dog.
Thank you very much.
You have been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by a HPR listener like yourself.
If you ever considered recording a podcast, then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dog Pound and the Infonomicon Computer Club.
HPR is funded by the binary revolution at binref.com. All binref projects are proud to sponsor
by lunar pages. From shared hosting to custom private clouds, go to lunarpages.com for all your
hosting needs. Unless otherwise stated, today's show is released under a creative comments,
attribution, share a like, please don't so like this.
