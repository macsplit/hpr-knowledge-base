Episode: 4059
Title: HPR4059: the southern cross
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr4059/hpr4059.mp3
Transcribed: 2025-10-25 19:06:44

---

This is Hacker Public Radio Episode 4159 for Thursday the 22nd of February 2024.
Today's show is entitled The Southern Cross.
It is hosted by Brian in Ohio and is about 12 minutes long.
It carries a clean flag.
The summary is another retro computer.
Hey Hacker Public Radio.
Brian in Ohio here.
I'm from America doing another episode to try to keep HPR going.
For people who are sitting on the fence or saw a few emails about people who have shows
that they've been working on for a long time or sitting in the can but have been edited,
just upload those things.
Content is better than quality.
It's really a shame that podcasting has gone into this form where everybody has to try to emulate
national public radio or even the no agenda show.
There's a lot of talk about audio quality and I think that it's sad because
I can remember as a child clinging to my AM radio listening to Ken Burns,
a famous assassinated talk show host in Denver, Colorado.
I listened to him and on the crackly static he shows my little AM radio.
I didn't care about quality.
I wanted to hear what the man had to say.
I think we want to hear what you have to say.
We don't need it to be perfect.
My last episode is proof of that.
The sound quality wasn't...
There's some clicking noise in there.
I'm not going to apologize for it and I don't know why I did it.
I'm just not going to go back and try to figure it out because it was just a short episode
about dumping a ROM.
We're not trying to make money here.
We're just trying to entertain each other, inform each other, have fun,
and continue to talk about free software, free culture, that's all good stuff.
Please, if you have shows, upload them.
Don't let them sit on your hard drive.
It's no good to anybody.
Today, show about another acquisition.
This is getting crazy.
I found this, another eBay find.
I'm sticking to Z80 computers.
This one is not a kit.
I found a Southern Cross.
The Southern Cross Z80 Singapore computer was developed by a man named Chris Jones.
It came out of the Talking Electronics Tech 1.
Tech 1 was introduced in 1983 by...
I forgot the guy's name, but he's a crotchety old Australian guy who has...
There's still stuff on the web about his projects and circuits and electronic stuff.
Anyway, so the Tech 1 was a single board computer that I, although I can't really find this anyway,
or maybe I did read it somewhere, but I think it was influenced by the Kim 1.
The Kim 1 was released in 1976 by Moss Technology.
Now, the Kim 1 was designed by the designers of the 6502 microprocessor.
It was a way to get people using the 6502.
It was specifically a commercial product to get people using the 6502.
Tech 1 was really designed specifically to get the ordinary bloke involved with computers.
It was a hobbyist level computer, but it has a similar idea.
It's the minimum kind of sort of what the craters thought were.
The minimum components necessary to have a functioning kind of computer.
And what it is is it's got some seven segment displays.
It's got six of them. It's got some keypad with where you can put in hex values.
And you can examine memory somewhat.
You can't examine memory, at least I haven't figured this out yet.
From the keypad, you can examine memory like you can on the membership card.
Membership card has a lot more access to the internals of the Z80 chip itself.
The keypad on the seven cross is much more, you're just examining the RAM and the ROM from the computer.
You're not really looking at the internal registers.
As far as I know, there's probably ways to do that and I'm not completely up on it yet.
Anyway, so it's got a keypad for entry.
And what you do is when you power up the board, it shows you an address in hexadecimal,
which is 2000 hexadecimal.
And that's where the start of RAM.
And then you can insert via your keypad data into those starting at 2000.
You can insert values that represent a program, machine code.
And then you can go back and you can make sure it's okay.
And then you can run it a simple couple of keystrokes and you can run your program.
And the board itself, I'll include a picture in the show notes.
Because here in a podcast, although they say a picture is worth a thousand words, I'd say a thousand words is worth a podcast.
So here I am.
The board I got is version three.
There seems to be one more revision after that.
There's nothing that I've seen.
It's really well labeled. It's nicely laid out.
Every component on the top has a label.
And if it tells you what the device is generically, an example would be.
IC number nine is a 74C923.
It's a keyboard encoder.
That's all on the mask on top of the board.
And so all the components are labeled.
You can power it with any nine volt source AC or DC.
It's kind of cool. You can stick an AC or DC into it.
Nine volts and it'll power up.
And then you have choices of clock speeds.
And you have a fast clock and a slow clock.
It's clocked at four megahertz.
It looks like the fast clock.
Slow clock is some reduction of that.
I haven't looked at closely at the circuit.
And then there's a speed control to further manipulate the speed.
And there's some built-in programs in the documentation.
There's some kind of chip tunes.
It's got a little tiny piece of buzzer, little tunes that it'll play out.
And then there's some in the documentation that's available.
There's some programming examples that allow you to modify the songs and stuff like that.
Just to get yourself working into working with machine code.
So that speed adjusts the frequency of the or the speed of the tune.
And then there's some demonstration programs of flashing segments on the LEDs.
And you can slow those down to see it happening.
It's a nice white board, white in color.
And this came, I did not assemble this.
This came assembled from the eBay store that I bought it from.
And it seems decent, decent souring job, nothing too bad.
And it worked right out of the box.
It's a nice little board.
Let's see what else do I have to say about it.
It's probably easier to program than the Z80 membership card,
only because it's a little bit bigger in size.
In the end, you're still doing hand assembled machine code.
In other words, you're going to write down the machine code on a piece of paper.
And then you're going to get the op codes and you're going to translate it.
And then you're going to put those in.
You're not going to write the next programming language on this thing.
By hand, you're going to want an assembler at some point.
But it gets your head wrapped around what assembly is, what machine codes are,
what are the common machine codes that are used?
Because the Z80's got hundreds of machine of op codes or things it can do.
The board itself has got a couple of nice expansion break-up boards you can solder up to.
So everything you can add components to it pretty easily.
And really, it's encouraged because it's one of the things that you'd want to build.
Early on would be some kind of bit bang serial interface.
There's in that same documentation.
Oh, this is all at the GitHub site, which there's a link in the show.
There's documentation on how to build that bit bang serial interface.
Bit bang serial is where you're...
It's not like you're just plugging in a chip and doing it.
You're having the microprocessor do the timing and everything to get the serial interface.
So you can communicate and upload programs and save programs onto a more modern machine.
So there's plenty of projects out there.
There's a YouTube channel.
I put a link in that.
Ready Z80, I think it is.
This guy sounds Australian.
Could be a Kiwi, I don't know.
One of those countries.
And he has...
I've got a link to one of his episodes that specifically talks about Chris Jones,
the development of Southern Cross.
He's got some other episodes in his videos that he's done.
The latest one being the Tech 1G, I think it is,
which is actually the first...
He says it's the first fully open source Tech 1.
So there's still Tech 1.
Droid is out there.
I guess there's an active Facebook group.
I'm not part of that, but it's out there.
So I think if you're interested...
If you're wanted to learn about retro computing and you don't want to...
And you want something a little bit less expensive.
The Tech 1, Southern Cross.
You can get the Gerber files.
You can have one of these board productions.
How does it spin you a board?
And just slowly get the components.
And it wouldn't cost a lot of money to put one of these together.
And then you can just learn how to do assembly language
and learn how machines, how computers.
Even today, there's transfer of knowledge to modern day computers.
If you're not into that, don't worry about it.
It's not a big deal.
It's kind of fun.
And it's an interesting look into the past, into machines that are pretty understandable.
And very useful.
You can actually make things do things on these computers.
They're still useful today, I think.
Yeah, anyway.
I think that's all for this episode.
I would encourage everybody again to pick up a mic.
Make an episode of yourself, your own retro computers.
If you have any questions, or if you have any comments, go ahead.
And either shoot me an email or you can record a show.
So with that, I'd like to, I'm signing up.
Brian and Ohio are signing up.
And I just want to remind everybody about Sturgeon's Law.
Especially here, well, it's not just here,
but wherever elections are going on right now.
Just remember Sturgeon's Law from 1951.
90% of science fiction is crud, but then 90% of everything is crud.
Bye-bye.
You have been listening to Hacker Public Radio.
Hacker Public Radio does work.
Today's show was contributed by a HBR listening like yourself.
If you ever thought of recording podcasts,
click on our contribute link to find out how easy it really is.
Hosting for HBR has been kindly provided by
and onsthost.com, the Internet Archive, and our sims.net.
On the Satellite status, today's show is released
under Creative Commons Attribution 4.0 International License.
