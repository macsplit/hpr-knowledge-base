Episode: 3128
Title: HPR3128: Linux Inlaws S01E11 The Python Bumper Part 2
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3128/hpr3128.mp3
Transcribed: 2025-10-24 17:26:13

---

This is Hacker Public Radio Episode 3128 for Wednesday 29 July 2020. Today's show is entitled,
Linux in Laws Season 1 Episode 11, The Python Bumper Part 2,
and is part of the series, Linux in Laws. It is hosted by Monochromic,
and is about 68 minutes long,
and carries an explicit flag. The summary is,
the traps continue to shed more light on our beloved programming language.
This episode of HPR is brought to you by AnanasThost.com,
get 15% discount on all shared hosting with the offer code
HPR15, that's HPR15.
Better web hosting that's honest and fair at AnanasThost.com.
.
.
.
.
.
.
.
.
.
This is Linux in Laws, a podcast on topics around free and open source software,
any associated contraband, communism, the revolution in general,
and whatever else, fans is critical. Please note that this and other episodes
may contain strong language, offensive humor, and other certainly not politically correct language.
You have been warned. Our parents insisted on this disclaimer.
.
.
That's the content is not suitable for consumption in the workplace,
especially when played back on a speaker in an open plan office or similar environments.
Any miners under the age of 35,
or any pets including fluffy little killer bunnies,
you're trusted guide dog unless on speed,
and Q2T rexes are other associated dinosaurs.
This is Linux in Laws, season 1, episode 11.
The Python bumper part 2.
Good morning Martin, how are things?
Good morning Chris.
I'm good how are you?
I can't complain.
What's the point anyway?
It's not a very good use of energy indeed,
but some countries make a national sport about this.
Did that should be one of them?
No, sorry, the English.
Yes, indeed.
The tea is too warm, the weather is too hot.
The beer's too cold.
The beer's not warm enough, that sort of thing, exactly.
Indeed.
So before we get started with the second part of our bumper episode about Python,
let's talk about news.
Understand that you lost some money recently?
Not personally, the timing is perfect.
Yes, for me today's episode is a little bit about hacking.
One being a hacker public radio, which has clearly been hacked,
because one of our episodes mentioned something about two OAPs episode,
and I'm not entirely sure who put this in.
Yes, that was me actually.
I'm sure it must have been.
Because we are old, there's no point in dying this Martin.
There's no point even living in denial.
Well, I'm not sure about you, but I'm certainly not drawing a pension.
Well, you are.
You are over 50, right?
It's close to pension years age now.
You're planning to be guessing on your magnificent share options.
I can't be talking about this in public.
I could.
It was just for share options anyway.
Yes, yes.
This brings me on to the second point of the news.
You are obviously already retired on the back of your 1.9 billion new managed to siphon off.
If anybody's listening, this is known in the trade as a false accusation.
Well, you have to obviously pretend this is.
Martin, I'm not in jail.
I'm not doing this recording in jail.
I'm still a free man.
Well, so dear listeners, if in future, our dear colleague is not a little longer turning up for the recording,
so we know why that he has been found out.
Martin, if I would be having 1.9 billion under my belt right now,
or wouldn't be talking to you, rest assured.
I don't think it would fit, personally.
But also, did you not recently visit the Philippines?
No, I didn't.
But maybe Martin, you care to elaborate what this is all about.
Before our listeners get even confused more.
Oh, I'm sure our listeners have.
Yeah, so I mean, this is yet another surprising episode in German company failures.
Obviously, that was the famous German automakers debark.
That's okay.
I'm sure we all remember Volkswagen.
But, yeah, so the current news is our friends at Wirecard, a German tech company,
which has somehow misplaced 1.9 billion of euros.
They even had it to start with, because that's unclear.
You might be just looking at book cooking big scale, big time.
So, yeah, I mean, this is a good answer.
Good answer, yeah.
And no, Martin, I'm not in possession of that money.
In case you're still hungry.
Okay.
We believe you, I'm sure, yes.
No, it's a bit sad because there's a bigger picture involved.
What do you know about Baffin Martin in this context?
How much is the Baffin?
No, Baffin.
Bundes Austria-Fewfinance.
The installation was something like this.
Our national regulator comparable to the FSA.
It sounds like a general German government body of some sort.
Yeah, they're part of the foreign ministry of economics or something.
No, it's essentially, I think in the UK, you know the FSA, the financial security agency,
I don't know, I was talking about this.
Essentially, it's the national regulator.
And for one of a bit of expression, this podcast is explicit.
They fucked up big time too.
Because about what, half a year ago, a year ago, some flotters,
as in last year or the year before don't quote me, they actually prohibited shortening wirecard and stock.
Nice.
And of course, they should have been on top of this.
But then they weren't.
So I'll be loving federal minister for finance or even for economics.
I don't remember this exact title.
It's already calling for Baffin reform.
Meaning the whole thing didn't go down too well for the Baffin itself.
OK, I mean, there's also the question of these, you know, the auditors to be released.
Anderson Young KMG, yes.
Already law firms are gearing up with regards to potential compensation claims.
Because Waka just went into receivership as of I think used it this week.
There's nothing much to be getting from that company anymore.
Because if you are in receivership, this is the same in the OK.
You ask this up pretty much frozen.
Nobody really can get a hold of a park from maybe employees with regards to get paid or something.
Anyway, it doesn't matter.
But being a stockholder, you are very at the very bottom of that list.
Meaning these law firms are now taking a very serious look at the auditors to see if they can be what's what I'm looking for.
Help account.
I was going for a much more explicit description.
Dracked in front of a caught screaming.
That's exactly what it was.
Yeah, good.
It sounds like they need to.
Yeah, I think that that amount of money overnight.
I think Ernest Young is the...
To main auditorium who kind of really apparently screwed up if news coverage is anything to go by.
Indeed.
Indeed.
So, yes, not entirely an open source related news, but it just sort of...
Yeah, it's structured out for me.
Reminding me of the Volkswagen one.
And then thinking, what's going on there in Germany?
What is Chris doing all this with his spare time?
Apparently Martin has lost enough of a lot of money that he previously had in Wirecard stock.
My consolation Martin.
But don't worry.
They're still this silver lining under rise.
And just go for these law firms.
Say you are stockholder.
Let's sort you out maybe.
Okay, my piece of news, yes.
Yes.
A certain Linus talklet has said that...
Oh, yes, yes.
The one with the Linus car thing either.
Said that the upcoming version 5.8 would be the biggest ever, right?
Until 5.9, surely.
But hey.
Yes.
Did we not cover this last time?
Maybe we did.
So in that case we have to cover it out.
I'm sure we covered Linus and...
But we could throw in a teaser, actually.
For an upcoming interview with a certain Leonard Pettering.
Ah, yes.
Of reverse glass painting.
Exactly.
People you heard it here first.
Leonard has...
I wouldn't say exactly confirmed, but hopefully promised to make the appearance on this show.
Probably pensed in for August September timeframe.
Unfortunately, because of Martin's previous rant about polls,
he explicitly said, we cannot talk about over here.
We cannot talk about polls.
We cannot talk about system D.
So Martin, you cannot mention death one.
The obelivered district that using left art and center.
We cannot do this.
Oh, we can mention death one.
So it's...
Let me show it interview in that case.
It's strictly about Buddhism.
It's strictly about reverse glass painting and calligraphy.
This is what we read on, right?
No open store stuff.
If...
I'm sure the abolitionists will look forward to that.
Especially...
Especially no controversial things like system D, right?
That's the important bit.
So people, if you ever wanted to hear a Leonard Pettering's views on reverse glass painting,
that's the episode to check out.
More later, let's leave it at that.
Buddhism as well.
Yes.
And let's cut over, rather.
Let's go to the second part of our Bump episode on Python.
The following contains the second part of the two part Python miniseries.
As listeners who checked out the previous episode may recall,
our two chaps were discussing the different concurrency models offered by Python
and how they are mapped onto parading system kernel and user-land mechanisms.
In case this doesn't ring about, please go back to season one episode 10 for the details.
Okay.
I hope that explains the significant difference performance-wise between mere user-land abstractions like all routines.
And the more heavy stuff...
Sorry, the heavier stuff, rather, to use correct English.
So when it comes down to multi-processing, multi-threading, of course,
you all have these abstractions as part of the standard library that Python offers.
There's something called the multi-processing module that contains these abstractions.
While we're on the subject of stack list, there's also a very important one.
Is that correct word?
An interesting, an interesting event open.
Let's put it this way.
The language community, and this is penciled in for Python 3.10,
is actively thinking about something called subinterpreters.
Before I go into the details, let me take a step back here.
What do you know about the GIL model?
The global interpreter loop?
Global server lock.
Yes, I mean this is obviously similar to any looking mechanism
if you have concurrent, in this case, threads.
As you explained, accessing the same address space,
someone has to have a view of who is currently dealing with it.
Yes.
The global interpreter lock is what it says on the tin.
Essentially, it's a lock inside C-Python
that controls concurrent access to various bits and pieces inside the language runtime.
And the idea is with separate interpreters
to essentially have more than one interpreter,
and I think if I'm completely mistaken, with separate guilds
running inside one or separate or different processes,
more often than, of course, for performance reasons, inside the same address space.
Meaning you have something very similar to Acing I.O.
without the expense of having to do a context switch
when you want to switch to a different address space.
I think it's penciled in, as I said, for Python 3.10.
It would be interesting to see how this develops
in terms of giving a chunk of Python code their own interpreter
with their own GIL in terms of increased concurrency on a C-Python level.
I need this to say similar to coroutines and other approaches
and stackless, of course.
The idea is not to bother the kernel with context switches,
but rather keep it efficient on a user-day level.
IE, it remains in C-Python,
and the kernel doesn't get involved with regards to expensive operations.
Okay, so I mean it's all interesting stuff.
I mean, it's for me, it's been quite far removed from the OS for a long time
since back in the day when I studied at university.
This is the trouble when you involve yourself just too much
with database administration.
You leave?
I mean, databases have concurrency and lots of apps.
Yes.
It's a lot of concept there.
But they're boring.
I can see the...
I used to think operating systems were boring,
but there's...
Do you have some view on it again?
You have no idea.
Indeed.
Okay.
Can I help you with any other Python related questions now?
Yeah, you're smart.
Okay, let's go back to where we were doing.
I'll come back to me at some point.
Right, so...
Yeah, so we talked about why people use Python was good for a bit about the compiler side
and stackless to the multi-processing parts of it.
So you mentioned Python 3.10, Python 3.9, why, for example...
Oh, wait, wait, wait.
Hang on.
The focus group, sorry, market...
Marketing just sent a mail.
The focus group is missing from this discussion.
What does it say in the mail?
Comparative type checking, yes.
Yes.
Yes, okay.
Do you do you have any idea why the focus school came up with this?
Because they have a point there
Well apart from that marketing as usually did a proper job here
Right now, I mean this is because developers are useless
Which is why we have compilers to people check their mistakes people you'd we're gonna cut this out
I hope
Because in insulting listeners in targeting listeners on podcasts especially open source ones is not really on mountain
You think we have a developer amongst our five business
I think we we a we have more than five we have more than five listeners maybe six. I don't know I know it's pushing it
But certainly a fair share of them would be the one of us. Yes
Okay
Yes, what are the advantages of strong be it's hard programming languages coming from a sequel background. I'm not at
From a sequel back. Yes, well see I mean dead bases have types right in the main
The advantage of any typing system is that you allocate the minimum amount of space for whatever it is you're trying to store
Yes so far so good that that that that's one the second is obviously
are able to
Execute the appropriate functions with it or
Yeah, that's the right technology. Basically you don't want to
Do any arithmetic on strings and then way around right so it's it's it's mostly preventing
errors in
Code by checking it at compile time rather than
When it is running
I'm basically saying yeah if I've declared something as a string I can't do
You know the square root of it excellent excellent excellent anymore. Oh, yeah, I'm just running does the does probably one language called rust ringabell
Well
It's one of these hips are like which is strongly typed
Yes, for those few listeners who do not know Rust yet, it's a broken language that has been developed by Mozilla since 2010.
I'm almost tempted to say the ultimate goal or the wet dream of strongly taught languages.
The idea was to develop a low level system oriented program language with extremely strong typing.
And in contrast to C++ and other approaches, Rust has one of the ultimate aims of Rust is to be able to generate extremely efficient code and also to cut down on testing efforts.
So there's actually a saying in the Rust community. If you can convince the compiler to produce code, you're almost done.
Because the Rust compiler does one thing very well. It takes your code apart and puts it back together again.
Rust has a couple of traits and before I look back to Python, let me explain a little bit today.
For example, Rust, for example, doesn't have garbage connection unlike GoLung and other compiled strong type languages, strongly type language.
It relies on sophisticated memory concepts like ownership, borrowing and so forth. RustLung.org is your goal to source people if you want to know more about it.
But one of the side effects of the strongly typed language and with the in combination with these concepts is that you are being a Rust compiler that you're able to literally do an awful lot of type checking already at compile time.
So you know, for example, at any given time who owns a variable, you know the scope of the variable.
And so you can do an awful lot of optimizations already at compile time and doesn't have to refer this to runtime.
Like for example, some of the just in time compiles to it job are probably being the best example.
So you can you are able to generate machine code then and there and you're also able because you did a thorough analysis of the of the code, you're also able to generate very efficient machine code.
And this is kind of the ultimate goal and Python on the other side has wasn't developed with that goal in mind because the idea was to shift type checking from the compilation phase, which isn't really there anyway.
Because essentially what what see Python does it takes a program code passes it construction abstractions, actually as explained before and then executes an intermediate code generated from this AST and only then the type checking does take place.
For example, if you are defining class in Python that has a certain fingerprint in terms of the methods you define the you define in this class and these methods of course have their own signatures in terms of what variables they define these variables typically do not have a type.
So you can pass whatever you want to it. So it's up to see Python at runtime to determine if the variables for example match the signature or even if a particular member function is part of a class definition.
It cannot do this at compile time because it doesn't have a compile time as such it has to do this at runtime also for example if you have inheritance it is in contrast to other languages like Java or C++ it's only determined and runtime what particular polymorphic function is invoked.
And of course that cost time so the idea was at some stage to introduce a somewhat gentle typing approach you see this actually in the perhaps in the in the parts and enhancing proposals where people more initially more on the IDE front decided to introduce types in terms of tell the IDE
what types that have in mind when they for example implement function the idea was of course to give the IDE a hint to do some sort of checking already at editing time meaning if you hand over a piece of Python code to the interpreter.
The chances that your program will bark at you because the path is not able to execute the program correctly because you've made a mistake is less than before meaning if you take a look at pie charm if you take a look at visual study code or the plugins are for Python to some extent at least support typing already meaning if you annotate your your source code.
The IDE is already able to give you hints of what's working at what and what might cause problems at runtime it goes without saying that from a language standard perspective this typing is purely optional it's in the perhaps it's in the perhaps but you don't have to do it you can hand off the Python code to you see prior to your see prior to the interpreter here without typing and he executed happily but the idea is of course to save money and time before you even execute the program.
All concept behind this makes sense so far yeah that's what now I mean it's I do like this small man time I spent on rest as well I'd say you did spend time on rust what did you do what did I do well I looked at something she gave me you cut you copied and pasted some of the rest by example things and wondered what they do.
I decided to read the accompanying blood as well.
Excellent.
People people not on hopeless loss we may be able to turn Martin Vester at the tender age of.
Okay let's pass on this one into a hip-hop programmer at the end of the day hopefully this is the ultimate game.
Now I mean compared to I say Python it doesn't have the whole modules behind it.
Oh it does it's called the cargo ecosystem.
Yes it's not in the same same vastness that's put it that way being concealed.
You want to you want to double check this.
Okay.
Python has at least four web frameworks that come to my immediately jungle flask and the other ones are pyramid and something else the two account remember rust has four to choose from.
The difference being 15 years.
Rust is about 10 Python 25 plus.
Yeah.
If you take a look at the last stack overflow language survey I think rust was among the top five languages.
There's a reason for that.
The echo the echo system is developing rapidly with rust.
Just take a look at craids.io.
This is your go to source similar to pie to the Python package index for packages.
So chances are similar to Python there might be a crate with the functionality already being implemented that you're looking for in rust.
Okay.
That's fair.
I haven't gotten that far yet.
I think that's chapter five in the book.
It's quite a long book.
Yes.
Probably like we just do have the intrinsic disease and sometimes it does take time to learn them. Yes.
So you I mean if you want to go down that route and life so caught life doesn't help.
I don't.
I'm sorry if I could resist.
Thank you.
That's very helpful.
Well this is why we have handy.
More than happy to.
Yes.
Text support guys on that.
Very helpful.
So what number is anyway so I was going to say was I mean popularity or program in language right.
This is what is this doing by this is not driven by how good the modules are or how the type checking is right.
This is not how things work.
No, it's part that it bolts on to you.
You do a pretty bottom.
You do pretty much a bottom implementation that basically scrapes the likes of Shelby and and stack overflow.
And they're in off you go.
It's rigged anyway.
People you didn't hear this.
That was a joke.
Stack.
Stack overflow.
In service are not rigged.
They're real.
For a reason I might add.
Stack overflow by the way.
You're doing a pretty good job.
If you're listening full marks.
What are the ingredients for their popularity counts.
Questions answered it from a completely mistaken and they do.
And they do a survey too.
They have multiple vectors feeding into the survey and.
I think we can vote for program language or technologies in general.
Actually, you're wrong.
The rest is on top.
See.
And that of course makes it one of the top five.
Just to be correct, you mark.
It is however not in the top five of most wanted languages.
Okay, fine.
Interesting point.
Sorry.
Yeah.
You can cut this out.
I've never actually looked at me.
I mean, it's the survey part.
But I don't know if there's any other part to be stack.
That's also something called the importance of being earnest.
Effectually known as Chio Bay.
That is another language index.
Yes.
If I care to remember I'm going to put this into the show notes.
They have more than the book.
That came earlier.
No, I'm talking about the problem that is popularity index now.
I think it's a Danish company.
They take more than just stack overflow and friends into account.
But similar to sick overflow, they do an annual serve of just program languages.
Okay.
And contrast to sick overflow that does a much more encompassing survey.
Also, including database and other way to where.
If not a completely mistaken.
Yeah.
Yeah, so partner was the most question language.
I mean, you see this all over the place.
For example, there's a significant movement in the big data community of abandoning R,
which has been the standard go to.
Yes.
Which in favor of Python.
Indeed.
There's a bad idea.
Never mind MATLAB.
Which is the first proprietary.
Yeah.
No, I can't.
Compared to especially the matter.
I mean, and of course.
Sorry.
That remains to be seen.
I mean, you probably heard about this.
There's this database company that does a pretty popular no sequel in memory database.
And they have recently developed something called Gears.
That allows you.
No, no, no, no, no, no, no, no.
Redis.
I'm talking about no for change.
And actually you can script now.
One of the most popular no sequel in memory DB servers in Python.
Meaning that you can ship off your Python code to the database server.
And the database server would execute this as part of a C python standard implementation on the server itself.
I wonder who came up with the idea.
Redis labs.
Now he's been done before database display.
It's okay.
Sorry.
Only with only with crappy languages like sequel.
Not with real ones.
That's the difference.
Oh, I see.
Well, they go together right now.
Redis, if you're listening, we're opening for sponsoring slots.
Do get in touch.
I'm just saying.
If you think that the car level.
Sponsoring is not good enough.
Get in touch.
Yes, we may and may mention you a bit more frequently.
We can certainly do something about this.
We know all marketing people to just reach out.
Indeed.
Okay.
Does that bring our Python discussion to you?
No, it doesn't.
I think we still have this.
Python 3.9.
Yes.
Okay.
Noteworthy.
A new parser.
Yes.
I think we're attached upon this already.
Gido isn't happy with the existing LL1 parser.
So he's coming up with this.
Yes.
Why?
Because if you take a look at the path,
there are certain efficiencies with the current implementation.
Limited look ahead, for example.
The ability only to parse.
What is the context?
The certain level of context sensitivity.
The idea is basically to replace the existing LL1 parser
with something called the PEG parser.
I don't know what this stands for.
Pausing expression grammar.
That's the one.
Thank you very much.
Using a more efficient, hopefully parser implementation.
I mean, given the fact that this hasn't really changed since I think Python 2.
Because since then, Python 2 has always used an LL1 parser.
That's a pretty radical change.
But only under that.
Because Python will stay the same.
You're just changing the parser implementation.
Yeah.
It is not really a noticeable change from a.
Python Europe perspective.
Changing the engine underneath.
Correct.
Sonaria.
Yeah.
I'm sure.
And yes, when I wrecked the pep some time ago,
before I probably had too much beer, but we can cut this out.
The current at one implementation doesn't do a pretty good job on AST generation,
as in the Apples Index tree.
And Giro hopes with the pep that the AST generation will then be streamlined.
This is the overall idea.
Needless to say, also increasing the AST generation speed.
Because that's if you take a look at a benchmark where C Python spends its time,
AST generation is a good chunk of this.
And every macro second you can shave off here will lower the startup time.
If you're feeding it, you're usually a couple of million lines of code as part of your Python code base.
A couple of million.
The likes of Dropbox and so forth.
Like the big code base in Python.
You'll notice it also with a couple of thousand lines, but the increase won't be that visible, of course.
That's not the bad idea.
Okay.
Right.
Excellent.
So yeah, so it's still very much a developing a live language, which is good.
I mean, this is what the pep process is for, right? And making improvements.
Of course.
I mean, you can improve anything, right?
But it's whether there is multiplication or I need to do it.
So, but it's good to see that there is something on it.
Okay.
Anything else in 3.9 that tickles your path?
Not as far as I can remember.
I reckon there's a multitude of improvements, but this puzzle thing just immediately came to mind.
Okay.
But then I only read the peps every second day, not every day for breakfast.
So that's okay.
What is the rest equipment of a pep?
It's called a, I knew it.
No, it's not a rap.
It's a request for a proposal in RFP, I think.
Yes.
It sounds.
Okay.
Oh, yeah.
Or request for improvement.
It's a rustline.org.
There's a similar process in this.
It's a rip.
Yeah, that sounds good.
There's a similar process in place.
Check out rustline.org.
There's also, I think, a podcast tackling the, the, the, the, the improvement proposals.
But the community process is pretty similar to the existing, to be now existing.
Community process in Python, because rust doesn't have a BDFL from the completely mistaken.
Okay.
It's government.
I think even Mozilla, I guess it came from Mozilla.
Yeah.
Mozilla handed this to the community and it's now done.
Why am I doing this?
No rest of it as usual.
Cool.
But is that some, who makes the decisions on these?
Yeah.
I think there's, there's some sort of community process in place.
Okay.
Um, maybe there's an English community similar to, to the one of birth, to the one in Python.
I do not know.
Yeah, yeah.
No, no, no.
I'm just curious.
It says.
But I like Oracle with its community process.
Yes.
It's a real community one.
If I'm now completely mistaken.
Because I think the community process for Java doesn't deserve its name.
If, if memory serves correct.
How do you such a thing?
There is.
But it's, yeah.
I mean, I mean, the alphabet isn't still as with Oracle.
Yeah.
Okay.
All right.
So, um, final word on Python.
Use it.
Simple.
Okay.
I think many, many people do.
Yeah.
Okay.
Okay.
Okay.
Okay.
Is there anything else?
We talked about peps already.
Um, if you encounter anything that you, that it doesn't make sense.
Three feet to go to Python.org.
Um, as in the sketch does revolve around the notion of peps,
but we tackled this already.
Um, if there's a specific pet number.
Yeah, that's five seventy two.
Uh, for the benefit of the listeners, this is actually the pet where he decided.
He had enough of the shit and decided to return the benevolent,
the benevolent digit of life ownership to the community.
Um, pet percent.
And I think the, um, the sketch revolves around this five seventy two.
For the benefit of the listeners, essentially, it's an amendment to the language syntax.
That wasn't exactly, um, a runner.
Let's put it this way with the more purest.
There were, yes.
Um, members of the community.
That way.
Um, that do not necessarily, um,
wash with the community.
Let's put it this way.
Well, what's with the community, but they're also, there is probably worth mentioning.
The design of Python.
Yes.
You want to end that context?
You want to explain the design of Python?
I think there's pet eight, right?
Or pet four.
I don't know the number, but there are 20.
Perhaps, yes.
Um, but, um, yes.
So, like any good open source project, um,
they have a set of rules, guidelines that they'd like to adhere to.
Um, and which is called the Zell of Python.
I think it's peppermint.
You're right.
Yes.
Um, so you got to be concise.
Uh, no shenanigans with the neighbors.
Smoking isn't allowed.
You have to indent with four spaces or a tap.
Um, um, and no curry biceps.
Yeah.
So that was a mistake, right?
No, no, no, no, actually that's not in the, no, the tap stuff isn't in there.
Um, but, um, yeah, the, the vegetation certainly is.
I hope you paid no to, uh, rule number 16.
Anyway, let's not discuss the Zell of Python.
It's, uh, you should, uh, anybody should read it.
Yeah, I think.
Martin Schrodinger.
Hmm.
Even though there's only 19.
Yeah.
There is.
I think there's more than one 800 of them these days.
No, no, no, perhaps 19.
I'm quite real sorry.
I'm confused.
The Zell of Python contains 19.
Oh, sorry.
Yes.
Oh, got a guide in this or, sorry.
Um, I beg your pardon.
Okay.
So you've got to do Gido and I'm going to do the rest.
Um, and let's start later.
So it's, it's called Gido and the Morris.
And let me do the, let me read the intro.
Somewhere in a tiny house by the sea,
set amongst tulips our hero Monty is about to tuck into another piece of cheese.
To a company's evening smoke and roach.
Who you not want?
I have a problem with your walrus.
Uh, yes, it was the problem.
Uh, as far as I know, he's quite well.
A colon equal one could be used as a classic assignment and then it's hard to explain to beginners.
Why A equals one should rather be used as it looks the same and seems to behave the same.
Whatever happened to, there should be one and preferably only one obvious way to do it.
Aha.
Let's see.
You clearly are a bad programmer coming out with a poorly constructed and complex sentence like that.
I take it, you are not referring to my magnificent moustache when you are talking about walrus.
Neither are you referring to my large flippet pat marine mammal I keep on the nearby beach.
Nay.
Well, in that case dear Ralph, you have failed to comprehend commandment number 14,
which clearly defines the way.
Fourteenth's commandment, I thought there were only ten and I thought there were rules.
Commandment number 14.
This way may not be obvious at first unless you are Dutch, who you know them.
Y'all.
I'm calling to say I'm completely enraimed heading a scam.
What?
I never knew Raymond was gay.
So all the close attention on his part wasn't the token of him idolizing me?
No, no, I agree with him that there is a sudden rush to add new features to the language
and some things are getting in there that don't seem thought through or finished.
Yeah, not all on it doesn't know the commandments.
Right, check out commandment number six, really better than he counts.
Do he?
What new year?
I really don't like this idea.
It puts one of the worst parts of sea into Python while making things significantly
uglier.
Hmm, I think you're mistaken.
You can put a python into the sea but not a sea into your python.
Come to think of it, I'm not sure a python's been swim.
And they say that that's crazy, dot scenes.
Due to severe budget restrictions related to COVID-19, we were not able to afford a sophisticated
set of sound effects.
This gets deserves.
So for the following, please imagine a bus arrival accompanied by crowd noise.
Yeah, yeah, yeah.
Monty relates his smoke and takes a seat outside to gaze at the sweeping chewed fields.
Only for the silence to be rudely interrupted by a coach of Polish tourists.
I need to speak to you about my strong emotional reactions to PEP 572.
I feel that name, colon equals expression, doesn't fit the narrative of PEP 20.
It doesn't remove complexity, it only removes it, and that's a bad bargain.
colon equals also goes against having one obvious way to do it.
Hmm, come sit and have a smoke.
You don't seem to understand the usability improvements this will give.
This sounds dismissive to me.
I did read the PEP and followed the discussion on python death.
It was meant to be dismissive.
I'm tired of every cord F starting on thread about how PEP 572 threatens readability
or doesn't reach the bar for new syntax, etc.
These arguments are emotional and subjective, and I haven't even mentioned
your walking knowledge of my tulips.
I personally think that multi processing is more performant than threading.
This is how big decisions get made.
Nobody can predict the outcome with sufficient accuracy.
There's a bargain new house or new car or a wife.
In the end you decide what you got.
There's all they have in common is four wheels, in case of a car.
Some windows and doors in case of a house.
Well, I don't need to tell you about women.
I refer to PEP 20 because it distills what's unique about the value proposition of python.
It's our shared vocabulary.
It's poetry dear boy, not a set of axioms.
You can't prove anything with an appeal to PEP 20.
You can appeal it for sure, but such an appeal by definition is subjective and emotional.
There's only one way to do it.
Yes, there is. My way.
Now get up my land.
If now is greater than ever and never often is greater than right now than I T equals idea dot bad end.
Blimey, you are one special case.
But special cases are not special enough to break the rules.
Wally, go get him.
Catch warras comes down the dune and squashes pollucage.
Quoting, commandment number five, flat is better.
Okay, who's Lukash?
He's one of the people that wrote back.
He's actually quite important community member.
To be honest, you may want to look at me.
And so is Raymond Hattinger, I suppose.
Yeah.
I see.
Okay.
No, let me cut this name now.
But he, I think he's one of the five now.
Lukash, five people that govern the project.
Okay.
Now that we've covered the second part of the bomb episode on Python, maybe it's time for the feedback.
And as a matter of fact, cloud you me a run down road.
You really thought I wouldn't have done my research before recording.
Fools.
And then something laughing.
I had already found out about the new pricing scheme from the inside source in the deep web way before my review.
And given the changes and all the red tape usually involved with such things.
I knew it was worth putting that information out there for humankind to behold.
And since your assumption of my lineage was an extra benefit.
And he says, I'm not detailed in.
I can now leak this cable from Patelanza, the correctionie.
Patelanza?
Yes, it was in the sketch.
And the link actually will be in the in the show notes.
And then he says, hack the planet, the truth is out there.
I want to believe.
And then it says, thanks for the recursive recursive recursive review.
My skin is pretty thick regards.
Claudia, thank you very much for that feedback.
Much appreciated.
Now we know that we have that we gain attention all the time, which is good news.
Because there's no such thing as bad publicity, right?
Indeed.
And what does that remind you?
The truth is out there, I want to believe.
That's actually quote from a famous TV series.
Yes.
But maybe you are too sci-fi only.
And not necessarily.
Well, to some extent, yes.
Yes.
Yes.
Very good Martin.
That's still hope, right?
I knew it.
It's in there somewhere.
Yes.
We see Martin.
Yes, that means you are old.
Because that show was popular in the 80s, right?
No.
It was a bit like the 90s.
No, 80s, I think.
Okay.
Fair enough.
It featured Skull Skoulder and Mollie.
Yes.
David.
But I can't even remember a second.
David Dohoch.
Something Polish.
Yes, something.
For the occasion thing, right?
Very important.
That was actually breakthrough before he went on to bigger things.
The X-Files.
There we go.
And the ladies name is...
I do not know.
But she appeared in another half.
B-class movies later on.
I mean, that was...
That was about breakthrough too.
But in contrast to David, she didn't make much of it.
I can't even recall seeing her in a couple of adult entertainment movies.
Right.
That friends keep talking about.
Anyway, it doesn't matter.
Okay.
Sorry, I was distracted by the name.
Anyway, it doesn't matter.
I'm sure there are websites out there telling...
Which I have to tell you exactly that.
This is why people don't have memories anymore, right?
Indeed.
Indeed.
Okay.
That was the only feedback on that episode.
And again, Claude, thank you very much for this.
Much appreciated.
By the way, we love the aliens.
Martin checked it out.
Apparently, it's a photographer being featured or a filmmaker on the IMDB.
And if it's not you, it looks pretty...
Okay.
The guy is like us a little bit old.
But we just love the hairdo.
Really impressive.
Yeah, it's...
It would surprise me if it was him.
Because, you know, filmmakers, open source.
Like a public radio.
It would be a very odd hobby to have.
But this is a stranger thing that will happen, right?
Indeed.
Speaking of a fact about public radio, yes, let's give them a plug.
We are still hosting a hacker public radio.
Can you do an SN job?
Never mind the recent email exchange.
We still love you.
And hacker public radio.
And for the time being, we remain on that platform.
Especially given the fact that we now have our own RSS feed.
The witches...
I'm doing daily episodes.
Not doing daily episodes.
No.
No, we are not.
Oh, okay.
No, hacker public radio talks about...
How can one do it for us?
Between the show.
Yes.
And can that...
Your advice has been taken on board.
We will rearrange the schedule.
No worries.
Okay.
Is there anything left to talk about?
Yeah, boxes.
Yeah?
Yes.
Any boxes, man?
Apart from the one that I sent to you.
You sent me a box.
Yes.
Which one?
I sent Martin a box about a TV series called the secret diary of a call girl.
Ah, TV.
Yes.
Yes.
Have you checked out the others?
Does it have to be TV?
No, it doesn't.
No.
That was my box, Martin.
That was your box.
Oh, yes.
Okay. For those people...
Anyway, you can talk to us about it.
For those few listeners who don't know what I'm talking about.
About 13 years ago,
I think it was ITV or...
Couldn't have been the BBC because it's way too...
Too...
What's the word I'm talking about before?
Contribution?
No.
Um...
Entertainer.
Well, you see quite a bit of skin.
Let's put it this way.
And that wouldn't happen with the BBC.
Explicit.
Explicit. Yes.
Thank you, Martin.
Look at that, look at that.
Okay.
Yes, yes.
I mean, they are not as explicit as your ordinary palm move, you know.
But it's done very testfully.
But the TV series describes the ups and downs of a London-based call girl,
especially her woes with relationships.
And the bit on the IMDB and other platforms has drama,
but it's rather funny at times.
Okay.
So, Martin, if you have nothing better to do, we check it out.
Okay.
Excellent.
Thank you.
Yes.
That's a catchy title, obviously, but I didn't get any further than that.
And of course, the links will be in the show.
The link will be in the show.
Links, yes.
Yes.
Many links.
Do you have a box?
Yes.
Do you have a box to make up for the non...
Well, actually.
For the non...
Tech-related news.
Yeah, Martin's box.
Martin's box would be 1.9 billionth in his bank account.
In case anybody's wondering.
I don't think there would probably be the not very sensible place to put it.
It depends on where that particular bank account is, man, right?
I don't know.
You tell me.
I wouldn't know what you're talking about.
No, no, you don't think.
I can't really talk about these things in public, Martin.
Sensible, sensible.
OK.
Yes, so my box of the week is actually a...
1.8 billion?
No, no, no, no.
Billions involved slightly more, more interesting than money.
OK, do you remember a computer called the BVC Micro?
Oh, yeah, I do.
It was that, that was...
That was one of the first arm implementations on the planet.
It was, and the people who designed this.
Did you see? No.
Probably not.
ITV.
Mind you, Tim.
There was a couple of people who designed this.
One of them is Dr Sophie Wilson.
I came across this great lecture
on microprocessors past and future and where we are going.
It's about an hour and a half long
but it talks about the limitations and history.
It talks about the BBC Micro Arm and where our process is going.
It is very worthwhile.
This lecture is done by one of the co-designers of BBC Micro and Arm.
The link will be in the showdowns.
With a watch listen,
if you want to be less entertained
than the secret diary of a co-girl or whatever it is.
I reckon that presentation is slightly more technical than that.
But it's interesting
because this is where it all started because the BBC
who ever commissioned this computer
was looking for an inexpensive microprocessor at the time
and for some reason they didn't want to go down the Rockwell route as in 6502.
There was something called 6809 already
and I reckon that was a little bit of a precursor to that arm architecture.
This is quite an in-depth lecture.
It shows you all the microprocessor designs of those times as well
and how the arm design is different.
It's very much worth it.
If you're into microprocessors.
Not everybody is to be fair.
Risk and arm of course being probably the most used
risk architecture on the planet,
given its mobile penetration alone,
goes back to funny enough,
actually a company called IBM.
They used to do punch cards
and then they came around,
and then they had this grand vision
of that the planet only needs five computers,
what was then known as a computer.
Of course there was slightly off with that assumption.
But the rest is history,
but around the 50s, early 60s,
they designed something called the mainframe,
which is now known as the mainframe,
as in big machines,
little memory for the time,
for that time quite a lot actually,
but that was actually the precursor to
the virtualized multi-user multi-tasking
computers that we now know as Linux Unix Unix Un emit,
because the first virtualized
was actually called VM,
and that came from IBM,
and that was as early as 72 of them,
completely mistaken.
Around the same time.
You're better at dates than I am.
Which is quite funny because you are younger than me,
not much, but a little bit.
Anyway, it doesn't matter.
At the same, I mean,
in that mainframe architecture,
just to kind of briefly shed some light on this,
this mainframe architecture consisted of
what would be now called a SISC,
a complex instructions set computer,
because they had many machine instructions,
they had many address emotes on the rest of it,
and then somebody set down and said,
how can we save on this?
And they ran, or he ran,
a statistical analysis on
Cobra compilers and similar programs
and other rest of the typical applications
that were then run on the mainframe
and came up with the conclusion
that about only about 20%
of the instructions were reused.
And hence,
the reduced instructions that computer was born,
then known as ROM801.
And that was the first commercial
risk implementation on the planet,
and the rest are just copycats,
and the Rockwells of the world,
even IBM,
copied that design for something called
60-6150,
that was actually first RTPC
with a risk architecture
on a kind of PC basis coming from IBM.
I think I administered the first
machine in Germany at the time in 86
that was running a modified version of AIX.
The Unix, then being deployed on that,
on that hardware.
And of course, we all know
what came out of it, namely the power PC architecture
that was used by Apple
in the early Macs,
until they decided to go for Intel,
and now they're coming around back.
Yes, yes, yes.
Because most of you know about now,
Apple has taken the step
to something called A14,
which essentially
is their interpretation of
an ARM architecture
mostly used until now in iPads and iPhones.
And there's a little bit of a juicy story,
and that probably you should have
made it into the news,
but apparently,
this is something that was leaked yesterday
or the day before.
We're recording this on this 26th of June
by an X Intel employee
that Apple was so pissed off
with the quality
of the Sky Lake line
of CPUs that was in 2015-2016
that they decided
it's enough with Intel.
We do our own thing.
It took them about their own sweet time
as in four years,
but now they said that come,
I think the next Mac generation
they would be based on A14s.
With a lot of
migration periods
penciled in
dual binaries
as in fact boundaries,
as we had it
when they switched from
power PC to Intel.
I think what was it?
2007 or something like this?
2006?
Maybe I'm wrong.
I put a link into the show notes
for Wikipedia page
where you can read this up.
But again, they have gone
around full circle now that
CPU comes next.
Do you remember what the first IBM
PC was priced at?
That was
not the XT but the precursor
and I would be
I'm guessing now
$5 to $7,000?
Yeah, I don't remember being that
high personally, but
It wasn't cheap.
For the specs?
No, I don't know.
But in comparison to your
64 or whatever, it was
definitely 10 times more expensive.
I mean, IBM
aimed this at your
at your office environment.
Yes, commercial stuff.
Yeah, I mean, I can recall
owning a clone
in
485
because I couldn't afford to buy real
IBM PC and that clone
was the same spec for about
like that hasn't
had an 8088 in it
64 megawatts of RAM,
two floppy disks
and a later bought a heartus for this
but it was a pretty clunky machine
comparison to now.
But that was the first
that was IBM
pre-heartus. Yes, of course.
That was IBM's first
parade into the micro computer markers
on a 16-bit basis
and they chose
not some proprietary
well, not their
proprietary architecture.
Okay, people
thanks for
listening as usual. Please send
feedback. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Yes. Thank you for
listening and speakers. You speak to
you soon. And
this could be your
opportunity to sponsor one of the
most popular open source
podcasts on the planet. Both
in global listenership that goes
well into double digits, we hope.
Linux in-laws is loved by developers,
ops people, and divers, as
and DevOps alike. So
Redis Labs, Mongo and
CouchBase. If you want to be part of the
happening crowd, simply get in touch with
our sales organization at salesatlinuxinlaws.eu.
And no, sponsorship is not
confined to no
sequel database companies.
We are happy to accept donations from
operating system companies,
middleware gigs, compiler projects,
the yellow press in general, and
Brad Pitt and the Lee Shaw Card in particular.
As long as they are open source,
this podcast is licensed
under the latest version of the
Creative Commons license, type
attribution share like. Credits
for the intro music go to blue
zeroesters for the song solid
market, to twin flames for
their piece called the flow used
for the segment intros, and
finally to celestial ground for
the song suite justice used by
the dark side. You find these
and other details licensed under
C.C. Achimando, a website
dedicated to liberate the music
industry from choking
copyright legislation and other
crap concepts.
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
Music
