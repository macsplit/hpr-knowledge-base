Episode: 1038
Title: HPR1038: Interview with George Vlahavas and Andreas Born of the Salix OS project
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1038/hpr1038.mp3
Transcribed: 2025-10-17 17:48:03

---

So
Hello and welcome to HackerPublicRadio. I'll be your host for today. I'm Poki. Joining
me today very graciously is Andreas Bourne and George Vlavis of the Salis OS project.
For those who don't know, Salis is a derivative of Slackware and it's been described as Slackware
made easy or Slackware for lazy people. As a guy who's lazy and likes things easy, I can confirm
both of those. This is currently my favorite distro and has been for quite some time. I'm very excited
about this interview. Good morning gentlemen. Good morning, Patrick. That was Andreas. Good
morning, George. Also, sorry. I shouldn't have just said both yet. Good morning, George.
Good morning, Patrick. Okay, sorry. So, you're George and Andreas, good morning to you too.
Good morning, Patrick. Sometimes I get a little mixed up with screen names. So, yeah, would
you guys like to explain to our audience who may not know what is it that you guys do for
Salis? What is Salis, first of all? Maybe I'll start. Yes. Well, Salis, we started it as our own
contribution to Slackware actually. We wanted to create a Slackware derivative that would fit our
personal interests and that we could use easily on our own computers, on our own computers and
our friends computers. So, we actually wanted to create a Slackware that was easier for us
to install on our computers and our friends computers. We all knew each other, the basic theme,
the base theme. We all knew each other before we actually started saying it's from another
project, from a different project. So, we knew that we could work well together and start
another project there. We actually knew a lot of how it was going to start the technical details,
how it was going to start. It was actually very, well, not actually easy, but the backwards
lane in order to start Salis. Well, it's a Slackware based distribution with many additional tools,
with dependency resolution provided by default and many extras. So, the packages are available
are about twice as many as in Slackware itself. So, it is actually Slackware. There are not
not that many differences in technical terms in how the system works, but it has a lot of
additional stuff. If I remember correctly, it's 100% Slackware compatible as in you can
just use the tools that come with Slackware and the software distribution methods available to
vanilla Slackware. Is that correct? Yes, exactly. Everything that works in Slackware also works in
Salis, but there's no difference at all. We actually use every Slackware package that is available
in Slackware. It's also available in Salis, just exactly the same packages. So, there are no
differences at all. Anything you use in Slackware can be used in Salis. And then the other way around
actually, anything that is used in Salis can be used in Slackware. So, that's another one of our
goals. We could provide additional packages and help Slackware users in that way.
But in the past, we've also seen sometimes cases where users installed software, software
provided by us and some others Slackware software wouldn't work correctly with that, but that's
nothing that couldn't happen with a pure Slackware setup if you install that software. We offer
out of the box, so there can be some cases where it's not 100% compatible. Okay, but that's not
a repository incompatibility that was just a software incompatibility that would have happened
anyway. You said, yes, more like that. Okay, very neat. That's very cool. What was the project that
you guys worked on before, Salis? I'm a little curious about that. I hadn't heard of that.
Actually did it. We all besting the work before we start to save.
Oh, wow. Okay. So, all of you guys did ZenWalk and then you moved over to set. That's really
very cool. I don't think most people knew that. Yeah, I will say as far as, you know, what you said
that Salis's goals were, as far as I'm concerned, you succeeded tremendously in this.
It was very easy to install from me. I thought your installer was fantastic. It's very similar. I
thought to the Debian EndCurses installer, but a little simpler, I'd say there were less configuration
options in there and just what a beautiful desktop. Every wallpaper that comes with it is really
pretty and nice looking and all the themes are nice looking and I just I enjoy using it all the time.
That's a lot. The installer actually tried to do something. We tried to take the slagware
installer and dump it down so it won't be faster and easier in your stone system. It actually
looks a lot like the slagware installer without the package selection option that is in the slagware
end. A lot of stuff are really automated and they're additional configurations with the steps
with user configuration, but you have to do the slagware after you actually install the slagware itself.
All these are ultimately in our own story. And about the artwork, yeah, we kind of play a lot
of attention to detail or the combat parts. So I think we've succeeded in getting a lot of beautiful
wallpaper distribution. How did you guys come up with the bonsai tree? Well, there was some
discussion in the forum and at some point, I think, some body suggested the bonsai tree and
everybody liked it. So we went for it. Yeah, there was a lot of talk about what name to choose when
we started in Salix. We were working on Salix for four months before we had a name or a logo to
display. So there was a lot of talk on what name to choose. A lot of crazy suggestions were
were made. In the end, we all agreed to use Salix as a name and Salix being also a genus of a tree
of a willow tree. We thought that we could have a tree as a logo. So we thought about maybe a
small bonsai willow. And we found that that there exist bonsai willows actually exist. Then
we looked a bit like that. So we kind of picked that up then at that point. And we all agreed that it
was nice and beautiful and we liked it. You also should know that originally our code name
and the project started was alcoholics because one of the core deaths Torsen was hosting on the same
same server Viki about alcoholic beverages. So he gets the project code name and you can still see
some traces of that name somewhere. That's really funny. That's fantastic. I'm really glad you
brought that up about the name because one of my favorite things about Linux and open source and
free software is the names that people come up with because it's just almost always a good story
behind the name of stuff. And that's a good story. I'm glad you brought it up. Getting back to
the installer. I think one of the things about your installer that's really genius is that it's
broken up into categories and you select whichever category you'd like and whatever order you'd like.
And as it's finished, it gives you a check mark to let you know that it's been done. I didn't
quite notice at first that that's what was going on. But as soon as I figured that out,
it really clicked as what I thought was the right way to do an installer. I really liked that.
Is that what the standard Slackware installer is like? Because I don't remember it that way.
Already talking about the live installer now. Yeah, probably. Yeah, the graphical one.
Yes, yes, the graphical installer. I'm sorry. Okay, because we have two different
installers. One is the standard installer. The empiricist installer that's in the
standard installation CDs. And then we have the live CDs. And there's a live installer that has
a unique that's written in GDK. You're talking about a second one now. Actually, that is
Perique's work. And one of the goals that Perique had when he was writing the installer,
which is written in Python by GDK, by the way, one of the goals that he had was for the user to
be able to finish up any installation task in any order that he wanted to, or for example,
if someone wanted to set up users first and then move them to partitioning, he could do it that
way. Or if you wanted to do it the other way around, there wouldn't be no problem. So when you
complete a fast commanding installer, you get a jackal of that. It's okay, if you finish that,
you can move on to any other task with not a specific order. So it gives a lot of freedom
for the user that is installing. And if you didn't install it, you can go through that any
new order if you like. It's not like a typical installer where you just write next, next, next,
then everything is laid out in order. You can do everything in the order that you like to do.
Yeah, I found it really enjoyable to go through it that way. It was pretty unique. I don't
remember another distro doing it that way. One question I do have about installation that kind of
puzzled me a little. You have three different levels of package installation. So you can choose,
if memory serves correctly, you can choose a full installation with all of the recommended software,
a minimal installation, which just comes with Firefox and your package manager. And you can do a,
was it a command line only or X only, I forget what the third one was.
That was a command line. Yes. Well, I think the idea was the installation system was to kind of move
all the configuration and additional setup from the installation stage. We don't have a full
environment yet to the actual system, which is already set up. So it gets easier and you have
full power and the different installation levels, the options, core, full, basic, just offer you a
way to easily chose a level of pre-configuration. So you can set up your system afterwards as you like.
Somebody who wants to set up his own special system with his own desktop environment or who wants
to set up a server could just choose the core option, whereas some user who wants to just get going
and doesn't want to manifest all the application selection and stuff could just choose the full
option. And basic is just a middle thing. I thought that was pretty clever, but I did try at one
point to do the basic installation and I found it was a little over my head at the time because it
didn't come with a network manager that I could see. And I had a heart, I mean, I'm sure I probably
could have done it from the command line, but I'm not quite that adept at Linux. So it was
enough that I could Google for at the time because I didn't have my network up. Was that
intentional so that someone could pick between Wicked and Network Manager or whatever the KDE
wants to forget the name of it? Was that intentional there? Yes, it was because there's not only
Wicked, KDE and Slackware also offers its own start-ups scripts for setting up network. So some
users may prefer those. For example, I'm using them on my desktop because I don't need a network
manager there and it just takes additional time to set up the network. Well, yeah, full installation
is suggested to most people. It's the easiest way to get started as Andreas always said. The basic
installation that you try is actually aimed at more advanced to users that know a little bit of
how to use their sales or Slackware installation. Actually, when you do a basic or core mode installation,
you get a network setup window during the phone. So I think what government was trying to say
that during the setup, during the installation, you get a window asking you for network setup,
but I think when you're using the graphical installer that option might be missing,
I think the point has been already made at some point, but with the live CD, I'm not supposed to
live CD but install as CD, I'm pretty sure there is such an option. Yes, with the standard installation,
when you do a basic, that's what I was trying to say in this work with the interaction.
I went with the standard installation and yet when you select the basic or core installation
mode, you get a window at the end of the installation that you can use to configure your wired
network connection. As there are no wireless tools at all or drivers in a basic installation mode,
it doesn't make any sense to have wireless connection manager in a basic installation.
Users that select a basic installation will have to select to install their own wireless drivers
and software on their own, but they can already use a wired connection using the standard Slackware
to network and pick from a root terminal. From a live installation, I'm not sure I think you
don't get the prompt, so what you actually get is if you're with no initial network connection,
all you had to do was to run network and pick from a root terminal and to the base setup,
but you wouldn't need to know that before. That was a big trick, I agree.
Oh, okay, that might be where I had my trouble. When I first tried Salix, I was confined to bedrest.
I had just had a surgery and someone very generously gave me a laptop and it was older hardware
and I could not get any other distro to run on that laptop. Even Slackware wouldn't run because KDE
was so heavy and I had seen Salix and I had been curious about it and I thought, okay,
well, we'll give this a try. I pulled the CD out of my CD wallet and I popped it in and it ran
beautifully on this old hardware, but the network thing had me puzzled and I was stuck in the chair,
so I couldn't have plugged it in. That's probably what that was all about.
All right, now I understand, but that's good to know for anyone coming to it that it's not going
to come with the wireless drivers. Yeah, the basic installation mode is actually a very basic
graphical system, so one of them you can use to install in any type of computer. Actually,
people write a store, Salix and their desktops do not need any wireless drivers usually,
so why should we install all that software without them meeting it? It's aimed at more advanced
users that know a little bit, they know their way around and say, so if they need anything more,
they should know how to install them by themselves. It actually provides a very basic system,
as you said, only a browser and the package manager, so anyone can install their own
selection of software after and actually install the basis.
Yeah, that makes perfect sense now. I hadn't thought about it that way. Well, since you brought
up your package manager, can we talk about that for a bit? How did the package manager come about?
Well, we were lucky enough that G-slapped and slabget, it's come out like this,
it was already available before we started sales, and it was already used in a couple of more
slabware based distributions, and I have to say that slabget is excellent. I think it's perfect
for sales, and we were lucky that it already existed, and it was at that level of quality before
we started sales. It has a lot of features that we wanted to have, and no other package manager
that exists for slabware, and the ability to have multiple repositories. So the same darn,
like we do now in a total installation of sales, you would have access to standard slabware
repository elements, which offers you all the packages that are available as slabware,
and then you have an additional repository on top of that, that is the salicyposter with
additional software, and the only package manager that could do that was actually slabget,
and we were lucky to have that before we started sales, we couldn't have set up sales in this
way, but it is today without slabget or G-slapped. Yeah, I've used both, and slabget is
easy to use, it's very user friendly, and G-slapped is also very pretty, very easy to discover
what you need to get done, and it's easy to use, I like how quickly it updates, it's very,
very nice. So with the newest version of salicyposter, 13.37, because you guys follow the release number
for Slackware, with the latest one you have, Sorcery, is it called, and can you talk about that
a little bit? Well, actually that's my work, so I hope it's probably got more than
that. Oh, cool. Developers, slabget, and G-slapped, also wrote a tool, slabgas RC, that
one was used to install packages from source, packages from slagbuilds.org, it's another
slackware, only end with repository, with source packages though, and you have to download
the source files and very build scripts from that repository and build the software yourself,
it's not that difficult, but it's, I agree, it might be a bit difficult for a beginner, for
Slackware beginner, and we want our way to automate that, and we'll create a slaggas RC to automate
downloading and building and installing software from slackbuilds.org, and it's a huge
repository of source, slackbuilds.org, it has more than 3,000 packages available, but you have to
install them manually, you have to build them yourself. So, slaggas RC only had a command line
interface, it was only a command one or two, and I wanted to have a graphical to,
that graphical front end to it, just like G-slapped is a graphical process to slabget. So, I
talked a little bit with Slaggas RC's developer, Jason. Jason didn't actually have any plans to
make a graphical front end for Slaggas RC, so I thought I'll just start making one, and we'll
offer that to our public users, because actually I thought that Slaggas RC was not really that obvious,
people who installed SLX 13.1. Most people were actually aware that it was, that the
section tool existed in 13.1. Slaggas RC was also available there, but most people not see it as
there was no graphical to see, they have to know that it's their music from a command line.
So, I thought that we should have a graphical front end, and I started writing with Sorcery,
and it's actually a front end to Slaggas, I've seen the same matter, that is Slaggas,
a front end to Slagget. It has a few more capabilities, though. One very useful thing that Sorcery
has is that you can read the descriptions and the instructions on how to build and what is needed
for its package from inside the Sorcery's graph, in it as well, in order to do the same thing,
with Slaggas RC, you have to go to the Slaggas.org website, yourself, and do the pages there,
and if you need it to move more steps to complete the same task. So, yes, it is a front end to
Slaggas RC, it makes it more visible to users, it has a couple of more things on top of that.
It actually adds a lot of software to Slaggas RC, and Sorcery's add a lot of software
to the collection of packages that are available, they say. You're not restricted to the packages
that we have rebuilt in our Slagget repositories. You have a lot of software that's available,
available, and if you actually, that aren't the any user that will find anything missing,
anything the user wants, he can get exactly what he wants, or maybe something similar that will do,
saying that's either from our binary repository, or from the Slaggas.org,
using Slaggas RC, or Sorcery. So, I think it converts a lot of the software needs that people
usually want to do. Very cool, is that, is that also written in Python?
Yes, exactly, the front end is written in Python by GDK.
Cool, is the source code for that available for people who wanted to study that?
Yes, everything, all of our source code is available, actually. We have an SVN repository that has
all the code that we write specifically for sales, and it's a lot of code, actually, for one
specifically. We have a lot of home-built tools that we use, or our system tools,
our tools that we create from scratch, as Sorcery, the same thing stands for our system tools,
our time configuration tools, user configuration tools, services configuration tools, and all of that,
all of those we have written from scratch, and all the source code is available from our SVN
repository, and we also have a source code repository for our binary packages. In our binary packages
repository, there is a source directory in there, along with the salons directory that points
to the source code of every package that is available in our repository, so we can get the source code
either way, either way, so the source directory in our binary package repository,
the source from SVN, if you get the latest code available.
Beautiful, and because a bit of a license geek, are those released under GPL,
or is it a Berkeley type license, or what's the license there?
Most things are in GPL version 3. There are a few stuff, little stuff, there are only different
licenses. I know that Fred, another developer, he uses the, what the fuck you want to license,
so it's a little bit funny, because he made a lot of times for most stuff on ARM, or GPL with me.
Okay, fantastic. Now, when you say that sorcery builds the package for you, does that
download binary pieces and put them together in the right way, or is it downloading source code
and compiling it, and then packaging it? It's doing the letter, so it downloads the source code,
and there's a script which has all the instructions you would do on the command line, and runs all
that stuff, and builds the package, and puts it into some directory, and puts it into an archive,
and installs the archive, like a normal package. Okay, cool, so it's actually doing code compilation,
is any of that tuned to your specific system, or is everybody going to get the same
binary output, no matter what processor and system they're using?
The way that it is set up by default, packages are built with specific flags, C flags,
but every user can customize that, and he cannot be the flags for his own processor, and there'll
be any package with optimization for his own system. So you can change that within sorcery,
or you mean if you were to compile manually? No, you don't change from the
main sorcery, you only have, it's not that obvious, but you have to change an environment variable,
C flags variable, if you said that C flags value when you're a vast profile, it will work through
sorcery, and we're going to use all software using a battleground C flags. Okay, I see, that's
very clever, that's good to know. Great, so what are some of you guys favorite bits of
Salix OS, what's your favorite thing about using it, or about working on it? Andrea, how about you?
Well, it's great, I think, I've borrowed it, there were applications, quite some applications are
like using, and they use a lot, which were not there, and I just took the chance, and could do
the applications for me, and could also provide them to others and share that work. So I have to,
Salix, with Salix, it's very easy to contribute, and contributors are very welcome,
there's not a high level of entry for contributors like with some other projects.
Yeah, the main advantage I see in Salix OS is that it's very simple to grasp, that
forces a tribute slag work, which is a very simple system. You can actually learn how
the entire system works with very little effort, and you can understand how
every little, not in both works, say, so I do a distribution, very, very easily compared to
other distribution, and Andrea said, of course, that it's very easy to contribute to Salix,
it's very easy to create slag work packages, actually, compared to creating RPM or
debt packages for other distributions, for example, slag work packages, or sales packages,
which are, exactly the same, are very basic tarballs, actually. There's nothing special about
those, they're actually very basic tarballs with files ordered in a specific way. So it's very,
very easy to create your own packages, to roll your own packages in Salix and slag work,
out of just the users, and the simplicity of the system is what I love most, and it's very easy
to pick it, and it's set it up the way that you want to, and install whatever you want through,
even if something is not provided by your own distribution, maybe we're not providing the latest
version of Libri Office, for example, but it's very easy for any user to go on and install
the latest version from the court himself, if he knows just a little bit more than a
music package manager, it's very easy to tweak our package build strips, and build the newer
version, and install that and use that instead of the version that is provided by the
available storage, that stands for every piece of software, actually, that is available in
Salix, you can update them, and you can go wild, and do whatever you want with the package manager,
nothing is restricted here. There are no dependencies that you need to be worried about,
even we say we don't have, where we have dependency resolution, a dramatic dependency resolution,
actually the system is exactly the same as a basic Slackware system, you don't have to worry
about dependencies that much, you won't ever get into dependency hell with Slackware or Salix,
even if Salix has automatic dependency resolution, that's a very fine layer that is laid on top,
the binary distribution, the binary packages, and you can very easily circumvent that,
so it's a system that you can tweak a lot to your liking, and you can do anything to go with it,
and it's very easy to make it, it's very difficult, actually, to break a Slackware or a Salix
system, unless you do something that's really stupid, like RMS, RMS, RMS, if they were directory,
or anything like that. Yeah I've been using Salix since probably April of last year,
and I don't think I recall a single crash of any piece of software I've used in Salix,
and I've installed quite a bit that doesn't come with it, so even if it's not the latest
of all the packaging that could be available through source code, it's very, very stable,
and that's one of the things I've enjoyed about it the most is that I find it don't even worry
about system crashes or program crashes anymore, it doesn't happen, at least for me anyway,
and that's one of my favorite things about it. Now when I first started using Salix,
it was available with XFCE, and I believe LMDE as desktops, it looks like you guys have a few more
of those available now, how can people use it, what desktops are available to folks by default now?
Well by now there are five editions, just the XFCE, and LXD, not LXDM, or whatever you were mentioning,
that's LXE. Okay sorry, Fluxbox, no problem, and KDE, and a last one which gothened it or
charged it, that's red poison, I think all those editions are also an example of the contributions,
it were users who took the initiative there and they were coming to us and wanted to do a new
edition, and that's how basically all those new editions emerged. XFCE is what everything started with,
it's kind of like the default edition, it's where we start releasing, and it's mostly
charged child, and the other editions usually come afterwords when releasing, when the different
persons maintaining them catch up, I have to say I'm mostly using the XFCE edition or my own
custom open box desktop, so I don't have to say so much about differences between the editions,
I think, Capone is charged as more familiar with those. Yeah we started actually, the only edition
that we had in mind when we started making sales was the XFCE winner, when we were talking about
how sales is going to start, before we had a name actually, we were talking about what
that's the environment we should use, and most of us actually were using XFCE as a default
environment, that's what most of us wanted to use, so we ended up using XFCE in our first version,
13.0, after that more people got involved in sales, we had other contributors,
as interests, coming in sales, and one by one we started adding more editions,
the Meet Your Meeters game, another great developer, that he was actually working on another
slapper-based distribution before he came to sales, and he's actually developing it
along with sales right now, and he liked sales when he found it, how does that
we existed, he liked what we did, and he liked KDE, so he offered to create a KDE edition,
and we did, we offered the KDE edition a visual to our XFCE edition, and then
a more guys game, and we wanted to create a Fluxbox edition, some of the some Italian developers
that we have in our team, and they loved the Fluxbox, so we created a Fluxbox edition with them,
and then Christian, another developer came along, and he liked the next piece, so we made a
little out of the edition, and actually the rat poison edition was my own idea, and we were
friends actually, talked me in creating that, I actually didn't think that we were going to have
more than two rat poison users worldwide, that include me and my friend who suggested that we
should create that edition, but actually there's been a lot of popular, a lot of popular, so
I was a lot of surprised with the reception of the rat poison edition, but yeah, the minister.
That's cool, any plans to do an awesome edition, I gotta ask that for Peter 64, I don't know
if you guys know him, but he'll be upset with me if I don't ask. I'll be honest, not really,
but if someone comes along and wants to do all the work that's involved, they'll be really
no problem in doing it. So Peter 64 is welcome to help you guys, you even accept Australians on your
project? Of course, of course, we actually have no restaurant, we got it, I think. Oh, very cool,
so if people wanted to help out and contribute, where would they go, how would they get involved?
They could come at any of the communications channels we have, so they could just ask at the forum,
they could come to our mail list, and of course, there's all the Chevere Room and the ISZ Room,
for Celix, all those are also pointed out on the front page of our homepage. We actually even have
Celix Identica Group, and there's a Google plus page, and your homepage is, uh, is it
Celix OS dot org? Is that right, or is it dot com? No, it's dot org. Okay, Celix OS dot org,
and you can find everything through that. Um, on IRC, are you guys on free note? Is that where it's at?
Yes, exactly. The channel is hash Celix. Okay, great, great. Now, I wanted to ask you quickly before
you wrap up, the desktop environments that you guys make available, do you do a lot of customization
to them, or are they pretty vanilla? Do you keep them the way that they are released by the projects,
or do you do much customization to them? Generally, um, regarding packages, we keep, um,
kind of to the rules of Flakware, so we try to provide packages as final as possible, and only do
patches, vendors good reason, because it's some important bug fix. So for the additions,
or for the desktop environments, it's quite similar. Um, we don't start changing, um, let's say
the logout dialogues to customize them for our additions, but of course, we add some
custom artwork, and we provide some sensibly default configuration. Yep. Okay, yeah, that's what I
thought, and then that artwork is just so beautiful on there. It's just such a pleasure to look at
every time. Is there anything that, uh, that I should have asked you guys that you wanted to bring up
that I haven't? We don't have anything, and I really, but just that everyone is available to join
and contribute anyway, and to be, uh, a few likes, uh, even by, uh, trying out, so it's, uh,
telling us their impressions, uh, that would be helpful, uh, even if some of us doesn't know how to, uh,
code or anything. Oh, uh, another thing, what, uh, that's, we should naturally mention that,
is that we have a very nice, uh, user guide, uh, set, uh, in, uh, our homepage,
it's available as a PDF, or we have a documentation thing that has worked hard,
very hard on creating that guide, and our thing that is, it is, uh, uh, written very, very nicely,
and, uh, uh, especially beginners should, uh, first, read that guide, uh, uh, keep pages, uh, actually
introduces music to, uh, what say it says, uh, uh, what most of the basic systems are, how they work,
and it's written very nicely to mark the documentation, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh,
our homepage. So, uh, any one that has a good service, or a good service itself,
begin more, more or less, uh, actually, first, uh, read that, uh, the documentation,
so it's, uh, it's written very nicely, um, uh, uh, most very, very nice, um, uh,
it's very thankful for how good the documentation is, uh, writing it out. And it's actually
translated to a couple of languages, uh, by now, and that's another very nice thing that we have
being in a international project that we are. Having people from all around the world,
it makes it very easy to have a whole lot of things translated in a lot of languages. So,
every, every single one of our things, and it's available in English, French, German,
Greek, Italian, Spanish, you name it, Japanese. We have everything, all our systems,
everything that we've written is, uh, available with lots and lots of languages. So,
many things going through our documentation, through our translators,
contributed, uh, uh, uh, so it's a way more possible.
Yeah, that's one of the greatest things about being alive today is that we can
communicate and work with people from all over the world and, uh, and collaborate in such,
astonishing ways. It's, um, it's something I have a deep appreciation for. It's really great to
see that that's part of Salix as well. Uh, Andreas, did you have anything to add before we wrap up?
No, I wouldn't like to add much. I just say to someone up, they're a really truly international
project and every contribute to this welcome, no matter where he's from. Um, and there is really
a lot to do. So you don't need to do the actual programming of applications, custom applications
for Salix, but you can also do packaging. You can provide support on the boards or on the IZ and
Java channels. You can do documentation or you can translate documentations and applications,
which is actually really not that hard. You just have to go on to a translation project and then
you can just translate. Well, from an end user standpoint, I'm, I'm hearing you guys say,
you know, how much work there is for people to do and available, but I gotta say you've done a
great job of making it look very complete. I, um, I have a real hard time finding anything missing
from there, but I understand what you mean about translations needing to be done and, and adding
packages and updating packages that's, uh, you know, of course, always something that needs to be done
with any Linux distribution. So I, I have to end very shortly here because I have to go to work.
But I want to thank you guys for taking the time out of your day to come on and talk with me about
Salix and I want to thank you for creating Salix and for all the great works that you guys and your
team has done. Thank you for having us graduate and it was a great job of me. Thanks, thanks a lot.
Oh yeah, anytime. Yes. Thanks for me too. Thanks for the interview. It was really nice.
Oh yeah, anytime, anytime you guys want, I mean, if you guys have, you know, announcements that you
want to make or, or, you know, want to come on and do another interview at your next release or
anytime before then, you know, this is, this is hacker public radio. You can, you can feel free to
post those without me if you don't, uh, you know, if you want to do them on your own, but if you
wanted me to be involved, I'd love to, you know, I, I don't mind, you know, pimping Salix whenever I
get the opportunity. So, you know, the guys in the IRC can tell you how annoying I can be about it.
Okay, thanks. So I guess we look and come back to you. Yeah, that would be great. I'd love to do a
follow-up interview when at some point. That would be great. All right. So, uh, that's it for me today.
Thank you very much for listening to this episode of hacker public radio. Uh, please don't forget,
we always need more shows, uh, contributions from listeners just like you. So, um, as demonstrated
here by Andreas Born and George Flavis, anybody can do hacker public radio, anybody can get involved
in free and open source software. And, uh, as demonstrated by me, anybody can use Salix. Give it a try.
You have been listening to Hacker Public Radio with Hacker Public Radio. We are a community
podcast network that releases shows every weekday Monday through Friday. Today's show,
like all our shows, was contributed by a HPR listener like yourself. If you ever considered
recording a podcast, then visit our website to find out how easy it really is. Hacker Public Radio
was founded by the Digital Dog Pound and the Empanomicon Computer Club. HPR is funded by the Boundary
Revolution at binref.com. All binref projects are proud to sponsor by lunar pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting needs.
Unless otherwise stated, today's show is released under a creative comments,
attribution, share alike, he does own life space.
