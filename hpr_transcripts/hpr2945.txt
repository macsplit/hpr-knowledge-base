Episode: 2945
Title: HPR2945: Saturday at OggCamp Manchester 2019
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2945/hpr2945.mp3
Transcribed: 2025-10-24 13:42:04

---

This is HPR 2945 for Friday the 15th of November 2019. Today's show isn't titled,
Saturday at Alcamp Manchester 2019 and it's part of the series' interviews.
It's hosted by Ken Fallon and it's about 37 minutes long and carries a clean flag.
The summary is interviews and chat from the UK's largest floss event.
This episode of HPR is brought to you by Ananasthos.com. Get 15% discount on all shared hosting
with the offer code HPR15. That's HPR15. Better web hosting that's Honest and Fair at Ananasthos.com.
Hi everybody, my name is Ken Fallon and you're listening to another
episode of Hacker Public Radio. Today's show is going to be a series of recordings that were recorded
at Alcamp 2019 in Manchester. So sit back, relax and enjoy the show.
Because I'm looking here at a print off of HPR-push-cam, which is live now on
ocam.live, which will be off the air by the time you get this. It could be a picture of a quarrier or
something. It could be some random like that, yeah. So yeah, I decided to one of the guys on
Mastodon. I asked if I was going to put up the web-enabled camera again this year.
I hadn't even thought about it. I don't know where it was. So I was going to set it up with
FS camera on a laptop. Okay, so now what he's talking about is as I walk over here. What would
you call that thing? There's a clip here with a, it's a car, a townholder mount. Yeah, car-fold,
car-fold holder mount with one of these metal tubey things, for holding these things and in it is
mobile phone, which is pointing here. But this is the genius of this. It's running a regular
Android form and then you've written a script. Tell us about that. Well, the script was my first
attempts at using a laptop. Images weren't great. So I thought there must be a way of doing this
with a phone. And so I've got a spare old Nexus 5X Android phone and fired up turmox,
which is a terminal emulator for Android. I thought I'd install S web camera, which you can't.
So that's FS webcam. Yes. So a little bit of googling. I found out the turmox
expose the API for the camera. And it's, was it a five-line script? Six. Six. Which is just a simple
bash loop. Fires up the camera, takes a photograph. Image, image magic then resizes it to make it
web friendly then, but not a six-megabyte picture, just a few kilobytes. And then SSH Pass
and SCP send it up to my server. Okay, I'm manly enough to read this out. While true do FS
cam, space dash d, forward slash dev, forward slash video zero, space dash dash jpeg, space 95,
space dash dash save, space current dot jpeg g. So FS webcam, FS webcam then is...
Is it a link tab? Well, it's a link. It's downwindage. But it's on on my Linux laptop. So that was
just for testing with. And then the turmox version is the one we're using now. Okay, so then to
finish off the FS webcam, you have SSH pass, dash f dot space dot SSH pass, SCP dash port 22,
and then the file and then up to the web server. And then sleep. And then that's it. But the
turmox version, this is interesting. Why could you not do this, use the same script on Android then?
Because SF webcam is not available on Android. Good answer. That is the entire reason.
Tickets to go. So yeah, the turmox version is basically the same instead of FS webcam, it's
using turmox dash camera, dash photo, which is you can install it in turmox for its own package
installer. And then it's the same. Yeah, the convert is image magic, which again you can install
in turmox and SHH pass is installable in turmox and SCP. So this turmox is anything here not
available on the Android store? Would you need a rooted application in order to do any of this?
No, because that phone's running copperhead, which is locked down. You can't you can't
route a copperhead OS Android phone. Okay, good to know. It doesn't work on my BlackBerry K2,
is locked down, it won't let access the camera. So your mileage may vary. Now what I found
interesting about this was that if you go and buy an IP camera, you're talking 150 whatever
box there is a robot walking pass with an iPad on it. Okay, any who? But if you buy a cheap Android
phone, you could have essentially a web monitoring solution for very little on a five-line script.
Yes, and the advantage of the phone is you stick a SIM card in it, you can go and stick it on a
cliff and look at the sea and leave it there. Yeah, okay, okay. A lot of your web and eight cameras
that need to be plugged into the mains. Okay, cool. The picture of this will be in the show,
not at least. Okay. All right, thanks. Enjoy the rest of the show. Thank you.
Cheers, Ken. And we're here at the Matrix booth and I'm talking to. Hi, I'm Ben. You might
know me as Ben Pa. That's what I'm known as on the Matrix Ecosystem. And what is Matrix?
People of HPR will know I've interviewed the Matrix before I've asked them, but give us a quick
rundown of what it is. Yeah, I'm sure Matrix is fairly familiar to your listeners. So Matrix
is a decentralized communication platform. It's self-hostible so that you can use your own server
or start up a new server and host your own Matrix instance. It's also end-to-end encrypted,
which means that messages are encrypted on the client, sent through the servers, sent over
the internet, and sent to your recipient, and the whole time it's encrypted. So when they
decrypt it, they'll be the only ones who've been able to read the message. Okay, and is this
for text messages or is it video conferencing? Ah, well, so Matrix the standard specifies the
use of text messaging, files, images, sounds, but Matrix can also be used as a signaling layer
for VoIP, so for WebRTC. And in particular, we make use of Jitsi. And yeah, we're a layer on top
of what video messaging. And yeah, we're a signaling layer on top. Okay, and Jitsi is what?
Oh, Jitsi is a open source video conferencing software. You host a server or you use a free
public server. And in doing so, you can send many to many, you can have basically video conferencing
for multiple people. For single users, we would say use WebRTC and Matrix can be used natively
there. Okay, and so what would that be exactly? Say I wanted to talk to my family with video,
what would it need to do? So if you both had a Matrix account, then you, wait, so let's say you
didn't have a Matrix account. First of all, you would need to sign up for one. You create a room
with everybody in there. A room is like a channel on IRC. And when you've done that, you start a
new video chat. For a multi-user chat, that will use Jitsi, for a single user or two user chat,
it will use WebRTC. And the UI wise, the difference is transparent to the user. So they just,
as far as they know, they start a new video chat, and it's as simple as that. And of course,
that works across all platforms that Riot works on. So Riot is the flagship client for Matrix.
So it works across all platforms, all major platforms, including Web, Desktop,
Android, iOS. So what are you showing here on the boot? I'm looking down at your booth and you've
got a screen, two Raspberry Pi's, the phone connected to a MacBook Pro. So we've got, yeah,
we've got a lot of hardware on the table. So what we have is we're trying to demonstrate the
using the screen, the different configurations of Matrix. So we're showing off the network
diagram of Matrix. We also have a few tabs open. So the network diagram is showing
three blue balls connected like a triangle. And then around each of the blue balls are
green little lollipops stuck into them would be the best idea. So yeah, as bizarre as that sounds,
that's actually, we found that to be a really nice way of demonstrating the idea of centralization.
So those big blue balls in the middle, they show your servers. And what they show is that they
send messages between each other in a process that we call federation. So this is syncing messages
and event history between only the rooms that the messages apply to. In doing this, the green
lollipops as you call them, these represent clients. And they are then able to get the details
from the servers. And in this way, you control who gets what messages via a mechanism of rooms.
So only the rooms which are appropriate to the server and appropriate to the users
get to see those messages. This is the fundamental security part of Matrix.
And then from a topology point of view, it's quite similar to email, I guess, in its deep federation.
Yeah, absolutely that. I mean, it's already decentralized federation.
Yeah, yeah, it's decentralized and federated. So yes, you really could liken it to email.
When you send an email from your client, it goes to your server. That is sent to the correct server.
Of course, in email's case, that could be multiple servers. And the message is only sent back
to the clients as determined by the recipient server. Okay, perfect. So show me a typical demo here.
And I will translate it on screen. So we're clicking the tab. I'll also want to just land
some text, lovely. What we've got here, we've got several Raspberry Pi's on the table.
Each of the Raspberry Pi's is currently running a Matrix server. And each of the devices is attached
to a bot. And those bots are sending the text from a project Gutenberg book. So we've got
Gulliver's travels coming from one bot, Alice in Wonderland coming from another bot. And what we
show with this demo is that when one of them is unplugged, yes, it stops sending messages because
it's not able to connect to the network any longer. But when it's plugged back in, it will continue
to operate and it will also get backfill from the other servers. So it will be able to see
the messages that miss because it knows when it went offline and it knows how to catch up and
it will catch up from the other server. And a Raspberry Pi is sufficient to run Matrix on this,
is that correct? Yeah, absolutely. So, uh, these, finally enough, our Raspberry Pi 4, which it
with its, uh, 2, I think this is a 2 giga RAM addition, uh, died this morning. So we're running
the entire operation from a pair of Raspberry Pi 3's. And yeah, for, for, for, for basic matrix usage,
it's, um, one, one gigabyte on a Raspberry Pi 3 is sufficient. And we're showing that in the demo
right now, um, Matrix will, um, Matrix will use more resources as the rooms that you join become more
complex, uh, but, but yeah, I mean, that's, that's sort of a natural artifact of, of any messaging
system. For the demo that we're doing here and for a huge number of people's usage, um, a Raspberry
Pi 3 is sufficient. I would also say that another demonstration of the improved low level performance
of Matrix has been the, uh, release of, uh, small hosted home servers from modular. This is a
commercial SaaS offering of Matrix. And they've been able to deploy, um, low costs, low,
low usage servers, uh, for, uh, yeah, yeah. And that's something that's only come out this year.
So this is a, a success that they've had this year. Okay, fantastic. I'm, what's your involvement
with the project? So I am, uh, I'm employed, um, to be a matrix developer advocate. So I go to
events like this. I talk to people at you. And I also talk to anybody else who, who would like to hear
about Matrix. I even talk to people who don't want to hear about Matrix. So what we do is we try to,
we try to humanize the project. The, the problem with a lot of open source matrix is, is not
immune to this. Is that it's a very complicated project. If you compare it to WhatsApp,
then answering the question, well, I'm already chatting to my friends. Why would I need anything
else? Is, is not obvious to, to a crowd like this and to a listener like, um, like yours. It
probably is, is, is obvious why you would want to have security, self-hosting, privacy,
end-to-end encryption, data transparency. But it's really not obvious to everybody. Um, and by
doing demos like these, uh, you know, something that's a little bit strange, maybe a little bit
more interesting, we try to demonstrate the value of matrix and how it can be used in other ways.
And who should we, uh, so you, you have a business, you're employed by somebody you're getting
where's, where's the money come from? So I, I'm employed by new vector, which is the, um, the,
the largest contributor to the matrix ecosystem. Um, but my, my time is devoted to, to promotion
of the matrix. And how are they making money using matrix? So they, they sell modular and they sell
consultancy. Um, so most prominently, they, they are supplying matrix consultancy to the French
government to replace their internal communications. They've been doing that for, uh, just over a year.
And that project is, is, is continuing to be a, uh, profitable consultancy.
Excellent. Thanks very much, Ben. Anything else we missed?
Oh, no. Only if you haven't done so, you must sign up for matrix, um, go and join the rooms,
and, uh, yeah, yeah. Please, uh, get in touch with us over matrix. Thanks.
But you can even go to, like, uh, jit.se forward slash something, just put, type in your own
thing and you get instantaneous access to a video conference. Is, is that, are we using matrix
when we do that? Uh, so it made me, you're only using matrix when you're using a matrix, uh,
to signal the void. Yeah. It wouldn't be related to, to just typing out your, your separate
dress yourself. Okay. Yeah. Very good. Thank you very much. Enjoy the rest of the show.
Hi, and I'm talking to Alan Woods. And you are? Laurie Griffiths. So what are you starting
you with, uh, with you? Well, what's, uh, are we looking at here? I'm looking at the desk,
and can you describe what's before me? What, what I'm here today showing is, uh, the latest
generation of a product called Black Ice. Now, uh, back in 2016, we started a project called MyStore,
which was to produce some open source hardware for programming FPGAs that works alongside
the open source software toolchains. What's an FPGAs? Right. FPGAs stands for field
programmable Gatoray. Uh, basically it's a chip that has lots of logic in it, but it's uncommitted
to any specific application. So you can put your own hands or a gate in some way? Yeah, you,
you can think of it as a huge number of, uh, logic gates that you can juggle and mix to make whatever
you want. So that may be something simple, like a piece of electronics control equipment for
maybe controlling some motors or some panels or something for that nature, or it could be so
more sophisticated, like you want to design your own new CPU, for example, because you've got a
great idea on how a CPU should be designed. So you obviously can't just go to a chip maker and
tell them what you want. You have to come up with a design and you have to test that design.
The way that you do that is you use, uh, some sort of tool for producing the design, uh,
in, in, in the hardware world, that tends to be what's called a hardware description language.
In most of our cases, people will use a tool or a language called Verilog.
So you can then write your Verilog. You can express the logic of your design in Verilog.
You then take that to Clifford Wolf's open source tool called Yosis, which will take the Verilog
program, if you like, as an input. And then it will synthesize the output. So it'll break it down
into those logical parts that will be available in the chip. Uh, and then it will output that through
one of several different, what's called place and route pieces of software that target very specific
FPGA. So for example, in our case, we're using the lattice ice 40 FPGA on our chips. So that's
what we would target for our device. So that's, I'm looking at a board here. It's about
an inch. So 50 by 50 mil. 50 by 50 mil at in metric terms. Thank you.
But yeah. So, yeah, it's almost a couple of inches by a couple of inches.
So back in 2016, you had to kind of go out and buy vendor type boards for development.
And those weren't very packable in our opinion. So we figured we could do a better job. Do
something, design an open source hardware development board, specifically for these open source
FPGA Torquets using Yosis. So we came up with the idea of this product called MyStorm.
And to set ourselves a challenge, I think it was like May after we'd done this talk where we'd
decided in a pub, like you do, to do this thing. But by, I think it was either the end of August
or beginning of September. I think it was the end of August when Oshkamp was on in Hebden Bridge
that we'd have, you know, however many of these enough to run a workshop and teach basic FPGA
to their people attending Oshkamp on the Sunday. And, you know, we just kind of managed to do it.
We received the boards like two days before the event. Had to do a bit of extra soldering and fixing
and stuff on the boards. But then managed to run these workshops on this board. And after that,
people wanted to use the boards. So, you know, we got requested, well, could we buy these boards
and things. So we figured out, well, let's clean it up a bit, get the things fixed that we got
and wrong and start making boards for this and make them available. Is this like a business now?
I haven't given up my day job yet. What the dream is there? The dream is there, yes. So,
we're now on like the fifth generation of this board effectively at the moment.
And some of the changes we recently made is it actually comes in two parts. One of the problems
you have before is even though it supports these standards, which are called P-mods,
which you can buy these off-the-shelf parts that plug into the FPGA, piece of hardware,
like displays, LEDs. So, what I'm looking at here is you're plugging in little add-on circuit boards.
The standard connector format. So, although that's quite good, what you end up with after
your prototype is something that's very difficult to put in the box because it kind of sticks out
at all angles and it's mechanically, it's not very stable. So, one of the design goals for
the latest version of the board was to separate the really complicated bit that we have to get
made in a factory with all the small surface mount stuff on. And then the board that that plugs into,
which breaks it out to the P-mod, you can take that off and then you can design your own board
for this module to go into. So, you can integrate it into your own projects much
easily than you could before. And in fact, the Black Ice MX, which is the current product we sell,
is two boards designed around the Black Edge standard, which is these connector formats,
which defines what those are and that's an open standard. And anyone can build a board that
plugs in or a core that plugs into the board. So, we call that bit the carrier the lower bit.
So, a bit like an ashtray from days of year, but a very small one. And then there's a
plugs in the top. So, that enabled, yeah, it was one of the things that the community had said to us
for a while. We've got some great stuff on there, but can we have it so that we can put it in our
projects much more easily? So, the center board looks very, very compact and designed by,
whereas the other one is like a daughter module from a spaceship where you duck into it.
Exactly. And that could be any board that you wanted to design if you wanted to do that.
And over here, I'm looking at one of these set up. So, you've got the complicated main board,
plugged into a dock board, and inside of that is an extension board, which goes over to a
breadboard. Yeah. So, for prototyping? Yeah. So, people that may not be familiar with a breadboard,
a breadboard is basically a series of holes that you can put through-hole components into,
like LEDs, displays, resistors, capacitors, and build a small circuit, prototype circuit on the
breadboard. And then have your development board then interact with that. So, it's very good for
just trying out very simple circuits, really. You can't do very complicated ones on there,
but you can do very simple interfacing on there to simple through-hole components.
Okay. And north of that, we have a more complicated board for you. You've got a LED digit display.
Yeah. So, this is a seven segment display of free digits. These very commonly used in all sorts
of different applications for just representing numerical values. In this case, they're also very
good for education. So, if you're learning very well, learning how to drive one of these is a
really good exercise, because it teaches you all the basic things that you need to know to get started
with very little. So, we find out from educational type applications, people tend to want to buy
these to go with this. In this particular case, we're also using one of what we call our extend
or breakout boards in between the development and the people. That means that we can plug our
logic analyzer or oscilloscope onto the pins in between. So, we can actually look at the signals
going between the two devices as well. So, you could take that centerpiece out. So, you have
in a trouble, you could split this out, put the centerpiece in to tap in and do diagnostics,
and then put it in. You can actually look at the signals and see what's going on. So, if we've
got some sort of problem, you know, and we say, no, it wasn't my code. My code's perfect. You know,
you can look at, I'll say, oh, well, maybe my code isn't quite perfect. I could see my timings
wrong, and that's why it's displayed exactly the wrong thing. So, it gives you a chance to get,
it's kind of a man in the middle attack debugging tool, if you like. So, you can get in there and
have a look at the signals. So, again, there's another popular one. And then you get things like
a prototype or patch type module. Really, that's a bit like the breadboard in many ways.
You have a header on that fixes in that enables you to connect to the mix mod. And then you can
actually solder components in onto here. Other through all or a little prototype. So, having
worked out how it works on your breadboard, and then you want to go to the next days and make
it more permanent, test it properly, then you can put it in on one of these proto or patch boards.
Another common use of this is you may just have another type of connector on the other side
that has like a compatible header sort of spacing. In which case, all you're doing is you're
doing wires from one to the other, and it comes a simple patch type board. So, it's another common
use. Do you find people are actually using this to prototype real products in the real world?
Yeah, I mean, for example, I mean, people would use it for learning quite a lot. We have a lot of
people that buy these boards purely for educational purposes. Well, that's personal type education
because they just want to try and program an FPGA or learn very long, that kind of thing. We also
have educational establishments that use them in situ, you know, on courses and things like that.
But, for example, we have one
chat that's actually designing an ultrasound viewing device. So, what he's using, he uses the
high-speed analog to digital converter for the ultrasonic parts, so sending out signals
with reading it back, decoding that digitally, processing it in the FPGA, and then he connects
a Raspberry Pi to the FPGA, and then the Raspberry Pi will then draw it out on the screen,
you know, do the image processing so he can see what's going on on the screen. So,
that built his own ultrasound viewing device, and the reason that he uses the FPGA is because
you need something to work very quickly. So, you'd have trouble doing that with a microcontroller,
for example. It's very high-speed analog to digital conversion.
And because you can decide what the logic gates arrays are, you correct me if you're wrong here,
please do. You basically write your program on the FPGA, a hardware program on the FPGA,
and then you get light-speed sort of processing. Exactly. You can have very, very low latencies,
you know, down in the tens of nanoseconds from input to output. Whereas if you did that on the
microcontroller, then you have to process every clock cycle, every several instructions, it's a lot
to do that. So, you wouldn't be able to get back in time for your next sample, so you'd be dropping
samples, and it just wouldn't work. So, basically, you're the Raspberry Pi or the Arduino of FPGAs,
that's where you're going to. Kind of thinking, yeah. And we try to help to simplify that as much as
possible, providing the extra bits and pieces so you can plug in. And also, we have a microcontroller
on here as well, which is actually responsible for talking to the computer, the PC, on the laptop,
so that when you send your design, it will then program the FPGA for you, and it will program
the flash for you, and all the utilities are built in. You don't have to go and buy a JTAG
programmer, and all that kind of thing. We put everything on the board to make it easier.
On the MX, we've also added two megabytes of SD RAM, which is a lot more than inside the FPGA.
So, particularly, if you're building a system on a chip, i.e. a soft whist 5 processor or something
like that, or your latest experimental CPU design, it's got some memory to use as well to store
its programs and do its processing. So, we try and put all the bits that you need onto the board,
really. And you're up mystorm.com. Yeah, if you go to mystorm.uk, actually. Mystorm.uk, I should
have seen that just right here in front of me. And can you give me an idea of what the pricing of
this is? So, if you were to buy a Black Ice MX in American dollars, so if you were to go and buy
that from Tindy, for example, it would be $59, which roughly translates, given that Boris hasn't
said anything, really stupid in the last few hours, to about 45 pounds. We're on one of the breaks
of this, you know, pick one. So, that's actually quite reasonable for an FPGA, considering what
the prices were. Yeah, I mean, we were always very conscious when we started the project that we wanted
it to be, you know, accessible to hobbyists, educational, etc. Not just professional FPGA designers,
kind of. So, we wanted to make it a purchase that someone could make and not worry too much about
how much. No, we don't. Which is probably why I haven't given my day job up. I see where you're going
with this. So, what else do we have on here at the stand demo wise, impressed me? Okay. Well,
Laurie is showing... I'm going to put photos in the show notes, even though I hate doing that,
because I need to remember to do it, but I will, because there's so many good stuff here.
Now, systems and chips and some of the retro type computing applications and games and things
that... As a user, an early user of the Black Ice and the more modern Black Ice MX, he's got lots of
experience of developing with it, so he can give you some examples of things that he's done.
Okay, hello. Hi, I'm Laurie Griffiths. Yes, I've been using Alan's device for about 18 months or
so now, so I've done lots of projects with it. So, on the stand here, you can see some retro
computer implementations. There's an A-Corn Atom implementation and Nintendo Entertainment System
running Super Mario Brothers on it. Okay, so you've got the Black Ice module here and then plugged
in on the side, they see there's a PS2 keyboard. What's this say? Oh, that's okay. That's not being
used for that, that's just this. So there's a VGA P mod here that's used to drive the VGA monitor.
And you're powering these all off from three rechargeable batteries? Oh, the only, the only
reason I'm using the rechargeable batteries is because the PS2 keyboard connector that won't drive
this Microsoft wireless keyboard without some extra power. So it's got a 5 volt power to drive that.
And so you're physically emulating the hardware of these all devices? Yes, that's right, so you
as an implementation of the 6502 CPU in there plus all the video drivers, the keyboard drivers,
and everything else. So you went down and physically designed this in all the logic kids?
Well, where did you get that? Well, people have been working on these for quite a few years now,
but only recently on the open hardware and the open software tools. But there's older
implementations. So basically these are ports of ports of ports from that people have been working
on for many years. So I think the Nintendo one was originally done in about 2012 on a completely
different FPGA, and then someone ported it to a UFP5K FPGA. So there's one called the icebreaker
that I've got here with an HDMI connector. So I ported it to that first, and then I ported it
to the Black Ice MX board, which the issue there is that there's this SD RAM, and it's a bit harder
to use SD RAM for retro computers because you have to get exact timing. But I've managed to do that
for the ACON atom. There is also an implementation of the BBC Microoper, Alan's earlier board,
the Black Ice 2, but I haven't managed to port that to the new Black Ice MX board yet.
Is this Super Mario looks exactly like it did back in the day?
Yes, it's the same software exactly that's running, and it should be a cycle accurate
implementation of it. Cool, excellent stuff. Well thank you very much guys for taking the time
to do the interview. And again, the website is MyStorm.uk, and do you have a website?
No, most of my staff is on the MyStorm.
Okay, and there's a forum that MyStorm.uk links will be in the show notes as well as
photos of the booth. Okay. Hi, and we're at a free software foundation booth, and your name is?
My name is Eric Kohn. And what is the free software foundation for those that don't know?
Well, the free software foundation is a nonprofit organization that tries to empower people to
basically get back control over the technology, which means use free software and promote it wherever
possible. What's free software? Free software is a software, well it's like open source,
but it has a certain philosophy. So software has to follow for freedoms to be called free software,
and that is you have to be allowed to use the software for any purpose. You must be allowed
to study the software, so you must have the source code available. You must be able to share
the software with your neighbor or your friend or whoever, so they can also benefit from the same
software as you are. And if you make any improvement to the software, for example, you fix the back
or you add a feature, you must be able to publish that feature so that the whole community can
benefit from that. And how is this different to say something like the BSD license?
Well, I mean the BSD license is, or which BSD license, of course, because there are many,
but the BSD license is permissive, or as I like to call it pushover license, because as soon as you
start, I mean it's also still a free software license, and it's still better than publishing your
software as a proprietary software, but it allows anybody who wants to use the software
or to republish the software to do so as proprietary software. And that's bad for the user.
So I'm looking at some of the things that you have on here, you have something about DRM,
so are you promoting DRM? Of course, we are against digital restriction management,
and the flyer is actually quite interesting, because it has a nice example of where DRM is actually
quite a bad thing, with Amazon who have their e-book platform, and people were buying
1984, and we're reading it, and of course it was protected by DRM, and then suddenly Amazon,
from one day to another, they started deleting all copies of 1984, which is kind of a running
actually given the book. So I think that's reason enough to be against DRM, so I mean if you buy a
copy of a book or a city or whatever, you should be able to share it with everybody in your
peer group. Okay, and public money public code, tell us about that, that seems logical,
I'm paying taxes, so the code should be public, obviously. Exactly, public money public code is
our news campaign, where we try to convince public administration, so governments to use,
not only use free software, but also if they hire a company to develop a software for them,
or they buy a software, they do that with public money, so our taxpayers' money,
and that should be published as free software of course. I find it very difficult to argue with you
on this, because I completely, I'm so on board with this is something that should be done that I
can, I'm finding it difficult to play devil's advocate here. Boss, let me come up with some,
have you heard any arguments against that? Of course not, everybody is happy to use free software,
where the most argument against or brought up arguments against is the security aspect,
which I don't agree at all, because if free software is developed in the open,
anyone can take a look at the code and improve it and fix security bugs, so they will get even
fixed and even faster, because more eyes improve the software even faster.
Okay, very good, and what can we do to help the free software along?
Where you can spread, of course, you can of course spread our word and share our materials,
and then sign for example public money public code, our open letter, or you can become a
supporter at fsfe.org slash support and support us financially. Okay, very good,
thanks very much, and links to this will be in the show notes. Thank you.
You've been listening to Hacker Public Radio at Hacker Public Radio dot org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast and click on our contribute link,
to find out how easy it really is. Hacker Public Radio was founded by the digital
dot pound and the infonominican computer club, and it's part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website
or record a follow-up episode yourself. Unless otherwise status, today's show is released on
creative comments, attribution, share a light, 3.0 license.
