Episode: 547
Title: HPR0547: openCSW Interview
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0547/hpr0547.mp3
Transcribed: 2025-10-07 22:52:47

---

Okay, so we're being recorded right now, just FYI, it's a recording session, so we're
recording right now, just FYI, it records automatically, so first of all, Philip, what's your job description?
What do you do on a daily basis with Solaris?
Okay, well, I am a professional assistant, I'm an administrator, part of an IT group that manages about 400 systems
and that's providing services one way or another to about 30,000 users.
But in your spare time, you do a lot of work on open CSW, is that correct?
That's right.
Cool, so what do you do for that project?
Well, I recently started the CSW binary packaging project many years ago.
I've been in the Solar System Administration realm for a long time now, working with Son Stuff for, let's say, 20 years?
20 years?
Well, close to that, yeah.
Working with Solaris since about two, three.
My website is Botol.com, it's my first on website, and it started life with a computer science degree in coding.
I've got various tutorials on there, scripting and programming.
I've got some device drivers on there for Solaris, and got one of the main K shell tutorials and all tutorials that is fairly popular.
Nice.
Cool, so you actually started open CSW, is that correct?
Or you just started packaging and stuff recently, is what you were saying?
Well, open CSW has a SA long history.
Probably won't be too uninteresting going into now.
Oh, I don't know.
How long is the history?
Well, you can read the history page.
There's a whole piece out there.
But yeah, so many years ago, six years ago, you could say what you found nationwide, off the whole of my CSW packaging.
Open CSW is the most recently incarnation.
We found it a few years ago, and probably made a sort of nonprofit organization with equivalent.
Okay, so for people who, because I think most of my audience are going to be Linux and some Windows users.
So for people who have never had the pleasure of using Solaris or anything like that, what exactly is CSW versus, for instance, on packages?
You know, why is there a CSW, I guess?
Okay, good question.
So many years ago, I was, I know there was a lot less research than there was now.
It's the other, the burden of pointing things together started mounting up.
And it was becoming very tedious now that people were complaining.
And there was some freeway.com, which provided packages.
But it wasn't exactly a pleasant experience if you had multiple packages in a toolchain.
You know, lots of dependencies.
And at that time, I don't remember if it was before or after I became a Debbie developer.
I'm also a pebron at Debbie.org, although I'm not active for quite a while.
But at that point, I thought, you know, why don't we have AppGet?
I can't believe no one has written some kind of functionality for Slars.
And so I considered sort of, okay, how, just how ugly would it be to write it myself?
I did the standard lazy program as well.
I can just take AppGet and compile it and do it work.
Right.
And the other was new way.
Nice try though, nice try.
So then I went, again, you know, to see lazy, the lazy program is rule number two.
Well, okay, I want it, but I don't eat all of it.
So just give me the usefulness.
So the fun, original native packaging format, definitely have a good name.
It's called CISPR4PaggingFormat.
And it's a very basic local packaging format system.
It's vaguely similar to deep package, but simpler in some ways.
So well, okay.
AppGet on top of the deep package.
I got my own AppGet.
So I actually banged out the basic transport and concept pretty quickly over like a weekend or two.
I originally actually wrote it for new campaign package get.
I named my utility package get.
And I take pride in doing a job right.
So you know the bits that I implemented weren't, you know, the full suite.
So I just buy to be as sweet and compatible as possible with AppGet.
For example, there is, there is a move flag to package get.
So those people who are familiar with AppGet, strange quirks try to move flag on AppGet sometimes.
Wow, okay.
So that's one thing I originally wrote it for, I don't remember, didn't.
I wrote to actually work with on freeware.
Because again, I was going with the path of least possible work.
Right.
Some freeware has packages.
I'll just use those.
I'll just make life easier to install those.
And it worked.
And in fact, some freeware still uses packages get to this day.
Okay.
The drawer back was that the person who runs it decided not to put the dependency information into the packages.
The sister for a package format does actually natively support declaring dependencies.
But some freeware didn't put it.
And so I had this nice catalog that downloaded all that package get can use that didn't have any dependency information in it.
So after a while, I thought, well, okay, fine.
I'll put my own.
Actually, that was a big sign at the time was also publishing its own CD.
That was also, it's gone through various names.
So one point was called some freeware.
But it's not some freeware.com.
It was also called the companion CD.
Okay.
So now I can, and with open solos and using IPS and stuff like that.
Right.
Yeah.
But so the nice thing was the some provided packages of freeware was limited.
So that was only about 100 packages.
But they had the dependencies declared in them.
So I thought, oh, okay, cool.
Well, I'll just write my catalog generating program to go through those.
Pull out the dependencies and make a catalog.
And it worked great.
You could basically dot the CD on a website, run my little program to generate catalog.
And point packs together.
I think we pulled down the programs with dependencies that you told to get.
Wow.
And that worked great.
If all you needed were those 100 packages.
Right.
Right.
So eventually, you know, I and other people wanted more and more.
And there were issues with, well, okay, well, we want the latest version of Mozilla.
But the sun ones only have this version of library and Mozilla needs that version of library.
So eventually, I decided we're okay.
G in for, in for petting in for a pound as the old technique goes.
And decided to just rebuild the whole darn thing.
And then keep going.
And at that point, I started recruiting people to help out with the rebuilding.
Nice.
Going forward since then.
So suns freeware.
I mean, that still exists.
But they're not, are they, I guess, I mean, they're not technically inactive.
But it doesn't seem like there's a whole lot of activity going on there.
Is, is that, would you say that?
Well, I mean, nothing like, you know, at some, some freeware.com isn't so much of a group activity.
The main guy is Steve Christensen.
I mean, he does what he does.
And he, he's doing it in mostly the same way that he's been doing it for 10 years or so.
Whereas open to his W.
I like to encourage people to innovate and take things even further.
For example, we have a utility set of scripts in our own packages.
Like I said, that have some common routines across packages that need it.
For example, we have some scripts that make integrating demon packages into, you know, run times at run times at boot time instead of fashion.
What slosh has this feature, at least the modern slosh tend to have had this boot time feature called FMF, which is kind of interesting.
I think it's very good.
Like, one of the Linux has something very good to them.
I think it was red hat.
Where rather than just run times scripts, you know, it's all a whole bunch of RC scripts.
You have a list of services on you.
And you have this utility to adjust the services.
They have SPC ADM for service ADM.
So you can do SPC ADM enable Apache.
SPC ADM disable Apache.
You can do status of services.
You can do SPC S Apache.
And it'll tell you, is it online offline in maintenance mode, problem, etc., etc.
And additionally, there are dependencies.
So, you know, if you have Apache, obviously you have PHP, no, PHP is not a demon.
You know, if you have one demon, depending on no demon, depending on NFS,
they won't start up until NFS is running.
And then it goes to problem NFS.
But then you fix it and enable it.
Then the system will detect, oh, hey, NFS is up.
Now I can go back and start these others as well.
Nice.
Very nice.
Yeah.
Some have some marketing and some some fancy boards for like still healing framework blah, blah.
So the CSW community right now, which you say it was a lot of people or a couple of people who just are...
And I guess who are they too?
I mean, are they all mainly sun, assistant admins who just want to have the tools that are familiar to them from, you know, from their Linux box?
Or, I mean, who are these people?
There's a mix of people.
We have some people who work for sun resellers and people who, you know, offer services based on the fun hardware software.
Maybe they want a nice tool chain to go along with it.
Then there are some random people who are system administrators who want the tool very occasionally.
We've had interest from general open source developers who develop on another platform, but they realize, oh, hey.
Open CSW gives you use for build farm and help on forging and building stuff as large.
So they've joined up and become nine tenants to have taxes of their software on floors.
Cool.
Okay. So if you might be able to clear up a question that I had when I first went to Open CSW, I think I want to say that you have to do something with like two different package managers to get to eventually get to the right one.
Does that, does that, does that ring a bell of yours in my name?
Two months.
If it's not clear that it's an either or, then we need to improve our dogs and we'd love to have some suggestions.
You know, it's similar to Debbie and you can use AppGet or App2 or one of the other front ends.
You pick which one you like and use it, but it'll point to the same repository.
Cool.
Yeah, that was a part that was confusing me.
I mean, in terms of, I guess, packaging, and I don't know much about packaging, I've got a couple of slack builds out there.
But in terms of packaging, how would you compare the, the fun, I mean, is it, is it a huge, steep learning curve to get started with fun packages?
Or is it, I guess, I'm asking you to liken it to either rpm.deb or something entirely different.
What's your assessment of the packaging format, I guess?
People, some people have bagged on the packs and formed that.
But, well, people always, you know, have to complain about one packaging format or another, right?
Oh, yeah.
But it's mostly because they don't understand it or they don't understand what can be done with it.
Actually, even some people inside saw it.
The people who made that, the new IPS thing, complaining, oh, well, we have to make this new packaging system because the old one is not network capable of blah, blah.
Hello, I've been taking that look at the package for five years now.
Yeah.
Yeah.
But directly on to the question, it depends what tools you choose to choose.
I mean, if you choose to buy hand, put together a package, it can be a bit tedious.
So, that's, there's been a lot of work in various ways.
We, open CSW, you have our GAR system where simple packages can be made really easily.
And you actually don't need to know almost anything about the format you put together a make file, kind of like a spec file.
And you type, make, and then just happens.
Oh, nice.
And it does, like, the dependency stuff and all that other fancy stuff that all the other modern packaging systems do, you said, right?
Oh, yeah.
We can, I guess.
Right.
Pack-in-form supports that, I think, in our current one, our current GAR system, I think attempts to automatically detect dependencies and add them in.
Okay.
So, way back in the day, when I was first getting into the UNIX stuff, I was trying to, you know, I was installing all the UNIX libraries
and dependencies on OS10, which was my platform of choice at the time.
And I would, I would often find that there was a lot of, like, really porting that had to happen because of, you know, the way that OS10 has, has stuff set up.
And it was well beyond my knowledge.
So, I'm wondering if a lot of these things that, you know, a lot of the free software out there these days is kind of written more with Linux in mind, just because that's got, I guess, the market share, you would say.
Yeah.
When you're grabbing it, you package it for some.
It depends on how professional the open software development has been.
From personal standpoint, I find it really sad because I remember I've been doing this kind of thing for 20 years.
And I remember where it was really a point of pride back when Linux didn't even exist.
You know, I used and compiled a new software when Linux didn't exist.
And then it was a point of pride to make your software clean.
To cleanly, components don't own on HPUX, RRIC, so R, SonOS, everything.
Right.
Yeah, portable code.
Right.
And now it's like, people hardly bother.
Everyone's on Linux.
Okay, I'm done.
The really silly thing is that the new autocomps tools actually give you a big leg up on making it portable.
But people don't even bother to check.
For example, just a day, I just submitted a patch to Pango where one of the subcomponents they used, the open time, they include standard int.h.
Stun int.h doesn't exist on the large.
From the thing on, autocomps is already detected that.
I'm not only happy to detect that, but it's also that I could, hey, you don't have standard int, but you do have int types.h.
So all of the people have to just say, have int types.h, use that, but they didn't check.
So I submitted that.
Now is that, let me ask you this, then, is that extra?
Is that one less step that a programmer has to take?
Is it one more step than a programmer's take?
Is it making it easier or harder?
Or they just don't know to do it?
Why isn't it being done?
In that particular instance, it's another step.
It's also the problem of feature creep.
For some reason, people decide, oh, well, the name is the latest GCC and T++ is 2010.
Hey, those these features added in 2009, 2010, I'm going to use those.
I mean, not like they add any advantage.
You can write the same software with the GCC3, and it would work great,
and it would be more portable.
There's the learning, but they don't.
And it's because they're using bleeding edge and CNC spec for no good reason.
That is more difficult, for example.
The standard int, I think, is, or some other thing, is part of the C29 spec.
And there's those ways to do it before.
And most platforms for that, but people aren't using that anymore.
And that would actually be less work to use the oldest spec.
Right, I got to put it, seems like such a big advantage.
I'm kind of surprised that people don't do that more.
I wish they would, because I like to compile code on just random stuff.
You know, either different unixes that I get to try out or different architectures on maybe a common,
like a Linux thing, but it's PowerPC.
And then you run into some weird issue where, you know, they've hard-coded,
like the C flags or whatever, to specify, you know, a specific architecture.
Weird stuff like that.
Really a nice meeting.
Oh, yeah, yeah.
There was, again, you know, recomparing the GTK tool chain, Clip and Pango again.
But there was this, they automatically assumed GCC,
therefore, we're going to add in these CCC specific flags.
And I go and get the part where it's actually defined and configured or whatever it was.
And just know about it by hand, it's here, comment.
We really shouldn't make this less DCC specific.
Yeah, you should.
Well, that actually reminds me.
So what is Solaris use for compiling?
I mean, I know it's some studio, but what's the back end of that?
That is the back end.
Oh, it is called SunStudio.
Yeah, there are chances, a few times it used to be one time on 4K,
then SunStudio, and Bill is not a name or two here and there.
But yeah, the name du jour is SunStudio.
Okay, cool.
So have you used Open Flares at all, much at all, or any experience with that?
Not much.
I just pulled it up.
And certainly the desktop is a lot prettier in easier these days.
Right.
Yeah, it is.
But, you know, you mentioned that, you know, compiling opens just doesn't support Open Flares.
It's kind of true and not true.
All our packages and binaries should actually run on Open Flares just fine.
That's my experience just that way.
Right.
And Sun actually is rather unique in that they have historically guaranteed binary compatibility.
So, for example, you can compile something on Flares 8.
And if it compiles cleanly, you can take the exact same binary on Flares 8, 9, 10, and open Flares.
Wow, nice.
Yeah.
And you want to get really funky.
When they first made a switch to Flares, you know, originally it was Son of West or I was Son of West.
And to encourage adoption of the new fancy Flares, they made a binding compatibility extension
to allow to run Son of West binaries.
So, this is lower your mind.
You can take an NCSA mosaic Son of West binary and run it on Flares 9.
That is crazy.
That's quite a feat.
I mean, talk about portability, you know?
It's the little matter of actually thinking stable APIs are good.
Yeah.
That's one of the reasons why I like working with Lars.
Okay. Well, I guess we can't avoid, you know, this question, right?
I mean, so Flares or rather Son, obviously, is no more, I guess.
So, what's the general sense, I guess, within the community or maybe within the places that you work?
Are people still pretty confident that Swellers is going to be around?
Now that Oracle's got it or...
I think different people have different opinions.
My personal opinion, I've been, obviously, watching what Oracle's been doing.
And there's, there's made certain promises about, you know, their intentions to keep slides around
and certain aspects of Son.
And it looks to me like they're very serious on that.
They've mentioned that they have ramped up their support stuff with Lars and things like that.
And they've improved the support websites.
They've done lots of other positive things with.
The downside is that they're making a few more things pay only.
Some have historically had this sort of pendulum swing between patches of free.
Got a paper patches? No, they're free.
No, they're going to pay for them.
Swing back towards the, no, you're going to pay for them.
But hey, always have the good thing, you know, because anything that actually earns you money, you're more likely to keep around.
Right, yeah, that's true.
I mean, it struck me sort of that Oracle was probably not going to just kill off Swellers.
Because right before they bought Son, not right before, but like a year before.
They tried that.
Remember they did that enterprise in the next thing where they basically took Red Hat and sort of repackaged it with their own branding on it?
I don't know if you were aware of that.
It was kind of a big splash in the Linux community, you know.
It looks like they were trying to get into that sort of, oh yeah, we're in OS as well, market.
So maybe that's what their Swellers intentions really are.
Yeah, it's interesting, you know, they did Oracle did that quite a few years ago.
Exactly, but it seems like about five years ago, even.
So they've been in the Linux space for quite a while.
I know they've also got the hoaxing open source with Berkeley TV.
Yeah, yeah.
Anything.
So it would be interesting to see what strategy they pursue with Solaris.
I noticed that's one of the famous open Solaris involved guys.
Stephen Hahn announced his no longer going to be with Oracle.
There's no reason to give them.
Perhaps that's because the Oracle might be planning to be a bit more corporate and less, you know, very very.
Right, yeah.
The way things have been.
So, you know, it didn't suit his taste, but I think it could go very well for people who want to see.
Solaris continue as a solid, commercially supported entity.
So, was Sonowas your first personal, the first units that you used?
What did you start out on?
Oh, I had a long history.
I started out.
My first computer was what would be called over here.
A time X and Claire with 4K of memory.
And then I upgraded 16K.
Then had a ray effect color computer.
And then eventually I started running this interesting thing called OS 9 from Microware, which is a multi-tasking,
quasi-multi-user, but non-protected memory, operating system.
It's actually used and was used in a lot of embedded systems, but it was very units like in a lot of ways.
But small program because it was destined for embedded systems and things like that.
So, it's a pretty good stepping stone between messing around with basic.
And then when I finally started using Sonowas and College.
Cool.
Yeah, that does sound good.
I've never heard of that one.
That's an interesting sounding one.
Also, look that up on the internet.
Read up about it.
Yep.
With a 6809 processor.
Oh, okay.
Okay.
So, here's a weird question.
Is the network the computer?
Well, finally you should say something.
I just attended a local Unix group meeting last night with a subject of Memcastee.
I used a group which I actually started myself about 10 years ago with Los Angeles.
It was a association of Son California.
But presented by a great guy, Matt Ingerson, who did a lot of work with the Memcastee folks now in company.
Black set, what struck me was really interesting was Matt was describing the way Memcastee works.
And the protocol that it uses.
And I commented after hearing it, wow.
Memcastee is like a simplified CPU with a distributed memory over the network.
Like an 8 instruction set, the CPU over the network.
So, yeah, it's becoming that way.
Wow.
That's really interesting.
Well, cool.
I think that's about all the questions I had for you, Tiana.
Thanks for talking to me.
It was a real pleasure and really, really interesting.
Great.
Happy to do it.
Thank you for listening to Hack with Public Radio.
Thank you for your responses by Carol.net.
So, head on over to C-A-R-O dot N-E-C for all of us in need.
Thank you.
