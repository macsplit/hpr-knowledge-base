Episode: 3009
Title: HPR3009: Linux Inlaws S01E01
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3009/hpr3009.mp3
Transcribed: 2025-10-24 15:04:36

---

This is Hacker Public Radio Episode 3, 2009 for Thursday 13 February 2020.
Today's show is entitled Linux In-Law's SO-1 EO-1.
It is the first show by new host Monochromec, and is about 60 minutes long
and carries an explicit flag. The summer is
Linux In-Law's, a podcast about on topics around free and open-source software.
Today's show is licensed under a CC by License-Dash.
This episode of HPR is brought to you by Ananasthost.com.
Get 15% discount on all shared hosting with the offer code HPR15.
That's HPR15, better web hosting that's honest and fair at Ananasthost.com.
This is Linux In-Law's, a podcast on topics around free and open-source software,
any associated contraband, communism, the revolution in general, and whatever else fancy physical.
Please note that this and other episodes may contain strong language or fence of humor
and other certainly not politically correct language you have been warned.
Our parents insist on this disclaimer.
Happy Mom!
Thus the content is not suitable for consumption in the workplace,
especially when played back on a speaker in an open plan office or similar environments,
any minors under the age of 35 or any pets, including fluffy little kilobannies,
you trust the guide dog unless on speed and cute T-rexes or other associated dinosaurs.
Good afternoon, the audience.
This is the first also called Virgin episode of something called Linux In-Law's.
A new podcast on open-source technology might say something.
Okay, I thought you were in the middle of a sentence and I didn't interrupt you.
Right, so where were we?
Right.
Linux In-Law's.
Your friendly podcast, anything hacker related, anything cultural related,
I have like good beers, for example.
So essentially your podcast on topics technical and fun.
And before we go into the, before we go into any further details, let us introduce ourselves.
So let me introduce myself.
Yes, and this probably won't be edited out or maybe, maybe people, I don't know.
Anyway, my name is Chris a moment.
I'm a veteran first veteran as in three known source veteran.
If you, so if you deploy your search engine of choice, if you just search for my name in a three known source context,
you will find me on things like Chemnitz-Henny-Duchs-Tage, like Frostcon,
which is the second major event here in Germany.
I'm also in charge of a luck here in here in Germany called the Luck Frankfurt,
as in the next two group in Frankfurt.
I don't do all sorts of fun things.
As a matter of fact, shameless plaque now from a commercial perspective, not.
And next weekend, and this will be way over as when you hear this,
because we won't be able to publish this in a public radio before kind of mid late February at this stage,
Frostcon will be truly over.
But for some reason, you manage to deploy your flux capacitor and go back in time.
You can hear me in Brussels at the upcoming Frostcon speaking on something called Redis Jason,
which is a document database running on top of our beloved NoSQL database called Redis.
So Chris, a quick question for you there.
You mentioned during your name, and you sort of missed out the Tinder connection there.
Was that on purpose or was that for the listeners to find?
I thought we wouldn't be talking about this Martin as previously discussed.
Yes, sorry, yeah, what advice listeners.
There may be some surprises.
Yeah, and this is a podcast, not necessarily safe for the workplace.
So you will hear swearing.
This is not PG.
This is more like triple X.
Martin, why don't you do so self now being a free contender user?
Thank you.
Right, so my name is Martin Visso.
I am actually a Dutch person, my birth, having lived in the UK now for 20 years.
This is to be reconsidered shortly, I think, but that's a topic for another time.
So yes, unlike Chris, I have fairly new to open source as in more than eight years,
not like the 30 years been doing this, but likewise have been using various different softwares
over my professional and amateur career.
Yes, so we are both different part of Europe at the moment.
Having similar mind on some subjects may need to be a one, but there are others, of course.
Should we tell our beloved audience when and how we met.
Or should we keep this to a later show?
Well, it means it's probably with the business understanding the how to vary.
Different people got together.
Well, I mean, it's not exactly a secret because in contrast to properly believe,
no, the cartel didn't play any role in this.
If you look it up on LinkedIn or other professional services, social networks,
you'll see that we both work for a company called Redis Labs.
And this is basically how and where we met quite some time ago indeed.
And I was actually warned before you arrived of your, let's say characteristics by a fellow German.
Okay.
But then I'd prevent you from joining.
And our beloved audience probably would like to know that you haven't been looking back ever since you joined, I suppose.
That's correct.
That's correct.
We always look forward to it.
Indeed, indeed.
It's not a point in looking past.
Although obviously things can be learned from history.
Let's not mention that one.
Probably, probably some topic for another episode.
Okay, Martin, why are we doing this?
And how are we going to go into the middle of teaching?
How are we doing this in about five minutes?
But why are we doing this?
Because, yeah, I think there's the main reason why we're doing this is sorry, it's not like you finished here.
Yeah, sorry, because there's another, there are quite a few open source podcasts around.
Just, you just have to take a look at a public radio of what's out there.
And some other podcasts that I've normally sometimes listened to if I don't have anything else to do.
Tackle the subject of open source to great extent ranging from, of course, the beloved Fluss Weekly.
Ren, if you're hearing this, yes, this is your show.
Right up to something like open source under dogs, where I think it's Mike Schwartz or something tells us about the business side of open source.
So, Martin, why do we need another podcast?
Because there is nothing like it already, obviously.
Yes, I mean, this podcast is there for you.
You may think, oh, who art is too old for just rambling on about open source software and beer.
And I could spend my time better looking at adult websites, right?
But you will be surprised.
The value you are getting from this.
Does your wife still know this as a new look at our website?
She's not currently in the room.
Perfect, perfect, yeah.
Yeah, what's the point in looking at our websites if you can do a podcast?
That's spot out.
Yes, of course, what Martin really means, it's not two old files talking about open source technology, but rather some cool content that you can use.
And this is something where you come in actually to because this podcast, although it's called Linux in laws, it's not just about us.
It's about you to a great extent because at the end of the day, it's your show.
So, there's a website called Linux in laws dot EU.
We're going to mention that at the very end of the show just again.
We can send mail to and the mail address is feedback at Linux in laws dot EU.
And we are really looking forward to your feedback, what we can put into the show that ranges from tech tips to any topics that you see fit.
If you have any suggestions about the format.
So, for example, if you want to have more surreal bastard of bass operators from hell episode, just send us your suggestions and we take a look at them.
Also, if you have any technical questions that we can basically look up on our search engines of choice to come up with the most likely answer that may answer.
So, essentially, we are looking, we're going to do anything or everything that other podcasts don't do.
And for this, we are looking for your feedback.
Yeah, so Chris, what about the competition of hacking this website?
Did we publish that this series or are we leaving that for a later date?
No, with some splendid prizes.
No, actually, the website, of course, cannot be hacked that goes without saying any other people or people just attempting to do so bear in mind.
We are both hard and security security experts.
Some more than others.
Sorry, yes.
No, no, sorry, we're not blackheads. Don't get us wrong here.
But if you try to hack the website, you better should be prepared for the consequences. Let's put it this way.
If you know what a reverse access, sorry, if you know what a remote access trojan is, then you don't want to hack the website.
If you want to find out, just go for it.
I'm only joking. No, there won't be rats coming away if you try that.
So if you try that somewhere, if you want to try to hack the website, but it's not nice anyway.
Excellent.
So there we are with our introduction.
Now, how do you get this to this kind of setup working?
Chris, what do you think is the main requirement for any listener wanting to produce a podcast on this?
Interesting topics, because what you essentially need is something called the Internet.
I'm not sure if you've heard about it.
It all came to fruition, basically, when people were thinking about the idea of sharing cat videos.
At the time, about 40 years back, they had to use carrot pigeons or something like this.
So some bright spark, I'm not putting the idea of interconnecting computers in order to do that, to do that.
And without this whole Internet thing, the podcasts, not just all one, but also basically other distributed podcasts.
Why many carrot pigeons?
Yes, indeed.
So essentially, let's run through this.
So if any budding podcast people are out there, we was pretty much a standard setup.
We are using Mumble, like many other podcasts, because Martin's in the UK, I'm in Germany.
So we are running a Mumble instance on one of Martin servers.
We are also using Riot as an Ametrix server, Ametrix instance, in order to exchange messages.
And other content.
Yes, for those of you who are wondering about these building blocks, there will be links on the show notes.
What else do we need?
What else do we use Martin?
Of course, we use something called emails, quite a lot, actually.
Well, I mean, in my scenario, the first thing that came to mind was not to use your kit, because that didn't work.
I don't think it's all of myself.
And then there was various amounts of filling with routers required to get all these ports open, firewalls, etc.
And not to mention beating the manual.
Yeah, which is something that Martin doesn't know.
Of course, the reason why my kit didn't work is that Martin, let's put it this way, was a need of some professional training.
In terms of how to administer the new service and that sort of thing.
So somebody got in touch, Martin, sorry, I can't name any names, of course.
So and they might be good idea because your deficits are quite good, but you're upscaled, somewhat could be improved.
So that's the reason why they said no look.
Let Martin do the whole thing and then basically we can think it from there.
And apparently that worked quite well.
That's a big A.C.
But it was a worthwhile experiment also.
Yes, indeed.
Okay, a couple of fun facts.
Mumble isn't straightforward.
So is Mumble the server behind Mumble?
Maybe now it's the time to go into a little bit of detail of how this whole thing works.
Mumble slash murmur is a voiceover piece system that uses TCP slash UDP in order to send speech or general audio information around.
It does require a little bit of fiddling if you run this on Linux slash OSX as we do.
So for status, for example, you want to stay clear of something called voice activated speech.
I think it's called month, right?
Correct.
So because Mumble, which is the default client, or which is the standard client, rather from the server side, Mumble is the front end client.
And does has the ability of detecting voice, but this messes up your audio stream, especially when you record this.
So we are resorting to continuous or something called push push to talk.
You also want to make sure that the transmission speed is okay.
Why don't you shed some light on your initial voice with regards to ICMP throttling?
Yes, initially we started.
Chris set all this up on his kit and Mumble as well as about the murmur server riot.
And we found that there was a considerable delay in audio.
So there was some experimenting going on in terms of, well, as you do in terms of networking, where is the delay, right?
So the round trip time was around 30 milliseconds.
You know, that doesn't really explain a three second delay, right?
So we had a brilliant idea about using MTR to track the location of these delays.
And turns out that various ISPs do various throttling at various points in the way over to the outside world.
Sorry, yeah, for those of you who do not know MTR.
Think Trace on a good day in terms of MTR does a continuous trace route between your side and the destination, giving you the overall packet loss.
It just used TCP, but I think you can only you can convince it also to use UDP.
Meaning that you not only get an overview of the over packet loss, but also of about the round trip side, which is pretty important if you're dealing with all your packets.
Because something that all you doesn't like is jitter as invariable delays, because essentially that will kill your audio stream to a certain extent.
If the line doesn't match up with regards to a maximum amount of jitter, latency audio can cope with to some extent, but jitter is really bad for your audio stream.
Also, something that we found out, yes, you can use TCP, and that works, I think, just a little bit better than UDP right Martin.
Yeah, there's various options in terms of the sound and compression qualities and number, which are all very easy to configure anyway to be honest in your friendly audio settings button.
So obviously the quality, in terms of compression, amount of audio per packet, etc.
So these are all essentially it required a lot of experimenting before we got the workable setup here.
Yes, seeing in two different countries.
Yes, it wasn't straightforward, and if you want to set it up that way, and this is basically what I heard from other podcasts too, whether it's going to be the Ubuntu podcast in the UK, which had a whole episode on how the kid worked or how they got a kid working.
At the end of the day, other podcasts that are kind of distributed geographically, you're talking about, I think the Ubuntu people synchronize even is even down to synchronizing clocks on their side.
We haven't gotten that far, but then we're just starting out.
But we prepared to do some serious amount of experimenting before you get a drive, and even this is just us to being two people doing a podcast.
Needless to say, there will be some sort of limited post processing. And for this, I'm using audio, something that I just found out this afternoon, for all you budding Mac experts out there or Mac fans, audacity, at least 2.3.3 as in 2.3.2, does not run on Catalina.
So if you are Mojave with regards to it, it's actually when it's there, if you want to use audacity.
But of course, there's something from preventing you off taking the audio file and then moving this to the Linux box if you choice, and doing the post production there.
You haven't mentioned any Windows users out there, Chris, is that for a reason?
What is Windows? Microsoft Windows, no?
Microsoft Windows, don't drink a bell, do explain please.
This is quite a large proportion of home users are still using this so-called operating system.
It's not an open source, is it?
I don't believe so, no.
That's probably the reason why I don't know those.
But now that you mentioned this, some of our listeners may be on Windows, right?
So what advice do you have for them?
Yeah, no, actually, no, no, no, no, that you mentioned that actually.
Yeah, this Windows thing does, it's been around for some time, right?
20, 30, 25, 30 years, yes.
Yes, that funny anecdote comes to mind, some people are referring to this Windows thing as bootloader to boot something to boot up something called WSL.
The Windows subsystem for Linux, and the Windows subsystem for Linux, I think it's called.
I've seen smaller bootloaders to be, to be honest with you, but I think if you are still on this Windows thing,
you may want to consider WSL and if you want to use open source software.
Because what this is, what you get when you use WSL, you get a user land of choice for you and with that, whether it's Ubuntu,
whether it's OpenSusur, whether it's Fedora, whether it's something else, just go to the corresponding websites down and take a look at what's out there,
and then basically you can boot into your Linux distribution of choice, leaving this grand unified, sorry, not grand unified, but other grand bootloader called Windows aside, if you're so inclined, that is.
That's a very handy tip there for our listeners, I think I'm sure they'll appreciate this.
Assuming there are any of Windows of course.
Yes, yes. We may be targeting the wrong audience.
For those of you who are still on Windows, fret not, you can move.
It's always an option.
Especially if you're technically inclined, this is the platform of choice for you to be on.
Any comments on particular Linux is to use for listeners there?
That's a very interesting question actually.
Yes, it depends on the amount of time that you have at your disposal and the reckoning learning curve that you're willing to invest into.
Linux can be as easy as Linux Mint, if you're so inclined in terms of just download an ISO, put it on a stick, boot it up, and then the stick pretty much does it all for you.
This is the one side of the coin, the other side of that chart, of that kind of circle, if you will.
It's actually something called arch, or if you want to go further down that rabbit hole, Linux from, sorry, Gen2, or even Linux from scratch.
And you may wonder, especially if you're new to links what this all is.
A Linux from scratch essentially means you have a cup of recipes, some people refer to it as a cookbook that allow you to build a Linux, build your own Linux distribution from scratch and hence the name.
Because essentially what you do is you take another computer, you compile your Linux kernel on that other computer.
You put in, you put together an initial user land as in the stuff that runs once the kernel is up and running.
Sorry, the kernel is of course the underlying system software that talks to the hardware gives applications memory and does other fun stuff.
For example, shoveling network packets around the, around the system and so forth.
Once you have this up, this minimally user land up and running, you can configure then use your Linux to further base on your specific requirements.
When using Linux from scratch, that means pulling down the source code as in the source code where all the applications are made off and compiling that on your minimal user land, giving you at the end of the day, a fully customized Linux system based on your specific requirements.
Gen 2 is a step up the letter in terms of a package-based Linux system where you pull down the source code in a packaged form from so-called repositories but still compile it on your machine.
Sometimes also pulling down already pre-compiled packages and arch then is again a little bit more user-friendly where you download just packages.
You have something called the arch user repository that also most of the time consists of source code that is then compiled in your machine.
But these three options are more for the technically inclined user of Linux who doesn't mind spending a good deal of time, especially when you're going for let's say Linux from scratch or even gen 2 or the other way around.
Arch, as I said, is a little bit more user-friendly, a full disclaimer you're talking about, you're listening to a brother, you're listening to something called an arch package maintainer, I full disclosure, I do maintain arch packages.
Not for living just for hobby, so I might be slightly biased here. Martin, what Linux distribution did you start off with?
You mean originally or in our current setup?
No, these 25 years ago when you first used Linux.
Ah, this question, Chris, probably the main Linux is around back then where HP obviously is of ours and there's the original ones that were around and then it's land.
Obviously working in a corporate organization that's the ones that were used back then.
Okay, so you've given away the fact that we are both old, which is okay.
Well, somehow older than others, but it is all relative after all.
Yeah, I wouldn't call you quite a dinosaur, Chris, but thank you.
I think we are experienced and knowledgeable, I think, is the phrase rather than old.
That's how I would describe it.
The reason why we're not doing video streams, that we're not doing video stream like other podcasts, yet is simply that I can't be bothered to wear makeup and Martin is, I think, too old for wearing makeup.
I suppose it would mean moving out of your pajamas as well, wouldn't it, really?
Some distinct disadvantages there, all these extra clothes required.
Martin keeps throwing up boards that I don't know. What are pajamas?
Okay.
No, don't send pictures, Martin, don't send pictures. That's okay.
I shall access rights right now.
Oh dear, Martin, you didn't have to do this, you know.
This is disgusting. What is that cat doing on your lap?
I'm glad we are here.
In most cases, so far, I've been able to have our own rooms when in a similar location. Let's put it that way.
Yeah, Martin, just for the benefits of the listens, Martin, just send a cat picture on right.
We're just not fit for public consumption, so we leave it at that and know that won't be in the show now, it's Martin.
Good, good. So you don't mind me putting up the bunny picture on the website with you in it.
You can try, but it will be removed in no time.
Okay, I'm with you back to safe runs on with the infrastructure discussion.
Okay. Yes.
Martin, why don't you get started with after you graciously declined to use my matrix or why don't you set some more light on your,
on the installation that you that you were doing at your woes with reverse proxies?
Well, not so much woes. It's having multiple.
Okay, so first of all, I'm running this all at home behind a simple router, which is serving multiple purposes, so not a dedicated piece of.
Sorry to drop Martin, but maybe we should explain what matrix is first and what what what what what what synapses.
Maybe you can check some more light on on federated communication tools. Sorry to drop.
Oh, I thought we were talking about the the woes of the installation. That's that's fine.
Sorry, but yes, synapse is a matrix reference installation and Martin is before he goes to the technical details is will shed some light within two or three minutes.
Yes, we'll be glad Martin.
What what matrix really is and why it's important.
Good point. Good point. Right. So we are all familiar with the communication tools that cure your corporate slacks.
I mean, I probably the main one these days kind of skype Mr. Boat there somewhat after having been taken over by our friends from Microsoft.
But they are very friendly people.
People at Microsoft. Have you not dealt with them before?
Yes, that's that's by actually skype was originally a company in Estonia.
And again, they are very friendly people if Estonian. So all right, going back to where were we?
What is a federated communication server?
Yes, federated communication. So rather than having a central server where everybody connects to and
since their messages and receives their messages, the idea about federation is obviously that it is a completely shared setup where every
server in the communication mechanism plays its part.
So there is no one central control. So for the communist amongst us, this is a very attractive setup.
Although this argument really that that that's communism was.
Yes, excuse his favorite topic, by the way.
Just to mention this for our listeners as well.
To be central. To be detailed in the later episode, perhaps.
Just in case our listenership is wondering, yes, it will be all revealed maybe.
Okay, we will leave that one for a four or four later dates.
So yeah, that was our choice of communication software,
which Chris kindly started set up on his own server.
Could we call it server?
Yes, it is server fun enough.
It doesn't quite perform as a server, but say it's.
I was let to believe it was a server. So there we go.
So yes, you obviously require a Linux server of some sort to run both matrix and normal.
Now your choice of OS here is entirely up to you.
We have Chris has just given you a rundown of some options there,
which you may or may not want to spend more or less time on,
but those of you who don't want to spend much time, your choice is Ubuntu.
After having spent many years using obviously the red hats and the central OS's,
I have come round to the the practicality order.
The benefits of using a more adopted platform like Ubuntu,
which doesn't require you to compile a piece of software over and over again
because all the packages are out of date.
So yes, Chris, what's the next version are you running on your server?
Being a hardcore system admin for so many years,
of course I use something called Debian.
Which is of which of course Ubuntu is a blatant drip off.
And what Martin of course didn't discover when he first kind of came to the Linux front
about what two years ago, three years ago, maybe even more.
And that there are different grades of Linux when it comes down to,
let's put it this way, being up to date with current version of the software.
And of course the name send or as is a bit of a giveaway because what sender stands for
is a community enterprise operating system essentially taking
red sources and packaging them up as a, well, free version of red hat.
So for those people, for those of all listeners who don't know,
red hat is a subscription based service where you pay a little bit of money
or much money depending on your number of subscriptions.
And for that, you get hardened packages,
you get hardened versions of the upstream software,
but also what most people spend money for is support.
So if your red has some breaks down,
you can call somebody and you will get help in order to fix that problem.
Send or as is without support,
so you simply install it on your server and then you're left to your own devices.
Given the fact that both distributions are at the enterprise,
they're the update policy is quite conservative.
Let's put it this way.
And this is basically what Martin found out that some of the,
or that most of the packages are, I wouldn't say still,
but rather outdated or older, let's put it this way.
Some people would also say more mature.
More secure, more secure.
More secure, meaning that with sender as a red,
you get packages that are easily two to three years old.
Now, if you want to be at the very forefront of software deployment
and maybe to some extent also development,
you want to go for a more recent,
or you want to go for a distribution that has a more up to date.
Let's put it this way, a packaging policy.
So Fedora comes to mind if you want to stay in the red head realm.
Fun fact, what Martin, what is the, what are, what is,
what are they do most important characteristics of something called the Linux distribution?
Any, you have any guesses?
Characteristics.
Yes.
As in, why do people go for a specific distribution?
Apart from software packaging policies.
The general circumstances obviously,
the availability of software.
And I would more play along the lines of the package management system and the logo.
But this is because you are a,
maybe I'm wrong, I don't know.
What do I know about Linux?
Well, this is exactly the point where you,
your Linux knowledge and the requirements are quite different to general public who
just want things to run.
That is kind of a minimum spec for a piece of software.
In that case, Linux, Linux distributions are like cars, right?
You know, you will know one of them, but they all have four wheels.
They all have a handbrake, they all have a steering wheel.
And at the end of the day, they get you from A to B, right?
So it's Linux.
Every distribution basically has a bootloader, has a system.
But then the difference is start with the package management,
with the package management system and do not end at the logo question.
Of course.
Well, the thing is that, yeah, on your Ubuntu,
you can run all your CentOS,
which there is a certain version of say,
so take a piece of that like matrix or like number or moment or whatever you want to call it.
You can run certain versions of our supporter at the box, right?
With your package manager, whereas with your car, you know,
that is a completed piece of engineering that doesn't really have many options
to say, oh, let's install a fifth wheel or another steering wheel,
whereas that's not quite a good comparison in my opinion,
if you're talking about.
So very, very bad analogy there, Chris,
for all of that one, I'm afraid.
For enough, although we are triple X podcasts,
I cannot use other examples.
We would probably keep that for later special episodes,
but thanks for the credit, much appreciated.
Okay.
Back to my, back to my original train of thought that Martin,
it would be interesting to see.
I'm that sure that you didn't or that you weren't able to use the reference implementation
of matrix called synapse from your distribution management over you.
How did you install synapse on your server?
I didn't have to compare it in the end.
That was, if that's what your question is.
Synapse for those of you who don't know is a Python code base,
meaning Martin probably did install it with something called PIP.
Of course.
Did I?
I thought this was all to be revealed.
No, I'm sure I did a simple package manager install on that one.
Okay.
For those of you who don't know, for those of you who don't know what PIP is,
and that may or may not include Martin,
PIP is a Python, no Martin, you don't have to Google this.
I'm going to explain it in a minute.
Okay.
I'm just doing something else in the meantime.
Which is fair enough.
No.
PIP is a package management system for Python.
In contrast to DNF, which is used on Fedora like systems or even well,
or APT on Debian, PIP only kid as for Python.
So any Python packages you want to install,
you can install through PIP and synapse would be one of them.
Like with any other package management, package management system,
it does, for example, look after dependencies.
So having chosen the correct operating system,
it was a simple matter of an APT install, actually.
Right.
So you are using Ubuntu 16.04 latest, sorry, the second last LTS?
18.
18.04, okay.
Why 16?
Why 16?
Because you're old?
Well, no, I feel installing something.
You would don't want to go for the latest.
So this is a handy tip for you, listeners.
Never go for the latest version.
Go for the one before the latest version, which is obviously 18.
We since currently 19 is the latest.
For your information, Chris.
We should probably explain what an LTS is.
LTS, of course, stands for long-term support.
These are typical distributions.
You have them, I think Ubuntu or Canonica,
Canonica, the company biubuntu.com, the term.
These are distributions that are a version of the distribution rather
that are supported for a number of years, where, for example, Canonica,
with ordinary versions of the distribution,
only have a support window of what, I think, nine months these days.
It used to be, I think, a year, but now it's down to nine months.
So for production systems, including your adult content,
adult entertainment content distribution network, your home theater PC,
I would normally go for an LTS.
The trouble, of course, is that with the LTS,
software can be somewhat outdated, unless a distribution decides to backport.
Then use software packages back to the LTS, which some of the operators do,
but some of them don't.
How did we get here?
Yeah, I was giving out to you about PIP, right?
Yes, no, I didn't have to use PIP for metrics in this case.
Yeah, so I think you are a bit of a fan of Python on your work.
Oh, yeah. I've been using Python for the last 20 years.
Go ahead, mate.
I'm sure I heard a rema you were currently investigating Java as a better option.
These are false accusations, of course.
But Martin is referring to the upcoming first-hand presentation
or the past first-hand presentation, if you're picking this up later,
included some performance benchmark framework called YCSB,
as in Yahoo Cloud Serving Benchmark, yes, that's what it is.
Okay, maybe two sentences on this without doing blatant commercial
for the presentation.
If you're interested in document-oriented DBs,
being implemented in Rust, deploy your search engine of trials
and look for Redis Jason Zimmerman, which is my second name,
and Boston 2020.
You will come across a talk that I gave on the 2nd of February 2020.
So a few weeks back, if you're picking this up from my public radio,
on the difference between Redis Jason and Redis Jason 2,
both are extensions, document-oriented database-oriented extensions,
running on top of Redis.
Redis Jason is implemented in C, and Redis Jason 2 is implemented in Rust.
And for this, I had this idea of putting them next to each other
in terms of performance to see what you get when you switch from C
as your primary implementation language for the Redis Jason version 1 to Rust,
which was the implementation language of choice for this extension,
for Redis Jason 2, yes.
And for this, I used a benchmarking framework called YCSB.
The trouble, of course, with this benchmark framework is written in Java.
Martin walked me against using Java.
His words, if you see Java, run.
At the time, Juvenile that I was about two months back,
I've played eight many years since I've blatantly disrecorded this.
But as many times before Martin was spot on, if you see Java run.
It's worth me so far.
Yes, no jokes aside.
And why did I use YCSB?
Okay, first of all, some explanations about this.
If you want to do a benchmark on a Java on a database,
you want to use a framework that is why it accepted it.
The trouble with YCSB?
Yes, that would be the second choice.
And this, I think, is written in C, which is even worse, I think.
Anyway, it doesn't matter.
No, YCSB has the advantage for one alphabet expression
of being white, except in the community.
As far as I know, Martin, correct me from wrong,
because you used to work for full disclosure,
you used to work for enterprise DB, right?
There are only two accepted benchmarks in the no-cycle space.
And that would be TPC minus C and YCSB.
So the difference being that obviously TPC is a council
with many members, construction needs benchmarks,
YCSB as the name test was created by Yahoo for their own purposes.
So not that suitable for a general database comparison.
Test framework, one might consider.
Funny fact, there is the majority of no-cycle benchmark
and community members use YCSB for performance benchmarking.
Java or...
Another all wrong, obviously.
Goes without saying anything.
Goes without saying.
Yes.
Yes, so I've never been really looking into TPC,
but the idea of behind YCSB,
because it's a framework, essentially,
you write a very thin layer that basically hooks up
the client's documentation of your database and server,
with YCSB.
And in the case of Redis Jason,
it was only about 150, maybe 200 lines of Java code,
because there's a standard client called Jettis,
which is the second standard client for Redis in the Java world.
The other one is, I think it's called Lettis.
Why is that one second, Chris?
Um, adoption.
Okay.
Lettis is done by...
pivoted if I'm not completely mistaken,
and it's slightly more powerful than Jettis,
but Jettis is really fast as far as speed goes for Java.
Um, and at the expense of being less powerful.
So, um, all I had to do for hooking up this YCSB framework
to Redis Jason was actually just to write the thin interface layer
between the framework and something called J Redis Jason,
which essentially is a Java based client side library
that in turn interfaces to Jettis to talk to Redis.
And hence the kind of minimal volume of code that I had to write
in order to make this performance benchmark.
And if you're interested in the details,
the slides plus the probably recorded presentation
will be online by the time you're hearing this,
turns out that, um, if you're staying away
from a single threaded clients at benchmark,
you're only paying about 10% performance penalty
when using the Rust based code base,
rather than the C based one.
And the benefit of course of having a much,
I would say much superior,
but superior implementation language at your disposal.
Um, but Rust is probably the topic for another show
because I don't want to put Martin to sleep right now.
Martin, it's no week there.
I only, of course.
Sorry, I was just browsing you.
Excellent.
Not naming anything.
Any cool cats videos coming up, Martin?
Yeah, there's something with cats, isn't there?
You do like your cats better sound a bit.
Okay, um, is there anything else that we should talk about
when explaining the setup that we use?
I think it's probably easier to do this in a,
in a, in the website as we have planned to do,
but yeah, there are a number of pitfalls and considerations,
certificates, reverse proxies,
firewalls, you name it, port forwarding.
Martin, why don't you mention beating the manual?
Martin, why, exactly, why don't you tell us a little bit about
your experience with reverse proxies
when hook naps synapse to the greater internet?
It was fine.
Except that obviously the port was already used by something else.
I have to do a bit of other.
Yes, and then so that was all great.
Since I'm exposing this to Chris,
I need to lock down everything as much as possible,
implementing many files,
which obviously blocked port 8448,
and then he wanted to use stickers for whatever reason to put his
money on there, I don't know.
Fun fact kids,
if you want to hook,
if you want to use stickers in your ride or other front end,
you want to make sure that you enable federation on
your synapse server.
But also in addition to this,
you want to ensure that the reverse proxy is able to talk on port
8443,
otherwise,
this won't be able to talk to the federation,
and you won't be able to download it.
Sticker packs.
Yeah,
Martin doesn't know.
I'm on a server anyway.
Part fire while I'm on it,
but that's a subject for another kind of episode.
I suppose.
Excellent.
Yes, that's a good challenge.
Okay, if you make it onto my server,
I'll buy you a beer.
Let's put it down.
I want to start saving for a crate of beer right now.
Sure.
Sure.
Okay.
Yeah.
And of course, we use right,
right minus web for as the front end,
which has the advantage of being available on OS X Linux natively.
I use it as a snack on Android.
And of course, mobile platforms like Android or iOS,
if you're so inclined.
It's a, I think it's rack based,
which has the advantage of being pretty stable on these platforms.
And that's something pretty much it.
Yeah.
Okay.
Yeah, you can federate it to other chat and software of your choice,
like Slack, etc.
Should you wish to do so?
Yeah.
Of course, matrix being a federated communication network,
you can also federate it to other matrix instances.
And it has a variety of interfaces to other services.
Okay.
Before we put any,
we put any remaining listeners to sleep.
Maybe we should go today.
This is a few still awake.
You've made it.
You have listened to the first through the first episode of something called Linux in loss.
I hope you liked it as much as we did.
The name will be a topic of a separate podcast.
I'm sure.
Hence, it has nothing to do with Linux outlaws.
Fab, if you're listening,
that name has already been trademarked, you're too late.
It's the improved version, of course.
Okay.
Again, what I said in the beginning,
this is your podcast.
So whatever you see fit to be included,
let us know the email,
because we're still working on the website.
The email is feedback at Linux in loss,
no dash, no hyphen, no comma, no nothing.
Feedback at Linux in loss.eu.
Send us your feedback. Send us your email.
We are not on Twitter.
Please do.
We're not on Twitter yet.
And I don't think we will ever be there.
So email is probably the communication medium of choice to let us know.
We will probably include at some stage,
some feedback form on the website, but we are not there yet.
So Martin, do you want to get us started on the picks?
Of the cats or the bunnies?
No, picks in terms of anything that you want to blatantly promote right now
before we close up show, before we close off the show.
Ah, I think we've probably overloaded the audience with enough fun
and information for all the episodes.
So we should leave it at that and get them to give their
suggestions to us for any other episodes they would like to hear.
Great, and of course these topics don't necessarily have to be confined to Linux.
I mean, this, this initial show was being heavily on Linux because this is our operating system of choice.
For any serious things, for other stuff, we may use OSX or this thing called what's called again Windows, right?
Anyway.
Okay, but any, but any open source topic goes.
Other shows might not be as technical as this one.
As I said, anything that crosses your mind right from licensing,
the impact of open source on society,
communism in general, as Martin already hinted at, anything goes.
Again, yes.
Feedback at Linux.
Dotty.u is the email address to use.
And for the time being just a word of advice, we will stay on hacker public radio.
That means we are only able to publish on the available slots.
And to do this podcast about once and once, maybe every two weeks, depending on the available time.
And until further notice, you will see us on a hacker public radio.
We may move the show to a person to one of our personal service later on.
But as I said, for the time, HPR is your go to option of choice.
Stay tuned and look forward to having you around for the second episode.
Thank you for listening.
And thank you for listening.
This episode is brought to you by spam.
Feeling lonely and yearning for a little TLC?
Fred not.
Just go to russianbrides.com
supersizeyourlovelife.net
or similar value added websites and entire email address.
With a no time, you will receive wonderful educating and passionate messages,
explaining the benefits of herbal remedies for your love life, offering you a fortune for the small favor of finding a minor transaction from Nigeria through your bank account,
and how to really get rich with cryptocurrencies, totally legit of course.
You may even get that lucky break with a beautiful single lady right from Siberia,
who has been long for man or woman, with only a few strings attached just like you,
Romans awaits, or for the little price of a mail address.
spam, what would we do without it?
This podcast is licensed under creative comments attribution.
Credits for the inter-music go to bluesy roosters, for the song salute Margaret,
and to twin flames for their piece called the flow.
You find these and other ditty's license under creative comments at Jemendo,
a website dedicated to liberate the music industry from choking copyright legislation and other crap concepts.
You've been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dog Pound and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly,
leave a comment on the website or record a follow-up episode yourself,
unless otherwise stated, today's show is released under creative comments,
attribution, share a life, 3.0 license.
