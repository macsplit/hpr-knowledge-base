Episode: 1252
Title: HPR1252: The Long Road To Linux
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1252/hpr1252.mp3
Transcribed: 2025-10-17 22:29:21

---

Hi there, I'm Beza. I've listened to quite a lot of podcasts on the Hacker Public Radio
where the hosts talk about how they've got into free and open software. Now what I'm
going to do in this episode is similar but I'm going to adopt a slightly different approach
in that I've been involved with computers for a good 30 years so I'm going to talk about
some of the hardware and the software I've come across and I'm going to describe what
it was like to use it. It might stir some memories for anyone who, like me, has been around
the scene for a while because if your only experience has been with modern kit, some of the
things we used to have to do may be quite surprising. When I left school in the mid-1970s,
I did all sorts of jobs but my first real contact with computers came when I started working
for a company that did payroll and stock control for other companies, other firms. You got
remembered that in those days any kind of computer was seriously expensive so small firms
just really couldn't afford one. It was quite common to outsource data processing to
specialist companies but it wasn't called outsourcing in the course. Anyway this firm I worked
for used, they were described as microcomputers and they were made by two American firms. One
was called the Ontel Corporation and the other was Jackards. Now I didn't have that many
dealings with the Jackard machines but the Ontel ones were actually quite impressive. They
looked a bit like a stylish TV set with the keyboard attached to the front. You ran them from
a pair of 7-inch floppy disks and one ran your operating system and the application software
and the other one was used to store the data. Now if you wanted to change from payroll to say
word processing or stock control so you had to switch the machine off then insert another
system floppy that had the new program on it and then boot it up again and that was pretty
tedious as you can imagine. But something I'll never forget is the sound the printers made. They
were daisy wheel printers and they worked like a typewriter with each character being ran
against an inter ribbon at very high speed and that left the impression on the paper that was behind.
Now you could often tell what's been printed just by the rhythm you know it's because things
like invoices and statements said fixed layouts so the sound of the printing of the column headers
and lines was repeated over and over again. Now while I worked at that firm they got their first
hard disks. Now they looked a bit like a single drawer filing cabinet you know you
pawned open the drawer and place the disk inside on the sort of turntable and this was called a
Winchester disk and it looked a lot like a dustbin lid and it held a whopping 10 megabytes of data.
Now the drawer also contained a fixed disk at the bottom and that was another 10 meg.
So if you wanted to copy a disk to make a backup or whatever you copied your data down from
the removable disk to the fixed disk then back up to another removable disk because that
process would have been quite commonplace in those days it may possibly be the origin of the
turnt backup. Those disk drives cost something like Â£3,000 a piece and in the early 80s that was
a serious amount of money but after working at that firm I spent a few years in the defence industry
and at the start with I was just a technical clerk and this meant I was doing essentially
clerical work but you needed a technical understanding of the products.
Now somehow I managed to convince them that I had enough knowledge of engineering and electronics
to do a job but in reality I was desperately trying to teach myself as I went along.
But after I've been there a year or so I got called to the personal department and they
asked me if I'd be interested in being trained to be an analyst programmer then that was quite a
trendy job to do but like being a web designer is now so I thought why not. Before I could start the
course I had to pass this aptitude test. It was run on some sort of handheld I think it was an
HP handheld computer looked a lot like a big calculator but the questions didn't seem
to have much to do with computing they were all about personality asking what I would do in
different situations. They seemed to be assessing whether I was a psychopath rather than whether I
was being equal as a programmer. But anyway I passed the aptitude test and I went on this course
and I was taught to have a program in full-trans 77 which I got admit I didn't really find that
all that difficult. But after that I was put in a team whose job it was to analyse test results
and the computers we were using were Dick Vaxis and they ran the VMS operating system.
And a strong point about Vaxis was that they could be clustered to look like one huge powerful
machine in the computer and there are dozens of them and each one was about the size of a large
filing cabinet. They developed so much heat that the computer had some very serious air conditioning
and to keep everything cool and that was great in the summer because you'd keep finding excuses to
go in the computer and call down because the rest of the building we were working in was glass
sided and the hot days it was like a sauna. They were used to access the Vax clusters through VT
100 terminals because they were completely done you could just sit down anywhere you liked and do
work. So really we were hot-desking long before that term was invented. As well as the Vax there was
also what we like to refer to as our super computer though you know bomb modern standards it wasn't.
It was called an Alexi and it ran an operating system called Emboss. You didn't have to learn a
whole new set of commands fortunately because it also ran a VMS simulator so if you could use
a Vax you could use the Alexi but we didn't really get much opportunity to use it because it was
rare for the really heavy-tootie stuff like simulations. Now software I was testing was used to
control a torpedo. It was programmed using a language called Coral 66 which was a lot like
full-training in many respects but it didn't have any floating point capability. You had to use
fixed point arithmetic and that took a bit of getting used to I have to say. What I find amazing
though looking back is that this torpedo had a complete guidance and countermeasure system
stored in 48k memory. In these days a hello world executeable windows must be about half a
meg but a secret was that every variable was optimized and no bits were wasted so an 8-bit word
might be subdivided to define two variables needing a maximum of 4 bits each or might be
three separate billions but it's hard to imagine that now because memory and storage is so cheap
nowadays I think it's actually made as quite sloppy. I doubt that the people who are right
compilers would know where to start if you gave them those sort of constraints these days
but about that time the term fourth generation programming language started to appear but
really nobody had a firm idea what it meant it was different things to different people really
but one interpretation was the generation of code from graphical modeling tools so you know
in tune with the vogue of the time I got sent on a course to a place near Heathrow Airport to
earn a thing called Jackson structured programming. It'd been invented by a bloke called Michael Jackson
so I was half expecting to have the instructor moonwalking across the classroom but didn't that
because now JSP was more or less flow charting he used boxes to define statements and conditions
and lines to show the process flow you still need to know the syntax of a programming language so
that he wanted to generate when you'd finished working on the diagrams but VT100 terminals only
worked in text mode so the diagrams were limited to shapes which could be created using ASCII codes
so really looked quite crude but it was effective. I suppose JSP was quite good in theory it
certainly made it easier to understand what was going on in a program than reading raw code was but
the trouble was if you just wanted to make a small change it was out of a lot faster to just
type it directly into the source code otherwise you had to change the model and regenerate everything
but configuration did become bloody nightmare and JSP eventually fell by the wayside
it was one of those good ideas that just didn't quite work in practice
but that firm I'd my first exposure to the Mac and the IBM PS2
an original Mac booted up from a single three and a half inch floppy disk
but since you only had one drive you often had to keep switching disks over when you were saving
your work that was a bit of a pain but the mouse and the graphical interface were quite a novelty
by comparison the PS2 was still running command line dots as I remember it if you wanted
a network two max together you just ran a cable from one to the other and that was it
but to network two PS2s together you had to buy a dedicated network card for each one
then install all sorts of driver software but even then it was quite unreliable so you still
ended up using floppy disk to exchange files after time another thing I came across for the first
time was a laptop it was made by an American firm called Grid it had a small flat screen that
displayed orange characters on a black background you booted up from a floppy disk but it also had
an optional hard disk in a separate unit which you connected whenever you need it and that was
about the same size as a computer was itself that those grids were usually used to record test
results at foreign ranges but once I was coming up the flight of stairs carrying a grid hard disk
and I had the grid computer sitting on top of it now net against metal can be quite slippery and
the computer fell off and went bouncing down the stairs but these things were about 5 grand
of peace but nobody else is around so I quickly picked it up and I decided the best course of
action would be to just deny the knowledge of how the damage happened the casing was scratched
anyway from being used on board chips so it wasn't obvious which damage was new
anyway I got the thing into the computer room and I plugged it all together and switched it on
and all fired up perfectly I just couldn't believe it the grid had fallen about four foot
vertically and then slid down about a dozen concrete steps you try and imagine a modern laptop
surviving X and like that my next job was at a large stop-broken company where they used quite
a mixture of hardware they had the Vaxies IBMAS 400s PCs running DOS and PCs running OS 2
they also had a few copies of Windows 2 but at that time nobody was really interested in it
they used the DOS office suite called Smartware 2 it was essentially text mode but it's still
supported multiple windows and supported the word processor a database at a form designer
I really don't remember what we'd have a spreadsheet or not I'd like to learn to use a
cobalt in double quick time as it was a language they used to write a lot of the company's
management systems now after four train and crawl 66 cobalt seemed quite acquaint to me
but it wouldn't have been much used in defense systems but financial stuff it was actually great
it syntax was about as close to natural language you could get if you wanted to add two numbers
together the syntax would be LX to Y giving Z this made the code very easy to read and
us suppose if you chose your variable names carefully it was to some extent self-documenting
I didn't really like working on AS 400 it didn't have the concept of a current directory
and file paths instead you had a library list and a program would access the instance of any
dependency which was highest up that list and this could cause all sorts of problems on
development machines where you might have different versions of an object all over the place
there's time in by I found self working more on PCs than the Vax's all the AS 400 and I was
spent a lot of time developing software to validate data going to and from the London Stock Exchange
and most of this was done using ball and turbo c which I had to teach myself from a few books
I tried program for Windows which dim was I think at version 3.1 but it's so complicated
and far too much like hard work and so because of GUI wasn't essential for a stuff
I was working on just gave up on concentrating and writing command line applications
but all this change when visual basic came out I mean suddenly you could produce L.O. world
program in ball and c which was three or four hundred lines long and in visual basic it was
probably about three lines long and some of my colleagues played around with ball and dolphin
which was sort of halfway out between visual basic and ball and c it was based on Pascal they
reckoned it was quite good but I didn't really know much Pascal and so consequently I didn't use
it very much so I was never in a place to judge but I think it became quite a popular tool
in in the marketplace and when object orientation became the vote we started using ball and turbo c
plus plus which came out about 20 floppy disks and box full of manuals and it was I'm not exaggerating
about two foot wide after say though for the stuff we would develop in object orientation
was really a waste of time it's find yourself spending ages designing classes and inheriting the
hierarchies which really didn't need to exist so you just you just say you could say your
application was object oriented but don't get me wrong object orientation as it uses like for
developing GUIs and anything with dynamic objects and that sort of thing but most business
applications don't really need it as I was using PCs more and more I decided I'd get one from
myself to his own a PS2 like the ones I was used to would have been far too expensive but the
Amstrad clone of the IBM PC had come out and that was sender lock up cakes now I managed to get
one through somebody I knew and connections at Dixon's but even so still over 400 pounds
my machine was a PC 1512 which came with a CGA black and white monitor 512 k of memory and
two five-and-a-court range floppy disks but overtime I replaced the five-and-a-court with a three-and-a-half
inch disks because they could store 720 k each instead of I think the 360 and the five-and-a-court
before long I've got shot one one of those and I replaced it with a 20 megabyte hard disk
that disgusts me the best part of 200 quid looking back it seemed like madness but at the time
I wonder what I was going to do with all that additional storage because without
wind video or audio files it's surprising just our little storage you really need it
now I use the Amstrad mainly for playing around writing programs for my own amusement
I'll use a copy of baller and turbo-c that I've partied from work
when I bought it the Amstrad came with DOS 3.1 and it had an application called GEM
and this sat on top with DOS and it provided quite an effective GUI or I suppose it was
aimed at people who didn't know any DOS commands so I didn't really get to use it very much
but it was pretty good at its own the Amstrad mouse was a strange bit of kit
it didn't use a serial port like every other mouse in the market yet a proprietary connector
which no other manufacturer used it didn't generate signals in the standard way either
a normal mouse used a DOS interrupt to notify the operating system of all its events like
movements and mouse clicks but the Amstrad just sent the Amstrad mouse just sent ASCII codes
that equated to the up-down left and right arrow key as an experiment I did once in store windows
3 on the Amstrad bit was so slow it's completely unusable another Amstrad device I bought
was I think all the NC100 notepad it was about the size of a sheet of a four paper and
probably less than an inch thick and it only had 64k memory but it would run all day on a set of
four AA batteries it was never realistic alternative to laptop and it all fairness it wasn't
designed as that but if you couldn't afford a laptop it was great for typing a stuff up where
you're on the move because you could always then copy it back to our proper computer using a serial
cable my next computer after that was another Amstrad but this time it was a 4386 sx you know quite a
decent spec and it had quite a high resolution color monitor at this moment it was only about 10
inches across and because of that it gave you a razor sharp image which seemed to impress everybody
ever looked at it the trouble with the stock broken world is that the type of applications you
develop gets a bit limited after a while so I moved on I went back into the defense industry
this time I did a check of all trades I helped out in any project where they were short staffed
and it sometimes up to a few months and other times it might just be a week or two so you name it
I did it design, coding, testing, spec writing, acceptance, implementation, the orbit
it was a little bit full train around still but most of the program was done using C++
they used Microsoft Visual Studio now I can't deny it's very powerful but I found Visual Studio
to be total overkill there seemed to be a widespread belief that you could only be taken seriously if
you used CLC++ in fact I had to say that most of the projects I've got involved with could have
been complete in a fracture at a time and pretty just as effectively used in visual basing but for
some reason VB was viewed as a naughty development environment so I never really used it for a
pro to typing a lot of programmers tried to show a clover they were at C++ by making the code look
as complicated as they possibly could you get three or four nested statements in a single line
using separate lines and a bit of indentation would have made it so much more readable and maintainable
but as for meaningful comments well forget it the company had coding standards and they called
for programmers to use comments wherever the code was not blind in the obvious
but in reality you got exactly the opposite you'd have a hugely complicated 100 line function
with no comments at all then you find a statement like A equals B plus C
with a comment above it saying A is the sum of B and C that's very helpful
but gradually I found myself doing less than program in a more designed documentation
well after one huge management configuration management cook up with somebody over about
a thousand lines of mission critical code with load of crap and without any backup so I managed
to persuade the company to adopt Microsoft Source Safe which was a configuration control tool
now you can link it to Visual Studio so that made it much easier for a program to work
within the rules and try and bypass them we used a design tool called rational rows and
that could also be linked to Source Safe in some respects rational rows implored a lot the same
concept as the Jackson tools I used about a dozen years earlier now one thing which always
struck me is something of a paradox and still does to this day in fact there's organizations
go to great lengths to manage a configuration of source code in engineering drawings but they
don't apply near as much control to the documentation it generates the work in the first place
in my experience the specification may have to be signed off but there's usually precious
little evidence any of the changes have been studied at all you could easily waste millions of
quid through a project working to an incorrect spec and it does happen and documentation has become
our main era of work these days because a lot of people will seek to have lost the ability to
write coherently and other people are just too busy so what documentation they do have to produce
is rushed and at least all sorts of problems with inaccuracy and poor clarity but it's not just
in the IT industry saying issues apply just about every other walker life I spend a lot my time
reall three doctors just to make the fit for purpose and advising companies on how to manage and
exploit the documentation a feature of the defense industry is that it has a huge appetite for cash
the products are expensive and there's an implicit expectation that the solution to any
requirement is going to expensive as well I often struggle to take in seriously when I propose
any low cost solutions the opportunity was it persistent wasn't bespoke or release a lot
of notes at the end with price tag it couldn't be that much good I saw applications intended for
handful of users developed an Oracle or SAP with an access database or even a shared spreadsheet
could have done the job perfectly well no one the few occasions that I did convince the powers
of BTU software they already had instead of buying new stuff in I put an application developed
an access on a citric server and that supported users all over the world for a tiny fraction
of the cost of a so-called professional solution so I'm a big fan of citric it gets around
so many network constraints the first time I went on the internet was in about 1995 or maybe 96
I picked up a free computer disk in a shop and I thought I'll give it a try but by then I had a
pack-up bell laptop with a dial-up modem built in so it's just imagine we installed in software
and running a wire into a phone socket by DSL standards it was very slow but it still seemed
pretty impressive to me you know I don't think there's a BBC website but then so the news
are most of the content came through the computer portal I didn't use computer all that long
because I think it might have been some kind of free trial so it was probably only a month or so
but somebody told me that AOL was much better so I gave that a go instead
but as far as I can recall everything came through AOL software you couldn't just open an AOL
connection and then do your own thing so when free server opened up they offered a service that
was more like what people have today they provided the connection then you could do whatever you
wanted that's when I started using the next-grade browser and then later on I moved on to
internet explorer before Google came to big as big as it is I used out of Istas by a nine-search
engine but once Google had maps which I found I used a lot it was game set and managed to Google
over the years I've used every version of Windows Windows two-onbers except for
don't think I've used Windows ME but the only ones which never really came in any real problems
are NT4 and Windows 7 now I've visited big companies all over Europe and I think it's significant
that a vast majority are still running XP I've not heard of anybody actually buying Windows 8
from choice everyone I know has got it has got it through buying a computer that had it pre-installed
now I haven't spent a day using it I know I'd never buy anything Windows 8 on it
or if I did I'll wipe it immediately I can't believe how bad it is it's unintuitive
and it looks crap as well what do you think Windows and Windows software though you have to acknowledge
that it's spectacularly powerful that's probably the foundation of Microsoft problems because most
users only use a small fraction of the functionality in say office so by definition this means that any
new features Microsoft had are going to be in a little use to most people so the only way they
can make a new version distinctive is by changing the way it looks so that's largely changed
for the sake of change and when I used XP pros my operating system as a home I got utterly fed up
with the five minutes or so it took to boot up every time and in long periods of the system hanging
with just the air glass for company while a scanner updates up place there's no way I was going
to buy Mac so I looked around for an alternative system I'd heard of Linux but I didn't really know
much about it until then I don't think I understood the distinction between Linux and Unix
I'd use Sunspark stations a little bit but I was never really impressed with the user interface
so Windows always seemed wired when I discovered Ubuntu all that changed I'd download at 8.4
and run it for a while for a live CD and that in itself was something a new concept it took ages
to boot up from a CD but once it was running the performance was okay so after about a week or so
I was completely sold there's almost nothing I wanted to do that I couldn't do on Linux because I'm
not a game I says no problem at score so I installed 804 properly on my home PC which at that time
was a compact desktop now I've not really looked back since I've tried Unity when it came out but
I just couldn't get comfortable with it after through a more traditional type of desktop it's
something that Microsoft did get right away from right from day one you know Windows 8 has changed
about of course I got around the Unity problem by using XFC instead just lately I'll start now
real misgivings about Ubuntu because whatever canonical say is pretty obvious that the gap
between them and the community is getting wired all the time and it's a community aspect of Linux
which is one of the things I find so appealing so I think if you fast forward a couple of years
canonical either a blown it disappeared or they'll look more like Apple do today though probably
nothing like as big but recently I've migrated all my computers to Linux Mint Debian Edition
it's absolutely rock solid so I'd recommend anyone give it a try a few months ago my daughter got an
iPad you know I appreciate the screens fantastic and the build quality is superb but I wouldn't
want one for myself I expect to be able to do whatever I want my computers and iPad you can't
even get to the fast system so for a non-tech user I I can see the appeal of its tablet if you
just want to browse the internet and watch videos but for the serious business use or I think
there'll always be a place for a keyboard and mouse you touch an able screen to have their uses
but you can you imagine now your shoulders will ache if you spend all day with your arms out
stretching in front if you're moving things around the screen and the same applies to voice recognition
it's a great technology it's got huge potential for all sorts of devices and people are disabled
and that but would you want to be in an office with everybody talking to the computer's all day
be no privacy and I think it'll sound more like Bidlam
one of the main lessons I've learned in my 30-year GIs in IT is that there are many developments
driven by a desire for change as by a real need for change there's all sorts of technologies
that were going to be the future and now the history and I can see flash and even Java going
months the same way over the next few years but the the other lesson is that fundamentally good
concepts don't ever really go away and when I started out all your applications run on a central
server you're only had to install one instance of it and all the users got to benefit immediately
now everything's word-based and you only install one instance of the application on the server
and all the users get to benefit immediately so despite all the changes in between nothing
has really changed and I expect that cycle to keep on going in the future bye for now
you have been listening to Hacker Public Radio and Hacker Public Radio does our
we are a community podcast network that releases shows every weekday Monday through Friday
today's show like all our shows was contributed by a HBR listener by yourself
if you ever consider recording a podcast then visit our website to find out what easy it really is
Hacker Public Radio was founded by the digital dog pound and the economic and the computer club
HBR is funded by the binary revolution at binref.com
all binref projects are crowd-responsive by linear pages from shared hosting to custom private
clouds go to lunar pages that come for all your hosting needs unless otherwise stasis
today's show is released under a creative comments attribution share a line
lead us out license
