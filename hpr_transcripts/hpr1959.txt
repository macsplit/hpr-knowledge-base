Episode: 1959
Title: HPR1959: FOSDEM 2016 K building level 2
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1959/hpr1959.mp3
Transcribed: 2025-10-18 12:08:17

---

This is HPR Episode 1959 titled, Fostom 2016, it is hosted by Ken Fallon and is about 104
minutes long.
The summer is, Manila Pachit and Kinmex.co.uk and Media Weekly LFS Pearl Bargast co-agoodle
SOC Ultimaker.
This episode of HPR is brought to you by An Honest Host.com.
At 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's honest and fair at An Honest Host.com.
I'm back at the Mozilla booth and I'm talking to my name is Francisco Picolini.
I'm from Mozilla, I'm a community events coordinator and for anybody who doesn't know what
is Mozilla and what sort of projects do you have?
Well, Mozilla is a software company, we are the makers of Firefox Browser which is being
used by more than 20% of the market share right now.
We were the first browser that faced Microsoft Internet Explorer monopoly in the early 2000s.
So I think that most of the people know what it's Mozilla or at least knows Firefox.
How did you get involved with the Mozilla organization in the first place?
Well, we, Mozilla, it's based on the community.
So basically the main access entry point is communities.
You start volunteering, there's a lot of options for volunteering.
You don't need to learn how to code or develop to involve in the community.
I started helping on marketing and other stuff, so everyone can help.
We have localizers, we have several staff, people that help certain events.
For example, in the Spanish community we have people that are professional translators,
that are translating Firefox and the other products.
So it's a couple of, not only one way to enter the community.
I think if you go to the Mozilla website, one of the only projects that you see that
really comes to the fore is the Firefox browser.
How are you, can you mention some of the other projects that you have?
Yes, we have Firefox OS, we have Thunderbird, we have privacy, we have a couple of other projects
that it's not only the browser, it's basically let people enjoy their experience online
and have the control of their online experiences.
I know during the year a lot of people were a bit distressed with the introduction
of the pockets integration from a priority point of view.
How does that, was that a democratic decision, how did that happen?
Well, the thing is that we try to think on the final users and most of the time,
we try to facilitate the life for the final user.
And basically there's a lot of power users that we say, that it's part of our community,
that in some cases they don't agree with some of the decisions that they made.
We made, but the thing is that based on studies and user usage,
because we have a lot of studies on analysis of how the users interact with the browser,
we find out the pocket was a good feature to include at the browser.
So we included, we know that it's a third party company,
but there's an option to remove pocket or not use it at all.
If you're not registered, if you're not logging in the pocket feature,
that it's not, pocket doesn't have an idea how you use that or that you use in Firefox.
If you log in, there's an information on the private and the third party company,
but we have a strict policy with the privacy.
So it's not like we are giving away the data for our users.
We are separate the things and the usage is completely anonymous.
OK, one other question, and then we'll drop the controller.
The DRM, the introduced the facility to add DRM to the Firefox browser
was also contentious issues that probably depends on which side of the free software debate you fall.
So how did that go down in the community?
Well, the thing is that we are aware that the DRM is pretty controversial.
But also it's the same thing happened with flash plugins and the codecs related to flash.
You have to choose whether you want to have people using your browser
or whether you want people that abandon your browser and lose users
because you cannot give them the full experience online.
So it's a controversial.
We want to have another option.
We fought all the time for having open source alternatives.
But the reality makes us do complicated decisions.
So it's not easy sometimes to make those decisions.
We work with Adolf to have a DRM plugin more open than the others.
But in the end, it's like flash.
If the other companies are making lobby to use a proprietary software
and that's the only way to showcase media content,
we have to try to deal or find a solution or a mid-term solution for those kind of things.
In the end, flash is going to be dropped.
So we hope that at some point the DRM and all that stuff,
like you cannot see Netflix, for example, if you don't have a DRM,
will be dropped for an alternative.
But we are the only one that are fighting for that.
That's for sure.
So what have you got here on the boot and how do you go about organizing a boot like this?
Well, we have a couple of things.
We have a BR kit where you can see a virtual reality on the browser.
We have swag.
We have a Firefox OS devices.
Well, not yet, but we had yesterday and we will have later.
And basically, it's an old community leaf.
But I thought Firefox OS was going to be dropped, sorry.
No, it's not going to be dropped.
It's going to be refocus on connected devices and the internet of things.
The new project is called connected devices.
We will still use it a big part of it.
No, no, we will still use it in Firefox OS,
a platform for smartphones.
The only difference is that instead of selling it through companies,
like Telefonica, they would still recommend all those people, Orange.
We will be having kind of everyone can install Firefox OS on their devices.
Actually, we are developing that from several years from now.
And the idea is that we are not selling devices anymore,
but you can install Firefox OS in your Android device if you want.
OK, so basically the carriers have monopolies and you can break in there.
Exactly, that's the thing that we ended the partnership with the carriers.
So that's the only difference.
OK, very cool.
Is there anything else coming up this year that you'd like us to know about?
I mean, obviously, we'll put contact information for how you can get involved
in the projects and the show notes or anything coming up.
We are in Europe.
We are fighting a lot for the privacy.
We have talked yesterday about how the privacy affects the users online.
We have a feature in Firefox, which is do not track.
And we have the private browsing that is completely improved
in the latest version of Firefox.
So the privacy thing is very important for us in Europe worldwide,
but in Europe, it's more because there are a couple of laws ongoing
that they want to restrict their privacy of the users.
So that's one of the projects that we have this year.
We will also promote our internet of things, IoT.
So that's another of the projects that we will have ongoing in 2016.
And we will have a lot of things ongoing, actually.
It's not only one project that we have.
And what's the best way for somebody to keep up today is on MOTS GONA?
Well, we have the blog, the Mosilla blog, in our web page.
You can check or contact your local communities.
For sure, there's a community in your country.
If you're in Europe, there's a community in each city
or in each country in France, Belgium, Italy, Slovenia, Croatia.
So you can find anyone, and you can find a lot of options to help.
So...
Okay, thank you very much for the interview,
and thanks for taking the time.
Hope you have a good show.
I'm here at the Apache booth, and I'm talking to...
Hello, hi, my name is Lars Alibresch.
And you're with the Apache Software Foundation.
Yes, that's right, ASF.
I'm one of the co-founders, so I've been doing Apache Web Service stuff
basically since 1996, and the foundation was created in 1999.
So Apache, you worked on the Apache Server, the original.
How did you tell me your story?
How did you wake up one morning and decide you want to write a server?
I think it would take too long to tell you my story, but we have all night.
Okay, okay.
Well, basically, I was one of the first German members of the Apache Group,
so basically it predates the foundation.
At that time, it was just the random number of people,
like, it doesn't people developing the Apache Web Server.
There was no foundation, no legal entity, nothing behind that.
Where did the server come from?
Did you start from scratch, or did it was a donation from somebody?
No, the Apache Server was based on the NCSA, HTTPD.
At that time, it was developed by the American University.
They stopped the development, but it was open source.
So some people who were using this already for commercial purposes,
that like, okay, I have all these problems.
I have bug fixes, I have things, and one or two people decided,
let's just get together, have a mailing list,
and talk about how we can build something new
based on the open source code that was provided by the NCSA guys.
And they decided to call it Apache.
Because there was a lot of patches there.
Well, there's a, which is a bit of an urban legend
that the term Apache comes from the fact that it is a Apache server
after putting all these patches together.
But actually, the actual source of the name
is actually, to some extent, a tribute to the American native Indians,
the Apache Indians.
I think one, I think the simple explanation is probably that someone
just liked the name and liked the whole idea.
And someone came up with the feather at the logo and said,
how about using this if we have this name?
And within a few days, basically, people decided, okay, that sounds good.
And that's how the name came to exist, basically.
And we kept the name when we created the foundation in 1999
and called it the Apache software foundation, ASF.
And now we have all these more than,
I actually don't know how many exactly,
but we have more than 200 top-level projects.
We have dozens and dozens of projects in the so-called incubator,
projects which want to join Apache
and will become an Apache project at some point.
But that's still going through the so-called incubation process at the ASF.
I want to say a software project.
How does the software project benefit from joining the foundation?
One benefit, well, there are various benefits.
One is they join an Apache community.
There's already some level of community there.
There's people who organize meetups, Apache conferences, et cetera.
From a purely legal point of view,
one benefit is that with the Apache license that covers a few things
and also for some smaller projects, if they join,
for the first time, there is a legal entity behind the project.
So it protects the developers against patent-related issues,
stuff that people have to worry about today.
It's no longer like in the early 90s
where you could just develop some random stuff,
throw it on a web server somewhere
and don't worry what happens to it.
If you do that nowadays, depending what you do,
people will sue you because of patent infringement
or copyright violations or this.
And with Apache, you have that level of protection as a developer.
And it's a great community and it's a great foundation.
And it's a fairly permissive license.
So for many projects, it's very useful to be part of a Apache
because it gives you a better or bigger visibility.
And do you do coding now
or are you just mostly managing the foundation?
Well, I'm not so much involved with actual development anymore.
I'm still on the mailing list.
I like to think that I can still, that I'm still a contributor,
but to be honest, I haven't committed many things
in the last few years, to be honest.
But there's a lot of things people can contribute to.
You don't necessarily have to be a source,
like a software developer to contribute.
You contribute in many ways, which is just like writing bug reports
is the first step, helping with documentation,
helping to actually represent the foundation
like Apache, add, post them, and explain things to people.
And yeah, and we have people with like a legal background
who have joined the foundation and helped out the foundation
with things.
What's the most common question people ask of you guys?
I think it's not like, oh, I got this bug in Apache.
Please fix it.
I mean, every now and then, you get the people who ask like,
oh, yeah, I had that problem the other day.
Can you help me with that?
And then it's usually a project you don't really
know anything about, because there's just too many.
The majority of people, I'm still surprised that many people
still very much associate the name Apache with the web server.
And don't really realize that all the other tools and things
they use are actually Apache projects as well.
People sometimes don't realize that how many Apache products
they actually use, whether in the actual development
or as a tool, or we have even open office, which
is a purely end user focus, like an end user application.
What is most of the other stuff that Apache is more
like for developers?
So we have different audiences for people who use our software.
OK, now that you brought it up, because I wasn't going to,
but fine, there was a lot of debate in the community
about how beneficial it was to the community in general,
that the open office project exists,
and that found a home under the Apache umbrella.
And that effort wasn't better spent in just migrating
to liberal office.
Damn it, I shouldn't have mentioned open office today.
But then right next where I'm standing,
we have actually some guys from the open office project.
They definitely know more about how this all came to be.
To be honest, I wasn't really much involved in how this happened.
I think it's, to some extent, I mean,
that's the nature of open source.
If there's two groups, or two people
who want different things from the same code base,
then fork it and do your own thing.
That's perfectly valid.
And it's one thing you can do with a permissive license
as a Apache license.
So if someone thinks today, I want to do something,
call it whatever office, then take either the liberal office
or the open office code base and develop base on that.
That's perfectly fine.
Competition is good to some extent.
It's on the other hand a bit sad to see
that you have these two groups basically
developing the same things to some extent
and to some extent competing against each other.
But then I'm not really involved in these two projects
on the wrong person to ask about what's exactly going on.
So what's your goal here from FOSTEM this year?
Unfortunately, the ASF has, I think, never really officially
been at FOSTEM as a foundation, which is quite amazing,
given how big the ASF is.
So it's good to see Apache this year at FOSTEM.
Hopefully next year we maybe can do something bigger
with the deaf room or something.
One reason why we're here is actually the three days ago
we launched a new look for the ASF, which
is a new feather logo, so it looks a bit different.
I was still around when the old logo was basically created,
which was more than 20 years ago.
Yeah, that's how old I am now.
But I guess, I mean, it's on one hand very sad
to see the old feather logo, which has become very iconic.
It's basically represented in not all
but many of the individual projects as well.
They use the feather logo somehow in their design,
not all of them, but some.
So with the new logo, it's just change,
and I guess change is good.
Wow, it's not a million miles from it,
because I didn't even notice the difference to yours.
It's actually very true.
Some people don't notice, but it has a bit of a modern look,
I would say, and it's been a boom-to-eyes, I think.
So it's the very thing also that you want our community
to know, or well, check out Apache.org.
Look at all the various projects there.
Maybe you even noticed one or two that you've actually already
been using and didn't realize it's actually part of Apache.
So check out Apache.org and start contributing.
OK, thank you very much for your time and enjoy the show.
Hi, this is Ken.
We're at the Jenkins Boogged, and I'm talking to you.
I'm Kostya Kalaguchi.
We spoke to you two years ago about the Jenkins project.
Can you give everybody a quick reminder
about what it is and what it does?
All right, so the Jenkins is an automation platform
where people, the software development,
particularly use it for.
No automating, build, test deployment, evidences,
basically everything around the writing source code.
So what sort of language is it written in,
and how do I deploy a server?
What do I need to deploy a server with this?
All right, so the Jenkins is written in Java,
and so it's also a package that's a Docker container,
or a devian package, RPM, and so on.
So it's really easy to get started.
OK, and are you tied down to 100 particulars?
So is it tied down to software, in particular,
a particular software launcher?
Is it more flexible than that?
So one of the great things about the Jenkins community
or its ecosystem is that we have this incredible flagging
in community that produced about thousands of flags,
literally more than 1,000 flagging,
integrating it to just about any language you could imagine.
So whether you're doing PHP, or Java, or Shisha,
or Ruby, we have set the flagging
that really gets you up to running quickly.
OK, so I'm a new developer.
I've got some code, and I want to write in,
I don't know, I'll look around Pearl.
What do I need to do in order to, I've written my program,
what do I need to do in order to, it's not a little world,
but it's about as far as I can get?
What do I need to do to test that in Jenkins?
Right, so the most typical thing you do on Jenkins is,
you have Jenkins morning to the source code,
and every time I new chain the land in the source repository,
and you can set up Jenkins to basically focus our process,
it's probably easier to build and test,
and then after that, you tell Jenkins,
where you're like a test reporter,
or where you want the email to be sent.
So that can be concluded from the UI, very easily.
And this will be monitoring something like SVN,
or Gase or something like that?
Yeah, and then we support, just about,
any version control system we've met,
and thanks to the flagging.
So I think the very common ones nowadays,
if you probably get in some version,
maybe for force, you can do those 3D to the flagging that we have.
Okay, so my hello world program,
what sort of test case would I write for that?
Yeah, so if you're, let's say, maybe,
so perhaps the simplest form of quoting for a test
might be just compilation, right?
If you commit some change, that doesn't even compile,
that's kind of a test.
So perhaps you can just have a maker to step,
and then if that fails,
and you know that you committed something horribly wrong.
And that is, it returns error zero or one,
anything other than zero.
Yeah, so as long as the tool returns non-zero exit code,
then you can see it notice something went wrong,
and then it passed out the build,
and then you can tell them things to send up the email,
or maybe like a copy on the Slack or whatever.
So if it returns zero,
then I can look for the string hello world,
all over the case.
Yeah, yeah, yeah, slower case than that thing.
So yes, if you're writing a test,
you'd be probably doing it by a tool,
I mean, test tool that's specific to a language,
but yeah, you can do a session like that.
Okay, and how can I configure, you know,
some things I'm not that worried about,
if they fail, some things that if they fail more than that,
my manager needs to be aware of it.
So the test, so if you're using the test,
I mean, test framework that produces a test report,
in a format that the Jenkins could understand,
there are often ways to say those test failures
are not not critical.
And so that's how you can differentiate
in a VP program, the quantum number.
Okay, so what have you been doing
for the last since we spoke last, what improvements?
So thanks for asking,
because the right now, what we are showing in this demo,
I mean, the best here at post them is the,
the work that you're doing for the $2.00,
the next major release of Genghis.
Yeah, exactly, which is a kind of a big deal for us,
because we've been one version one
or something for past 10 years.
So there are a number of things you're trying to fix,
but one of the major push is this introduction
of the new subsystem called pipeline as code.
So, you know, I mean, I talked earlier that,
well, you can, if you're studying it fresh,
you can do that by GUI, by comparing this,
what we described from the GUI.
But as the scale of the software development goes up,
it's often actually, so there's a substantial section
of users prefer to do it as code.
You know, kind of like hire the ops people
and I manage their infrastructure as we call it.
So we define this texture format
in which you can describe the build and test
and the email and all that things.
And then all we have to do is to commit that
as a Genghis file in a source repository.
And then Genghis automatically notice,
oh, you want this brand to be a repository build.
And then it starts automatically start building
every time the new change comes in.
The tool you get this file, that also gets tested,
that sort of thing.
So Genghis suddenly becomes a lot more transparent.
It's very, very mess-up of all you committed
to testing that part of the task.
Yeah.
So it becomes, you know, in your way,
even if you think about what the great battle is,
it's probably somebody you don't need
to ask every single detail.
That is, you kind of expect him to take a cue
from what you're doing and provide the services for you.
That's what we are trying to turn Genghis in.
So Jenkins, but like Gives a Monster
and Jenkins is the butler.
So has your everything ready before you even know
you want to do?
Right, right, that's the kind of thing we're trying to do.
Excellent.
So you're going to be doing that all year
and that's, we are hoping to release it soon.
So, you know, we are still working hard.
There's a lot to wrap up, this is the polish,
but it's coming close.
Is there a release build that we can check out
in the Smith Post?
Yeah, so you should be,
we didn't want it to have that actually going before
coming to this conference,
but there's all this, I couldn't make it.
But that should start really, really soon.
Yeah, we want to provide this in a better drop
and so on to get the idea across to the 100 people.
And I presume you automatically test Jenkins using Genghis?
Yes, naturally we do that.
Check again, test, check in files to run, test, check.
That's going to play with your mind up for one.
So is there anything else that I missed
that you want to keep us up to now?
Well, since this is a great podcast,
maybe people can see that we also brought
like a new word on the stickers.
So clearly people here in this are going to miss them.
So next year I'm looking forward to seeing you
in the booths and post them so that they can handle this.
Excellent, thank you very much.
Thank you.
You are?
I'm Ankaluka and I'm from the X-Wiki.org project.
What is X-Wiki?
So first the booth, which is actually Wikis and CMS.
So it's a common booth to multiple Wiki projects.
That's why I couldn't find any logos on this.
No, there's, yeah, exactly.
So it's a couple of Wiki projects that came together
to this booth, so we proposed it together
and we're sharing it.
So X-Wiki is a Wiki, which on top of the standard Wiki
features, which allows you to just write text documentation,
your thoughts, whatever you want in the Wiki.
You also have a way to create and to use structured data,
meaning that you can add metadata to your unstructured data,
which would allow you to find it easier, to organize it better,
and to also guide your content producers
into producing a certain type of data.
For example, imagine if you want to, so in any team,
basically, there's a need at some point
to take some notes of the meetings that
are happening in the team.
So traditionally in a Wiki software,
if you would like to document that in a Wiki,
you would just type the text and put it on a page in the Wiki.
But there's some important metadata about that meeting
would better be in all these pages.
For example, the date of the meeting is important,
who participated to the meeting, when did it take place,
where did it take place, and all that stuff.
So in X-Wiki, instead of just telling everybody
put that in the text, in X-Wiki,
you would actually create a structure
with a metadata location, time, participants, and so on.
And when people would edit the page to create the meeting notes,
they would get directly a form
where they would fill in data in a form.
They would still have their big text area
where they put whatever text they want,
because that's a principle to let people
the freedom of organizing the information the way they want.
But you would also have this structured part of your page
where you can actually create structured information.
This might allow you, for example, to find all the meetings
that were that happened during the last week.
Or related to a particular topic and so on.
So does this come out in the browser
as like a schematic extra namespaces within the...
It comes out in the browser as a structured page.
So it's as a page with fields
and then with the text of the meeting.
How flexible are those fields?
Can you define them yourself?
You'd only define them yourselves.
There's nothing that, so you've only defined an administrator
or is it done by you?
By anybody who has the rights, yes.
Who has the rights?
Yes, because who has the rights,
meaning that there's users in the Wiki,
which is what the Wiki platform provides.
So there's users, there's groups, and there's rights.
So you can tell like if you basically everything is stored
in a Wiki page, including the structure.
So you just need to give rights
on the page that contains a structure.
And that's how people get rights to edit the structure.
That's it.
This is not magic in behind it.
And X Wiki is not talking Wiki and it's a different project.
Yes, X Wiki is not talking Wiki.
And it's not TV.
You have to talk to everybody on the booth.
OK, excellent.
No problem.
OK.
And it runs on off.
What do I need to?
Oh, it's a Java.
So it's written in Java, the backend.
So it runs on the Java application servers.
You need a Tomcat, JT, whatever application server you want
to just deploy it in the front.
And the front end part is written based on bootstraps.
So it's very mobile friendly.
So it just adapts to screens.
And with the JavaScript part in jQuery and some scripting
part, for which you can basically kind of choose a language.
It's what we write.
We write it in velocity-templating language
because it has a big advantage of being easily sandboxable.
But you can write in other languages
if you want, like Groovy or Jiton or stuff like that.
OK, cool.
Is there anything that you've, that you're
planning on implementing this year or?
So right now, we're working on the,
because in any software that is about adding content,
the editors are quite important.
So like the what you use.
And our rich text editor today is Homemade, a rich text editor.
And we are working, we would be working
on integrating CK editor in it, which is a bit more powerful
to date than what it was a while ago.
And also, we just implemented a new way
to structure the data in the wiki based on nested documents
and nested spaces, which the result of that
is that your whole wiki is a tree of pages,
an infinite tree with infinite levels of pages.
And it's easier to understand how it's organized.
One of the criticisms of wiki is in general as the chaos.
Yeah, it's chaos now.
This structuring, so besides the fact that we, every wiki,
I guess it's working on the organization of the pages,
it's wiki in addition by this structure
that they add to pages, makes it a bit easier
to kind of figure out where you are or what you're doing.
For example, when you land on a page that has a certain structure
attached to it, it would be easy to understand
that it's a page, for example, dedicated to a meeting
and not just any page.
Besides the text that is in it, it also has a marker in it,
like on it to say this is a meeting page.
So then, as somebody with administrative rights
with that point, for a meeting page,
I need these particular fields.
And you as a regular Joe user, you are forced to fill in all that stuff.
What do you like about that?
I'm not sure you're forced.
I mean, you're not forced because by default,
there's no validation in that.
If you want validation, you have to code it.
So you can just leave the field empty
and go straight to the part where you type text
and keep your old habits.
So the fields are more like a guidance, if you want,
because when a content producer would see a structured form,
they would understand, oh, here I need to put the date of the meeting.
So it also helps to guide people
into creating a certain type of information,
which is easier to understand and use.
I guess I am on board with this.
Nobody else is though, but I am definitely on board with this.
So where can our listeners get hold of it
and contribute to the project?
So in order to get in touch with the project,
whether it is for download or for contribution,
you just need to go on xwiki.org, xwik.org.
So it was, let's put that in the show notes,
and we'll have it for later.
OK, great.
So you go there and there's a download part,
and there's also a community part where you can see
how you can contribute.
The sources are on GitHub, so you can also search
xwiki on GitHub and just dive directly in.
What's the license?
It's an LGPL license.
OK, cool.
And I'm talking to...
I'm Michael.
Michael, you're from the Duck-U-Wiki.
Yes, I'm from Duck-U-Wiki.
And tell us what Duck-U-Wiki is,
aside from it being a Duck-Wiki.
It's relatively simple wiki.
One feature many users love is that it doesn't require
a database, so it's relatively easy to maintain.
And we had also many users coming here today
who told us they have a wiki, and it's just running,
and it's working fine.
Yes, and you can check stuff into Git,
and you've got your version control done.
Actually, we are not using Git.
Yes, but I save my documents in Git,
and then I have version control.
Yes, local wiki has its own version control,
which is really simple, which has saved compressed versions
of the old content.
So how did you get involved in the project?
And why did you choose not to use the database or Java,
and what do I need to actually run it on a web server?
You need PHP, because Duck-U-Wiki is written on PHP.
You also asked why I got involved in the project.
I personally joined the project, I think, around 2008.
I was looking for a wiki, which also
is able to run a blog.
And Duck-U-Wiki actually has plugins
to support blogging.
That's how I got involved in the Duck-U-Wiki,
and then I got more or less in a developer meeting
at Frostcon in Germany.
That was in 2008, and since then, I've become more or less
a core developer of Duck-U-Wiki.
OK, very good.
Whose idea was it originally to use text files?
It was Andreas Gore, our main developer,
and he did that while he was working as admin for a company.
And he was looking for a wiki to document a server setup.
And he wanted to have something that also works
when the server is down.
So for example, if you have a database back wiki,
if you're a SQL server or whatever you're using is down,
you can no longer access the content.
And you can't access a database with a text editor.
That doesn't work.
Duck-U-Wiki has simple text files.
You will find a page literally in a text file.
You can even edit that text file that still works.
One thing that I failed to ask, and I should have,
was the markdown that you're using.
How portable is that between you and other wikis?
And it's not that portable.
There are some efforts.
It's called the Creole wiki marker language
to standardize that a bit.
But I think each of our wiki projects is a bit different.
But I think both X-Wiki and Duck-U-Wiki
as well to close to the standard.
For Duck-U-Wiki, you can also install a plugin
which brings Duck-U-Wiki closer to the standard.
And I think it even fully implements
an older version of the standard.
So if I want to do install this along this in my laptop
or in my company, what do I need to do?
You need PHP.
In the most recent development version,
we can even use the PHP web server that is built in in PHP.
So you don't need anything else.
And otherwise, you just need a regular web server.
We also have a Doku Wiki and a stick version,
which includes a micro Apache.
So you can run it from an USB stick.
OK, and I'll get all this at the Duck-U-Wiki website.
Yes.
Exactly.
On duck-U-Wiki.org, you can download everything.
And do you document your own stuff using Duck-U-Wiki?
Yes, we do that.
Very good.
That would trick question there, trick question.
And how can people help out the project?
We are currently needing people,
basically also for developing the software.
Actually, in the last one or two years,
not that much that happened to Duck-U-Wiki
because we don't have that many people
who are actively contributing.
We have many people who are contributing also plugins.
Let's also welcome.
People can also contribute translations, of course,
or help users in our form.
But we are also needing developers who have time
to contribute because many people who use the contribute a lot
have got other things in their life to do.
So they are still there, but they are not doing that much anymore.
So Duck-U-Wiki is definitely not dying.
Duck-U-Wiki is stable, and we have people
who also do Duck-U-Wiki projects for money.
And we have companies who are looking after that.
So it will continue to exist.
But if you want large developers, we need more developers.
OK.
Thank you very much for...
The Wiki section, and I'm talking to Tiki Wiki,
is that correct?
Yes.
Yes.
Tiki, Wiki, Siamese, North Wales, or Tiki, or South.
And you are?
I am Zona Flipp.
And what's your role in the project?
Other than being the one that everybody pointed to.
I'm one of the developers.
I'm also part of the admin group.
Yep.
And well, yeah.
And as a role, good.
And apart from that, I contribute to Tiki.
And my job is...
I have my own company, myself.
And I work on Tiki focuses on open source and on Tiki.
And so I contribute to Tiki, depending on what my customers ask.
So, what is the one on?
What is the software that you need to make available?
It's a lamp structure.
So it can be installed pretty much anywhere you like.
And the PSPHP?
Linux, Apache, MySQL, PHP.
Of course, you can replace Apache with anything.
And MySQL, MyRDB.
That's basically, it's easy to install.
Any hosting company can let you install it.
Or it's not a problem.
Okay, very good.
And why did you start it up?
How did you get involved in the project?
I was working in IT department for some European organization,
which has a lot of users with a lot of very different activities.
So we needed something totally versatile.
So that's whatever they asked from us, we could do.
And I did some study of what was available.
And that was the product with the web products with the most features.
So we looked at the code.
And the community was active.
And we felt, okay, we are confident that we can answer any needs.
And any enforcing needs with Tiki.
And so we worked on that and we enjoyed.
And when I stopped that job, I wondered what I would want to do.
And I reflected on the parts I liked on my previous job.
And I just keep the Tiki part and say that my whole activity now.
Very good.
Because the community was very welcoming.
And I was already part of it.
So it was, I liked the idea.
Okay, so why should I change to Tiki Wiki about the other projects that are here?
Well, the advantage of Tiki Wiki is that it's basically a tool box for websites, for complicated websites.
So if you elaborate the needs of something that you can do with free package,
simple open source solution or not an open source solution.
Yeah, it's a good idea to look at Tiki because we do practically every feature possible on our website or on the web.
And actually what you do is at the start, you install it and you start to activate those which make sense for what you want to do.
So the idea is that however you need to evolve, you will be able to do it.
It's also very hackable.
The community will let you make it evolve.
So it's a little more than a Wiki.
It's much more than a Wiki.
Yeah.
It has a Wiki, it has blocks.
You can categorize anything there are, but there are databases.
There is data entry, how to output them, how to hold them.
You have a plugin with R for statistics.
You can group your users in other groups, in many other groups.
And then you have a very fine-grained permission system which you cross with the categories.
So you can decide this category and this user, what can they use it.
Group of users do on the objects of that category.
But so you can build projects whenever you want it.
Or I forgot to mention we have a file garage also.
That's where you can store things you want to make online like images or anything.
Okay.
So it's more than a Wiki.
Definitely more than a Wiki.
Yes.
Some customers are not very interested in a Wiki, they want online applications that I built on that.
Okay, very good.
So what do you have time for coming up this year?
Well, now, right at the post, for them we have rented a flat.
And we stay here two more days to organize the branding of Tiki 15,
which will be the next long-term support Tiki.
Yes, which is very important because people like long-term support.
And it's the first long-term support that's fully responsive to using goods.
Oh, okay.
So there's a more current development than a long-term release.
I can download a more moving target release on a long-term release.
Yeah, we try to release a 6 months, but we don't know.
We're a 6 months, some developing releases, some are good, some are unusual.
And we only support them until the next one goes out.
And every free or full version, it's every free version,
so we've published a long-term release which we support for years.
Okay, very good.
I better wrap up here, because I think the goods are shutting down and we need to get your addresses.
Thank you very much for taking the time and good luck with the rest of our time.
Thank you.
Hello, I'm Marius Ho.
I'm working for Wikimedia Germany, and I'm at the Wikimedia booth.
So this book is about Wikipedia, but also about our sister projects, including Wikimedia.
Okay, for the person who has come back in time and doesn't know what we come forward in time,
and doesn't know what Wikipedia is, can you give us a quick rundown of the various different projects?
So, yeah, so the most commonly known project, probably is Wikipedia, which is free in Cyclopedia,
where everyone can contribute in knowledge.
It's fully, content is fully bitten by the community,
and it's really available for everyone to use and also to reuse.
And Wikimedia and Wikimedia data.
So, Wikimedia is a head organization of all other projects, where you run the platforms,
and does software development for the platforms in question.
And Wikidata is quite new.
This is a project of Wikipedia, which is a centralized track base,
which is supposed to be used by the Wikipedia, but it can also be used beyond that,
so if it's data is available under CCCO, so it can be used without any restrictions.
So, basically, on Wikidata you have an item about every subject, which is in Wikipedia,
but you also have items about many more things, but it's basically all of Wikipedia last more.
So, are we talking recordings here?
No, it's structured data.
So, for example, you have an item about Berlin, which says,
the nature of Berlin is bad and bad, it has three and a half million people as population.
It's in Germany, and all kinds of things like that about cities, about people, about all kinds of topics.
What is the data that is on the Wikipedia page?
So, it's based on three values.
So, the first value is the subject.
So, Berlin, second is the key population, third is the value, the number,
and then you can annotate that statement.
So, it's based on machine readable statements, so it's like a big database that you can include.
I'm from the Wikimedia Foundation.
I'm a software engineer on the collaboration team.
So, at the booth, we're also representing Media Wiki, which is the software that powers Wikipedia.
It's used for all the Wikimedia Foundation projects, but also thousands of other sites,
and we always are encouraging people to use it and contribute.
My team also works on two extensions, the Flow Extension, which is for discussions on Wikipedia
and other Media Wiki sites, and Echo, which is a notification system.
They can notify you when someone links to a page you created, if they thank you for your edit,
if they leave a message for you, and notify you of what's going on.
What was the need, what was the push to go further than the Wiki to develop these services?
Well, for Wiki data, the main use case is wet.
Right now, you have information about Berlin's dot on all the keys locally.
The idea is to, for example, have population counts in a central place.
So, when we have a new population count for Berlin, you only have to change it in one place.
Oh, okay, yes.
But that will also make it quite nice for me as an end user.
I can do queries, data driven queries, advances.
Using name value fields and get back the value.
So, as told, all of the data is...
Sorry, I'm very slow, it's been a long night.
Yeah.
So, we have a public query endpoint, which can be found at query.vigidata.org.
Right.
And there are several examples on it.
It is buckle-based, which is a standard, which can be used.
It's very well documented on the internet.
And as told, we also have examples which you can start working on with.
And it's very easy to get your first results if you just use the examples and go from there.
Okay.
And you're...
Do you need help migrating from, like, a wiki-based structure into a data-based structure?
Structured data-based structure.
So, yes, Vessen, ongoing effort of getting the information, which is still on the wiki-pidias,
into wiki-data to get data from other sources into wiki-data to source the information,
which is in wiki-data with external resources.
And there's also an ongoing effort to actually when we place the old data from inner wiki-pidias
with references to wiki-data.
So, okay.
I'm finally...
There's, like, a sun is shining down upon me now.
I'm kind of getting this.
So, the idea, obviously, would be to have governments themselves who are paying people to generate this data in census form.
They would directly put it into wiki-data and that would be available there, as opposed to...
Well, they can do that, but it's also...
All of our content is on wiki-data as well.
It's from the community.
And there's a lot of people who import data from various sources.
So, for example, take open government data and import that using some scripts and things like that.
But they're also taking data from wiki-pidias and all kinds of other sources.
Is there, like, a standard that you can just give to my local government and say,
here's the standard.
I want all the public data to be put into the standard so we can import it into public points like that.
Where it's not standard for input data.
But, obviously, if you want to get data, which is easy to import, it should be machine-readable in some way.
It can even be a CSV or maybe a JSON or XMR.
It doesn't really matter as long as it's well annotated and machine-readable.
People can figure it out better.
And when we pull down the data from wiki-data, say, the population of Berlin,
is there a way for me to see where that information came from?
The original source of that.
Yes. So, each value on wiki-data can have multiple references, which can be external websites.
It can be a reference to a book.
It can be a reference to do an external data base, which has information about that topic.
And it's also possible to qualify a value.
So, you can say, well, Berlin has three and a half million people.
And that was measured by wet and wet method.
And the reference is whatever.
Yeah. Yeah.
Very good.
Anything else?
Is there anything that we as a community can do to help out?
Yes.
So, we're always looking forward to people looking at checking out wiki-data.
Using our data, contributing data, or even just looking at wiki-data.
And getting the idea of what it is is probably.
Excellent stuff.
I'm at the Linux from scratch booth.
And I'm talking to.
Hi, good morning, everybody.
And so, what is your name?
Zofi Mangel.
And what is your relationship with Linux from scratch?
Well, I've worked in Linux from scratch for since 2008.
And I have started with translating this project.
And now we have the French books which are translated.
And all the community or French community, which maintains a book in French.
And which has some relationship with upstream in English.
So that we contribute with patches and with patches to the book.
OK, just to let people might not be familiar with Linux from scratch.
Can you give us a brief overview of what the project is?
Yeah, Linux from scratch is a book, a set of books to be more precise,
which explains how to build your own system by hand manually.
So, when you read this book and you follow this book,
you have a full functional system at the end of the process.
And you can use it, for example, to build your own distribution.
So, every time I look at Linux from scratch, I get a back pin.
And the reason for that is I was on my back for six weeks,
and I installed Linux from scratch.
So, it's definitely something everybody should do.
How often do you update the book?
Well, it's a distribution that you need to install for two reasons.
Only if you want to learn things on the Linux architecture.
And if you want to have a customized system, a very customized system.
It's not a, well, it's not designed for every user, I think, for any user.
I think it's rather dedicated for users, which have some experience in the Linux system.
And in the command line in particular.
And so, you have some users who cannot do it.
For example, you've been to users who don't know anything in command line.
They cannot use it, of course.
But, well, it needs some experience, but it explains everything.
And if you follow it, it's somewhat long, because it can take about one half day.
But, well, you can install it without so much problems.
So, when I was doing it, I had an SSH session into a remote laptop,
and then was just copying and pasting commands in.
Was that cheating or did I need to type everything?
Well, I don't understand.
Do you physically have to type everything in, or is it okay to copy and paste in command?
Well, you can download the book on the websites, or read the book online.
And so, as you need, anyway, a host distribution to compile and to build your system,
you can paste all the instructions.
But, you should read it anyway as a book, so that you understand what you can paste,
and you can customize the commands if needed.
Okay, very good.
How do you deal with things like security updates?
Security updates are easy for Linux from scratch, because as you build every package from the source,
it's very easy to get updates.
So, the first thing is that the book is today's each six months.
So, it's very easy to know the last security updates.
And lastly, you can build your own system.
You never forget that Linux from scratch is a book that you, that explains to you how you build your system.
So, if you need to a data package for security reason, for example, the kernel, the Linux kernel, for example,
you can do it without any problem, without rebuilding all the system or without needing to build all the system.
So, you can update as you like and at your rhythm.
So, the reason is the security problem, as you just need to follow the security warnings for all packages.
So, how do you take the system D?
Are you supporting system D at this point?
Yeah, we have two releases of the book.
We have the first release, which is a system V, so the traditional group manager.
And you have also a system D, which is now supported.
Okay, very good.
I'm going to ask a question that I'm asking all the distros.
Can you explain to me how supported accessibility is in your distribution?
Well, again, the Linux from scratch is a project where you do what you want.
So, actually, given that you build it from a host distribution, if accessibility works on the host distribution,
a screen reader or a bright reader, it's not a problem.
You can build it without any problem.
Then, the book doesn't explain actually how you can install a screen reader.
No, to be precise, the book doesn't explain how you can install a bright reader.
But, it explains, well, there is a release, which explains how you can install the screen reader.
So, you can also try installing it.
And if you manage to make the graphical stack work, you can make work the screen reader.
Okay, very good.
What sort of a reader have you got there?
Well, how many readers?
The website mentions that we have 40,000 users, which are reported as I finished LFS.
So, I think we have some hundreds of readers a year.
Okay, very good.
And your Braille interface device, can you tell us a little bit more about how that works?
What?
Your interface device for communicating about how to, can you tell us how that works and what you need to get it running?
Yeah, well, to access the system, I use a display device, which enables us to read with fingers around the screen,
and it enables us to type on the computer using the bright cable.
So, that's the people, the person who uses it, just need to know Brian and to run him Brian and to read him Brian,
to have access with information.
Do you use the screen reader yourself?
Yeah, absolutely.
I use the only screen reader on the GNU-NI-NEX, that is Orca.
Orca, which works perfectly on the desktop, such as GNU-M3 and Mate.
And the last four, those are desktop environments, such as KDE or XFCE.
But yes, I use the screen reader.
Okay, very good.
So, is there anything new coming up in the project that you want to make us aware of?
What are the other stuff?
What new things are happening? Are you having a new release this year?
Yeah, of course.
Last release has been released in October, I think.
And as we release each six months, we probably will have a new release during April, April or May, I think.
The time that the authors update the book.
And of course, we have also released before the end of this year.
So, April for the first release and the likely October or November for the next release.
So, we will have at least two releases in 2016.
Very good.
Is there anything that you want to say that I have been covered in the interview?
Well, I would like to say that any contribution is welcome.
So, the contribution for LFS isn't so difficult, because you need necessarily to patch or to know to code et cetera.
But, reading the book, you just need to report the bugs you see, report the patches.
And you can help easily to update the book, in particular the book about beyond LFS.
Because LFS is there are several books.
And the first book is for the base system.
So, I can understand that it's difficult to update because it's the base of the system.
But beyond LFS maintains the packages for the end user.
So, you can help testing them as you can help saying how you build them and how you update them.
So, it's very easy to contribute to Linux from scratch when you want to build things manually and you want to learn things about how a system works.
Thank you very much for taking the time and I hope you enjoy the rest of FOSTEM.
Hi everybody, this is Ken, I'm at the Pearl booth avoiding being sold stuff by Wendy.
And I'm talking to Mark Keating.
Wendy van deik.
Hi.
So, tell me what is Pearl?
Pearl is an awesome programming language. It's a dynamic language.
It's used all over the world.
It's one of the most used programming languages ever.
We have now Pearl 5 and Pearl 6.
Pearl 5 everybody knows it's installed on every server in the world.
Most of the internet is working on Pearl and now we have Pearl 6 as a sister.
And she's also awesome and she does amazing things and is multi core, multi processing and object oriented and fun to try.
But you're going to continue developing Pearl 5 along with Pearl 6.
Can I add that Pearl's both the oldest and now the youngest of the programming languages?
Well done.
So, we managed to get both of those because Pearl 6 is one month old.
It might have been in development for 15 years but it's only one month old.
So, what was the need for Pearl 6?
There was a need for a complete rewrite as far as a language developer thought.
So, he wanted to basically scratch his own personal itches and rewrite the language.
And that's actually fine.
What's the problem with having multiple programming language?
What would it not be better to call us?
Pearl.
Pearl, I don't know.
Emerald.
No, we have had discussions about the naming of Pearl 6.
The boss of Pearl is Larry Wall.
He decides what happens to Pearl and the naming about that.
So, he decided it's going to be called Pearl 6.
And we can jump high and low and we can discuss this forever.
He decides.
I'm going to go with Shakespeare.
What's the name?
A rose by any other name?
Smiles of Street?
Call it whatever you like.
It's poetry, right?
Yeah, I'm sorry, that's where he goes.
He's an English major, so.
And Pearl has a lot to do with poetry and language.
So, it does, yes.
It kind of helps a little bit.
But I've set a tube before.
Dave Morris, his big fan of Pearl, has taught me everything I know.
And I go from loving the language to hating the language.
And that can change in the space of walking to the coffee machine and coming back.
Absolutely, I do that with English as well.
There is a lot to think about it in terms of as a language.
So, Pearl is adaptable and makes it think like you think.
And sometimes you go around hating the way you say things.
That's how Pearl works.
So, it's all about a mindset.
Pearl is much more based around grammatical mindset and a linguistic mindset.
That it is a structural or a programmatic mindset.
And so, that's why you have so much variance in it.
Enrichness and verboteness.
And so much crazy.
Yeah.
The thing is, when I compare my code to the stuff Dave suddenly, the example of programs.
Mine looks like a chunk of gibberish.
And his looks like a actual work of art that you could print out and put on the wall.
I have the same when I do my poetry.
And look at Coleridge's poetry.
Mine looks like a hunger gibberish.
But, yeah, that's the way that Pearl works.
But we've got a lot of good things in Pearl that help you to avoid that.
So, you can use Pearl critic.
You can use Pearl tidy.
You can extend them and make them more of your programming style.
Or make them more stricter.
And by using those, you can make much better Pearl.
And your team can make much better Pearl.
You can even format it so it looks like another programming language.
And if that makes sense to you, you can do that.
And then there's adding a lot of syntactic sugar to things.
So, you can use things like moose.
You can use moose.
You can add some syntactic sugar in there.
And to complete that, if you're working on a company with several people working on the same project,
it's a nice way to coordinate everybody trying to keep the same style.
Have a company style.
You could use a book like Pearl Best Practices that I'm showing you right now.
She's trying to tempt me.
I have sold you books before, so I will not try to do it this time.
I actually wouldn't mind buying that particular one.
Okay, well, it's sort of a guideline for your company on how to use several ways of working with Pearl.
You don't have to follow the guidelines set in the book,
but have a discussion in your company on how to do this, how to do that, agree on stuff like that.
And if you have a new person coming in your company, have them read that,
and have them apply to the guidelines.
And if I may go back about Pearl 5 and Pearl 6,
you asked me, will it be developed further?
Because we just had the release candidate for the new version of Pearl 5,
Pearl 524 coming out in May,
and Pearl 5 will be around, maybe forever, just like Pearl 6.
And they will be co-exist for a long time, I hope.
And so it will be developed further.
There's also a lot of community and companies based around Pearl,
who are all about improving the best practices of Pearl.
You'll find lots of trainers, developers, advocates,
lots of people inside the community.
If you ask your question of how can I make my pearl better, you'll get a good answer.
And they're willing to do that a lot of the time just because they'd like you to write better Pearl.
We've had our decade of really badly written Pearl,
and we're getting rid of that, and we've got rid of it about a decade ago.
Pearl is that, oh, we've been around a long time.
We had our bad times, and we had our times where basically we got rid of a lot of craft.
And now Pearl has been a lot nicer.
The programmers are a lot better.
The development is a lot better. The community is a lot better.
A lot more willing to help, a lot better practices.
You strict at the top, really helps.
You strict, you use warnings, yes, absolutely.
And as I said, Pearl critic, potide, it makes your code look a lot more readable.
And you can set a lot of custom stuff.
And then you can learn a lot of things from the people already in the community.
And if you want to learn Pearl, it's really easy.
That is actually something I wanted to talk to both of you about,
it seems to be a lot of push with Python now,
especially with Raspberry Pi and all of Pearl is on there as well.
So what is the best way for, what is the best way to get kids,
or young people involved in Pearl, White and Pearl code?
That's a good question.
That's the best way to get young kids involved in writing Pearl code.
Use the Raspberry Pi and Post-its.
Yes.
Right hand on the world script, go to learn.po.org or post-its.org.
There are simple scripts.
If you're going to keep your children programming depends on their age.
A six year old is not going to get Pearl straight away.
You'll want to be teaching them stretch.
But if they're 13, 14, yeah, go to learn.po.org.
Start a simple script, learn with them.
That's the best way to learn anything.
And not only that, find something that they want to do,
because in any programming language,
it's not about learning what somebody else did.
It's about learning a tiny bit of the language.
And then think of something you want to do.
Asked, I don't have children.
Mark has.
So he knows more about that than me.
But I know one thing about children, they like games.
So the nice, one of the nicest games is to develop games yourself.
Pearl six, I think, is one of the one idea language to produce games.
One of the first things that is developed in Pearl six now is games.
So space and faders was the first one.
And I was surprised how lightning fast it was.
I lost completely every game.
I couldn't win from the computer because it was too fast.
So the guy is now inserting a throttle to the down.
Well, this is interesting for kids.
I have to say once while we're stood here,
I'm looking at Curtis Poe, who is writing a super cool game in Pearls,
that it's going to be out sometime soon.
I'm not certain exactly when it's going to be out.
We're hoping to have a pre-alpha out by the summer.
Well, that'll be invite only.
I can't share the name yet because we have some legal hoops.
We have to jump through.
But it's basically a text-based MMORPG running in a browser called Beer.
And a lot of people having fun.
We've got an entire team working on it.
And it's been an absolute blast.
And one of the nice things I've really appreciated is Pearl has an embarrassment.
Pearl has an embarrassment of riches in being able to build out things like this.
There are so many different web frameworks you can choose from,
so many different ORMs, so many different things for making this easy.
And any time I've had a problem, which isn't business specific to what we're doing,
there's always been a wonderful tool out there, which has allowed me to get it done.
And it just rocks all of it. I love that.
Just one second.
Dave Morris, one of our pearl experts and community members,
is sitting over there in the corner avoiding...
You should be doing this.
I should be doing this.
Yes, I was listening to some of the pearl talks, pearl sex with Co.
Any questions for the team here?
I do.
It's a Curtis.
So Curtis, is it going to be extensible?
Can I add stuff to it?
Your game when it comes out?
This is not planned for the alpha release.
But is there a future point where you see that happening?
Yes, there is a future point.
Basically, one of the things we've been thinking about doing is internally,
we're following the standard model view controller model, MVC.
But we have what, as you should be, extremely, extremely thin controllers.
The controllers are often just a single line of code in there connecting the view and the model.
And as a result, the controllers right now are specific to the web.
We can replace much of that with an API layer, allowing people to write their own clients.
If you wanted to, then when we finish this, you could write a command line client,
you know, for, you know, your, your ambassador,
just write a quick command line client to interface the thing.
And you can actually be playing an MMORPG from the command line.
So we were asked about children committing to pearl.
And one of the ways that I think children have come forward to programming now is Minecraft.
So your game could be the same way.
If children can actually extend it themselves in a simple enough way,
would that not be a way also bring them into the community?
That would certainly be an interesting way of doing that.
I think a lot of things for the pro community is finding out what the children are actually doing.
Games are one of it.
Part of it's organizing their music or, you know, better ways of doing social sharing,
things like that.
And that's the sort of thing which the children are really paying attention to today.
And if we were doing more of that, focusing on more of those issues for them,
I think that would help also.
But yes, games are going to be a huge thing there.
That's awesome.
That's a bit kind of, I was actually at your talk just a short while ago.
So I was bowled over by, by what Bell Six can do.
I mean, it's not very obvious from the remote observer what where Pearl Six is now.
And, you know, it needs more of what you were doing today to get the word out.
I guess the people who've just been thinking, it's nothing to do with me.
I'll get to it eventually.
But is it easy for somebody like me to go and get access to it and use it and so on?
Is it going to be in my deviant distribution, for example?
I do know there's some work being planned for various distributions.
There are some versions out there.
But largely right now with the stable feature, at least last Christmas.
A lot of people are just installing recudo brew.
And they're building it manually that way.
And so I just have an alias on my laptop.
I call it called rebuild recudo, which automatically rebuilds recudo, the package manager,
and recudo being the back end for Pearl Six.
And it was interesting though when you were talking about, you know,
from a distance, not knowing what's going on and then you're blown away by it.
This is what I'm seeing over and over again when I talk to people who've never seen Pearl Six before.
And it's not there's that one feature that happens to scratch that happens to scratch everyone's itch.
You know, there's things like, you know, go for a lot of people's just a concurrency.
You know, it goes in great language, but it's kind of trapped in the devops world.
The interesting thing about say Pearl Six, by the way, I didn't mean to throw shade on go there.
I apologize.
The interesting thing about Pearl Six is it seems to scratch everyone's itch in different ways.
You know, whether they're looking for grammars, whether they're looking for a more robust type system.
They're looking for, you know, it's probably the most advanced object-oriented system anyone's ever going to be playing with ever.
They need, you know, working concurrency in a dynamic language.
There are so many different things which people actually want.
And they're finding it's available.
And it's all put together very nicely, very cleanly.
So 15 years of waiting has been worth it.
I started at Pearl Four. I took over a program.
Somebody written in Pearl Four with all the tick marks and everything in it and tried to work from there.
But, you know, this, this sounded like the promised land from it.
It is a strange thing.
There are other languages which have been rushed out there very quickly.
This time I'm not going to make the mistake of accidentally jumping on them.
But there are some that I have seen that they've pushed out there and they are timid in what they offer.
Or the features haven't been well composed together.
They weren't planned out.
So you get a mishmash of stuff but together.
And you're always looking up the documentation because you can't remember which order the arguments are in.
And Pearl Six, I won't say that it's perfect.
Everyone's idea of paradise is going to be different.
And there are certain problem domains.
It's probably not going to be your first choice for just as that's the case with every programming language.
But it is so rich in what it's done.
And they took so long to make sure they actually got it right.
And they learned a lot from initial pre-implementation with what's called pugs.
And other thing for people were trying beforehand to find out what can we actually do with this.
To the point now where you have a nice cohesive coherent language where all the pieces are put together.
And it's astonishing.
You know, having types actually map to what you as a business need as opposed to what the computer needs.
That's a huge one.
That's that's going to be big.
The gradual typing being built in language, meta operations available for classes.
The working concurrency and the dynamic language.
That doesn't exist right now for the most part.
You say JavaScript and Web sockets, but I'm not going to go there right now.
It's fabulous.
I love what I'm saying.
I have no idea what you just said.
Well, I'm sure I'm going to talk.
Links to the talk will be in the show notes for this episode.
So is there anything else that you want to use?
Guys want to ask or share with community?
Big thing is part of six is coming in guessing this year.
One thing I'll say about Pearl five.
I run a company all around the world.
And we do training, resulting in Pearl five.
And the interesting thing which really surprised me after I started the company.
We're doing a lot of new Pearl development.
Companies are coming to us and saying, you know, we would like this system.
We would like this built in Pearl.
We feel very comfortable with it, you know, Pearl's battle test.
It's been around for a long time.
It's not like some others which, you know, sometimes they've been great.
Sometimes, you know, they've been pulled away at the last moment or they've been forked.
Pearl's been solid.
And I've been surprised at the amount of new Pearl that we're writing.
If I can add to that, I work for a company called Shadowcat Systems.
We do consultancy.
We find a lot of companies that have gone away from Pearl and are now coming back.
Because they went away, tried to rebuild the thing in a different language.
Thinking that Pearl was perhaps entering a mode of not being supported.
And I've found that they need to do it back in a poor way.
Because it worked better for them then.
So sometimes the business model is based around the fact that the language you originally built from.
So that can happen as well.
So there's a lot of, as Chris has said, a lot of new projects being built in Pearl.
New companies being built in Pearl.
Very big things built in Pearl.
And a lot of people returning to it and realizing that they probably shouldn't have gone away.
You'd be astonished at the size of the projects we're working on.
Sometimes I can't talk about it because of non-disclosure agreements.
But we have one which is collecting network data over the entirety of, you know, countries in Europe.
And it's expanding from there and has to do that very fast.
Getting close to real-time data for their clients in order to be able to monitor their information.
And it's astounding how easy it was to do with Pearl and the size and scope of what we're doing with that.
So that doesn't strike me as like an interpreted language.
We'll be able to be that fast.
So a lot of people misunderstand what's actually happening with performance.
When we talk about it, sometimes we're talking about the performance of the developers.
Sometimes we're talking about the performance of the computer.
Performance of the developer, we know dynamic languages often excel at that.
But the performance of the computer, what's actually happening there?
Quite often when you're dealing with performance issues, when I am running profilers trying to find out where the performance is gone,
we're talking about network latency.
We're talking about disk I.O.
We're talking about so many errors which have virtually nothing to do with the programming language itself.
Now, what I want to write a real-time Ray Tracer in Pearl?
No, that's going to be CPU bound and that's not going to be good.
But if you're not CPU bound, sometimes even if you are, depending upon this problem domain you're working with,
I know profil radio expressions, for example, often will allow you to parse text faster than writing it in C.
But generally speaking, much of the performance issues that you find in larger systems are not tied to the programming language itself.
So that's becoming less of a concern as a general rule.
But that also depends when you're writing very specific things, when we're talking about, you know, Moore's Law,
hitting up against Moore's Law, there are things we're just still going to require super lightning fast performance.
And there you go to C++ or something like that.
And also we have the programmer.
I strongly suspect my code would run slightly slower than you're on the U.S. guys code.
That's possible, but there's, you know, there's a lot of great tools out there for, you know, like develop NYT prop is a fantastic one for finding out exactly where the performance problems are.
Showing up in your code is wonderful.
Guys, thank you very much for taking the time and good luck this year with, with Pearl.
Congratulations.
Well done, David.
What's the name of the project?
The project is a bugger's project.
And your name is?
I was trying to look up some information on this project before I came.
And there was nothing.
It is secret to me.
So I know nothing about your project.
Because it's quite a new project for now.
It started as a school project, but now we are continuing as an open source one.
It's two years of research and one is of development.
And it's almost released on the open source community.
So what is bugger's?
Bugger's basically a set of tools to him to his, the analysis, static analysis of binaries and the interact detectors.
So in short, we are taking a binary, we are mapping it in memory on the graph, and then we are emulating the world set of instruction on the graph to detect anything we want.
What does anything we want mean?
Since it's modular and the virtual machines were set of tools to work with the assembly, anything we want to do with the assembly.
The main goal is debugging.
So detecting issues with the cards that were laid to a crash or only find behavior.
But in the future, it can be even used for security, reverse engineering, and this kind of stuff.
So these can be closed binaries or drivers from a third party or something?
Yeah.
Yeah.
Yeah.
But it's not on the close one or the projects.
We are working on user space as somebody, not kernel space and special instruction like cache instruction and floating part instruction and vectorization instruction, which are a bit tricky to handle according to the way we handle the variable statically.
Okay, why is this project needed? Who uses it?
The usage is to complement what it's with the market.
The market, there are several solutions already, there is a record.
But the record is aimed for the corporation, for the company.
It's expensive, it's not for the regular developers.
There are tools like bug green and gdb, but I'm afraid that dynamic analyzes and they can find the flow in the code only if they run into ones at the moment you run the tools.
So we are working statically because we want a full coverage of the binary, and we are working on the assembly because we want to be language independent, any compiled language.
A source will be, this will allow us to detect flows in the compiler because we can't trust the language itself.
I have an example.
Okay, I'm looking at a screen, yes.
I have a simple look with a compiler, something that is incrementing a variable from 0 to 120.
And unfortunately if we compile this with GCC, 4.8 and above, it's doing some loop hand rolling.
And the optimization module crash because it assumes there won't be any overflow during the ring, during the ring unrolling, and it does not rise any warning.
So the code is completely unfinished and crash.
So here I'm going to compile with port 2, run the code, and just generate segmentation fault.
So you're basically writing code of my quality?
Yeah, the code is perfectly clean, but the compiler is doing things wrong with it.
So that's the kind of issue we are going to detect, but we are not detecting right now because we are rewriting a world part of the code, the emulation part, and it's not ready yet to be released.
Okay, I'm when, when do you think it will be ready to be released?
Oh, good question.
Since we are working on it weekend and after the work at night, it might be a few months before the first beta will be reused on simple C code.
C++ will be harder to learn due to exception, virtual, and the decomposition of the code might be harder to do.
So a few months for me.
So how can people help out with a programming?
I think there's a fairly hardcore stuff or am I missing?
I suspect.
Yeah, some some hardcore behind these and the emulation part, but for the contribution of the code, it won't be available for no since the repository are not open yet.
A few of them are open, but not all of them.
When we are going to release the first program, then there will be tasks on it, and the user will be able to configure it and send some full requests on the different part of the project.
Okay, and you're here a fast term in order to try and get more development, get more developers on board?
Not yet. The first goal is to present the project.
Tell, we are here, we exist, and we are going to do some cool stuff that are going to be awesome.
Excellent.
Being awesome, that is awesome.
Do you have anything to add?
Anything that I've missed?
So can our community help out, or it's basically sit and wait for your code to be released?
So is there any way that our community is varied from the beginner right up to the very technical?
Is there anything that we can do to help?
Or do we need to just wait a while until the code is released?
You mean, for the hand user to only use it or to contribute?
To use it, it will be really, really easy to use. It's same for this like Valgrin.
Just run the program, give a parameter to the user program you want to analyze, and by default we will have also modules that we run.
Zero division, pointer arithmetic, and any kind of issues we can detect.
And for the contributor, and for at least they will have to wait until we release the full API of the code.
Okay, so two questions. What's the written in, what programming language, and what is the license that you're going to release it under?
Okay, the license used is BZ2.
And it's written in basically in C++11 and as somebody for the most low level parts.
Why did you pick the BSD license?
BSD instead of GPL because we want the code to be used in security later and no matter the field.
So we don't want to restrict the usage of the code at all.
Is there anything that I forgot to ask that I should have asked?
There might be some technical things I would like to say, but we'll take too much time for the interviewer.
You know what you can do is record the show and submit it to HBR. They will love this sort of stuff.
Yeah, but for this we will need to register to other open conference and register for a talk. And then here for sure.
Okay, very good.
And I'm talking to last year.
Hi, could you tell me what the project is all about?
So with koala we are trying to reduce redundancy.
That's what the bearers for koala.
So with koala we are trying to reduce redundancy in static code analysis.
So if you have various tools like Pylind and CSESLind and stuff like that, they all rewrite the whole user interface.
And that kind of sucks because that is all double the word.
And so koala is a framework that allows you to just write your logic in one function and throw that into koala and then you get the whole usability for free.
So what type of programming program are you talking about as a specific to one particular programming language or can I use any program language?
So koala provides you with usability and modularity.
So that is nothing language specific.
Koala does not create any kind of abstract syntax tree or so.
So you can use it on any text-based thing.
We actually have routines for checking for spelling errors and inconservative writing and stuff like that.
Okay.
So say I'm writing something in Pearl, for instance, I've just come from the Pearl booth and I've written a Hello World program.
What do I need to do next?
So for Pearl we currently don't have any routines that can do any checking, but they can be added very easily.
Programing language, Python.
Python works very well because koala is written in Python.
So koala can give you any hints about you not complying to PEP8.
It can remove unused imports.
It can use everything that Pilot can because we sometimes integrate with other tools because we want to remove redundancy, not create something.
Koala can also automatically fix stuff if you configure it that way.
So you can know all of that with koala.
Give me an example of automatically fixing stuff.
So, for example, if you're working in the add some text editor and you're inserting an input and you don't use it or you remove some code that uses some imports on the top.
And then koala could, if you configured that way, automatically unsafe, remove that unused import and you don't need to do anything about it or you execute it via the command line and it would do the same.
So I've written a program. Do I need to configure specific stuff or is there a generic library that you checked for regular, you know, general pearl or Python issues or do I need to specifically look for some.
So you need to configure koala with a configuration file or via the graphical user interface, which we currently working on.
It's a prototype or the command line interface. So you don't have to write manually, but you need to do need to configure it.
That is because essentially in koala you can use any routine for any programming language.
That way you can combine language independent routines with language dependent routines. So if you have something that correct spacing, you can reuse that for everything and you don't need to rewrite that for your next programming language you make right tomorrow.
So that you could then introduce coding styles for your style sheets for your HTML for your embedded PHP.
And you can do all of that in one configuration file.
So what describe what I need to do to install this, what sort of server I need and where I need to run it.
So koala runs directly on your PC, you need Python 3 and you can just install it with pip 3 install koala.
It couldn't be easier, it couldn't be easier, so long as you got pip installed of course.
Can you tell me a little bit about your, is this a company, is this a foundation or what's the management of the koala team?
koala is actually only a pile of developers who are doing this in their free time because they think it's important.
Okay, that's, that's a good answer. And you're not federation with anybody or what sort of licenses released under koala is released under a GPL, a GPL 3.
Free as in freedom. Is there anything else that's coming up this year that you want to tell us about?
So we're currently writing on an integration into GitHub of koala.
So that way it can actually review your polyquests automatically on its own.
Like you submit a polyquests and you will get commands right in the lines where there are issues which may even show you some patches how to fix that.
So it's also a way of improving your code as I suppose that's the whole point is to improve.
Yes, is there any way that we as a community can help out?
Anyone can help out by using it filing backs of course we love backs because backs are known backs are better than unknown backs.
You can of course help out by contributing. It is very easy to integrate your favorite linter into koala.
It is very easy to integrate koala in your favorite editor and that way you can connect all of them at once.
Fantastic.
Hi everybody, this is Ken. I'm at the Google Summer of cold booth and I'm talking to you.
Is this Mary Ratamyle from Google?
You've actually been on Hituya before.
I have back in 2011 I believe at the Linux con in Boston.
Excellent stuff.
Linux fast in Boston.
No problem. Can you give us people our problems from anywhere I suppose. Can you give us the elevator field?
So Google Summer of Code is a student program. We pay students to work for open source organizations over the summer and work on a large coding project.
Google accepts 150 open source organizations ish and then they come up with a list of projects for students to work on.
Students then apply to the projects. They meet, they greet, they bond, they have a good time and then students code for 12 weeks over the summer and hopefully they come out of it with a really great experience.
Learned a little bit about open source and the free software projects get new contributor and hopefully a long life long time developer.
I think this was the alternative to flipping burgers that you, this was the alternative to spending your summer flipping burgers that you're actually doing something in structure.
Yes, absolutely. So it was either I believe our old saying was flip bits, not burgers.
What are the age restrictions in order to be involved in?
There's no age restrictions. You just need to be a student and if you're not a student, you could participate as a mentor.
So you could work for an open source organization and mentor a student through the summer.
What are the, you mentioned there that you needed to meet the team. Is that physically or virtually?
It's all virtual. So you can be anywhere. There's no requirement to travel at all. You can be wherever your computer has an internet access.
So you do all the community bonding online through IRC channels, discussion lists, whatever the project reverts.
Okay, and there are. So can you give me the details of where somebody can go to get more information?
I've got it right in front of me. So for more information about Google summer of code, go to g.co slash gsoc.
And then we'll have all the information about the timelines and when to apply and when mentoring organizations can apply.
Are there any deadlines coming up?
Absolutely. So the next deadline is February 8th or absolutely. Sorry, it's not a deadline. The program opens February 8th where orgs can start applying to be a project for the summer.
Okay, very good.
Hi, everybody. This is Ken. I'm up here at the ultimate sugar. I'm not going to call it a booth. I'm going to call it an experience.
I do. I'm Oliver. Hi. We spoke again a few years ago. So tell us what Ultimaker is. If nobody, if anybody out there doesn't know what it is.
Ultimaker is a manufacturer of open source 3D printers. We have open source software stack and even the machines are open source.
That's amazing. And you have. Well, everybody knows what it's for you to print.
Well, last year we had many surprised visitors this year. Many of the surprise visitors again. So yeah, still everybody said, wow, wow.
It's mostly that people are surprised what you can do with the 3D printer as to especially people in the industry as opposed to regularly injection molding.
So that's one of the amazement that we see. And the mostly just new people, you know, new generations that visit here. And there's like, oh, wow, this is so cool.
And maybe maybe they heard about it on the internet. We're right about it.
It's here obviously. But you know, when you can see it and touch it and unfortunately the listeners cannot see it. But the print wall there is so impressive.
It's very, very simple. Just a few prints printing, but it just looks impressive.
Yeah, I'm going to have a picture of this and the show notes is all, but I think all our listeners are regularly drooling over your website.
I hope so. Thank you. No problem. So tell us, let's walk to some of the models that you have available and what the prices are.
I'm very bad with prices and especially since we only sell to resellers at the moment prices are with the resellers.
The most well known reseller at the moment, we just recently achieved is Apple. So you can buy the Apple store under the printer section. Yes, 3D.
Yes, Apple open source. Yes, very surprising.
So we start with the really the basic one that we call the hobbyist, the one that's most interesting for the people here.
It's the wooden version. It looks creepy because it's laser laser cut from a from from a plot from plywood. So it looks more, you know, more awesome.
For the people here, absolutely more awesome.
You have to simulate yourself. It's like IKEA slash Lego for adults, I guess.
It starts, I think around 1200 with everything the other printers have as well. It's just, you know, you have to build it yourself.
Then we have the small one that will make it to go.
I have to be very careful what I say.
The price is okay. It's it's 1500 years or near the 1200 mark. It's just I personally and this is my opinion of course.
It's very small. It has a print size of 10 by 10 by 10 centimeters. And there's only so much you can print.
So if you were debating between the two to wouldn't build it yourself one in the small one, I would still recommend the one one because you get the full size of the regular printer.
The regular size is 20 by 20 by 20. So centimeters by the way.
And then we have also the regular ultimate or two plus a new one is actually a two plus where we change the heating end.
It's you can easily now use or change the nozzles which is unscrewing it is screwing a smaller or bigger nozzle on it and a stronger feeder.
It's it was one of the problems that we have previous generations. So all the new ones have that.
So we have the the small one the normal size one 20 by 20 and we also have the extended which is 20 by 20 by 30.
Oh that's and if you again the readers are the listeners can't hear I see it but if you look behind the printer the rocket is one of those things you can more easily print with the bigger.
It's a bomb actually it's not a rocket.
I thought that was made out of wood actually.
So yeah pretty cool from do I can see 3D printing from a manufacturing point of view has been an excellent replacement for prototyping.
And there are definitely some intricate designs that you can do with 3D printing that's got 200 injection machines.
But when people are looking at I would never consider 3D printing as a replacement for injection molding given the speed.
It's it's not 3D printing is as you said it's perfect for prototyping but also small scale manufacturing.
If you need say and I'm trying to make up a bizarre example here but say you sell actually have a good example if you want one.
There was a guy who has a fleet of Ferrari's that he rents out and there's a little plastic do hikki on the steering wheel and it costs 150 euros to get them printed to replace the steering wheel to get Ferrari to replace it.
It's a 40,000 euros to replace it.
That's more marketing kind of you know like availability and exactly what you say.
What I mean with small scale manufacturing is say you have a small business and you want to sell customized lamppots for example.
You want people or mugs I don't know.
You can offer the option to your customers to have their name and both on it you know it's like a 3D six out.
You're not going to run an injection mold factory for that even for the common names here unlikely.
So if you need to make a couple hundred easy 3D printed.
There was actually an article just yesterday or two days ago I think about or maybe it was slash that I remember about.
Oh guys what's the cheapest best way to print Legos and that's like the perfect example which you cannot do with 3D printer.
Lego is known for their super high position injection molding super high position.
You cannot achieve that with a 3D printer.
Also the plastics used the grade faster than the Legos Legos are the same as 4 years ago.
3D printing it's not going to happen.
It's a lot more than to get Lego bricks.
Yeah normal engineering types.
From altimakers point of view there's like four I'm not a marketing I'm a software engineer I'm just you know.
There's the four markets that we envision it's the small scale manufacturing.
It's the architects that want prototypes mostly fast prototypes or you know.
Yeah well even to do simple casts you know because you can take a piece of plastic or print piece of plastic put it in sand.
For aluminum and the plastic just paper I think you have an aluminum mold.
So you know there's some ways for it.
And then the educational sector you know schools which is kind of like the prototyping because you know the universities they want to do prototypes as well.
And then the middle schools with you know educational and in general.
There was a project where a guy printed some parts for the biology department to build an equitonics.
Like hydroponics but for aqua aquatronics yeah.
Like whole aquatronics system you know and then the kids are it's like whole course you know first day they do the whole 3D printing bit and then they assemble it and they see the whole thing.
It's education.
And then of course the full stem proud the hackers the makers.
We started from yeah well large as yet.
We started from that corner.
We started in the product space in the hand maker space.
The community is very valuable to us.
Very important to us.
And we still cherish that very much.
How does that actually work in a real sense other than like the promotional aspects.
Do you get actual development codes back?
Yes.
Yes absolutely.
The new hot end I mentioned earlier the exchangeable nozzles that actually is a piece that came from the community that we brought back into a machine as an upgrade.
We also sell as an upgrade kit.
It's called the flexi drive which allows printing of flexible materials more easily.
It's a community developed thing some guy in England that develop it.
And we together we made somewhat of a product out of it and it's not you know like a regular product that we sell to regular people.
But you know it's something we can buy you can buy or make yourself.
So that in that sense yes absolutely.
But that's hardware open hardware hardware hacking.
It's much more difficult.
It's to get contribution to verify contributions that takes a lot of time and effort on our side.
And on their side it's a different kind of people software wise it's easier.
Now it has been a software community development has been around for for ages now.
And in that regard we seem more.
We had a contribution from one of our hosts from Lafayette Louisiana.
And they have done their library.
They've updated their bibliotech.
And in there they have a 3D printer in the nesting section and stuff.
I would like you to I would like my local library to have a 3D printer.
Oh no absolutely agree. I absolutely agree.
Very slightly costly especially for for situations like that.
But I would say absolutely.
They showed community centers libraries.
I even saw and they didn't have one.
I wish they had I was thinking they should have one of those arts and craft stores.
You know they say all kinds of sell all kinds of expensive do that.
You know perfect you know that you said artists yourselves is one of them.
Put it there you know show people what they can do with it.
Okay anything else coming up this year that I need to know about or.
We just released as I said the new ultimate your two plus in at the CES.
So that's new.
Are you doing models of company?
Very well actually yeah.
That's it.
We're doing really good.
We're still here.
Five years from.
Well the only thing I want to say to listeners are always grumbling about the price.
It's expensive.
We're not aiming for risk to buy.
We don't want to take part of the risk to bottom.
We don't want to be the cheapest printer and then make the money on the materials and the razor blade model.
We value the quality of the printer.
The services you get around with it if it's broken you know you can get it repaired usually etc.
That's what we are aiming for.
You know the the price around is not it's not a range of six.
It's a price of a laser printer when they come out first.
Of course it's not.
Absolutely it's not.
In that regard we're still small scale manufacturing ourselves.
I mean I can't I don't know if I can release numbers or not.
But we're not doing millions of of HP printers you know.
So it's a different.
It is a precision component.
I'm mechanical engineer by trade on mechanical plastics which.
Which is why I really really wanted very badly.
But that is why you know it's.
You just have to you can't get away with when you deal with precision like that you can't get away with cheap stuff.
Yeah.
But you can but it's going to break and it's going to be disappointed.
What I noticed last year that you've made me another floppy but a floppy bunny.
Now what I noticed last year in this year especially is that.
But people are very very amazed at the quality which you've with these simple machines.
You know some people mentioned some competitors and they're like oh we have one at the makerspace.
Wow it doesn't nearly come at close to the quality of this one is.
Yeah.
So yeah it's precision machinery absolutely.
What I've seen is like.
People are now beginning to go okay this is a different way of doing stuff and they stuff inside of stuff inside of stuff.
From an art point of view is awesome but I also saw clocks been made.
A guy who made a 3D printed clock which was huge enough.
But still as a concept it was it was nice.
Oh this is how a watch works and the mechanism worked.
So cool stuff.
The big problem we had again this year is we didn't prepare well enough.
You know we just always bring some prints and then we'll just go and it'll be awesome.
And then you say we should have brought this one print.
That was really really cool because it moves and it was printed in one go.
Yeah watch it.
Yeah just make a list for next year that's all you can do.
Yeah I tried that last year I forgot I guess.
Alright listen thank you very much for taking the time and you know if ever we want to send one for demo purposes I'm more than available.
Thank you very much.
Thank you.
So next year.
Thank you.
You've been listening to Heka Public Radio at HekaPublicRadio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show like OR shows was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast and click on our contributing to find out how easy it really is.
Heka Public Radio was founded by the Digital Dove Pound and the Infonomicon Computer Club
and is part of the binary revolution at binrev.com.
If you have comments on today's show please email the host directly.
Leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated today's show is released on the creative comments,
attribution, share a light 3.0 license.
