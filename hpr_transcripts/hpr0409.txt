Episode: 409
Title: HPR0409: Bug Reporting
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0409/hpr0409.mp3
Transcribed: 2025-10-07 19:57:35

---

you.
This is Quattu on that southeast Linux is best and I'm standing here talking to
McKinsey I think is what you are called is that correct?
Yes.
Okay.
And so you are in Ubuntu hacker or bug tracker or what are you?
Mostly triager or the time I'm trying to fix the bug too.
We may have been more fixing.
Ah, okay.
So you do hack on code a little bit.
Cool.
How important is the bug reporting and tracking and triaging process, do you think?
Well, the only way the developers are going to know something's broken is if you're reported.
Mostly the, I mean, if you want to know what you need the most help in, what needs the most love.
Yeah.
I'd say that these things like getting bugs upstream because, you know, everybody is willing to work
who wins or who wins?
They dump all their bugs on launchpad and then we go, wait a second, these all here?
These are all our bugs that are actually an upstream.
They're not packaging bugs.
And so they just go through and report some downstream bug trackers, fake or upstream, those are not the two.
Right.
Because we don't want to carry too many bogey specific patches.
We want upstream.
We want to work for everybody.
Right, right.
Or that, there's, well, you've got the triagers who are people who are, you want to have people triaging so they can go through and say,
okay, now this is one that is upstream or figure out what's broken like, you know, my sound is awful.
So, okay, is that portfolio?
Is it a driver?
Is that flash?
What's broken in there?
Right.
And it finds the first bug.
Okay.
So, who, who would you personally, I guess, expect to, I don't know, I'm like, report a bug.
I mean, do you think this is something that everyone can do?
Average user?
Does your mom report bugs?
My mom is not report bugs.
Does she?
My mom has never actually, my mom does these when I step.
Oh, okay.
There's only one time my mom has ever mentioned a bug to me.
And it was one that had already been reported.
It was, it was something that was, because I had done a very manual upgrade from one version to another.
I realized some software had dropped the port.
And so, it was having a problem.
Right.
That's the only one she's ever mentioned to me.
So, yeah.
She doesn't report bugs.
But, um, I think, you know, most technically competent users to report bugs.
I think if somebody's, like, my mom afraid to right click,
probably not so much.
Right.
But, if you can, if you're fine with using the applications,
and looking at the help menu and things like that,
I think then you're, you're going to be fine with reporting a bug.
And, you know, you don't have to know if,
exactly what's broken, you don't have to even know what package it is.
Just, you run, we're from an running demand to go into a bug,
or if, you know, the applications go to a health reporter problem.
Oh, okay.
And, that'll automatically fill in, like, this is a bug is,
this is what system you're running.
So, you don't have to have people going through and saying,
okay, now, was this in John Key or Party?
Yeah, that's right.
Or any of those kind of questions.
And then, hopefully, triagers, when we have it up there,
we'll come by and ask, okay, so, when does crash?
What were you doing?
Like, did you go on this one?
Mm-hmm.
And, and those sort of questions are trying to figure it out.
But, you don't have to already know the problem, shall we?
You might have already answered this.
But, so, as a triager, is it important to, like, okay,
this is the version of, well, I don't know,
let's say, Amerock crash.
This is the version of Amerock.
This is the version of GCC that's on my system.
I compiled it from source, or I did not, you know,
I mean, like, how much detail do you guys need to know?
So, usually for bugs, if it's not from a Bluetooth package,
then, in your portabug, it's not from the Bluetooth.
Because, we want to know what's wrong with our, with our package.
Right.
Not what you found that you grabbed some source tarball
and you hacked it off, and then you, now, what happened?
Right.
You took it and hacked it off.
Yeah, yeah.
You waited your warranty.
Exactly.
Except that there's no warranty.
But, yeah, okay.
Right.
Yeah.
Okay, so, so it's just the version of the application, basically.
Yeah.
And, like, you say...
If you can tell us what version it says in the help menu,
from that, you can usually derive, which version of a Bluetooth you're using.
But, like I said, if you use the help portabug thing,
or if you, on the grandline, run Ubuntu-bug,
and put the name of the package that it happened in,
or coming in the next one to release,
you can have system-based bug report, or system-based bug reporting.
So, you can say, you can tell it what's wrong,
and you know it'll troubleshoot with you.
You'll ask you, okay, now is it working.
And, it'll change some settings and say, okay, how about now?
Yeah.
And, so, it figures it out.
And, then report the bug with all those debugging stuff already done.
That's nice.
That's very nice.
And, that's actually a good tip, actually.
So, to find the version of an application that you're running,
you don't know, you can go to the help menu, typically.
Is that right?
And, then, you go to the help menu,
and about, and then it tells you the version.
Cool.
So, what happens in the life of a bug?
I mean, just...
If I'm a user, something went wrong.
All I know is I reported it.
Am I supposed to, like, hand hold it,
and follow it through.
It's a little life cycle.
Or, what?
Oh, really, okay.
Is, if you've afforded a bug,
you're going to be expected to answer questions
that the triager asks.
So, there's...
One thing to note is that the bugs probably won't be fixed
in the version you're running,
unless it's a critical bug.
Okay.
They will be fixed in whatever the new development version is.
And so, then they'll be, okay, well,
you have a bug in this in 804,
but in 904, we fixed it.
And so, if you just go to 904,
you'll have that fixed and have a whole group
of other bugs fixed.
Right, right.
And...
So, if I report a bug,
I'm going to do one of two things afterwards.
I'm going to either find a workaround,
or maybe, by some chance,
the bug triager is going to say,
actually, that's not a bug.
You just click,
add instead or move, you know,
major error, whatever.
I've had a bug that was reported,
and I looked at it,
and I went,
hang on,
but the main pitch says it's supposed to do that.
Right.
Okay.
So, the end page wrong.
A lot of bugs gets the feature.
Exactly.
Okay.
Cool.
Wow.
But, you know,
most of the time,
it will be a bug,
and there will be a bug that will say,
okay, so,
when it crashed,
what were you doing,
like, okay,
it opened off the crash,
like, what was the file that made it crash?
And they'll ask you to provide this work
thing so they can try to reproduce it.
Right.
And once the triager can reproduce it,
then you can usually drop off the base
there if it doesn't matter.
Right.
Because now that it's got,
now we know how to,
now we can keep testing it.
Keep breaking it.
Until it,
doesn't break any more.
But, until,
we've got to register the test case,
we're kind of stuck like,
okay, so,
based on how we should get crashed,
and we don't know what they did,
and,
how do we fix it if we don't know what happened?
Well, what is,
I mean,
okay, so if something,
you know,
opened off as crashes,
and I report it,
is there a way for me,
I mean, maybe five other people,
maybe 10 other people
have had the same crash.
Is there a way for me to,
to make sure I'm not reporting something,
or is it that I'm reporting,
something that I'm reporting,
something that I'm reporting.
Okay.
When something crashes,
the program called,
a port,
will pop up and say,
okay,
drawing the development version,
a port,
will pop up and,
okay.
And ask you to report it.
Drawing stable releases,
that is disabled by default,
you're not being able to do like,
okay.
But,
the most,
the crash,
during unstable,
right, right.
But, what a port will do is,
it'll upload the backtracking
or something like that,
the launch pad will then,
has a retrain service.
And it'll take all the cache reports
that are uploaded.
It'll go through and it'll,
you know,
get all the debugging symbols
and run through it again.
And then,
if it finds
other bugs that will,
you know,
like, be in the same factory,
or something.
Draw a port of the same factory.
It'll be to take them together
and say,
okay, so this,
all you can people,
you want a bug.
That's great.
Very nice.
And now, is that something
that the user is doing consciously,
or that's really,
sort of,
sort of,
so how did you become a,
a triage, a bug triage?
I mean, what kind of training
does one need for that?
Where does one start for that?
Well,
there's a bunch of wiki pages,
wiki.org,
wiki.org.com.
I think flash bugs,
or flash bugs squad.
I'm not sure.
I think,
um, bugs squad groups,
so,
uh,
search it in the,
go and see wiki.
And there's a lot of information
on how to triage.
There's two works,
actually, one bug squad,
one bug control.
Bugs squad is wide open,
bug control is,
after you've demonstrated in bugs squad,
did you know how to triage?
Uh,
and you,
you've done,
like, a little application emailed
to bug control.
When you say,
hey, well, I've read all the documentation.
I know it's looked for in a crash report,
because when you get bug control access,
you can look at a crash report,
and, um,
move it from being private to public.
And you have to look through it,
make sure that somebody's password
actually is,
like, in there.
Right, yeah.
Um,
and, you know,
different things like that.
And you say,
well, here's five bugs that I've triaged.
And by the way,
I would set this one to medium level.
This one's critical.
This one's a wish list.
And when you demonstrate,
if you understand
how a whole triage process works,
you can become bug control mover.
And then your aim is to set,
like, the important level on them.
Wow.
Cool.
And view the private bugs.
Okay.
I don't know.
I think that's about all I can think about,
to ask about bugs and bugs reporting.
So, uh,
thanks a lot for talking to me.
McKinsey from Ubuntu, I guess.
Cool.
Thanks.
Thank you.
Thank you for listening to Half the Public Radio.
HPR is sponsored by tarot.net.
So, head on over to C-A-R-O-DOT-18
for all of those meetings.
Thank you.
