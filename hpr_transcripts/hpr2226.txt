Episode: 2226
Title: HPR2226: FOSDEM 2017 AW Building
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2226/hpr2226.mp3
Transcribed: 2025-10-18 16:10:01

---

This is HBR episode 2126 entitled, Boston 2017 AW building and is part of the series
Interview.
It is posted by Ken Fallon and is about 69 minutes long and can remain an explicit flag.
The summary is, can interview the project in the AW building.
This episode of HBR is brought to you by an honesthost.com.
At 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at An Honesthost.com.
Hi, I'm at the Corboot stand and I'm talking to you, Julian Lopstein.
Hi, what is Corboot?
Corboot is an open source firmware replacement.
So remember on your hardware, on your mainboard and your computer you have a bios chip that's
initializing your hardware and everything, every component in your PC.
So Corboot is essentially an open source replacement for that.
That makes it really, really fast and it's really, really modern and written because most
of the code and biosystems commonly use biosystems is like 50 years old or even older.
So technology is really loud that up to date and you have a lot of flexibility when using
Corboot, you can load different so-called payloads.
So after initializing the hardware, you are able to load like an open source biosystem
where you can tweak your system or something like that.
You're also able to load a bootload of like RAP2 and the crazy thing I have ever seen
is that a friend of mine loaded a Linux kernel, an actual Linux kernel until it's
biased and that worked really, really well and was really, really fast as well.
That would be a very small bias or a very small kernel.
Yeah, it would be a very small kernel, what's the minimum requirement kernel, I guess,
but it worked really well and the start and time was like half a second.
That's what really amazing, just an experiment and just an expression of what Corboot can do
for you.
Why would I even want to bother with that? Surely my bias is okay.
It's been good for 50 years, it's going to be good for another 50 years.
Yeah, you're right, it's done well for 50 years, but the problem is that it's really,
really slow most of the time.
Okay, you could say it's only a boot time, but the boot process is sometimes I think when it comes to
you're in a hurry and you want to start up your PC very quickly,
then you might get in trouble with loading the bias.
At home, my proprietary bias takes like five seconds to load and that's like, you say,
oh, five seconds, but Corboot was like 20 milliseconds or so.
So it's really, really fast and also since it's not proprietary,
you have the full control over what you're using and the FBI or the CIA,
or the NSA, if I'm being a little bit paranoid, can tap into your bias and can install a key
locker on your bias because that's possible. We've seen that.
Okay, so from a security point of view, it's useful from a speed point of view.
Are there any people that we might know using this in the streaming system?
Well, there are huge companies, so you're actually using it like Google, for example,
you know, the Google Chromebooks, they are all shipping with Corboot,
but since when they develop the idea of having notebooks that are really, really fast and
they're really, really small and memory overhead, they thought about implementing their own bias,
but at the time Corboot was so great that they said, okay, just let's just let
10 people work on Corboot on the open source project and contribute to it,
and we just use that because it's much better than anything we could build.
So, HUG, what sort of devices are available to put a new bias on?
And do I not run the risk of breaking my device if I start putting a new bias on it?
Yeah, the risk of breaking is always something that is a concern of people when it comes to
Corboot. Let's start with your first question. The most
machines Corboot is used on is laptops, hackers laptops mostly thinkpats.
We have a huge variety of things that are compatible with Corboot.
Yeah, your second question about breaking your device.
And installing Corboot is not that easy. You have to open up at least for the first install,
you have to open up your PC and have to find your bias chip, and yet we have to make a backup
of your bias. And you have to make this backup a few times, so you can be sure that it's
the exact backup. And after that, you extract binary blobs from the backup,
build Corboot image, and refresh it. So, at this point, when your device doesn't boot up,
you can just flash the backup onto your bias chip and you're good.
You make it sound so easy. I suspect there are people shouting down the microphone. You
break my laptop, dude. Yeah, probably, but it's not an easy process. And if you're not familiar,
and you're not done at the time, I flash notebooks a thousand times. So, I'm very familiar with
both problems could occur, and I'm really aware of that you have to make the backup, and you have
to be sure that it is the real backup, because I saw so many people trying about their bias and
saying, what? How can I fix this? It's never going to be fixed. And yeah, this is a real concern,
but if you have people on your side that are helping you and they know how to do it, like me or
like Phillip, you usually don't get in such trouble. So, the advice people is if you can find
the Corboot team that are around, go and get them to do it. Yeah, I mean, you could do it yourself,
and we always advise people to at least try it, but if you're not so completely sure you can do it,
just get find the local hacker space, or go to the KS Communication Congress where every year
there's a huge corporate stand where we help you, we're happy to help you with the fashion
you corporate image. Super. Anything else that we missed or that you want to tell us about?
Oh, yeah, I guess that's some some sort of an offer. And more information will be on the website
corboot.org, and thank you very much and enjoy the rest of the show. You're welcome.
I'm talking to the group team, you are? I'm Vladimir Serbenenko, one of the group maintainers.
Daniel Kippur, also a group maintainer, new one, new point maintainer.
Okay, so what is Grub? Grub is a bootloader which is used in several Linux distributions,
and also on some other operating system, including Solaris. And it'll be basically trying to
to coordinate two different boot efforts of the KS Communication. So, here's the thing that turns
the computer, when the computer turns on, it goes to you guys. Not directly, it starts usually
with this bio, so EFI or Corboot, only from them we get the control, but the grab is usually
the first thing which is controlled by the distribution in most cases. And why do I need to use Grub?
One kind of just feels straight into Linux.
On a bio system, so the startup is in an ugly 16-bit mode, and it has all kinds of ugly
limitations. It's easier to write a specialized bootloader which will basically place directly
into replace first in the decent mode, and then start the kernel. With EFI, this is less often
issue. You can have setups where you go straight to the kernel, but we provide additional features,
like for example, we provide the interface to choose the kernel. We provide also the features,
like one-time boot, when you have a new kernel and you're on remote server, you can tell the grab.
Try this kernel. If it works, then it's good. If it doesn't work, then after reboot,
go to the old kernel. I have the feeling that I'm not even beginning to scratch,
scratch the surface of what Grub can do. I've seen some people load BSD and little kernels from
here and there and all the rest. Is there a good place that I can go to to learn about
all the things that you can do? One place that I would recommend is probably our official
menu. It's not up to the shape where everything is documented, but it's actually now much better
than people think about it. It's because it was a time when it was almost empty.
Now it's slightly better. I have actually assembled a couple of common questions.
For example, how you can coordinate several operating systems from one single drop.
It was asked a lot, and now it's in Mano. This way, I can just paste the link to the Mano
Vanilla Discussion. In the previously, we had Lilo, and then we had Grub, and one of the main
advantages of Grub was that you didn't need to run anything after you installed a new kernel.
Now, Grub 2, we're back to the days where if you forget to regenerate the Grub
Compay, you can get into trouble. If I install a, you need to reconfigure,
if you make changes to your hardest, so whatever you need to go and reconfigure Grub,
but just automatically detect any more in the way it used it. That hasn't changed.
It's actually you just grab all Grub and you grab you this exactly the same algorithm,
because it's actually in you Grub. Grub is changed in the way that it's more robust,
because all Grub use just a disc name, which can change, but now we use UID to find
in partitions. Probably what you say is that the only thing that you need to rerun is basically just
just add in your kernel to the list of the bootable kernels. The new kernels to the list of
the bootable kernels. So there should be no problem if you forget to do that. It'll look
up your kernel and I'm still okay. Yeah, you needed to rerun install only after major changes,
like for example, if you have reformative partition, or if you heavily changed your partition scheme,
like swap partition surround, you actually rob us, you don't need to rerun it if you just
swap the drives around, but only if you like commodified what's on the discs.
Okay, and in my major way, like reformat or repartitioning and so on.
On a project like Grub, it's been around so long, surely it must be finished.
It must be finished by now. When are you going to stop?
No, it's not possible. We are going to have many, many new features. Currently,
Vladimir, two days ago, he's the RC1, and it contains many new features.
It contains support for ARM, 64 platform ARM. What else?
Stampar virtualization. So one of the problems which many people had is that if you
have kept sent for virtualized domain, the kernel needs to be on privileged domain,
and which is a security hole, and they have been exploits which allowed you to get out of
a virtualized system. And the solution that we provide is basically just put Grub outside,
and then Grub will basically run inside the machine and load whatever kernel you need.
Also, we add that multiple protocol extension for EFI, so currently, images to which
supports multiple protocol are able to use boot services. In the future, we also are going to add
some security features. For example, support for TPM. They were posted by Matthew Garrett,
but we are not able to get it right now because we are just before release, but it is
planned to get into next release. We are also going to have a support for stream verification,
EFI security verification. So there is a lot of things to do, a lot to start to do.
So we will actually cost a lightning talk today, where we will basically give news of what
has been happening in the project, where we will also speak about our new candidate logo.
Here you are. You need one. If you want more information about the logo,
here you have the personal function.
Maria is working on the logo. She is our main designer of this.
Excellent. And completely new stuff coming up this year, you are planning to do?
Yes. And the lightning talks will be available on the first-hand website.
So by the time you hear this, they should probably be up.
Have we missed anything that is coming up?
I don't think so.
My son says, Rob, we can talk a whole day about this.
I see. That's what I was talking about over my head.
Yeah, we can talk a whole day about future plans and future possible plans,
but it's probably not the best plan, if you want to participate in the discussion,
we have developer mainly where we have all kinds of topics and all kinds of directions.
And I cannot make specific promises about what exactly will happen.
Because, well, if I could predict what exactly will happen one year from now,
I think I would make a lot of money.
What sort of licenses will be released in the year?
Version 3 or later.
Grap 2 is developed on FSF umbrella, but there are a lot of companies also support Grap 2
development. For example, I work with Rocco, another guy who joined my tennis team,
also work for Rocco, so there are also many huge companies which support Grap 2 development.
Okay, guys, thank you very much for taking the time and enjoy the rest of the show.
I'm at the OlemEx booth and I'm talking to Svetar Muzonov. I'm Olemex Almer.
What is Olemex?
Olemex is a small company in Bulgaria. We are doing electronic design PCB assembly,
development tools recently. We made this do it yourself modular open source laptop.
You made a laptop that's open source?
Yes, exactly. The laptop comes in kit form. It has components which you can assemble by your own hands
and later run Linux on it.
But it looks very much like something like an Acer aspire one or one of those.
Exactly, but here we have every design files, it cut files open. They are made with pre-soft,
with kick-out, so everybody can download kick-out, download our source files and if he doesn't like
something he can modify and make it up to his test.
You sell these kits, obviously.
Right now the kits are ready as hardware. We work it almost a year, maybe more than a year on it,
but the software is still very immature. We need a couple of months to polish the software so
it becomes useful.
When somebody gets a kit, presuming that they don't make them themselves,
what's inside the kit?
Inside the kit you get the plastic parts, speakers, Wi-Fi antennas, LCDs,
the mainboards and other works and you have assembly instructions which are very simple.
For one hour you can build your own laptop and you can start developing.
The good thing is that everything is available, everything is free.
You have freedom to change. Even the keyboard, for instance, we use a small Arduino board
which makes USB-hid keyboard. So if you don't like the keyboard layout or something like this,
you can have a source here, recompile a plot new firmware, you get a new keyboard firmware
and new keyboard behavior.
Fantastic, but surely I'm going to need to know how to solder and how to cut.
No, it doesn't need any soldering. Everything is pre-soldered, tested, assembled.
You just have to put everything together.
So why don't you just sell completely made laptops? Why would I put it together myself?
Because it will have no fun. You can buy a assembled laptop everywhere,
but this laptop you will build with your own hands, you will know every bit of it.
If something breaks, every part is available as pair.
So if you broke a key, you don't have to throw the whole laptop,
just get a spare key and replace it. If the battery died after three years or something,
you just disconnect the battery, put new battery and your laptop is again like new.
So I can make modifications to your drawings.
Absolutely, we applauded everything on GeekHub and we start getting emails from people
but this is our architecture. I want to make my own with MIPS or I want to make my own with PowerPC or
so we give a template, we give a base which people can tweak up to their own needs.
If they don't like something, they can change it because everything is open and they have access to it.
What sort of processor, what sort of motherboard do you get?
We start with ARM processor, it's 64 bit quad core ARM processor and we are going to move to
different platform later. The idea here is to make a laptop which is lightweight,
it's weight is less than 1 kg. The battery has to last one day so you can travel with it,
you can do some small hacking like programming card, you know,
do other coding or something like this. This is not much developer machine, this machine will never
do Linux kernel or fancy graphic stuff. This is just something like portable laboratory.
Our next step is to add small FPGA board which will transform this laptop also to a
still scope and logic analyzer. So basically you can get it with you, go somewhere,
sniff some protocols on hardware level, analyze them, do things like this.
And if I got the laptop now, is that something that I can add later?
Yes, as you see here we have plenty of space to put another board inside.
So if you want to add some functionality which is not available now, no problem,
it's up to you. Everything is given in your hand, this is like a tool. What you will shape,
what you will do depends of you.
Why did you make it open source? What's stopping somebody from sending all the designs over to China
and producing thousands and millions of these devices? You don't see a cent?
Well, we do this for a fun. We spent over a year to develop this laptop and
it was fun while we developed it and we learned a lot of stuff while we developed it.
I don't care if somebody takes the design and starts to produce in China. Even now there are
millions of different laptops but nobody gives you this freedom which we are doing.
If you go to China, nobody will release you the schematics, the cut files, the things.
So basically if you buy market laptop, you cannot do a lot of stuff to modify.
Here you have absolutely freedom to do with everyone. Some people ask, okay,
but the LCD is not good resolution.
Say, no problem, go to eBay, find EDP display with bigger resolution, spend another 200 euro
just for the LCD, put it in the laptop, it will work because you have the specs,
you have the schematic, you have everything and you can do this on this laptop because everything is
open. Absolutely awesome. How much is it?
The kit, the base kit is 225 euro. It's about 240 years dollar something like this.
This is the beginning. As I said, we are going to release as additional modules with FPGAs
where when you can synthesize different CPUs like RISPi for something, if you want to develop
with new core synths. Fantastic. So that's all coming up this year. Anything else we missed?
I don't know. The links to your website, I'm going to go now and take some photographs.
We'll be in the show notes for this episode. Thank you very much and enjoy the rest of the show.
Hi, I'm at the automotive grade Linux boot and I'm talking to Jansim on Miller.
Can you tell me what automotive grade Linux is? Automotive grade Linux is a Linux distribution
for the automotive industry and it's made for car makers which will pick it up and then
put it in the cars in the end. Why would somebody want to do that? Because the car industry needs to
speed up their development and Linux is their choice here and automotive grade Linux is here
to provide a common ground and a common platform. And what do I get with automotive grade Linux?
What are the features? What are the benefits? Why not just use Debian?
So what are the features? Automotive grade Linux is a distribution. We use open source tools
like the Yachto project underneath and it's tailored towards automotive. So we have
automotive software components in our distribution and we also add it
things like an own home screen and application framework for enhanced security. So there
is a few more things to keep in mind than on a regular desktop.
Okay. And do you support things like separation of the combos or do you support
as engine monitoring in automotive networking? Okay. So what's supported right now is that we can
actually access the canvas. So we have a demo which uses, by the way, the first open source can
and most drivers which enter the Linux kernel in 4.x. It's in the staging directory so it's open source.
And the access to the automotive interfaces is being done, of course,
things like full access to the canvas is nothing a driver should have.
Yes. But we will in the next couple of months we will add support for OBD-2
dongles so you can get some data from your out of your car. How does a who puts the distribution
on and who maintains it? Who updates it if there are security issues? That's the car makers
and they are a supplier's business. Okay. Do they do that over the air? Do you need to go into the
yes, that will be done over the air. We even have a demo here at the stand showing over the air
updates. But that's been taken care of. Also the interaction with the security features
because deploying just the update is not enough. You have also to work together with the enhanced
security. We are using things like smack to do that. I don't have a car. So if I bought a car,
could I just install it myself or kind of roll my own distro? No. Now to be fair,
car makers have to certify their cars for safety and they wouldn't get the permission to sell that
thing. Right? No, to be fair. Okay. So why are we here? Why bother with Boston and at all then?
So as an open source project, we provide developers a way to develop the base
distro with us, but also to develop applications on top of AGL. So the application framework
gives you the opportunity to write your own application that can then be deployed in a car.
And can the consumer do that themselves or is that something that the car manufacturers would
allow from an upstores and store style? Yes. So how are those applications written?
Not framework. How would I go about this? Yeah, we are not bound to one single framework.
So for the demo, we used Qt5, QML, which because it's very nice and easy, but
there is also a work on other frameworks. What sort of applications have we got in mind?
Say, the best coolest thing you've seen so far. Well, if I knew the coolest thing, I would write it
right now. But well, navigation, point of interest, location-based services, opening and closing
your house door when you come home, possibly. Not only have they stolen your car, they've stolen
your house. Yeah, well, as you approach your house, you do whatever, right?
And music players, media players, all that sort of, of course, of course. We have that already in
the demo, also radio. As you can see, we also have here, we also have support the Raspberry Pi.
So it's very easy to try out automotive grade linux, get a Raspberry Pi, connect the monitor,
burn our SD card, image, and the radio works as soon as you plug in an SDR receiver.
And as I said, in the next month, we plan to add OBD-2. So we get the statistics, yes.
Well, as ordinary developer, the car makers will pick that up, obviously, yes.
Do they tend to keep those two separate? Yes. So we're not talking self-driving car here.
Well, and I is on that, but surely not. We are talking more in the infotainment,
the dashboard, the instrument cluster, but not the thing which really does the self-driving.
Well, maybe just the base distro, but do you not have requirements to turn off movies and stuff
in the front dash? Yeah, that's a requirement. How that will be implemented, that's up to the car maker.
What? You could have a controlled panel where the driver is a controlled panel,
and you have LCD screens for the kids in the back.
In the back, exactly. Multi-screen support is one of our requirements,
yes. So you can basically send a wide-use screen to the back seat and so on.
So, yes, sure. So, point out some of the boards here, and as we're going, I'll take some photos.
Actually, you want that? Yes. Yeah, what board do we have here? Well, besides
developer boards, Raspberry Pi, the Intel Mino board, the Intel Jewel over here, we have,
of course, automotive target platforms. One of them is the Renaissance Porter board,
and the other one is the successor of the Porter. That's the Gen 3. Here you see the UI.
I suppose some of these. Okay, so this UI is a massive big tablet, huge tablet and natural
effect. To find huge, how big is that in inches? 13 inch. Okay, so tell me about this. What do I see in
there? You're seeing here the, well, we call that home screen, and from there you can access
the different applications. So I've got a climate control navigation form,
radio, multimedia mixer, nice big buttons, and at the top I just see tabs, so obviously it's
going to be tabs bar. Yes, yes. That's our version that we demonstrated at the last CES,
so that's this year's, well, demonstrator. And this is connected up to which board, this board here?
On what's that board? That's the Renaissance Porter board. Yeah, that's an automotive platform
as fairly bulk standard. Yeah, and that's what we wanted inside the car, inside the dashboard.
A variant of this, yes. And all we have coming out is regular USB and HDMI.
It's very similar to a regular development board or PC. That thing has PCI Express,
a couple of specific connectors, things like a direct-can connector, and so on, you will not find
that on standard boards. Yeah, so you could hack this to get into the kind of...
If you... Yeah, well, but you sure don't want to break your own car, right?
So why would I have a Raspberry Pi when I'm not got a car? What are you using the Raspberry
Piper? What's the purpose? Oh, it's a very nice development platform, and you can get the full
UI up also there. Yeah. And now, let's say, if I want to play with automotive,
create Linux. Wait a second, I can bring that one up.
Photo of the back, can I just one sec? So what I'm looking at is like a just an LCD that's
understand with a Raspberry Pi snugly folded into the back, which is kind of nice.
And you've got a row of buttons on the Lego. Where did you get these? Are they custom-ed?
The cases. Smart Pie touch. So I'm never going to put that into the light.
Smart Pie touch. Yeah, looks nice. Nice little board.
And, well, let's say in a few months when the OBD2 has been added, you can, for example,
take the Raspberry Pi with the screen and put it in the car, and we will get some live values
on the dashboard, for example. We're looking at a picture of a car with the front left
tire, the right tire, that sort of stuff. Of course, not wild driving.
The applications that we have, for example, the climate controls over here, they work completely.
So they are really made to access the canvas. So one of the companies did a full demo,
so the actuators move, the pan moves, and all driven from this interface. So that's all there
with open drivers. Navigation works. It's an open source navigation application,
which was done by Hitachi. It's open source. It's on GitHub. And beside that radio, media player,
what you would expect. Yeah, it looks very much like a future car. It looked like if you were looking
at it in the movies. Yeah, very slick interface. And with the Raspberry Pi, a screen,
you can demo your apps. You can demo your apps. You can develop your apps. And
then where do I do it? So I'm a budding developer, and I've developed a killer app for the,
hopefully not literally, killer app for a car. Where do I submit my applications?
Yeah, that's still in the works. Once the car makers pick the system up,
the app stores will come. Anything else that's coming off next year that we need to know about?
Yeah, so next year, we will enhance the platform. We already have an SDK, so if you want to get a
head start, try our images, try our SDK. For the next years, we will work on the signaling,
so more on the canvas, get an API's for the applications to access values from the canvas in
the controlled manner and so on. So that's being done right now.
Fantastic. Great stuff. Well, good luck here at the show, and I hope it turns out to be a success.
Hi, I'm Maté Amateur Radio. Stand and we're talking to?
Uh, Kristoff. So what is Amateur Radio?
Um, Amateur Radio is, um, let's start this with, I have some better way to explain this. There are
three hobbies which deal with radio. One of them is broadcasts, three, three radio,
it deals with journalism and music, that's not it. The second one is the usual radio for,
although you go hiking, you have a walkie-talkie, that's using your radio, that's not it.
So then you have Citroën Band and Amateur Radio. The difference is that Citroën is about talk,
and Amateur Radio is a technical scientific hobby, which is a very different way of actually looking
at it. It's about radio communication and radio technology. It's about how to, well, communicate,
but actually about the technical aspect, of course you can still use it to talk. Of course,
you can use the talk to talk to people, but actually it's more on the technical side, on the
scientific side, on how radio communication works, how things work, and that's a very different
point of view from looking at it. Okay, how do you start? You buy a 25-year radio and you just
start talking left, right, and center, I guess. Well, most people get started because they see
somebody else doing it. You're in a hackerspace and they have another ham, because a ham is also
another word for an Amateur Radio. Radio Amateur, sorry. And you start thinking, so if you want to do
and start actually communicating, get yourself a 20-year-old walkie-talkie, that's it.
Most, a lot of them, also the bubble of the, sorry, a lot of the people actually start by one of
those RTL as the R-stakes, and they're sticking to computer, and all of a sudden they see all kind
of weird things coming off the computer, and that's radio. Radio communication, by the fact it's
so visual, by the, the R-stakes, they see what actually is radio is, it's not something you hear,
some signals that are somewhere in the air, but actually it's something you can look at, and you can
see what it behaves, what it is, what it is, what it is. So what's RTL, what does RTL mean? RTL is
short for a real tech, I think it's the company who made the Stakes. So actually it's a DVB T-stakes,
so it's for digital television, but they found out that you can actually reconfigure the Stake as
being an SDR receiver, so if you just take it in your computer, put it on the other side,
that's what you won't have much to listen to, and then you actually have a software you can see
visually on your computer, all the radio signals that are around you, it could broadcast your
televisions, it could be another amateur radio repeater, could be a paging server, paging repeater,
which is somewhere in your neighborhood, and all of a sudden you see all those things around you.
Do I not need some software in order to do that? Yeah, we can need, but there's open source
R-SDR software that's available, so that's not the problem, need software for that. What can you give me
an example of one? Well, no, the Linux example. QSD, well, if you just google for SDR software,
LTL, you've gone and find it anyway, so that's not a problem. There are some websites that you
even without that, you can go to and see the waterfall as well. Okay, that's the web, the web SDR,
that actually are well-PCs, whether that's the R receiver in it, with usually a better antenna
than just a little sticky having a computer, and you can see the same thing, you can see
everything that goes around you, which is quite interesting for us as amateur radios.
Could be that we are in the environment, we live in a city with a lot of radio noise,
so it could be that our reception at home is actually worse than being in an RTL receiver
as a web SDR receiver somewhere, because they are placed in a location where there's not much less
noise, so it could be that we send out from, so we transmit and we talk to somebody else on the
other side of the world, we transmit from at home, but we listen actually using a receiver,
which is located a bit further down, but hopefully in a place with less radio noise than
in the crowded city where you live. But you do need a license in order, you can receive
without any problem, but you do need a license in order to send any communication out.
Yeah, that's correct, so amateur radio requires to have a license, and license is linked to an
exam, you need to do a technical exam to get a license, there are two main reasons for that,
first is do not blow up yourself, my license, my basic, well my normal license allows me to
transmit 1500 watts of power into the antenna, to do that I actually need to put three or four
kilowatts of power into my receiver, and consider the fact that you actually could build this thing
yourself, you better make sure you are doing, so you need to have a license because you have to
show you a little bit of technical knowledge that you know what you're dealing with. The other
thing is that radio waves do not stop at the walls of your house, so it could be that you
enter feeling with your neighbors, or in my case I live on an ostent on the bells in coast,
we have an airport over there, and there are things called automatic landing systems which actually
use radar, sorry, radio, radio, radio, my apologies, so it could be that you make your transmitter and
transmit on the frequency, you want to transmit but it also transmit on harmonics and could be that
one of the harmonics is used by a plane which actually is trying to do an automatic landing,
so better make sure what you're doing, so that's why they have the exam.
Okay, but for, I mean when you're talking about making your own receiver, it's easier to get
into the hobby than that, you can do a novice license and you can buy a cheap device that
ain't going to kill anybody, because I think we're scaring people off there,
it's okay, to get like in a novice in what do we need to do?
Okay, that's correct of course, I mean you just try to explain why you need a license, that's
what, you're going to kill people, think of the children. Okay, that's true, okay, for its
embellishment the novice license does not allow you to make your own transmitters, so you could
buy commercial equipment used by a 20 or 30 euro handi-talkie or a 100 euro digital voice
radio, so that's not, and actually the license which the the basic license is more an operator license
than actually, because you're not supposed to build your own receiver, you are allowed to build
your own antennas, you're about to build your own equipment with actually sits behind your
cool transceiver, so if you want to do things like you keyboard to keyboard digital communication
over short ways, which is one of the modes we do, then you're allowed to build that yourself,
so there is a lot of still technical hobby and technical things around it, and also building stuff
yourself, but not builds that, not stuff that transmits, so that's what the basic license.
And even an advanced license is once you get into it, it starts becoming easier and
you have the knowledge and for instance in the intermediate license in the UK, you need to
solder something, you have to show that, you actually can't, it's through hole soldering so it's
still, not still feasible, that's not the problem, but I mean you just have to show that you know
what you're doing, and by starting out on others and you build your, you go up to the other license,
actually it goes by itself, but the interesting thing about amateur radio is actually it's more
about radio, it's more than just radio, in our club where we are, we actually work a lot with a
couple of guys, we are an astronomy club, Stargazers, and I was trying to explain to them,
we have something called Whisper, which is a digital mode, which is able to decode signals,
which are smaller than the noise, so we have your noise, and your signal exactly is less than that,
and there's a special software, which does that. I was talking to the guy in his astronomy club
saying, explaining that, and he said, you know we do exactly the same thing, if you want to take
a picture of something very weak, like deep skies, deep sky, say whatever, the noise of your antenna,
the CCD camera in your antenna is more than your picture of the noise of the image coming in,
so what they do, they do something called a photo stacking, they put, they know to take one image,
they take 10, 20, 100, and for every pixel they take the average, what actually happens because
noise is sometimes positive, sometimes negative, your average disappears, and you actually, by magic,
you kind of have an image pops up out of nowhere, out of noise, and then you see that the techniques
we use in radar and radio are the same that they use, and then you start seeing that it's not that
you sit in your own corner just doing radio, we actually are working with technology, and that's
interesting because technology is everywhere, and you see a lot of the same principles coming in,
coming in our hobby, and other hobbies, and then you start seeing connections, and that's where
it actually comes really, really interesting, it is about radio, radio has something magical,
so it's always been, my first contact has been with somebody in Norway, I have to imagine,
I'm at home, I sit behind my radio, I have a cable going up to my attic, I have a small piece of
wire, and I talk in my radio, the electricity of that radio goes into that wire, disappears somewhere,
and all of a sudden, 2,000 kilometers away, some guy, 300 kilometers north of the polar circle,
replies to me, that's magic, so radio by itself does have something magical, it's kind of a way that
you have electricity going over the air, which you don't see, and all of a sudden you can use it to
talk to somebody, or communicate or whatever, but it also has a practical application, and it is also
very fun thing to do, it's a lot of people get, the thing I've been interested in, I'm a
radio for a while, the thing I've noticed is the motivation of people coming in, it's such an
overarching hobby, it's like Linux free and opens our software, everybody's got their own
aspects, some people come into it because they're into mountain rescues, some people come into it,
because they're into astronomy, and some people come into it because they're just into deep electronics,
so this is one of the most frustrating things about trying to kneel down an amateur radio enthusiast,
okay, how do you get some of the entime of your radio, well now that depends on what you're
interested in, yeah that's exactly the thing, now what we do is when we have people coming in,
we try to get the name and the contacts, first of all amateur radio is usually done at local clubs,
and a club lives on the, it's members, so we have clubs where we have guys who do
contesting and fieldails, fieldails is on a field today is where you try to set up a station
which is autonomous, which works by itself, is used for emergency communication, because radio
does only needs to transmit in a wire, so emergency situations where there's no internet,
has been an earthquake like an Italy couple of weeks ago, that's one of the aspects of clubs,
people who are interested in that, but if you come in and say I'm interested in electronics,
okay then we try to contact the national organization saying okay this guy lives in that area
and he's interested in this, what club is best for him, that's usually how we do that, now of course
we hear that from them so we have the contacts, the other option is you go to your local
hackerspace or something, usually there are a couple of hands over there and you talk to them and
try to get some information on how the local scene is in your neighborhood because that's where
you live and that's usually how things work, you get into radio, people operating, people
electronics, so that's very different, it's very wide hobby and that's also, it's
explains a bit difficulty for us to explain or to get people and say okay that's where you need to go,
it's like what do you do, you're in computers, okay that's great, so you want to computer,
you know that, no I don't do Windows, don't ask about Windows on the windows, I don't know,
so for us, if you're in the FOS, then physical region, where do you send the people to?
Depending on their country, you send them to the local hands.
What we do now is we have a contact list, we ask the location and they're the country
and if they are in Belgium we come to, well we have mandated by the national VBA which is the
national organization of the arms, I'm at the Regis, we contact the local club in that area,
if it's from outside Belgium or he or she, you know, you know, then we contact the national
organization in this whole country and ask them to contact them, so that's the way we work.
Very good, excellent stuff, anything else I missed?
No, well, we have a lot of courage to try to show up.
So what are you doing here, what are you trying to do today?
For me personally, I'm actually in a very electronic, so I have a couple of things,
this is like a wiffy dongle which have modified to work on 2.3 gigahertz instead of 2.4, turns out
this chip, this is a regular dongle, wiffy dongle can buy in China for, well, the well-known
web shops, rate euro or something, and so that's normal wiffy dongle, but it turns out that chip
in there can actually do from 2.3 to up to 2.7, which is kind of interesting, so let's give it a try,
so I modified the Linux kernel, I put it in an Raspberry Pi, I modified the Linux kernel,
I can't see, this is,
okay, whoops, video for some reason?
Okay, that's fine, okay, that's fine, so this thing I have, the interesting thing was actually
by doing that, I needed to modify the Linux kernel, which was the first time I did kernel modding,
but wow, it's on the module, but actually by doing that, it turns out that the wiffy protocol
actually has certain links between frequency and channel IDs, so we actually didn't need to
modify the protocol, which is kind of fun, by doing that you actually learn how wiffy works,
which is, well, it was interesting for myself, you know, wiffy or something I use,
and I do, okay, I set up a mesh network, you can figure commands, but you have no idea what
actually is behind that, and this is kind of explains, by doing that you get to learn things,
what else do we have with the equivalent 433 equipment, sorry, what's that?
This is, I see a Raspberry Pi connected up to, this is a loader, do you know?
A loader transmitter, yeah, this one is a loader transmitter, okay, directly up to,
what's a loader transmitter? So, loader is the protocol used for the internet of things,
the loader, they have the, no, don't think with the low power, long distance modes,
right thing, I have an absadam, the thing network, so we have people, we work on three or three,
these things are designed to work on 43 megahertz, or the 7877s, or what is the free frequencies,
but it turns out this thing actually can work on any frequency, and because 433 is part of an
amateur radio frequency, we allow to use them, also with more power, because this thing actually
is the legal embellishment, it does 100 milliwatt, and you're not supposed to do 100 milliwatt
in the 433 ISM band, but it's not turned on obviously. Well, for me as an amateur, this is part
of an amateur radio band, and I'm allowed to use 150 watts, so the 100 milliwatt is not an issue,
so it gives me more possibilities, this is what a nice example of how you having a license actually
gives you more possibilities to do certain special things. Stand back, I'm a ham.
So we've got an antenna for us, very with the antenna, same thing, you're not allowed to do
long distance wiffy, you're limited to 100 milliwatt officially, 2.4 gig is an amateur band,
so I'm allowed to use high power antennas and one wiffy modules and so on.
So if you wanted, you know, you're on a ranch somewhere, and you wanted to send Wi-Fi down to your...
We could do that, you could run Wi-Fi up to a couple of kilometers with two high gain antennas
talking, well, let's see each other directly, yes. But you'll need to broadcast your handle on that.
Yeah, well, what actually they do is you have co-sign, it's just the name of your station,
and the rule for Wi-Fi is that you need to configure your market address of your Wi-Fi with your
co-sign, your co-sign and ASCII, so you put your co-sign and ASCII in your market address, and that's
good enough. Okay, let's accept that. Excellent. So, that's actually awesome.
Yeah, well, you have to run, amateur radio has a couple of, well, two main rules you have to apply
to. One of them is no encryption, which is by itself not a bad thing, because if you would have
encryption, what means that you have commercial people on your frequencies? Amateur radio is something
where it allows the citizens or the individuals to communicate, well, to experiment with radio,
and we are allowed to use specific frequencies for that. But these frequencies actually
are worth a lot of money, so the commercial companies do want to try to use them, so he will allow
encryption with a lot of encrypted stuff somewhere, you don't know what it is, and you actually have
our frequencies being taken up by companies, so they don't have to pay a license for them, which is,
well, these frequencies is attribute to us as citizens not to company. That's good. So,
no encryption. Second thing is that you need to be identical, identifiable. So, if there is
some broadcast, they need to be able to, who it is. So, either if you do something in the clear,
you have an FM transmission, you can hear you, I just have to mention your name, your co-sign,
a couple of times. If you do like digital stuff where it's more difficult to actually look at a
content, then the, well, ways you could do that, like in this case, you send your co-sign in
your MAC address, or if you're experimenting, you actually send out digital data, and you send
your co-sign in Morse code, and I'll use your transmission, and after your transmission, you send
your, just your co-sign. And that's one of the ways you actually still hide the rules, because
they are able to identify you, but they'll allow you to experiment with stuff that is not, well,
if you, there's one of, well, given example, one of the things I did is use a digital voice,
protocol, and another digital voice modem. So, the way you, there are two elements is how you
encode your voice into bitstream, and how you send that bitstream over the radio. And I'm trying
to mix those two, because there's an accident in the mirror, an Australian ham would design
your own open source voice codec. So, I want to try this. So, when I'm transmitting that,
nobody else can decode that, because it's experimental stuff. So, nobody, if they would hear that
transmission would be known who it is. So, that's to apply to the rule, to the identification,
I add my old co-sign in Morse code, just after my transmission, so they are able to track me.
Very good. I'm a radio, it has certain rules, you have to live in a certain framework,
but it does allow you to do a lot of things. Anything else going on here?
We have an HF station, so a short-wave station, digital keyboard to keyboard communication.
There's a big, giant antenna, by the way, if you look, if you comment...
Oh, I see the cable running around there. So, you have a giant mast, which is in front of the
AW building. So, we use that to communicate with, well, pretty much Europe now, as a way to
communicate to show people what it is. There's a waterfall and so on, so it's quite visual, which is...
What's a waterfall? It's something where you can see your signals.
Where you can actually see your signals in time, so you can see what is...
I couldn't care. Then, uh, it didn't upset. So, this is the waterfall.
So, what I'm looking at is a scrolling screen of colors, waterfalling down.
Yeah, so this is a FL digging, open source application for digital keyboard communication.
So, what it does actually is, you type something, or your macro type something.
It changes what you type into tones, frequencies, and these are sent over the radio.
And depending on the radio pots you have, could be if you do show wave communication, show
pots. This will work, and if you have an environment with a lot of noise,
someone else, some other way of encoding your data will work better.
So, it kind of is one of the experimental, experimenting areas of the amateur radio.
If you send data over a means, usually in this case, it's a short wave.
It could be under a lot of different conditions. It could be that it's nice,
that everything was okay. It could be a lot of noise.
There's a lot of static. It could be lightning in the area, so they have a lot of static going on.
It could be that your signals are reflected twice or three times.
So, signals come out and mix together. So, depending on the environment,
there are different ways to encode your text into tones. We didn't get decoder back from
tones to text. So, this is one of the areas, and this is one of the applications, used for that
FLD. It's completely open source. It's windows, maclinux, and what it does, it's what you type
XD send over the radio, and you see those waterfalls, which are the, if you look at the web as the
air, the same thing, and that's what we have. So, this is one of the things that we're showing off
to people, what it is, and I'll try and put it, try and to remember to put a link to the web on
the people can try this at home. Okay, excellent. I think everybody should do it, and on HPR,
we're running a ham radio series tutorial thing with all our hands coming together.
I didn't know that. So, tune in for that. Okay, thank you very much, and enjoy the rest of the show.
I'm talking to Leonardo. Hi, can you tell me what Cortex Lab is? Sure, Cortex Lab is actually a room
where we have many software-defined radio cards, and it can be used actually for testing out new
communication techniques, you know, for 5G or for IoT. All these kinds of things can be tested
inside of this room. The particularity of this room is actually that it's shooted from the
outside, so we have no interference coming in or going out of the room, and this allows us actually
to do tests in any frequency band that we want. Maybe we can do frequency, I mean, testing in any
frequency without being afraid of, you know, interfering with, you know, a public radio or something
like that, and it's main objective actually is to allow research on radio, on cognitive radio,
software-defined radio, and all these things. But surely, that's illegal if you go outside of the
band. Yeah, of course, it's illegal, but since we're inside of the room and everything is contained,
we are sure that we're not creating any interference with any public, you know, police or
fire, you know, firemen, yeah, all these things. So, where is this lab based? So, we're
based in Leon. We're the university there, actually, we're called inside the Leon, and this is
actually based in our lab, so we have the underground of the lab, there is a place where the room is
hosted. Okay, so why are you even here? Who cares about your room? Yeah, so we're trying to spread
out the word about this room, it's, we have inaugurated it in 2014, and we're trying to attract
the attention of the new radio community in general, but also of researchers, industrials,
anyone who's interested in having a facility like that to try out their new algorithms and,
you know, communication standards. But that's going to be expensive, surely. Yes, no, no, I mean,
to access the room is for free. For free, but that is expensive, if you have to pay for that,
that is very expensive. Yes, so we actually have publicly funded project from France, so we have the
money which was given to us by the French, you know, how do I say that? The French government,
let's say like this, and the idea is that we create this room and we offer it for free to anyone
in the world who wants to use it. So this is one of the main objectives of this project.
So I'm a ham radio enthusiast example, and I have a brilliant idea for a highly efficient network.
What do I need to do? How do I get in touch? Okay, so actually you go to our website, which is
http.colon-lash-lash-wda. There will be links in the show next. Okay, so that's great. So,
so actually you go to our website, there's a wiki, there's a place in the wiki that explains exactly
how to ask for an account. So you get the account, and then you come to our website again, and there's
lots of tutorials which are explaining how to get started with Portide Slap, and actually with
GNU Raider as well. So it's a two-on-one, you mean you learn how to use GNU Raider and Portide Slap all
at once. So GNU Raider is a toolbox, it sort of a toolbox that allows us to create any kind of
communication scheme easily, and it says a very nice graph going to face where you can
attach blocks together, and you can create for example a very simple transmission scheme,
you can decode FM, you can you know hack satellite communications, lots of these things,
and people are using it a lot, and it's very, it's actually very, very popular right now.
Yeah, there's probably a whole go of talks on the first-hand website about that, I know that we're
last year, and what I'll need to come to France obviously to set all this stuff up.
No, of course not, so you can access the testbed through the internet, so it's just a simple
SSH access. You have some websites where you can follow what's going on on your on your
experiment, so it's actually all web-based, all the internet-based. Okay, absolutely awesome.
I don't know what more to say really, so how long has this been going? What do you have
any plans for developing us? What if you get too many people coming along? So actually where we're
been ongoing since 2014, so this is when we actually inaugurated the room. The practice has been
going from 2012, and we are funded until 2020 or 21, I don't remember very well, and we plan
to extend that to the future, and the idea is that actually we get as many users as we can, yes,
so we have a scheduling system where you can book the platform for a certain amount of time,
and you can do whatever you want in it, and if you have your own communication schemes that you
want to try out, the only thing that you need to do is you need to convert that whatever you have
it in into GNU radio, or actually if you have a Linux executable, you can do that as well. It is
communicate to the UHD driver, which is a driver for these at us, USRP, and then you can just bring
the code and run it on our platform. It's very simple, very straightforward. And there's no cost
involved in it. No cost at all. No cost involved in getting a state-of-the-art room to try out
whatever you want with it. That's it, everything's for free. Oh, you got to love that. Excellent,
thank you very much. Have we missed anything? No, I think we covered everything more or less.
Okay, so if you're into radio and you want to try this stuff out, go to cortexlab.fr. Thank you very
much. I'm at the Open Embedded booth and you're a display I'm talking to. I'm Rias Müller.
And can you tell me what Open Embedded is, what you're doing here, what am I looking at?
Okay, it's the Open Embedded, it's a boot system for embedded devices. It's, yeah, you can
build for a device of your choice. Images containing package management and, yeah.
So what have I got here? We have here a Raspberry Pi 2 running a desktop XFC or
other desktop of your choice. We are on the right side, we have a Bigelbone Black running
this same image. Yeah, and the demo over for instance is here a sequencer with a key media keyboard
and you can... Yeah. Are all running on Open Embedded? Yes, yes. So instead of Raspberry Pi,
Rosemarone and Razbian, you're running Open Embedded. Yes, exactly. Yeah, yeah, yeah.
And what's the advantage of that? What is Open Embedded itself?
Open Embedded is a collection of recipes to build complete image for a embedded device,
beginning with a bootloader, a kernel and user space stuff, everything which is available in
Open Source Word. You can build whatever you want. Why would I want that? Because you run the
same images or the codebase is the same for different devices. As you can see here,
we have the Raspberry Pi and the Bigelbone and the codebase of this is exactly the same.
To build an image for the Raspberry Pi or for the Bigelbone is just a matter of setting a configuration.
Okay. Yeah.
And where do I guess Open Embedded?
You get Open Embedded at the Open Embedded websites. Open Embedded consists of several layers.
There are different board support package layers. There is, for instance, a layer for a QT stuff.
And one address where you can get also the first information is on the RIO Yachto project.
There are very good documentations available there.
So what are you doing today if you have the sequencer and you've got?
Yeah, we can do whatever. What a desktop, what a Linux desktop is capable of. We have
starting from, okay, we have some, okay, the game stuff, we have graphic stuff,
here, GIMP, whatever you want, the liberal office stuff, multimedia stuff. It is just like a
Linux system. Yeah. So why do we need another Linux system? Why can't I just use Debian?
Because you cannot use Debian on the Bigelbone.
Yeah, it's just, whatever they, so you can use Open Embedded on multiple hardware devices.
Yes, this is my first time.
So what has been happening in the Open Embedded community in the last year?
I don't really know that. I need to see just a matter of growing. Okay, it's my personal
perspective. All this multimedia stuff has happened. But this is my, my focus is the developer.
Yeah, okay, cool. Well, thank you very much for taking the time. I'm going to walk down
for to see what other Open Embedded products there are. Thank you very much.
You've been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contribute link to find out
how easy it really is. Hacker Public Radio was founded by the Digital Dove Pound and the
Infonomicon Computer Club and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website
or record a follow-up episode yourself. Unless otherwise stated, today's show is released under
Creative Commons, Attribution, ShareLite, 3.0 license.
