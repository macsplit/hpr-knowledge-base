Episode: 1530
Title: HPR1530: The Ext2 File System
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1530/hpr1530.mp3
Transcribed: 2025-10-18 04:43:01

---

Music
Music
Music
Music
Music
Okay, hi. I'm running JW again and I'm here in the second installment of the file system.
Today I want to talk about the XT2 file system. The original XT file system
had quite a few limitations such as limiting files to two gigabytes only in size.
Not too long after Internet Linux was first introduced, the XT file system was upgraded to create a second extended file system called XT2.
As you can guess, the XT2 file system has an expansion of the basic abilities of the XT file system but maintains the same structure.
And throughout the whole XT family you'll hear that maintains the same structure quite a lot.
The XT file system expands on the in node table format to track additional information about each file on the system.
XT2 in node table adds that create modified last SS time values for files to help system and minotragers track file access on the system.
The XT2 file system also increases the maximum file size to two terabytes and then later versions of XT2 that was expanded to 32 terabytes.
To help accommodate large files commonly found in database servers.
In addition to expanding in node table, the XT2 file system also changed the way in which files are stored in data blocks.
A common problem with the XT file system was that the file was written to a physical device.
The blocks used to store the data tend to be stattered throughout the device called fragmentation.
Fremmentation of data blocks produced the performance of a file system that takes longer to search for the storage device to access all the blocks on a further specific file.
The XT2 file system helps reduce fragmentation by allocating disc blocks and groups and groups when you save a file.
By grouping the data blocks for a file, the file system doesn't have to search all over the file device for the data blocks to read the file.
The XT2 file system was the default file system used in Linux distributions for many years but it too had its limitations.
The in node table, while a nice feature allows the system to track additional information about the files, can cause problems that can be fatal to the system.
Each time the file system stores or updates a file that has to modify the in node table to which the new information is written.
The problem is that it's not always a fluid action that there's a delay in this.
Something should happen to the computer system and the file being stored in the in node table being updated and the two would become out of sync.
The XT2 file system is notoriously easy for becoming corrupted due to crashes and power outages and even though the file data is stored, it's just fine on the physical device.
The in node table for entry wasn't completed and the XT2 system won't even know the file existed.
It wasn't long before developers wanted something more.
Interesting. I have several devices that run off of SD cards and I still use XT2 just fine on those and I've never had any issue at all with XT2 and the power going off or anything at all like that.
Okay, so this ends the second phase of the file system thing.
You have been listening to Hacker Public Radio or Hacker Public Radio.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR listener like yourself.
If you ever considered recording a podcast, then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the infonomicum computer cloud.
HBR is funded by the binary revolution at binref.com. All binref projects are proudly sponsored by linear pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released under a creative commons, attribution, share a like, lead us our license.
