Episode: 3055
Title: HPR3055: Advice to new Fediverse administrators and developers
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3055/hpr3055.mp3
Transcribed: 2025-10-24 15:53:36

---

This is Hacker Public Radio Episode 3555 for Friday 17 April 2020.
Today's show is entitled, Advised to New Fediverse administrators and developers.
And as part of the series, social media, it is hosted by Ahuka
and is about 13 minutes long
and carries a clean flag. The summer is
an experienced admin for a mastodon instance at a major Fediverse developer office and tips.
This episode of HPR is brought to you by archive.org.
Support universal access to all knowledge
by heading over to archive.org forward slash donate.
.
.
.
Hello, this is Ahuka, welcoming you to Hacker Public Radio in another exciting episode.
And I'm going to continue our march through the activity pub conference of 2019.
And this is a talk called Advised to New Fediverse administrators and developers.
Now, I remind you that the links to the videos for all of these talks are always in the show now.
So, this particular talk by Luke Didry.
He also put his slides up and I've got a link to those.
So, you can take a look at the video and get a copy of the slides if you're interested.
Now, Luke works for a company called FramaSoft.
It's kind of a French nonprofit organization
that builds itself as a digital emancipation network.
Hosts a mastodon instance and Luke is in fact the admin for that mastodon instance.
And the company also is the developer of two Fediverse projects,
which I may be looking at in the future because when I finish with this conference,
I'm going to go back to looking at apps.
So, the projects that they're involved in are peer tube and mobiles on.
Again, links in the show notes.
Now, the purpose of FramaSoft is the promotion, dissemination, and development of free software.
They host more than 30 freely available web services.
Peer tube, for instance, is a free culture federated alternative to YouTube, as you might guess from the name.
Mobiles on is something that should be out shortly,
that was scheduled to come out sometime in 2020 and is an alternative to Facebook events.
If you've ever wanted to set up something that lets people know about and participate in getting to events,
that's something that you might be interested in.
It looks to me like this is a company that does good work.
It is a nonprofit organization.
So, I made a small donation to them while I was writing up my notes for this show.
And if you're inspired to do the same, I've put a link in the show notes for this as well.
They're completely financed by donations, mostly from individuals.
That's the free software world.
Now, to start, Luke says, hosting an activity pub service is not like hosting another service.
Developing an activity pub service is not like developing any other service.
Being federated does make a difference.
And that's really the whole point of this is that it's all about better social media.
Now, he starts with advice for administrators.
That's somewhat more extensive because that's actually what he does.
He is not himself a developer, so that part is a little less detailed.
Now, for administrators, if you have an open instance, he says moderate.
In fact, he would advise that even for a closed instance.
Now, to do that, he says create a moderation team.
This is not something you need a whole lot of technical background.
So, you can get help from people who are not coders or developers or tech East any great degree.
But it is important to have more than one moderator.
People take vacations and you don't want to have burnout.
Having a team of moderators makes this much more practical.
And with a team, you can consult on questionable cases to get a consensus.
Create a code of conduct.
Now, we talked about this previously when we looked at Mastodon.
And we noted that different instances might have very different opinions about this,
as indeed they might about moderation.
But if you are going to moderate, or just in general,
having a document you can point to that describes prohibited behavior is very important.
And it makes the job of the moderators easier since they have a standard to apply.
Now, Luke notes that in a federated environment, this can be more difficult.
Since different instances will have a trust relationship and they may not agree on what is prohibited to behavior.
Now, this is something you would not have with, you know, Facebook or Twitter.
It's a single company, they own everything.
They can pretty much do whatever they decide they're going to do.
And there's frequently arguments about the best way of doing things.
And controversies about the decisions they make.
But they can make them.
You know, the idea of a federated environment is rather different.
Activity pub is an open protocol, for instance.
So you can have people using very different software to participate in any given thread.
They're on different instances.
And if they have different software, that might have different limitations.
One of the things we know is that judging actual intent and emotional content in a text environment is difficult enough.
And having different platforms with different capabilities adds to that.
For example, are there emojis available?
Are they the same emojis?
Do we know what they signify in some other environment?
You know, there's a problem here.
Then Luke says, know your limits.
Don't open registration if you cannot maintain the service for a long time,
or at least put a big warning on the registration page.
And make your level of service explicit.
If you are the only one maintaining the server, you cannot promise 24-7 service.
Then, do your job seriously.
Make backups. Test your backups.
An interesting case of this in my personal life.
My wife has a business that she runs out of our home,
and it involves various websites that she develops.
So she wants to backup many gigabytes of data.
And I had set her up with a solution that involved carbonite.
And a couple of times I'd said, you know, just make sure everything's working okay.
And I finally insisted, take a look.
And she went in there and said, oh no, they're backing up the wrong stuff.
Well, you know, thank God we found that.
So, you know, there's a saying among sys admins.
If you haven't tested your backup, you don't have one.
And so that's one of the things.
If you're going to set up an instance in the Fediverse,
that's part of your job.
Stand top of your certificates.
Renew them on time.
All right? It's just basic.
We're at the point now where if you don't have your encryption certificate active,
browsers will even connect, you know.
So that is, it's all important stuff.
Now for developers, he's got just a few suggestions.
As I said, he's not a developer.
So these are more general ideas.
He says, look at moderation tools implemented for other federated software.
And figure out what works well.
No sense in reinventing the wheel if someone has come up with a good solution.
Moderation is a lot easier if you plan for it when building the software.
But also ask your community what they want to see implemented.
So, you know, that takes us right back to the whole code of conduct.
You know, the whole idea of the Fediverse is that communities form around some shared ideas of these things.
So some of them may be very strict.
Others might be much looser.
And, you know, planning for it when building the software.
And we've seen with privacy, with security, you know, all of these different things.
If you only focus on the bright, shiny things and never look at these other aspects while building your software,
you're going to have problems.
All right, you can't just bolt on this stuff at the end and have it work well.
Then he also suggests keep your personal life and your professional life separate.
In other words, like set up an email address through the project and don't use your personal email for project work.
Okay?
Activity pub is a protocol for social media.
And if we know anything at this point, we should know that social media breeds conflicts.
So, you know, if you're going to get pissing matches with people, at least do it with your project email.
And keep it away from your personal life.
Another one, he says, design your default settings with care.
Most people never change the defaults.
We call this the tyranny of the default.
It absolutely is the case.
And that's why things like opt-in versus opt-out are so important.
You know, if you design something with a whole bunch of defaults and say, well, it's opt-out,
you're not really protecting the users.
Another thing, build in a good way to make announcements to users.
Now, this could be something as simple as a banner that pops up when the software is being used.
Or maybe you want to have some separate system that they have to register an email address with you.
But, you know, consider how you're going to do it, because if you are developing some kind of social media,
you're going to have to connect with your users and give them information from time to time.
Even if it's just something as simple as, hey, I need to take the server down for a while to do some maintenance work.
You know, it's a good idea to just let people know ahead of time instead of having them try and connect and nothing happens.
So, that was the advice to admins and developers from someone who is at least an admin professionally.
I hope you found that interesting. This is Ahuka for Hacker Public Radio signing off and reminding you as always to support free software.
Bye-bye!
You've been listening to Hacker Public Radio at Hacker Public Radio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself,
unless otherwise stated.
Today's show is released under Creative Commons, Attribution, ShareLife, 3.0 license.
