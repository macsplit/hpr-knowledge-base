Episode: 3108
Title: HPR3108: Fuguita as a Desktop
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3108/hpr3108.mp3
Transcribed: 2025-10-24 17:01:43

---

This is Hacker Public Radio Episode 3108 for Wednesday 1 July 2020. Today's show is entitled
Few Geater as a Desktop. It is hosted by Zen Flota 2, and is about 52 minutes long,
and carries a clean flag. The summary is, I cover all the wonderful things about using Few Geater as your Desktop.
This episode of HPR is brought to you by archive.org. Support universal access to all knowledge
by heading over to archive.org forward slash donate.
Well, last show I gave was over Figuita's server,
and now I'm doing one over Figuita laptops and desktops, because you can also make a desktop out of Figuita.
Figuita is again based on OpenBSD, it is designed to run from a CD-ROM or a USB stick, or it could be a USB hard drive,
or it could be installed on your hard drive. Figuita is the kind of an operating system that basically has
loadable class instances you can create on one USB stick, for instance.
The setup for Figuita server, like I did in the last audio, and also have your tour server in another instance,
and yet in another instance maybe have another desktop, and another desktop, and another desktop.
Right now I'm using the ICE Winda Manager setup, which is provided by Figuita.
Now how you create these instances is when you download the CD or DVD image, the ISO image,
and you first boot it up, you'll pick zero for when the options start flying up on the screen.
You'll pick zero for fresh boot, and it'll ask you to enter your keyboard type and help you set up your network if it can.
Remember OpenBSD doesn't include any firmware drivers at all.
So in order to get your network cards working, and other peripherals, and even good Intel support, you'll have to install the drivers.
You can either install the drivers by downloading them from firmware.openbsd.org, their FTP site.
In this case I'm using OpenBSD67, so you download all those firmware drivers and put them to a hard drive somewhere that has an EXT2 file system, so the operating system can read it.
And then follow the ManPages, I believe it's FW underscore update, space dash P for a path, and then give it the path to the drive that you've mounted.
And it will download the appropriate drivers.
If you'd like all of them installed, do a FW underscore update, space dash A, and then dash P for the path.
And that will install all of the drivers.
And then you'll have to go through the process of setting up your network and everything else after the initial boot, because unless you're just plugged into an Ethernet port, which is the only way you're going to get access without drivers.
If you're plugged into an Ethernet port, then it's fairly easy. You just go through the setup, hit DHCP, when it comes to that point.
It'll ask you to set up your host name and fully qualified domain name, give a root password, and then it'll just boot up.
And when it boots up, log in as root, do an FW underscore update, and that will get all the drivers loaded you need for that machine.
And hopefully bring up your Wi-Fi card if that is supported and we have driver for it.
It'll also bring in the Intel drivers that you need for Intel DRM.
Now, all the Figuity images, none of them are UEFI supportable.
So if you have a machine that you're going to install to the UEFI, you have to make a UEFI bootable disk to install that machine, which means that you either need to run the ISO in QMU,
and make one from there, or find a machine that is a 64-bit machine that doesn't require UEFI that can boot in normal BIOS, so that you can create your own UEFI install disk, because Figuity can create a copy of itself.
It can create different kinds of install images for USB drives.
You know, little USB stick drives.
The utility you use after you get up and root and get your drivers installed to do that with is called USB FADM.
Let me type that again to make sure I got that right.
USB FADM, that's correct.
And when you pull that utility up, you can hit a question mark for help.
And the command that you want to run to make your own drive is new drive, and just go through there and hit the options.
You can make a dedicated UEFI, you can make a dedicated legacy BIOS, or you can make a hybrid, which is a combination of both, so that you've made a USB key disk that will boot on either kind of machine,
which is what I typically do, because I still have more legacy BIOS machines than I do UEFI.
By the way, I'm making this recording to you using a Lenovo IdeaPad 330 that I picked up for $189.
I mean, this is like a $700 machine, and it's brand new.
Everything on it is supported except for the Wi-Fi driver in here.
It's probably a little too new, but the touchpad, everything works.
And I've built an ICE window manager desktop in it.
And this particular laptop will also boot from an SD card, and I've installed my UEFI image to the SD card and wiped out Windows.
I'm a Windows killer.
Isn't that cool, boys and girls?
I hate Windows, and I'm sure most of you would rather not use Windows if you had the choice.
They'll still be a few diehards in there.
But at any rate, there you go.
You use the USB FADM utility, and then type in question mark to get a help screen, and you'll see new drive in there, and that's how you make a new drive.
And if you have a machine that supports UEFI like I do, and supports booting from an SD card, by the way, this is the first machine I've ever had that'll boot from an SD card.
I've got three of them that'll read and write from an SD card, but it won't boot from an SD card.
So I put my FADM on the SD card.
Reason being is I've got three USB ports here, or I'm sorry, two USB ports, and I don't want them tied up with FADM.
And there's no CD-ROM or DVD player in this machine, so I can't boot off of that.
So I chose to put it on an SD card, and it's worked out quite nicely.
Anyway, go ahead and make your bootable media, whatever you choose there, either USB drive, little thumb drive, or an SD card, like I've done.
Now I just want to get a cheap little full-sized SD card, and they could 64GB at Walmart, for what is it, 12 bucks, or whatever they charge?
It's not much. And installed my image to that.
And that's what I run off of. So when I take the SD card out and put it in my wallet, or my pants pocket, this laptop is essentially a brick.
It's got an encrypted drive on it that holds my home directory, and it won't boot, and no one can see what you're doing.
In fact, if I thought about it, I might have put tiny core linux at the beginning of it, just so if I was at the airport, which I don't go to the airport by the way.
If I was at the airport, I'd have something to boot up to show security just to make sure the machine worked if they asked.
Anyway, you'll find several commands on there. For instance, the command target, after you finish installing your new drive,
target will help you set up your USB device for sync and info.
It lets you pick the USB device.
Figure it out to always stores its information in the D partition, the disc label D partition.
All BSDs pretty much work by disc labels unless you're running, you know.
I forgot the name of the operating system. It was ZFS. Oh, free BSD. Yeah, I don't ever use free BSD.
Free BSD used to use that functionality, but no longer uses disc labels or disc partitions was ZFS.
But Open BSD still uses the, I guess they call it a disc partition or disc label and it writes out a BSD disc label.
And you have, I think you can create up to something over 10 partitions, I believe.
Anyway, it always uses the D partition as its area for syncing data.
There's also a save as command where you get to name the volume that you're going to build.
For instance, I have, I use save as to create one for Fugusur for my server.
I have another one used for console, which is just straight console, no X.
I have another one built for my ice window manager, which I call X, capital X.
And so on and so forth, you can even build XSE desktop in here if you want.
Anyway, I'll tell you how you make your desktop next.
He's got a utility in here called, and let me pull it up. It's called DTJ Setup.
And when you run DTJ Setup, it gives you all kinds of options for what kind of desktop you'd like to build if you're trying to build a desktop.
And you got your choice of the XSE Mate, Lumina, or LXQT that he'll build for you.
He'll build one for you that's based on the Rocks Filer.
Or you could have no desktop, a window manager, only like CWM, FVWM, TWM, ice window manager, flux box, or JWM.
Or if you like window maker like I do, you can just install TWM and change everywhere in the config reaction files.
There's this TWM to WMaker and you've got it.
Anyway, I'm running the ice window maker, which is his favorite, by the way.
Cause favorite, Kawamoto, the man who makes Figueta based on Open BSD.
And I'm going to pull up his website here, read his full name because I don't think I've ever done that one of my videos.
But Figueta.org and Yashihiro Kawamata.
Yashihiro Kawamata.
And he goes in emails short K.A.W.Comp, which is the first three letters of his last name.
Yushihiro, I'm sorry, Yashihiro Kawamata.
Anyway, he's a very nice man and he's got his email address up there at his Facebook account.
The Japanese are strange people. I don't know anybody that we want to be on Facebook.
Maybe there are a few of them here on Hacker Public Radio, but I remember when Facebook first came out.
I set up an account and posted my first message and they locked me out and asked me for my telephone number.
And I wouldn't give it to him so they deleted my account.
So my Facebook experience was very short and brief.
Because I did not want to have a website that would tell a market to me.
Never joined Twitter either, by the way.
Social sites about the other one you'll find me on is GAB because
I'm not an extremely right-wing person. I'm kind of left-of-right where the world seems to be getting so radical left in wild that I can't follow them.
But at any rate, I can be found on GAB and I can be found here.
I also have video channels and a bit shoot in the library under Zen Floder 2.
Which I have made some videos in the past. Haven't made it in a while.
Maybe I should make another one covering this subject.
But I find the Figuila to desktop, the OpenBSD desktop to be a great one.
In fact, on another laptop I have Nome 3 installed. You can't install Nome 3 or KDE in Figuita.
Because the Damon's that are necessary to run in those won't run in Figuita because of the nature of the operating system running from memory.
But the Icewind Manager works quite well.
And let's see how much memory I'm using right now.
While I'm making this recording, I'm only using 3.7 gigabytes of my memory.
So I've got a lot left and I've got basically a 10 gig SWOT partition.
I've got a 20 gig D partition to save my configuration.
And as I said, my home is on the back end of the drive, which is over 900 megabytes encrypted storage.
And I went on ahead and randomized the entire drive.
So that even in OpenBSD, even the SWOT is encrypted. Everything is encrypted.
So if anybody ever steals this laptop, they're going to basically get a whole lot of nothing.
A whole lot of nothing.
And for my Wi-Fi, I have a little Wi-Fi dongle that I bought at Walmart.
I bought two of them for $15 or something like that. They were very cheap.
Got them through their mail order. They mailed them to my house.
When I started playing with OpenBSD some 10, 12 years ago.
So this is really an old, very old dongle, but it's well supported.
And it's got a little blue glowing light on it.
And it's plugged into one of the two USB ports that I have.
And then I bought a hub, a USB hub, to plug into the other Open USB port I have that has
like five or six, well it's got five plugins on it, apparently.
I'm counting them.
Is it five or four?
No, it's got four, I'm sorry.
It's got four plugins.
And I can actually mount other encrypted USB hard drives like I've got a four terabyte hard drive
and a two terabyte or 2.9 terabyte hard drive over here, both encrypted.
And I can also plug in an external keyboard and mouse if I so desire to use those.
If I'm going to do some long typing instead of the keyboard that's on this machine.
So at any rate, if you have a UFI machine, you will not be able to boot.
A Figuita ISO or file system that you get off his site because none of them are UFI ready.
You have to make your own using the USB FADM utility and new drive in selecting the right options.
From a machine or QEMU, if you happen to be reading Linux.
And then from there, you can build whatever you want.
And the rest of it requires some reading how to make an encrypted drive and everything else.
It involves the bio control module.
And I'll just discuss briefly how up and BSD handles encrypted drives.
You know, when you do it in Linux with crypt setup.
Crypt setup does not allow you to use UIDs.
At least it didn't the last time I used Linux.
They may have changed that now.
But once you've made a drive in Linux that's encrypted.
It shows up in what is it crypt or dev, crypt, mapper or something like that.
And then the name of whatever you created.
And open BSD, it's completely different.
When I use bio control to create an encrypted drive, let's say I've plugged in a drive.
SD-0 being my main hard drive.
SD-1 being the next one that plugs in.
Let's say that I've got either installed or I've just plugged in from a USB port.
If I encrypt SD-1, I randomize it.
And then I run bio control to make an encrypted, fully encrypted partition.
It will pop up the system will pop up an SD-2 drive that I can then put another disk label on.
And partition that with the fast file system.
And you'll create a fast file system.
So the way open BSD does it is they create a new drive letter for you.
And I find that more intuitive and easier to work with.
Also, bio control works with UIDs. It always has.
So everything that I put in here, including the...
Everything is an if stamp on an open BSD box.
Or as hooked up to it as an external drive or another internal drive is all marked with UIDs.
And everything is mounted with the UID.
You can still mount dev-SDA or dev-...
I'm sorry, dev-SD-0A or dev-SD-0D.
You know, that way.
What would they say?
That's the emblem or...
What would be the terminology for Linux's SD-A, SD-B versus UID, versus a UID identifier?
It's sort of a pseudonym for the drive.
Whereas open BSD uses SD-1, SD-2, SD-3, SD-4, all the way up to, I believe, SD-9.
Or maybe they've gone beyond that now.
You can have a...
I was hooked up to an open BSD box, whereas with Linux, I think it's pretty much unlimited.
I don't think they have a limit in Linux or free BSD on how many drives you can hook up to.
But an open BSD, there is a limit.
I think it's less than 16.
16 or less, maybe it's 15 or less.
They just recently expanded that with 6.7.
And of course, when they finally go to the Hammer-2 file system, all of this will disappear,
and they'll have to come up with another schema, because I'm sure the Hammer-2 file system uses UIDs too,
and some extend if we...
I know when your playing with ZFS, no one thinks about pseudonames for drive letters or their UIDs.
They just think about pool names.
So we'll all be playing the pool name game, I guess.
So you'll have to come up with a unique pool name.
Anyway, I love open BSD on the laptop, because there's no way I can ever get these drives confused.
I have little scripts to hook them up by UID that I created.
I store my root directory for like my external drives.
And no matter how I plug them in, which way the system boots up,
it always figures out what drive needs to go with what mount.
And I'm telling you, my world gets so crazy.
I'm so happy that they have UIDs, because I must have 6 or 7 of these drives.
And if I had them all plugged into a large machine like this server that I built, I'd go crazy trying to figure it out.
Every time you boot, the BIOS would rearrange how the drives came in.
I'm glad that we have UIDs to connect all it together, because without it, we'd be in a world of hurt.
We certainly would.
But anyway, Open BSD is a little different than Linux, even with swap.
As I said, all swap partitions are encrypted.
And they have the traditional swap on command for bringing on board a swap.
It binds any Open BSD swaps and swaps are always in the B partition, by the way.
And they can be of any size.
Swap partitions are also identified by UID.
The drives A through P are all the ones that you get, I believe, within a BSD disk label.
And the disk label itself is what holds the UID.
So first you find the disk label, which is going to be what an 8 or 10-digit scrambled set of letters and numbers.
And then a period, and then A, B, C, D, whatever.
C is a fake drive that just basically gives you the total size of the drive.
You can't actually use C. It's just for information.
So you have A, which is normally your root file system in an Open BSD box B, which is your swap.
C, again, it's for information.
And then D through P are all the other partitions that you'd make for your data.
This allows Open BSD to set controls on each one of the partitions.
For instance, in the user local partition, they have it set up.
Especially so that it signals the operating system, by the way it's set up,
that this partition is allowed to do special kinds of memory addressing,
whereas the rest of the Open BSD partitions are not.
Anything that's part of the base system of Open BSD has been way that you can't address memory or allocate memory
in what they consider incorrect ways, and that's part of their security system.
Part of their security system.
Open BSD also is the only operating system in the world that I'm aware of that has 64-bit time.
So when that date comes along the year 2035 or 36 whenever it is,
that all the inixes and windows and everything in the world will have their date system broken and they'll quit working.
Kind of reminds me of the Y2K scare, remember when they made movies about airplanes falling out of the sky
because they couldn't go past the year 2000 on their computers.
And they will be facing that again on that day, except Open BSD won't.
Open BSD also has a 64-bit file system that it installs with as of 6-7,
even the operating system is under a 64-bit file system.
That's on all versions, except for one port of Open BSD that's on a strange system that I don't know who uses it,
but it's a strange small legacy system.
But yeah, all the ports of Open BSD for the most part have now 64-bit file systems too,
as of with Open BSD 6-7.
So that gives you a lot of extra redundancy.
I installed Open BSD 6-7 on a test server and pulled the power cord on it several times,
and I could not get it to crash the file system like I did with previous versions of Open BSD
that I complained about in my previous audio.
So I think they finally got that ironed out.
There's enough redundancy in that file system that it's hard to create a system that can't auto-reboot.
So on my main server, I went on ahead and just installed Open BSD,
because you do get a little extra security,
and actually a little better memory usage than Figuita on that regard,
because Figuita does use a little memory, a little system memory to run.
So I've rearranged that and installed Open BSD in my main server,
and I did some refinements on the networking,
which I'll publish on a later, as soon as I get Cripped DNS Cript Proxy working the way I want it,
I will do that audio again, and we'll talk about it.
But I just love Figuita for the desktop.
I still love it for servers because I can still take my Figu serve instance
and just plop it down on any machine if I'm in a classroom environment
or anything just to demonstrate it to students and other people.
And it's great.
The other huge advantage to it is that I can take this now that it's set up,
and I can quickly install it on another machine in like 30 minutes,
because I've got all my configuration file set up,
I've got everything set up.
All I have to do is maybe change the Wi-Fi settings in Etsy
for whatever new Wi-Fi card I get in the laptop,
move my data in, in other words, Wipeout Windows,
randomize the drive, Wipeout Windows, install an encrypted home partition,
and then set up an appropriate swap and D partition for the drives syncing from memory.
When you shut down Figuita, you have to sync to D drive to save everything in D drive.
So when it boots up, it pull back out of D drive for how you set the no-asks configuration file in the D drive.
It searches for the D drive and looks for no-asks that file name,
and that file name, you set it up on how you want this machine to boot.
So I can take this SD card or USB stick that has the current version of Figuita,
whatever patch that this is, we're fixing to come up on patch set 10.
They just released patch set 10 this last week.
I can plug that into this machine, instantly change the base of the operating system out,
that having that graded mess with all that.
And then it will read my swap, it'll read the D drive,
and it'll read my home directory, and set it all up for me,
so that I have the same exact environment that I had on the previous machine.
I can port this desktop around to anyone.
In fact, if I have a friend that likes it, I could set it up for them
and just change the username and password, and root name,
remove some SSH keys, and they've got a completely working system on clean out Google,
of course, clean out Chrome, or Firefox, whatever you're using,
they can fake files in the data.
You know, wipe out my user account completely,
and set them up, they'd be very happy with using.
The system runs from memory just as the good a server did.
So if you have an SSD, the other advantage is you're not hitting that SSD all the time.
You know, I might have my laptop up for two, three weeks before I decide to take it down and move it,
you know, from maybe the kitchen counter to the living room or something,
or go downstairs with it into the basement.
And when I do, I'll use USB FADM utility to sync memory back to the hard drive.
So you're writing to your SSD virtually once every week or two or however many times you reboot,
to save everything that you've done in your system.
And then when you start the machine backup, it'll pull it all from the SSD or hard drive
and put it back into memory and get you into running mode again.
So this is so much better than installing operating systems on hard drives
and having to go through hours of setup.
You know, when you've got a good setup that works, why should you have to redo it over and over again?
It's silly. I think that's one of the reasons why people like MX19.2 so much,
is you can do essentially the same thing. It's just that MX19.2 and the other Linux USB bootables,
you know, puppy Linux, what not, they don't have instances like Figueta does.
In other words, it would be difficult for you to set up a server or a tour server or something
and make that an instance and put it on an actual server.
First place, it wouldn't be very secure because it's Linux.
I mean, you could do it with MX19. It's basically Debian.
I mean, you'll get about as much security as anybody else does its running Linux.
But you can't do it by instance.
So everything is a set of classes with an open to BSD.
It's like, you know, everything is very well thought out.
For instance, UIDs for the drives.
They're the first ones to use that encrypted swap. 64-bit time.
64-bit file systems, the first people to actually implement one of those in the fast file system anyway.
Excuse me.
And talking about swap, yeah, swap on is the command you use from root to bring up a swap system.
Figueta automatically detects any swap petitions and will automatically mount them.
But you do swap on if you were making one on another drive and just decided you need some extra swap petition.
Open BSD uses swap petitions much different than Linux.
Linux just throws bits and pieces down there.
Whereas if you have only four gigabytes of RAM and you've got six gigabytes of operating, including programs,
guess what? It's going to throw two or three gigabytes up to that swap.
And then bring it back into memory as you use those programs.
Linux, I think, will do that a little bit.
But pretty soon it's going to crash because Linux can't have any of its operating system that it's actually going to use in swap.
I mean, it starts to degrade horribly.
Open BSD, I don't really notice that much.
I mean, there's like a two-second delay on launching a program or something as it's pulling it back from swap if it didn't have memory to store it.
And then it's just running.
And it's really more like a mainframe.
Now, to control swaps,
you use a swap control.
And it's yet SWAPCTL.
And when you type SWAPCTL,
Open BSD actually tells you what swap partitions you're using and where using the pseudonym.
I have an SD-0B, which is my main drive, zero is my main drive.
Bees a swap partition.
And it shows that I've got...
What is it I've got here?
Ten gigs set up.
And I've used...
I've got out there stored right now.
507 megabytes for some reason.
I'm not out of memory.
It just decided to throw some stuff down there, I guess.
I don't know what it was doing.
And it tells me what's available.
It says that I've used 5% of the capacity.
And it is priority zero.
Now, I have had three or four swap partitions from different USB drives hooked up when I booted up for Google to accidentally.
And I ran that command and it will tell you how much it used in each one of them because it uses them all.
And it will give you the statistics on it.
I don't remember if Linux even offers stuff like that.
I'm trying to remember, but I don't think they'll tell you how much swap they put on each partition that you have a swap file.
You know how much it's in use or the capacity or anything else.
Swap off is the command and Linux that you use to turn off a swap file.
And in OpenBSD, it's going to be swap control.
And I think it's D.
Yeah, D and then the path dev slash SD zero.
Swap control dash D.
And then the path slash dev slash SD zero.
It would turn that off.
Anyway, you can also change the priority of the swap so that you can make like a USB drive less priority than the main drive to speed things up.
And you have all kinds of controls here with OpenBSD.
It's like with a PFR wall.
I mean, it's human readable.
It's not an encrypted language.
In my opinion, I get the hammer two file system in OpenBSD.
They'll have an operating system that will beat any other on the planet.
I'm serious.
I'm that prejudice about it.
As far as functionality, as far as speed goes and offering new things, you know, I'm afraid that Linux will probably always beat OpenBSD.
I mean, if you want to be able to run an app image or a flat pack or snaps with Ubudo, you'll always be on Linux.
I notice Linux Mint decided to pull out snaps and snap D.
They were talking about it and freedom decrypted with Chris Wade.
I listen to his show.
If you listen to freedom decrypted, he's the owner of ThinkPingman, the guy that I buy some of my machines from.
I buy my machines from him because he makes machines that have free and open hardware.
So you don't have to use encrypted blobs.
And, you know, this Lenovo is just an example of that with the Wi-Fi not working in it because it's another custom Wi-Fi that needs a proprietary blob that OpenBSD didn't happen to have.
In the firmware.
So, yeah, I prefer machines that like the server I bought off of them, the ping-win 9 desktop is how it was advertised, but it's actually a server now.
I prefer machines that are set up that way because everything on it is supported by OpenBSD.
I use everything on that laptop, that server.
I can also use quite a bit on my ping-win J3 laptop that I bought off of him, except for the touchpad on that one because he's got such a new setup on that.
6.7 now boots on it, but it doesn't support much else.
Give it another year and the ping-win J3 laptop will be converted to OpenBSD and I'll get rid of Trisco.
I'm running Trisco on it right now.
Funny thing about Chris Wade is he did an audio two or three weeks ago right after I bought thousands of OpenBSD people and complaining that they're using OpenBSD.
It doesn't have good support for his hardware.
And I found that the number nine desktop there is fully supported Wi-Fi card and all, everything.
It's running right now and I'm using it at this very moment with this laptop.
And everything's working great, so he gets cranky at times.
But he decided here in his last podcast that he's going to take ping-win computing away from Trisco.
And I guess he's going to rick a people that they install Linux Mint of all things.
So he's going to be installing Linux Mint on all of his new machines.
Because he feels that Trisco is taking too long to release an operating system.
And I have noticed that we've been on Trisco 8 for quite a long time.
I know Trisco 9 is fixing to come out sometime this year, but he can't seem to understand what the problem is.
So when he shipped me this unit, he shipped me one with a Trisco 9 CD that he created a DVD in the box.
In fact, the unit was loaded with Trisco 9.
And I got rid of it to put Figuita on there and then later OpenBSD.
So Figuita is also a good distribution to use just to plug into a laptop or machine to see what is supported.
If you load all the drivers with FW underscore update dash A and get all the drivers loaded from OpenBSD,
you can walk around with a Figuita USB and plug it into whatever machine, boot it up, and just see if the Wi-Fi and everything works on it.
And the touchpad, it's a good operating system, even just a test hardware to see if there's something you can install up in BSD on.
You might ask, why didn't I just install OpenBSD on this Lenovo?
I could have, but then I wouldn't have had the portability.
And you know, I think I'm done with installing OpenBSD on various laptops and desktops and then, you know, going through and
making it in each one of them.
You know, if I have to make a change, add software, whatever, it's so much easier for me just to do it on one of the laptops.
And then take that USB key disk around to the other five and replicate it.
Or, you know, plug that, just take that USB key disk with me and plug it into whatever laptop I want.
And it'll bring up the home directory and whatever I had.
So the only thing that changes from laptop to laptops, what's in my home directory, essentially, right?
You know, if I took a USB drive that copied the D drive, which is the programs I've loaded, then I could take the whole kit.
And the only thing that would change would be what you have in your home directory.
If I put the D drive on this SD card, I could just walk around with it and not have the whole kit.
The only thing that changes from laptop to laptop again, be the home directory and fiddle a little bit to hook up a new Wi-Fi card or something.
You know, change a couple of configuration files, big deal.
I mean, it's a whole lot better than hours of distro hopping, and I'm tired of that.
I run all my Linux and free BSD and other distributions in QEMU under open BSD now if I wanted to have a look at them or play with something.
Of course, I've got Trisco on one laptop left, the one I bought from ThinkPingwin, and I use that too, and I also use QEMU on that quite a bit.
I don't know, I might just leave Trisco on that one because it is a really high-performance laptop, and Trisco just flies on it.
It just does. I mean, it's amazingly fast. It works six times faster than any other laptop I've got.
So, I'll just leave Trisco on it, I guess, and we'll see how long it takes them to upgrade from 8 to 9.
But anyway, I am really thrilled with Figuita. It's made my life so much easier.
You know, I used to spend hours going through and playing with, you know, five different laptops and setting stuff up for people.
And it's so much easier to have one that's all configured with all the software set up on it and ready to go.
Just take that USB key disk, you know, I can make a clone of what I've got on a USB key disk, D drive and all, and walk over to the machine.
And then all I have to do is worry about how to move the home data, you know, USB hard drive to do that, right?
I just copy it off of the drive onto that, walk over to another machine and encrypt it and put it on.
In fact, a lot of people, they use SSH file system, and they just walk around from one laptop to the next,
and they load their home directory from the server they created, which is something I thought about doing,
but I don't have a 10 gigabit ethernet in my house. Of the USB disk support, 10 gigabit, ethernet, and it's astounding.
So all I have is Wi-Fi in this house. I've considered wiring it up, but it'd be a huge project, and I'm not sure that I needed it.
I really love the portability of Wi-Fi.
If I need a copy of everything that's on my storage drive in the server, I can just copy that to an encrypted USB portable drive, which I have right here,
and then carry a copy that around with me. You know, everything that I download for the next week, I can just copy it,
take it over to my laptop and transfer 60 gigabytes of stuff and save my Wi-Fi bandwidth really quickly.
So, yeah, this is so much easier alive.
And I did like MX-19, or MX-18 when I was using it, and I thought that was very interesting.
And I love the puppy Linux, even though that's not really a security operating system, it's sort of a toy.
But I'm telling you, Figuita is a very serious tool, and I would recommend more people getting involved with it, and learning how to use it, and enjoying it.
It's got most of the programs that you'd find in Linux. Of course, no flat packs, snaps, or app images, but you know, it's got handbrake in it, for instance.
File Zilla, you've got two web browsers to pick from Firefox or Chromium.
Oh, Pledge is another thing that they've implemented in Open BSD that I should talk about that most people know about that use Open BSD, and that's...
The Pledge CD is put into Firefox and Chromium to prevent them from roaming around in our hard drive.
In fact, you'll find that your downloads are restricted to the download director. You can't just download anywhere, and the browser can't read from anywhere either.
It also cannot access memory anywhere it wants. If they try, the system will crash the browser.
And I remember when we first implemented Pledge, that's what happened to me.
I happened to be using Chromium that day. This is a year or two ago, and I had... I'm guessing an application loaded in Chromium that was trying to do something naughty, and my browser kept crashing.
And it writes it to the system error logs when it does, and what it was trying to do.
So, I actually caught one of the applications running under Chromium trying to steal something from me.
Anyway, you don't have anything like that in Linux. Actually, you do have operating systems that put applications in buckets. There's one that I can think of.
But, again, security for security, I'll stick with Open BSD.
You have to wonder, they did put Chromium in a snap here recently, and they talked about it, and I think that's a good idea.
I really do. I don't know if they have a flat pack for it yet or not, or Firefox, for that matter.
I suspect the reason they don't for Firefox is it requires use of some of the system Damions that Chromium does not, because Chromium is more of a complete browser.
But even in Open BSD, Firefox is very secure. The same thing can be said of that. It can't just go anywhere it wants in memory.
Java can't do anything it wants. It can't comb your hard drive. It can only read and write to its own configuration files that area.
You'll find under Chromium there are certain applications that you can't even run that do strange things that were made for Windows or made to access your hard drive, or maybe network in a strange way.
In my opinion, that's a good thing. That's a good thing, because I don't want people, the number one way to break into a system, as we all know, is through a desktop web browser in a corporate environment, or even at home.
Web browsers are the toilets of the world nowadays. That's where everybody goes to potty. That's another reason I'm using Figuita and Open BSD.
I'm protected, and you need to be protected in this environment. It's not optional.
I kind of praise Ubudu for putting Chromium in a snap D, and I hope they eventually figured out a way to put Firefox in if they can ever clean Firefox up.
Firefox is still kind of an old design, and it needs to be redesigned. It's got a lot of dirty nastiness, and it's hard to work with. They need to redesign it.
There's a lot of bright people over at Manzilla, and they need to clean up and come up with a new Firefox, and maybe give it a new name.
Give it a new name, like Happy Hippo. Get away from Firefox.
Alright, that's enough for now. I've rambled on enough here, boys and girls, and I'm gonna let her go.
It's almost an hour, and in my opinion, an hour is long enough for any podcast.
By the way, I'm also using, if you noticed, the mic audio is different. I have a desktop blue-parent mic here that I purchased a year or two ago that I've been using with Linux, and I decided to plug it in Open BSD and guess what it works.
There's instructions for how to hook it up on the website, and we're using it right now, recording into Audacity, making a wavefile,
and it works just fine, and I don't have to jerk as much with this system as I did with Linux and Pulse Audio.
If I plug it in, it's on this mic. If I unplug it, it's on the mic that's built into the laptop. It's just that simple. The way I got this set up.
Plug it in, we're on the blue-parent. Unplug it, I'm on the desktop mic.
I mean, why can't Linux be that simple? Because under Linux, I had to plug in the mic and then go over to Pulse Audio and select it and set volumes and all that craziness.
I have hard-coded my volumes and the mixer control config file and Etsy on this, and it's at the right volume that I need to record at for both the desktop and the laptop.
I'm going to switch over to the laptop mic and give you a few bars of that for just a second. Hang on here.
Alright, that's better. I think I'm back to normal. That was a little taste of the idea pads built in mic. I guess I need to turn my volumes down even more.
But it's certainly pretty hot, isn't it, boys and girls?
Alright, we're going to go ahead and click on it. It's past 50 minutes now. Once again, it's a pleasure. I would encourage all of you to try this and learn some OpenBSD.
Don't just stick with Linux. Don't just stick with any particular operating system. In fact, the other cool thing about Figuitas, if you are a Windows user or you like your Ubitu, you can just run this from a USB key desk and get you an external hard drive, external USB drive, a big one, and set you up an environment, not even destroy or touch Windows or Ubitu.
Never touch it at all. Run everything from memory. Four gigabytes of memory or more is plenty. In fact, eight is quite a bit. If you have more than eight, it's probably not needed, but you could really do some interesting things with it.
Because Figuita will take all of it. It'll take 256 megabytes or 256 gigabytes of RAM if you got it. I'm not sure what the limit on that is, but it's quite a bit.
Alright, take care, boys and girls. I think it's time for those in floater to go make a hamburger. Bye for now.
You've been listening to Heka Public Radio at HekaPublicRadio.org. We are a community podcast network that releases shows every weekday Monday through Friday. Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is. Heka Public Radio was founded by the Digital Dove Pound and the Infonomicon Computer Club, and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the creative comments, attribution, share a like, 3.0 license.
