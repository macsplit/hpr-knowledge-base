Episode: 16
Title: HPR0016: Benefits of Virtualization
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0016/hpr0016.mp3
Transcribed: 2025-10-07 10:18:58

---

.
Hello and welcome to today's episode of Hacker Public Radio.
I'll be your host, DeepGeek.
Today is episode one in a series I'm doing on virtual machine technology.
And today's episode is called Benefits of Virtual Machines.
There's a campaign article on dockdroppers.org called Benefits of Virtual Machines.
And I'll be going over this article I wrote.
This is my way of planning it out.
And I will embellish upon what I have in the article as I see fit as I go.
But I want to begin documenting these things both online in a searchable web format,
as well as having the radio programs.
And the reason why I'm just going over the benefits of virtual machines was because I originally want to make this introduction to virtual machines with QMU,
which is a particular software package.
But I found that breaking it down, it was too poor a topic, you know, just coming out and introducing it.
Because I had to digress constantly into why you would want to run a virtual machine.
Because as with everything, there is a break in period where an learning curve experience
and virtual machine technology can get very deep and heavy, which is why you have to have a many series about it.
So I thought I would just try to answer the question, you know, why would I want to learn how to use this technology?
You know, virtual machines, let's get started.
Also known as just virtualization is currently a popular topic in computerization.
But in this episode is all for the benefit people who are unfamiliar with using this computer technology.
This article will explain the benefits of using virtualization.
To be incredibly brief, a virtual machine is a simulation of a computer running on a computer.
Don't confuse this with some security applications known as jailing.
It's not the same thing.
And also don't confuse this with certain programming languages that have a limited virtual machine
to enhance the languages portability between computing platforms as a Java virtual machine.
No, this technology is about simulating on a computer, having a simulation of like an Intel compatible, you know, a 8386 compatible.
With a certain kind of bus and half a gigabyte of memory.
And it has a sound card and network cards.
And it's got this size of 10 gigabytes, you know, a specific machine that doesn't exist in the real world, that we're running a simulation of.
What can be achieved by doing this?
Well, the first one that comes to mind for me, which is because it was the impetus for me to come to this technology,
running one operating system inside of another operating system.
You can, for example, run a Linux system within a Windows system or vice versa, you know, a Windows system within a Linux system.
This is a favorite of people who switched from one operating system to another for the day they need.
You can find that there is still a need to occasionally run an old program.
So, you know, you can set up the virtual machine, let's say you have saved certain software packages from your old, your old operating system.
And you're doing almost everything on your new operating system.
Run the virtual machine, run the operating system of the older that you used to use, and run the favorite application.
And it'll come up as an application window on your desktop, on your new operating system.
Okay. Another thing we can do with this technology is we can sandbox untrusted applications.
You know, if a program is not fully trusted, you can effectively isolate it onto a virtual machine.
So, it doesn't affect one's main system.
Now, many of these virtualization packages use a file on the disk, and that file simulates the disk drive on the simulated machine.
So, I could say set up a 10 gigabyte file and install Linux onto it if I was using Windows.
And that to the Linux system on the virtual machine, that file would look like the whole disk.
And then I began doing whatever I had to do within that disk.
Now, there's a range of possibilities that arises if you do this.
You know, at the lowest end of the spectrum, at least the daring one, is you can just try out a piece of software.
You know, you might not know if installing it onto the main system could conflict with something you already have existing.
You don't even know if you might like it.
So, let's say you want to try a new mail application.
You know, some mail applications might have certain dependencies and call certain payments into play.
And you might not be aware of it. You could install that mail application just as an example.
And see if you like it. See what kind of side effects it has. See if it installs anything else.
That's the simplest case.
Now, on the more daring end of the spectrum of sandboxing, you could actually surf the web on an OS and browse a combination known to be susceptible to malware.
You know, you remember, you know, if you have a problem, you can delete the virtual system as easily as deleting a file.
But you can keep that file around, keep running the system and observe the behavior.
I used to pride myself in my Windows days. I'm a Linux person now.
And I'm not catching viruses, but when I learned how to use this technology, one of the things I went out and did was run Windows as a simulated system.
And I went out and purposely caught malware and watched what it was like, watched what other people was succumbing to, which I had assiduously avoided.
Now, another application of using virtual machines is to test hardware changes.
Now, in this scenario, you can set up a system and you can just try changing the hardware on it.
The most common experience in doing this is seeing how much memory an application works best under.
Now, you know, you can try paring back the amount of memory the virtual machine has and see how much you can get away with.
And you can also simulate having more memory than you actually have.
Now, if you think about that for a second, you're going, well, wait, if you're simulating more memory, you're still going to swap that extra memory someplace.
But by shifting it to the virtual machine, you can see how much of that swapping is taking place in the virtual machine's virtual memory and the real memory.
In other words, to the virtual machine, you won't have a swap at a certain point, even to know on your real machine, it will overallocate the memory and use the swap file.
And that's, you know, very briefly what some people use this technology for is to justify expanding a machine.
I've also had problems with this one time. I accidentally changed the bus structure of a virtual machine and just the software just couldn't deal with this crap down.
You know, the bus was removed, you know, it can do all kinds of crazy stuff with this.
Now, something that students and universities do with this is they build simulations of clusters.
Now, you know, you got to think about this. If you're in a programming class and you're learning cluster programming, you know, the university has a cluster and you got to try your program on it.
Now, doesn't it make sense to have a simulation of the cluster on your computer and to go through the generations of writing a program and then only actually running the program on a cluster once you get the basic debugging done?
Doesn't that save you time and waiting for the big computer as well as saving runtime on the big cluster?
And now, it's related to this is if you're a networking student or, you know, even if you're, you know, playing a game of what if say in a commercial application, you can virtualize and set up an imaginary dummy network configuration.
Instead of building a physical computer network and see if it will work out on the virtual machine before going to the bother of building it.
Now, one of the more obscure things that gets done with this technology is standardized development machines.
Some virtual machine packages allow developers to develop new software on a standard machine.
You know, developers of software can be and geographically for fun places using widely different problem hardware platforms.
And it helps them to have be developing the software on the same prototype hardware so all the bugs can be redone, you know, replayed out.
So an example of this is the up and coming React OS, which is being developed. React OS is an attempt to building a Windows clone from the bomb up.
You know, we aren't allowed to reverse engineer windows, but to just build something that responds, you know, do that response to all the windows calls, the API calls, you can attempt.
And they are currently distributing their test systems in VMware and QMU files and they send around the test machine with the software on it.
Now, the last example I want to give you is that of retro computing.
Now, older computer types may have extensive software collections that were used on now obsolete systems.
You know, they could have artwork applications that were written in a bygone era of computing and they can rerun that now by simulating an older computer with an older operating system.
And this generates an nostalgia experience for some people, you know.
But not only in the nostalgia, you know, there's a relay technology, you know, emulators are not new per se, but they aren't as general as virtual machines.
There used to be a emulator that emulated old deck machines to digital equipment corporations under UNIX.
The problem was is that the deck machines were often used for physical running physical plants.
And what happened was, there's a bunch of nuclear power plants were built that used deck machines that deck went out of business.
And the actual replacement part industry lasted for a prolonged period of time because they couldn't close these nuclear power plants.
And then after fixing the old deck hardware, they began to simulate the old deck hardware so that newer, more modern computers could still interface to running the plant.
So that is an actual heavy-duty industrial use of a related technology.
So I try to answer the question, especially because why a person would want to run virtual machine technology?
I try to explain it with some, with it, by giving you first a simplified definition.
I mentioned a few things not to confuse it with and then I gave you a series of examples to show you the kind of usage different people get of this technology.
And this concludes, this is the beginning of the end for episode one from Deep Geek of virtual machines.
And I want to close out with another geek tidbit.
Let's have a look at a famous historical computer geek.
I think you guys really ought to know about what to research. Donald Irvin Cunuth, born in 1938, is still kicking around as best we know.
Cunuth is a famous, famous computer science. He is the father of mathematically proving the efficiency of computer algorithms.
And his platform for this was a series of books of classical computer science known as the Art of Computer Programming.
And I actually got the searches and sorting volume of this. It was a little too heady for me.
I couldn't understand everything this guy was trying to get a course, but he would give you an algorithm for sorting and show you three or four algorithms.
And then he would prove with calculus mathematically which one would be the fastest every time.
This is a brilliant guy, you know, to get to a fact where you can prove something like that in math.
Instead of just like what most people in my skill set would just benchmark at a billion times instead. He could prove it mathematically.
Donald Irvin Cunuth also gave us the late tech typesetting software. And this is a software that you can use on your Unish-like computer operating systems and approach the typesetting quality of book publishers.
And the reason he built that was because he showed a lot of calculus and he couldn't get the signals to print right.
So he got into typesetting just to pass this down. He's also done many many other things.
Wikipedia has a wonderful article that is a great jumping off point to looking up this fellow.
So I hope you research him out a little bit and enjoy what you learn.
This concludes today's episode of Hacker Public Radio. Thank you for listening.
Thank you for listening to Hacker Public Radio. HPR is sponsored by Kero.net. We'll head on over to C-A-R-O.N-T for all your hosting needs.
Thank you very much.
