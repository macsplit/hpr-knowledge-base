Episode: 456
Title: HPR0456: What is Free Software
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0456/hpr0456.mp3
Transcribed: 2025-10-07 21:03:30

---

.
My talks entitled What Is Free and Open Source Software.
I'm a little bit about myself. My name's Aaron Finneck.
I'm sometimes known as Finnecks. A lot of people know me as Finnecks.
I've been president of the Linux Society for about three years.
Today is my last day. I stand down and the new president takes over.
I've watched over three years, I've watched probably two to three hundred people go through free and open source software from installing operating systems to make an applications work, all swelving part of the Linux Society.
I try to be technically helpful whenever I can, but I'm not a technical guru or anything like that. It's just experience.
I do quite a bit of podcasting. I'm doing a talk later on today about podcasting.
So if you're interested about that, I've written a few how-to guides and tutorials and I've spoken a number of subjects with regards to Linux and free notes or software and its concepts.
Some personal details. Feel free to drop me an email. Hopefully I'll get back to you. You can follow me on Twitter.
The website URL, you can find my podcast, hackpublicradio.org, and there's a number of different people that are podcasted with our organization.
Hopefully things that we're going to learn today is what makes, you know, why do you make something free software?
Why is freedom in software so important? Kind of the history about where we come from and where you're likely to see free software being used.
For me, you know, why is free software kind of so important? Personally, it's an informed choice and the more choices that you have, the more informed you are about any decision that you make, ultimately is a better thing.
More options, things cross means more solutions. And for me, free software is about making your PC work for you.
As a society, as a whole, not the Linux society, as a society, as a whole, the free software is important because it enables us to share questions and share knowledge and be adaptable and flexible.
So just a quick, rough kind of outline of what I'll be talking about today. But we'll jump straight into it.
You know, in the beginning, you know, there was a light and then all of a sudden, God knows how many years later computers came about.
And since computers were made, you need a way to manage them. And in there, it becomes operating systems and so on and so forth.
And it's all these technical, wonderful terms that the really most people don't see or are interested in hearing about.
But really what free software is, it's an ideology, it's a concept. In the beginning, people used to share software.
Quite freely, you know, used to share source code and so on and so forth. And source code is the recipe for making a program.
Everything, everything, there's a program, there's a source code. And it's kind of critical. It's like an instruction to your computer to tell your computer how to make this software work.
And in the beginning, people used to share that software very freely. There's a guy called Richard Stollman, who founded the Free Software Foundation, started a GNU project and was the author of the GPL version 2, which is a key document in that and the Free Software World.
So basically, what had happened is he used to work for the Artificial Intelligence Lab at MIT. And what had happened was, is they basically, they had one printer for two floors.
And obviously whenever the thing ran out of paper, you send a print job and no one knew it was out of paper. So he'd wrote in a small application to put it into the printer that would notify everyone on the two floors that there was a paper jam or they'd run out of paper.
Brilliant feature, more than happy to pass it back to the company. And MIT brought basically a new printer. And this piece of software didn't work, so he decided he was going to rewrite the printer software again.
And he contacted the organization and said, could I have a copy of your source code for the printer? And they said, no, it's our property, you can't have a look at your license in agreements.
Even though he wasn't commercially trying to sell that software, he was trying to get a feature that made the work easier for them.
They still didn't really want to share. And he kind of gets left with this, tasting his mouth, that this just isn't right.
You know, have a writing and we've bought software from you and we have a product from you and yet we can't do anything with it.
So he starts the free software foundation, which I believe is 15 years old or 20 years old now, it's getting along.
But free software definition is really easy to kind of explain. And you're free to use and free to redistribute.
That's in the concept, really, what free software is all about, that you can take an application and use it for any purpose.
A lot of people get confused with free software and freeware. I'm sure we've all heard freeware before.
Freeware is a piece of software that has restrictions. It doesn't cost you anything, but you can't use it for commercial use, you can't use it in academia.
Free software is a lot different. One of the core concepts in free software is you're free to use the software for any purpose.
It doesn't matter if you're a school, a business, an individual. You're free to run that software for any purpose.
Some of the terminology that I will use today, you'll probably hear people talk about FOSS, which is just basically free and open source software.
There's this death touch on freeware, shareware and shared source. These are all very, very different to free software, very, very different in the core concepts and the ideologies and so on and so forth.
You may hear me use terms like developers and end users. Developers and end users are exactly what it sounds like.
A developer is a person that makes an application, an end user is a person that uses it.
You'll pay me bang a drum all day long about the ethos of sharing, and you'll probably see a lot of people out there talking about sharing software and sharing solutions and so on and so forth.
But sharing the recipe, well, at the end of the day, in free software, it's not about reinventing the wheel.
If there's a solution because the company, I find it personally a very strange concept that an organization owns an idea.
I find it alien. I'm sure a few people in here do and some people have probably never thought about it.
But how something works a company like Microsoft or Apple Macintosh or all of these, at their own concept and idea and your license to use this idea for this.
The problem is when they solve a problem, they keep it to themselves and they don't share it.
Which means that we have to constantly reinvent the wheel every time there's a problem.
In this model, we're not sharing. So every time there is an issue, hundreds and hundreds of people are having to deal with this problem.
And yet, one organization may find a solution and yet they don't share it because they own that solution.
For me, you have a lot of experts around the world in free software. Firefox is an example of open source software. It's a prime example of it.
I mean, how many people in here have heard of Firefox, just to a straw poll? So everyone, I mean, it's a big brand, there's no surprise.
They're big and famous now. But there are source codes. People can take Firefox and they can redistribute it and do lots of weird and wonderful things and they're allowed to do it.
There's some issues with Firefox with the branding and the icons and stuff like that. They own those sorts of things.
But you can take the Firefox source code and you can make the Phoenix web browser. And I can make all of those changes and modifications.
But Firefox is an example of an organization that has probably thousands of developers working on it at any one time. And yet, none of those developers, most of those developers are not getting paid.
They're doing it because they want to feature and programs tend to do, programs tend to do program solutions to things and do logical solutions.
And I want to do this with Firefox. It doesn't support it. I'll know how I'll modify the source code. But Firefox is a prime example of an organization being able to benefit from sharing its ideologies.
If you speak to people throughout the day, they'll tell you lots of interesting stories about how Firefox came about and all of that. It's quite an interesting story.
One of the great things with the sharing note is that it doesn't matter if the chief developer disappears because the source code is open.
Everyone has a copy of the source code. So it doesn't matter if the company that developed the source code was bossed. That source code is available.
And I've often talked about if you're a company and you're heavily rely on a piece of software, the company that supplies you that software, loads them to the administration of those bosses or something like that, you've got no technical support for that package that you use.
And you can't look at that source code. You can't do anything. You're locked from it. Well, in free and open source software, you don't really have that problem. It doesn't matter if the developer disappears.
It doesn't matter if you fall out with the developer because source code is universal. You know, you can employ even if you're not into software. You can employ someone to do it for you.
You can say, right, I really want this feature in this program. I'm going to pay a developer X amount pounds. Could you build this for me?
And it's one of the great freedoms that you would think if you, that's a sort of freedom that you would want in your everyday computing.
Now, I know that you guys probably not really interested in source code, but the fact that you could get someone to help you and look at that source code and make something is a very key important part of what you do.
And one of the key things that I mean, I've been banging on for years, probably like three or four years, is this concept software is documentation, documentation software.
Any developers in here will probably get exactly what I'm saying straight away. But what really source code is, as I said earlier on, it's a recipe.
And what about that recipe is written in a program language, you know, like C or so on and so forth.
Now, it doesn't matter what your vocal language is. Source code is basically the same. And programs can look through source code that was written by a Russian and an English person can look through that source code and go, oh, that's a nice way to solve that problem.
Oh, I see how he's done this. And they might not be able to read the comments or anything like that, but I actually get to see the logic of that.
And in that case, really software is documentation, documentation software. And this is the concept that the source code has to be shared.
I mean, you can't really talk about free software without talking about the evil to a new proprietary software.
It probably is easier to understand free software by describing what proprietary software is.
Preparatory software touches your life every day. Preparatory software is something you live with every day.
Preparatory software is basically, you know, your home PC is probably on windows or macOS or, you know, they're owned by an organization.
You don't buy a copy of Windows XP, you license your license to use a copy of XP.
And what that is is you don't have the right to look at the source code and have the right to modify it and have the right to do anything.
You basically have this operating system shipped on your computer.
It's an even crazier concept than you take away the fact that most of you have brought a copy of Windows XP without realizing it.
When you buy a brand new computer, you didn't get Windows XP for free. That was built into the price.
And those manufacturers, you know, paid mine to self-discipline the sentence.
You know, I think it's $40.70 or something like that. I can't even know what it is nowadays.
But, I'm only sure of it. That's what proprietary software is. It's this locked software that you don't have any options.
You don't have any choices. You don't have any freedom.
And it's, for me, it's a big worry. If you have a problem with your operating system, as a Linux user,
I'm able to have a look at what's going on in my operating system. If I have a problem if I want to do something, I want to work on something.
I'm free to do that. I enjoy that freedom. I don't have those same freedoms afforded to me on this proprietary ownership model.
And, you know, Windows XP, I'm going to pick on Windows and I really didn't want to do that.
But, you know, when you think about how many Windows systems are out there,
they've not been people that have chose to go up in the morning and decided, you know what? I really want to run Windows.
I'm going to go and buy a clock. People are just running what they've shipped and they're not running anything else.
So, really, what's made a dominant in software is not how good the software is, but how good the marketing deal is.
And that's really a bug there. And if you think about the fact that you would like to think that you make decisions based on the best information that you possibly can,
and that you would use the right tool for the job, but you're not being afforded that.
You know, it's not the best tool for the job because you didn't have a chance to evaluate it.
It could quite possibly be the best operating system for you. I'm not disputing that.
But, you didn't have an evaluation period. You didn't get to try, you know, maybe some of you have experienced
gone and tried different operating systems and so on and so forth. But for most people, the decision is not based on
it being good quality, ethical, right. It's not based on any of those. It's based on a marketing deal with software houses and hardware manufacturers.
So, you know, this is kind of what software freedom is really about.
This leads to what's pointedly known as vendor locked in. How many people have heard the term vendor locked in before?
Just raise your hands. Right. Well, vendor locked in for those that haven't heard it is when you rely on a product from an organization.
So heavily, it's almost like a drug. We're almost become addicted to it and you can't withdraw from it.
Like, some of the gateway sort of examples would be universities that run Microsoft Windows.
They can't tomorrow decide, they would say offices, Microsoft Office is a great example of this.
Organizations find it very hard to move away from Microsoft Office. Even if they hate to, even if it causes and problems, even if, you know, even if it's the bit that they really want to do it.
The fact that they've relied on it for so long that retraining everyone and stopping that that proprietary format being used in it like an academic environment is incredibly hard to do.
And that's what the term vendor locked in comes in. Even if you want it to leave, you don't have a choice. And that's the problem with proprietary software.
There's a very interesting book called The Cathedral in the Bazaar. I touched on, Mizzila will Firefox earlier on.
And then you guys have got the time. You can find online versions of this book and you can obviously buy it.
But it's a very interesting book about the whole free software environment and how it's very, very different to the commercial aspect.
You can draw similes and say that, you know, if software development itself was a cathedral in the free and open source software would be a little bit like a Bazaar.
You would have lots of developers working on lots of different things and they're all trading and sharing and bartering and it's very interesting.
But when I would employ it, if you have the time, you can find a copy if I do read it.
Before I carry on, is there any questions so far?
Bro, I might have been doing an incredibly good job or I've bored you all to that one or two.
Like I say, I mean, I could bang on them. I hope that I've done a good enough job of explaining the difference between proprietary software and free software that I don't really need to go through.
But I often think it's, you know, a speaker as a commodity versus share it as an asset.
And I've touched on this before, a company holding on to an idea as though it's the second coming of the Messiah and all of this sort of stuff.
And you have organizations like Ubuntu, what, canonical, who open up their operating system and share it and still benefit from it.
The thing with Linux is, is incredibly diverse and Linux, I'll pick on Linux slightly here as well.
Linux is, how many people in here have heard of Linux before? Awesome.
Well, basically Linux is a free and open source operating system that doesn't have the same sort of lock-ins that Windows XP and Mark and those kind of guys have.
But the thing with Linux is that it's made by the people, really. There's no other, it's almost like your communist, or source, you know, communist operating system in some ways.
You know, it's made by the people, the people user, the same people that use it, develop it, so on and so forth.
And there's one flavor, it's probably the best way of putting code Ubuntu. There's lots of different flavors in Linux, lots of different flavors.
I mean, if you want to do scientific stuff, the scientific Linux distributions, if you want to work on audio stuff, there's audio distributions of Linux.
But in Ubuntu, the prime example of this diversity in action is Ubuntu has tons of derivatives, and they're just nested at the top of them.
And Ubuntu is the main one in the ship.
Ubuntu, if you don't like the way the desktop looks and you want to use a different desktop manager, you can use KD and that's got Ubuntu.
If you wanted to turn your PC into a TV, if you use the Mythbond2, if you're an education institute, you could use Edubond2.
And if you're into making music, you could use Ubuntu Studio, we've actually got a download of that outside today as well.
And that's just an example of when something's free and it's not locked down, you enable people to run with ideas and work with ideas and move forward.
What free software doesn't mean is free is in cash. It's a big, big, big misconception about free software.
And unfortunately, it's a term. We've gone too forward to come back from using the term of free, doesn't refer to it not costing you anything.
Free refers to the freedoms that free software give you. It's a misconception that you will not be charged for free software.
That's wrong. Most cases you'll not be charged. But free software, you have the right to sell free software.
I have the right to take Firefox, branded my own, and then sell it.
And I'm not breaking the law, I'm living within the rights of the agreement itself.
But what I have to do is those same freedoms that I took, I have to pass on to you.
And that you can buy my phoenix web browser, and you can go home and say, that's a really good idea. I want to do that.
And you can rebrand it and do whatever you want, and you can sell it. That's perfectly fine. That's perfectly legal. That's acceptable. That's the whole concept of free software in a nutshell.
Because you work on something that doesn't mean you have to give it away.
Examples of free software being used, and modifications, if you work on something, there's another misconception there.
If you make free software, you have to share the source code. That's a massive misconception.
What free software actually is, is you have to share the source code if you distribute the program itself.
So if you're a bank, you're setting that thing to no one, if we use our open source software, and we write a security secure protocol for it, we're going to have to share it.
You don't, as long as you don't sell or redistribute that, that piece of software you don't actually have to share it.
You need to spit it out with the spirit of things.
An example really is Google, Google's hugely benefit from free and open source software.
They've got free and open source software, they rewrite the stuff because we lots of weird and wonderful things, and they don't pass anything back.
But Google don't sell search engines. If Google was selling Google search engines as a product, they would have to share the source code.
But because they're not there, they're selling the service they don't, which is, you know, some people don't like it, some people do.
So really, freedom really can just be called socially moral in software.
And you'll hear people use terms such as, oh, it's free as in freedom, not free as in beer.
How many people have heard that term before? It's a mantra. I should have got everyone in the morning saying that before we open the doors.
As I said, I talked about source code and, you know, all of that stuff.
But out of free software came open source and open sources. You know, we have this when I talk about free.
And I use the term free in here, you're probably all still thinking of cash.
It's just one of those words that are ingrained in people's psyche, you know, you say free.
If it doesn't cost anything, how can it be worth anything?
You know, and it's a completely different argument because we're not actually talking about money, but there's this stigmatism that's tied into it.
So a concept of open source sort of game played about and start getting used, because it's a little bit more easy for a countenance to understand.
You know, you have to be honest, you know, you're going to an organization with these preconceptions.
So why don't you use free software? Well, if it's free, how can it be worth anything?
So you spend half your time making arguments about notes about, you know, about the mindset of a concept that's nothing to do with money.
Really, the answer was, we'll just call it open source. And you go into organizations and say, all right, we'll use open source.
Oh, open source, what's that? Well, the source code's open. It means we can look at it and blah, blah, blah, blah.
It's a very friendly term, but they are actually different.
I've had the benefit of watching and listening to a lot of Richard Stolman's talks and the guy called even Mogel and is kind of like the lawyer for the free software foundation.
Very heavily involved in writing the licenses and that. And I've seen him have a very, very rough, open source because what it actually does is, in his mindset, dilute the argument that we're having.
We should be, we should be going into organizations and explaining, no, it's nothing to do with cost. Diverting that argument is actually going to cause those problems in the future.
It's an interesting concept. The actually open source is not good for free software. But for most of us, open source is awesome. There's no other way of putting it.
Really, great thing. A lot of fun to be involved in. But if you speak to people, they'll speak to people out there, they'll talk to you about it all.
Really, it really started with the user group culture and all that started with the Home Brew Compute and Club.
It didn't start there, but it's a very prime example of people building computers and sharing software and working out how to do things.
And then, you know, jobs wasn't engaged. They're all in some way, shape or form, had some contact with the Home Brew Compute and Club.
Bill Gates wrote a very famous letter about the home, about users basically copying his operating out, copying his one of his programs and not paying him a license for it.
So he writes an open letter to the Home Brew Compute and Club, basically saying, no, it's not right. You shouldn't be doing this. You should pay us. But you can find that online. It's very easy to find.
Home source itself is a lot wider and more and more well-known than that. But really, it comes from the spirit of hacking the playful, not a Zen. I'm going to take your bank details.
But the playful exploration of technologists, Richard Stormen, there's quite heavily into artificial intelligence at MIT, so that's why I've gone there.
You can see fostering lots of different places.
Many people, I'm not going to ask that, but Dundee City Council heavily use free home source software when you're paying your council tax or when you're looking at one of their websites.
You know, one of their websites is using a language distribution called Suf. And it's using an Apache web server, which is free home source software as well.
Lots of web routers and set-top boxes and all of this sort of stuff used for free home source software. You probably use it every day without realizing it.
And then one travel, because there's other talks I'm going to have, but don't really want to ban on about free software all day.
Is there any questions or thoughts on anything like that?
Thank you for listening to Hack with Public Radio.
HPR is sponsored by Carol.net, so head on over to CARO.NAT for all of us in need.
You
