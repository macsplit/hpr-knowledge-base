Episode: 2601
Title: HPR2601: Liverpool Makerfest 2018
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2601/hpr2601.mp3
Transcribed: 2025-10-19 06:23:11

---

This is an HBR episode 2006-101 entitled Liverpool Macafast 2018 and in part on the series
Interview.
It is hosted by Tony Hune, AKA Tony H1212 and in about 11 minutes long and carry my clean
flag.
The summary is, this is an interview with Chris Bell.
This episode of HBR is brought to you by an honesthost.com.
With 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at an honesthost.com.
Hi, this is Tony Huse again for Highcom Public Radio.
This is a first of a series of recordings that were made at Liverpool MacFest 2018 on
Saturday the 30th of June.
I'm going to be releasing those recordings over the next few weeks.
So sit back and listen, the first ones with Christopher Dell and it's about EduBlox.
Thank you.
Hello, this is Tony Huse for Highcom Public Radio, I'm here at Liverpool Macafest and I've
got with me Chris Dell, who's going to tell us a little bit about what he's doing here
today.
Hi, I'm Chris Dell and I am from Preston Hackspace.
I'm helping Joshua with the EduBlox project, specifically bringing EduBlox to a microcontroller
called the ESP32.
May have heard of the ESP8266, this is the successor to that and what I want to do is try and make
a microcontroller accessible to a whole range of people from various skill levels, right
from the complete beginners to experts so they can all use this device as a beginning
programming with microcontrollers right out of the box.
You mentioned EduBlox, could you tell us a little bit about what that is?
Well, EduBlox is something Joshua created a couple years ago which may know him as all
about code on Twitter, he wanted to make programming more accessible, so introducing what
is effectively Python scripting but in a format of blocks, similar to Scratch, like the
idea that Scratch introduces idea of having blocks to build computer programs, so Joshua
took that and applied that to Python programming so that you could build Python scripts just
by dropping blocks together and that would mean that it's much easier, much more approachable
because it would be harder to go wrong, the blocks would be there for the functions that
you needed, it didn't have to look to documentation, it didn't have to worry about spelling things
wrong, it would be a lot easier to build programs without having an experience of programming
in a traditional sense of typing into a text letter, Joshua created that project originally
for the Raspberry Pi, what I've done is we developed a new edition of EduBlox which is intended
to work on the, for now the ESP32 microcontroller which is very cheap microcontroller available
for less than Â£10, it actually runs on the microcontroller itself, so no additional hardware
is required other than any computer with Wi-Fi needed to program it, so the idea is the controller
when you turn it on, it automatically creates a Wi-Fi hotspot and then through that Wi-Fi
hotspot with either a phone or a tablet or a laptop you can connect to it and start writing
programs and start flushing LEDs, driving motors, reading sensors, all those kinds of things
with very little effort, no need to install things like like for example Arduino requires
you to install additional software on your computer, it's a little bit daunting for anyone
who's new to this sort of stuff, the EduBlox software requires no special tools, anyone
with an ordinary laptop or an ordinary tablet can instantly, out of the box, start programming
these things and making them do things.
Yeah, you've got a cool pet kitty today, a little four wheel robot and you demo in that
using the EduBlox ESP.
Yeah I just, that's just an example of one thing that you can do with this device and
trying to sort of inspire people, like I would hope that a lot of people will come with
their own inventions, things come up with new things haven't been thought of before
because one of the things that I'm hoping is this will have a much greater range of people
using this device, not just traditional programmers, traditionally my controllers were very, very
hard devices to program because they were acquired expertise in things like embedded
C, so the number of people that are using this is people who were sort of classically trained
programmers as it were, but with this now a whole range of people from different backgrounds
can use these things to come up with all sorts of creative ideas, I can only imagine what
people might use this for, but like one of the things that I think will be a big, a big
category of sort of usage scenarios would be home automation, home automation is something
that's very, very big already, what this device could be used for is people can start
programming lights in their home to come on and off, according to whatever inputs they
want like, whether they enter the house, a sense of might be tripped that would tell
a light to come on automatically, or they could have the light come on a certain times
the day automatically, or a combination of them both, the logic, the behaviour to do
that can be programmed through edge blocks running on a mic controller for example, so you
could, with the sort of attachments that you can get, you can control things like main
circuits with this device, you can, a lot of these things already exist, people already
have been using these things like the Raspberry Pi and the Arduino, but these all work
with the ESP32 running edge blocks as well, so if you want to start having smart homes
as they're called, you can start building these with this platform, we're very limited
to skills. So the benefit of the ESP32 coupled
with edge blocks makes it a fairly easy system to start programming your home automation
for yourself rather than relying on proprietary software.
Yeah, that's the idea, I mean you can do all this stuff already if you're willing to
pay the money for smart home devices and smart home software, but a lot of these things
tend to be very, they tend to be a single brand, so you have to opt into the Google
way of doing things, or the Amazon way of doing things, or they don't tend to be cross-compatible,
so if you've got like a nest, then you might have to buy all the nest accessories, which
are very, very expensive, or if you've got like an energy-need device, you'll have to buy
all the energy-need accessories in order to be compatible with what's existing. This
device doesn't have any proprietary requirements, it will work with the wide range of maker
tools already in existence, so like for example, these things like the energy-need devices,
which you can control from the Raspberry Pi, you can control with this, but you can also
control other devices as well, there's the code already exists to do that, so it's very
easy to just drag a block which represents, it might represent a lamp that's plugged into
a main socket, and you can turn that lamp on and off with that block, and then you can say
I want the lamp to turn on at this time, so you can have another block that represents
time of day, or another block that represents, maybe a motion sensor, and then plug those
things all together, and you've got a program, and you've got a behaviour that is bespoke
to your own requirements, and you can change that at any time, because the device is always
connected to your Wi-Fi, so if at any time you want to change the behaviour, it's very easy
to do, you don't even have to take the device out of it, it's cut out wherever it's attached
to, you can just leave it wherever it is, hidden away, and reprogram it at any time using
the Edge of Box interface, which is running on the device itself, which is what I think
is really cool about this. Thank you very much, that sounds really great,
and the main advantage I can say is that you're not tied into another company that could
pull the plug at any other time. Yeah, I think that's very important, because there's
a lot of start-ups in this industry, and inevitably a lot of them will fail. I don't want to
have the situation where we have a monopoly, either, where everything's closed, you have
to pay lots of money for their own bespoke hardware, and also I think we should be encouraging
people to learn how to build these systems themselves, because not only is it very fun,
it's also a very useful skill to have, it gets people straight away thinking about programming,
how programming can be used to do things that are useful in the environment, going beyond
just the academic turning LEDs on and off, and writing hello world. It's actually doing
something useful, code, instantly people can see, wow, I can actually think of an application
for this, this is really, really cool. I want to inspire people, and it's actually programming
for some kind of actual purpose, rather than just that. Yeah, it's got real world applications,
I should, like, exactly, yeah. Well, thanks very much, that was a really interesting
explanation of what you're doing with Edgeybox, thanks very much Chris. Thank you, it's a pleasure.
Thanks, bye.
You've been listening to Hacker Public Radio at Hacker Public Radio dot org. We are a community
podcast network that releases shows every weekday Monday through Friday. Today's show
like all our shows, was contributed by an HP R listener like yourself. If you ever thought
of recording a podcast, then click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com. If you have comments on today's show,
please email the host directly, leave a comment on the website or record a follow-up episode
yourself. Unless otherwise status, today's show is released on the creative comments,
attribution, share a like, 3.0 license.
