Episode: 3668
Title: HPR3668: Linux Inlaws S01E63: John Hawley on kernel dot org and other shenanigans
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3668/hpr3668.mp3
Transcribed: 2025-10-25 03:18:24

---

This is Hacker Public Radio Episode 3668 for Wednesday, the 24th of August 2022.
Today's show is entitled, Linux and Laws Sci, John Holley on Colonel.org and other
shenanigans.
It is part of the series Linux and Laws.
It is hosted by Monochromic and is about 92 minutes long.
It carries an explicit flag, the summary is an interview with John Holley of Colonel
Erkfei.
This is Linux and Laws.
A podcast on topics around free and open-source software, any associated contraband, communism,
the revolution in general and whatever else, fans is critical.
Please note that this and other episodes may contain strong language, offensive humor,
and other certainly not politically correct language.
You have been warned.
While parents insist on this disclaimer, happy mum, thus the content is not suitable
for consumption in the workplace, especially when played back on a speaker in an open
plan office or similar environments, any minors under the age of 35, or any pets including
fluffy little killer bunnies, your trusted guide dog, unless on speed, and QT-rexes
or other associated dinosaurs.
Welcome to Linux and Laws, Season 1 Episode 63, Martin Hower Things.
Things are great.
We have a very long weekend celebrating Monochromic, but not Monochromic that you came
to work.
Do you own my stuff?
I wonder.
She is here for all the people, so I guess we are all on a part of her.
Yeah, for the greater audience, we are recording this June of 2027, if memory serves correct,
and Martin is referring to the, what is Martin, 102nd or whatever, anniversary, right?
Maybe I'm wrong.
2720.
Maybe 100.
No, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no.
Okay, fair enough.
So she's done well, but then a lot of taxpayers' money is put into that sort of thing, isn't
it?
Yeah, yours are my dad.
It's of course.
But I like some others.
But Martin, given the fact that you are the royalist between the two of us, that makes sense.
Yeah, it's quite difficult for a German to be royalist.
Yeah, that's going to pass.
And Martin, any plans of taking this over in terms of kind of just buying the whole thing,
not just for the two of us, right?
No, I'll leave that to the people like Elon, like it needs to take the world to it.
And given the fact that you were almost touching on politics, I heard that Boris about what,
five years ago, was almost saved by the bell.
Is it that long?
Well, it's, I mean, yeah, I mean, this vote was on the second, on the 6th of June in 2022, right?
So given the fact that we're recording this in June of 2027.
I don't follow politics, but you do not fern of complaining.
It's not a very interesting subject.
And it hardly matters using powers, though.
In contrast to the members of the royal family, I'm tempted to add.
But enough of.
Well, they give you back all of this, right?
So this is not.
Well, that's true.
And Elizabeth and the firm, if you're listening, the email address is, if you want to get kind of getting involved,
the email address is sponsored at little speed.
Please get in touch.
And we're more than happy to bash you even further.
We do an interview with Andy, but this is not about the royal family of the country that Martin chooses to live in.
And for for the reason that this cable, but that's beside the point.
But this is more like a much more important things like the guest we have on tonight show.
Martin, you want to introduce your guest?
Sure.
Yeah.
So tonight we have a guest from the organization I work for, which is.
Not here in this guy's at all is here tonight.
Hang on.
Hang on.
Hang on.
I thought you were working for the cause of rastra.
I'm sorry.
I'm not supposed to say that, right?
No, no.
That was a few years ago.
Sorry about this.
That ancient history now.
I hope they know that too.
Yeah.
I'm not going to say.
Okay.
Sorry.
No, of course we cannot.
So I'm sorry if listening to this episode is for you.
I'm kidding.
Okay.
Sorry.
John.
Go ahead.
Yeah.
So I'm John Holly.
I work with Martin at VMware.
And yeah, they asked me to stop by today and.
Have a chat.
And you know,
I have to congratulate the UK on them.
They're Jubilee and.
And they're they're fine choice of seditious music that was
continuously played against.
Being from their colonies myself.
John.
I take it.
You're not the living in the UK.
You're just living in.
No, I'm not the colonies.
Okay.
Yeah, I'm.
I'm.
Yeah, that X colony to the to the west.
That makes it Australia.
I don't know.
Oh, you are.
This is the first South, right?
But yeah, the.
The highlights of it.
The evening was on the summer.
All persons.
Or the highlight.
The end of the.
Do it as summer.
Are you joking?
No, no, no, no.
How much money did you buy?
By the surprise.
Anyway, hang on, hang on.
I thought you was dead for almost 30 years or 20 years.
That must have cost a fortune in terms of reviving her.
In terms of getting the end genetic engineering right.
Well, she probably went to the great big freezer place.
Okay.
Interesting.
Anyway, details made with the show.
Yes, we discussed this last.
The summer.
Okay, fair enough.
But this show is not about Donna Summers.
Donna Summer, but rather about open sports.
So.
John, why don't you shed some light on you?
I'm not on your past.
And why.
Why you consider free free labor and open source software important?
Well, I've been in kind of the free and open source software world since about 1994.
Which don't try and think too hard about how old I probably was at the time.
And they have been kind of around Linux since then and ran kernel.org for about a decade and.
Have done a whole pile of different things from network booting computers across literally.
The transatlantic pipes of the internet to.
And helping get people into, you know, coding in open source projects to, you know, practically you name it.
I've probably done something tangential to it.
So.
Yeah, that's the, that's kind of my, the short and dirty of my background.
That sounds very interesting for for that one listener out there.
I mean, it's a little podcast, but we should probably explain what kernel.org is.
You can set some more light on your, on your role in maintaining or even administering or whatever or running form for one of a business version.
Of that most important internet side of them all.
I mean, forget about YouTube, forget about Google.com whenever kernel kernel.org is where it happens.
Yeah.
So I mean, for those of you who aren't familiar with kernel.org kernel.org is literally the, the, the, the place where the Linux kernel lives.
It is the, the master repository for, for, for Linux and half of the, the subsystems in the Linux kernel.
It's literally where Linux, like if Linux had a physical place, where, where it comes from, it's it's literally kernel.org.
And long ago and far away when not too long after Peter and then.
Got kernel.org started, which I don't even remember that the, the date off the top of my head, which is kind of sad considering how long I've been involved.
24, maybe.
I want to say like 95 96 something like that.
I literally have to go and find like Peter's old email about the whole thing to try and remember.
He had me come on and start helping out with some of the things eventually leading to me, literally running kernel.org.
And it's kind of funny.
Everybody thinks of anything on the internet as just like one computer sitting in a data center and kernel.org was kind of a, you know, one of those distributed content distribution networks before we really called them content distribution networks because we had.
Machines running in on the west coast in the United States, we had machines running in Sweden, we had machines running in Amsterdam, we had machines like literally all over the world.
When, you know, Akamai was literally the only content distribution network that was that was literally bigger than us.
So, yeah, I mean, the Linux kernel come from there.
I mean, I remember the birth of Git and Linus coming and saying, you know, hey, I wrote this Git thing.
We need to figure out how to get this running on the servers.
I'm like, well, that's going to be interesting.
And of course, the most important something on, on, on kernel.org would be wireless dot kernel or.
That's where the action takes place.
Well, I, I, I mean, there was an April 1st post I did a few years ago about putting kernel.org literally in the cloud on 747s.
That is fun.
Okay.
No, I mean, for the, for the few people out there that are uninitiated, wireless or kernel.org is actually the place where funny enough you discuss wireless.
Or the 802 11 sub framework within the kernel in terms of the code that maps your Mac full software.
I'm a full Mac, I'm a soft Mac.
You must probably, but there's not a technical thing to the rest of the kernel framework.
And as probably some of the listeners out there would recall there was a few with this way.
She and Enigins with the likes of Broadcom and other companies that put out drivers there that weren't exactly open source.
And wireless dot kernel.org what ever was actually the go to place for alternatives, among other things.
Full commercial plug.
Starting now wireless of kernel.org is actually the place where you can find the full specification of all of the wireless.
I'm driving some kernel in the Lewis kernel, including the chipset, including the chipsets that they support.
Which comes in handy, especially if you are in one of the older machine and wondering what the hell is happening and why doesn't my wife have work.
But end of rant now.
Yeah, I was going to say I've got a laptop downstairs that I use daily that has one of those drivers.
Every time I upgrade the kernel, it's an adventure.
You mentioned having fun installing gifts as well.
Oh, yeah, no, so I mean, I remember when.
I just literally wandered off and came back with get and after the kerfuffle before get.
And yeah, so I got to be one of the first people to get get up and running in production on a server where literally the entire Linux kernel community needed to go and start pulling stuff and pushing stuff.
Get get has this if you've ever dug in to get get has this really neat pathology that it works great on leans is desktop or on his laptop works absolutely perfectly great because leans has this, you know, these giant machines and has always had these kind of big machines.
But the minute you start putting get into production on a normal server kind of hardware, the whole thing just kind of grinds to a halt because get.
It uses so much memory to map things in and out that, you know, like the Linux kernel itself, you know, at the time was five or 600 megabytes of source code in the repository.
And it would balloon to like eight gigs of RAM when somebody did a poll.
You can imagine in the early days when you know, everyone starts trying to figure out how to use get and everybody's pulling constantly that the poor machines that we had which were fairly beefy machines at the time.
Yeah, that they would fall over and you know eventually with the advent of, you know, things like get web and you know, then we've got web crawlers also trying to to crawl all of the get repository simultaneously it was kind of a.
Sighting mess and new caching layers had to be designed literally on the fly and put into get and get web and.
Is that when you decided to quit that?
No, I ended up leaving for for other reasons, but you know there's.
In the open source world, particularly when you're kind of doing infrastructure, you things there's always new new challenges new things and.
The constant, you know, hey, I bang this together up over the weekend can we try it is the new production, you know, your life cycle software.
It reminds me a lot of a lot of a lot about the infrastructure behind little something called linux in the.
Find it up over the weekend.
No, actually within five minutes or something.
Go ahead, yeah, I was going to say I mean let's be honest, you know, you you pointed anything.
In the or any piece of infrastructure in the open source world and that's literally how it's been, you know, you know there's a few people trying to.
To keep the lights on and keep things running and and they're all doing you know the people who are doing the back end work they're all doing phenomenal jobs.
I'm this is not me trying to disparage them at all this is me trying to promote them actually.
You know that the that these are unsung people that you know throw a coin to your sis admin guys because.
That the people run in the infrastructure do not get nearly enough credit.
The unsung heroes of this world. Yes, exactly.
Before we before we go on to other topics, can you call why exactly the VCS before Git was bit bucket or something right.
It's something it was bit something I'm forgetting the name.
Yeah, it is.
But why did it just get in get in what why did it get in with this.
So really what happened was the version control system that Linus was using at the time was actually a piece of commercial software and the the gentleman who was doing most of the who own the company for the software had given Linus effectively a perpetual license.
To this, which was great for Linus you know it worked really well for him.
Nobody else I think the carnal community had a license for this because nobody else when I see and at one point.
So you know being open source developer people get curious.
And we all know what happens when people's particularly open source developers are getting curious they poked at the protocol and figured out that the entire protocol.
If memory serves me correctly and Git is is a bit old at this point, so my memory might be fuzzy.
The entire protocol ended up just being like a like a tell net session that that was all plain text.
And open source developers being what they are when they see plain text started reverse engineering the whole thing.
And the the gentleman who.
And started like basically writing their own clients to interact with everything and so the company that.
Had the license to the original version control system got cranky and.
Things happened words were said and Linus watered off and came back with Git and.
Literally changed the entire version control.
It was later it was working.
So nice.
I mean I can't recall one comment in some ancient blog made whatever that the design rational behind Git was everything that subversion wouldn't be.
And it makes sense because if you take a look at it never really never never my memory consumption or not the whole thing.
Is very scalable and essentially you're looking at one of the biggest open source projects on the planet.
I mean I just checked out five dot 18 which is the latest I think release current and it clocks in at one to and one point to gigabyte.
Including the version history of said kernel sources.
Yep. And more than the thousand contributors glow on the global scale.
If my myself correct.
Yeah well I mean Git I mean Linus knew exactly how the community worked you know when he went into to figuring out how how to write Git.
So he he specifically crafted Git to handle a completely distributed workflow and how do you handle.
Just the scale of commits and polls and you know everything that Linux has to deal with.
And I mean you know in some respects Git was kind of very my opically focused on you know the Linux workflow.
But then you've got entities like GitHub that came and sprung up relatively quickly and started.
Trying to bring Git to everyone else you know trying to decouple it from just this tight focus on how the Linux kernel wants to develop stuff to you know how does.
You know not that no JS existed at the time but how does a random no JS developer interact with with Git.
And I mean you know all jokes aside that xkcd will point to for on how Git works which you can get out of every every problem you want with Git.
There's two ways there's the way that that takes a long time and takes a ridiculous understanding of how Git works and then there's just delete it and start over one of these is really fast.
But yeah like it's.
Git is a phenomenal version control system once you understand that Git is plumbing.
Yes and it just happens to be a distributed version control system after that.
Yes so Linus if you're listening I'm not I'm not sure if you are a job well done.
You must be one of our five distance.
Maybe that's even just a list of these things.
You never know.
Yeah this is the awkward pause that's going to be edited out.
Yeah you know some papers tough one you know exactly.
I mean if you stop the kernel the old work I guess.
So I had been doing it for about a decade and towards the end of my time working on kernel.org directly in 20.
So I left kernel.org in 2012 in 2011 August day before my birthday musically enough.
We had a security incident on kernel.org which actually kind of surprises me.
It's probably one of the biggest security incidents that's happened worldwide that had the potential to affect the most people and nobody knows about it.
And but from 2011 until today.
Yeah it's just we recorded.
That wasn't just the certificate issue was it?
No this was some attackers actually got into the the back end of kernel.org and had actually because of the way they they they had gotten into the system they were able to.
Not only get into kernel.org but into a whole pile of other kernel developers machines by bouncing through on the attack and.
It was a fairly far flung attack but I you know from the attack I spent what six to eight months just literally rebuilding kernel.org and towards the end of all of that.
Nope it's it's time to find something else to do. Let's define some other things and I wondered off and went to.
It took a vacation that that was that was amazing.
I don't think I had had a good and proper vacation in years before that.
And then wondered off to red hat and worked on some open ship stuff for red hat and then on to intel to work on some open hardware stuff and kind of been.
Running around doing all kinds of other stuff since then working in the open source programs office at VMware.
Trying to.
Work on you know object ability and I've done some answer work in all kinds of bits and pieces so.
Answer interesting because that piece of software of memory because it's correct is written in Python.
It is written in Python vast majority of it anyway so which brings me of course to most of it.
But Martin but not maybe why don't you chip in give me a fact.
This is also your favorite program in language if I was correct.
It's it's one of my favorite program languages indeed.
Give me a listing you still have.
Yes.
You're still welcome on the podcast.
Retired on us.
Oh he's back at Microsoft if if I'm completely mistaken.
Yes.
Yes.
Yes.
Yes.
Yes.
Yes.
Yes.
You mentioned to me that he didn't have enough time now that he was retired.
That's a good point.
Microsoft is back on the payroll and now he's doing funny enough Python work at Microsoft.
Yeah.
Funny enough that our company that bought GitHub a few is back.
It's more work isn't it?
I will admit it's fascinating seeing how how Microsoft has changed over the years.
You know going from the open source is the great evil too.
Honestly Microsoft is probably one of the best open source companies out there right now.
They have at least two or three core contributors to Python to see Python sorry on their payroll.
Yes correct.
I mean no the days of the Halloween documents are long gone.
And you're looking at what's 20 plus years back.
Yeah.
And blatant commercial teaser there is of course an episode or something like that.
These hits may have not been in the show notes exactly.
No jokes aside.
No I mean your episode spot on Microsoft has been.
It all came directly into existence when Satanya Nadela joined the board of Microsoft because he really turned the company around.
Being that closed source monolith to something called really open source friendly and geared towards flaws.
I mean if you take a look at any piece of commercial software at this point you know you will be hard pressed to find one that doesn't have some sort of open source library or component or interaction.
Even the people who have a completely proprietary operating system today probably spend more time interacting with Linux machines than anything else.
And they just don't even realize it.
So open source one.
Yeah about 20 years ago maybe 10.
It depends how you define winning right.
We had we had a guy on the podcast first year of it.
I don't know if you pull Ramsey is a bit of an open source communist.
The that the whole.
You know subscribe and everybody uses it but then the people that actually do although hard work like you know yourselves doing all this stuff behind the scenes on film or all then.
And many other things right it's then don't seem much of a reward for it if any of all this kind of the point he was making.
Yeah then our system always that going forward.
I mean there are obviously the projects that are or company backed you know like the media series and the.
Confluence and.
Open shifts yes.
Of course.
Yes.
But then you've got the you know the little thing that is sort of maintained by two people on any part time basis which makes up quite an important part of SSL communication and stuff like that.
You're not talking about open message I know.
So this is kind of yeah and say the same everywhere I mean lots of the products have tons and tons of open source.
It's a software in them.
Probably being one of the.
Yeah.
But even the things you don't think about that that look like you know commercial.
Or based on they have open source components and post-cursion around you and all sorts of stuff just to make them work to do the thing that they need to.
It kind of leads me to what's not what does it be and where do you in terms of.
Contributing to these projects.
I mean we're VMware does as kind of been in the periphery of open source almost since its inception which is kind of interesting because nobody ever thinks about or at least.
I used to didn't think VMware as an open source company but you know things like open VM tools and working in the virtualization stuff that's going on inside the Linux kernel.
Yes they they VMware has not participated in like KVM specifically but you know VMware has always been kind of pushing.
You know either like the Linux kernel or for tangential libraries to help support what VMware needs.
And even since I I've been at VMware we've done all kinds of things with like turn.
In everybody's kind of looking at the software bill of materials and containers and what's in containers and all that kind of stuff and.
VMware obviously is in the container space and so we actually started up a project called turn which is now part of the.
I want to say it's part of the CNCF but it's gotten kind of spun out into.
Underneath one of the other umbrella organizations and what it does is it tries to tear apart a container and tell you what's in it.
Which if you ever take a look at a container trying to tear apart and tell you what's in it is it's a shockingly hard problem to do because just the creation of a container is.
It's kind of destructive on the way a lot of people tend to write their containers and so.
Sorry CNCF sender of course for cloud native computing foundation of subsidiary I'm tempted to say of something called the Lewis foundation for the one listener who do not know what that means.
But you know the most essentially infrastructure organization I'm tempted to add that is out there in the in the in the brawl is community let's participate so if you have gain CNCF status that tells you something.
Yeah no I mean VMware is out there we've got.
I have literally lost track of how many GitHub organizations we have.
Involved but we've got ten zoo and.
You know we've got stuff in Ansible we've got stuff like all over the place like you throw a rock you you actually almost hit something that VMware has been involved with from an open source perspective these days and you know.
It's you know what is VMware do from an open source perspective almost everything we do has open source somewhere and so.
I think of one one one project that is actually mainly owned by me on our own control by me and when it's put that way which is the only one I can think of is rather than coup where they are for dominance maintainer but I don't have any others that you know about.
Pivotal all of the pivotal stuff is built on a lot of open source stuff got what else do we have that.
Of course now I'm going to have to like actually open up my GitHub account and see what we've all got for for organizations because that'll tell me.
I think we've got like 50 some different GitHub organizations so it's literally kind of kind of crazy how many projects were involved with you know we've got concourse and.
See Gemfire all the digital stuff.
Spring yeah all of the spring stuff like Tanzu and all the other Kubernetes related stuff that we're doing there like we're just we're all over the place for those few people out there who said using Java right.
I heard Java's still pretty big.
I don't know.
I haven't touched on in years.
No I mean it's interesting because there's this metric called Chiobe I don't know if that links about it's a dentist company called the importance of being earnest and they run a program service for the last 10 plus years maybe I'm wrong.
I don't know and for some reason in addition to Python Russ and what have you Java still features that is very kind of at the very top position but then if you take a look at any.
Viable enterprise software ecosystem Java probably would be among the five top program which is that they use so Java still has a stronghold in the enterprise world.
And I reckon that won't go away anytime soon.
Funny enough and so it was would be the frameworks that come with Java.
I mean if you just take a look at the ecosystem out there that there's out there in terms of maven repos alone or the maven repo let's put it this way.
I'm almost tempted to say it's almost comparable to something like pi pi or crates.io or something.
That of course being the rust package.
Really? You haven't mentioned that before have you?
What are you doing?
Yeah won't come to the rust market.
Rebecca if you're listening this is where you say Chris is a bit of a fan.
But I didn't want to drop your your flow and just go ahead.
Yeah but no I mean with VMware's all over the place like in some of this just comes down to the open source that we're focusing on.
You know does you know generally help VMware or it helps generally our interest.
I mean if you look at a company that's kind of where they're going to focus their open source energy.
I mean if you're an open source developer why do you do most of the work you do?
Well because something annoyed you and you're like no I'm going to go fix it.
Like half the half of my own contributions are gosh darn it this annoyed me and I went to fix it.
Yeah it doesn't work.
People joke that you know all you shouldn't code when you're angry and I'm like no most of my code is done because I'm angry at the stupid thing for not working.
Exactly.
Like gosh darn why didn't this work?
You know let me grab it.
Let me grab a slow channel and turn for enough but on the other side I mean VMware itself is a big benefactor of the open source.
I wouldn't say it was a smart landscape anyway.
I mean if I take a look at any of the big companies that I know running yes yes X and friends sorry yes X I think it's called these days.
Most of the of the gas operating systems would be Linux based.
I mean you look at any you know cloud on prem you know actually out out and somebody else's commercial cloud.
The vast majority of the workload is going to be Linux I mean you look at most IoT devices all Linux.
You know the vast majority of phones on the planet that are either iOS or Linux.
Like you know take a look at the container ecosystem.
Yeah 95% of the user lands inside the containers are Linux based.
More specifically most of them tempted to add Ubuntu based and Ubuntu marketing has done a fine job of getting them off that user land into these containers.
Well that that kind of brings me on to why did the environment come up with its own.
A version of Linux to run their container images in.
Well just to mention for people who don't know.
So Python or a photon yeah photon OS.
You know the reason VMware ran down that particular angle was it was just a we wanted to make sure.
From a VMware perspective that we knew what was actually in the container.
And when something went wrong we wanted to make sure that we had the resources and the capability of actually fixing it.
I mean you know vulnerabilities and what not happen in software.
I mean let's be honest if you write code you write bugs.
And.
Yeah if you can't write a bug in the software in the language you're working in that then is it actually a language.
But the what you need.
What you need more than anything in a software ecosystem is the ability to update things.
Whether that's your embedded device all the way up through your your big servers and your applications running on the big servers.
Or into the containers.
And so photon OS gives VMware the ability to actually own the stacks when something goes wrong.
We actually have the ability to fix it.
You know and we don't have to wait for somebody to fix it.
So let's say that you know some CVE comes out.
And canonical or Alpine or you know red hat or you know pick your favorite container distribution.
Here is slow on updating. Well what do you do?
Do you do you fork that do you try and work around it like there's so many of these situations where.
Kind of owning the distribution which for anybody who actually thinks that like writing your own and managing your own Linux distribution is easy.
I have commentary for you and it's not.
Before we before we forget the two listeners out there who don't know who do not know what photon OS is.
Maybe for those who know who are not working at the end where I'm.
Maybe to explain what photon OS is.
It's just a minimal.
You know, I'm a new tool set based operating system.
If you're writing it on you can I apply.
Well Alpine has a tendency to focus on a busy box tool chain.
Well set as opposed to there is a new tool set.
And when I say a busy box versus GNU.
Busy box being a very specific slim down binary that uses a smaller libc.
To to have a really hyper focused very small.
Set of tools.
So you know tools being you know CD CA zone.
Grab you know these really you know very basic tools that you would expect on a on a Linux.
And from the GNU tool set perspective.
The GNU foundation has a separate set of tools that most Linux distributions use.
And for completeness sake the BSD folks have their own set of tools.
And of course everybody has a tendency to say or to call that the same.
The applications that people want to run the same thing.
You know grab for instance except that busy box grip and GNU grip and BSD grip.
All different.
Yeah like if you've ever done any portable kind of work across these systems like.
Oh well I know that there's this there's this command line option to find or something.
And they're slightly different or you know minus I.
Does something on this one versus that one like it's.
They're all different and they're all just different enough to be annoying.
I mean as I just found out yesterday XR on BSD.
I'm talking about something called macOS now doesn't take minus small i but only takes minus capital i.
And then it's of course does take minus small i.
And this is I mean if you're writing portrait scripts yesterday absolutely.
This is where it gets annoying.
Yep and for those sort of people if you're running a for example you're open your your typical.
Router Linux is usually like open WRT WM and and so forth.
These to the system to be come with busy box busy box of course has the advantage of really being very,
very, very small typically aimed at embedded devices but come.
At the price of limited as in reduced functionality.
That's the trade off.
And sometimes massively reduced functionality.
Yes very much so.
But on the other side then you have on the glue side just call you till.
And call you till it's give you that full blown functionality that you have come to love and expect from a Linux system.
Indeed.
Yeah I don't mean that embedded device you don't expect to be doing much programming itself right.
So I'm like a container or something like that.
This is minimal.
No, this is why you're wrong.
Of course I want to have a full blown container runtime running on my router.
Emax yes.
Because I can.
Absolutely.
So I mean if you're listening there you go.
I mean come on you can run Linux on an ESP 32 now.
You can't run very fast.
But the thing is basically can run the container on that device probably not.
Well you can use ESP 32 has ST card support and fat 32.
So there you go.
You can now have a gigabyte of storage space with your what is it 128 kilobytes of RAM.
That's the content runtime run on that device I wonder.
If you poked at it right I bet you you could get it running.
I mean all it takes is is a kernel version newer than 2619.
That supports the groups name spaces.
We precise and then some dodgy software like cryo like.
Docker you name it and then you offer the races maybe.
So there you go.
There's a challenge for somebody get get a minimal cupboard running on an ESP 32.
Yes.
People are out there listening.
Do not try this with user but rather use a full lip see in terms of.
You want to go for the for the standard lip see that comes from blue not exactly from usual because.
News will might have some challenges supporting your container on time.
I'm just saying details may or may not be in the show notes.
But before we lose that last listener maybe we should go back to some more generic topics.
John I heard you agreed you didn't great things for the PSF as in the parts and software foundation.
Yeah so the PSF actually just about a month ago named me one of their their fellows this year.
Which is kind of an interesting aside because I remember the first picon actually went to which my wife was it my wife not at the time.
Was attending and I wanted into the hall and a friend of mine who's a kernel developer notice that I was there looked over and said wait a minute you're a pearl guy.
And nice fast forward you know a few years and now I'm a Python fellow but the marriage fixed that.
I'm sorry the marriage fixed that no well actually it's sort of dead.
The the reason the PSF named me a fellow was got out I don't remember how many years ago now.
My wife actually took over running the Python Google summer of code organization and for anybody who's not familiar with Google summer of code it's.
A program that Google runs has run every year where they pay people to up until this year it's always been students but this year it's open to it's a much broader set of people it's anyone who's new to open source to come and work on projects for open source projects for the summer.
And Google pays them to work on these open source projects and Python has had what's called an umbrella organization so it's an it's an overall organization where other Python projects who may not be big enough to get into Google summer of code on their own.
Can kind of come in they can hide under our umbrella and we kind of take care of the the high end administrative stuff we help guide them kind of help teach the these other organizations how to interact with Google summer of code and these other things.
And so I've been doing this my wife took over the running this on number of years ago and one of the first things she did after she took it over was realizing that I had some free time she said you're going to come help.
Well okay and and the reason she she told me that I needed to come help her was I had been working in Google summer of code independently.
On some of my own organizations for years as well so I had a lot of experience and so that particular year in Google summer of code when she she dragged me and a friend of mine his name is Mufflin.
In they we had 73 students under our umbrella organization which if you've ever dealt with interns having 73 different interns spread all over the planet and.
You know 140 some different mentors for those students it is a fairly big job to try and just keep on top of what everybody is actually working on and doing and so over the years we we've I she's been running it primarily and there's a number of other admins myself included who have been working on trying to make this a good experience for the Python organizations as well as the contributors every year.
And a friend of ours earlier this year or actually I guess late last year started pushing on the Python software foundation to recognize the the efforts and the work that we've been doing in with this particular program.
Because we've been bringing in a huge number of contributors into the these projects over the years and you know we've actually got a pretty good track record of and I don't have an exact number because trying to keep track of these numbers would be impossible.
The number of contributors who have actually stuck with their projects after the Google summer of code stuff and in fact we've got several mentors that I know of.
Who started out as being in the program getting paid by Google and now they're they they stuck with their project and they're back actually helping mentor students now and on top of that we've got a bunch of organizations that started under the P the Python Google summer of code organization and I've actually graduated into being their own organizations in Google summer of code so they you know they learn how we did things why we did things.
You know why why we we look for stuff and they they took all of those learnings and went off and they've gotten bigger and they're managing their own their own set of students and contributors now and so yeah the the board voted earlier this year and said yes this is this is a huge contribution to Python this is a huge contribution to the greater ecosystem yes these these gentlemen.
And deserve that this particular honor and so yeah we they they made us both Python fellows and you know I Python's language you know I I can kind of it's an enjoyable language but it's not my my favorite is language ever.
But Mufflin it's actually really kind of funny with him he's liver he's literally never even written hello world in Python and now that he's a fellow he's he's literally made it his mission to never write hello world in in Python.
That sounds like something he would write I'll have to mention that to him.
What is your favorite language if I had to like literally that the the language I will probably go to the fastest if I ever need something is bash.
I like rust but how long does it take you to get something working in rust versus.
Are you going to take that working in wash.
No, no we're getting somewhere because it's all kind of toys off where that needs kind of fast development but I'm talking about.
It just needs to work for on a temporary basis.
Because the fastest way to production is the temporary project that you never expect to work running.
No it's yeah sorry go ahead no I mean I I do a lot of infrastructure stuff so bash has a tendency to be.
The line is prevalent yes yeah that you just go and you grab you know do I need to install an entire rush run time to get something running.
No because bash is right there yes the problem is that the people discover that bash doesn't scale only about after a million lines of code.
Yeah there is that problem is that bash is.
Bash is great for that thing that in your infrastructure that you need to just get done now.
It's absolutely terrible for that thing you need to do 10,000 times across a million different machines and never mind.
I remember working for one company we built the entire build system in bat or in KSH.
So for those of you who don't know is it that's a quancho which is a cousin to ancient exactly.
Oh yeah like like it's not like son level.
Yes.
Back in the kind of 80s that is yeah.
And yeah before we touched upon further on the on the subject of.
Of has a program languages but maybe that was the time to pluck the geo the GSOC a little bit further because.
Okay you get cash from Google for spending a couple of months and Martin this is our plan B because a win.
So software and B we do not have anything to do over the summer anyway right so.
Let's go for.
Well this year it's actually more that the project.
Restructured stuff rather dramatically this year which should be very interesting and going to be a fascinating administrative problem for.
For the admins this year where the projects can be anywhere I think it's anywhere from like 12 weeks all the way up through 24 weeks.
And there's no set schedule for anything.
It's all worked out with the mentors and the organizations now so.
But you just mentioned very important term it's just not the cash it's also mentoring.
And if I take a look at the GSOC ecosystem some very important projects I'm tempted to add.
Came out of this or was supported by Google or have been supported by Google for example ffampag.
Was there at least for one or two summers.
Given the fact that ffampag is probably deployed in about 99.9999% of the network attached storages consumer based NAS is on my dad.
That's something to go by so but cash aside the mentoring part is I would reckon even more valuable to the people participating in this.
Yeah well I mean the contributors over the years what you know being able to come into an organization once a year and pitch a project and say you know look here's here's what I want to work on.
Here's how I think you know we can make you know ffampag or kde or gnome or you know xmpp or you know any of these organizations over the years.
How can we make you know this feature better this you know you know as I said before you know why do why do any of us do open source it's because something's broken and and we're we're angry at it.
Or we just want to fix and these contributors actually get a stage to come and say look this is what I believe is broken.
This is how I think I can fix it and in the time period a lot and the they get a chance to you know pitch that if the developer is think that they can work with the the contributor and over the summer then yeah they're brought on and they're given a chance to do this.
And not only do it but have the mentors attention to answer questions to be really hyper focused on trying to to work through this which is if you're new to open source the way the open source ecosystem works can be absolutely daunting.
Because people are literally just out there constantly turning through things like it can be if you're if you're not used to it or you just kind of look at it from the outside it's it's it's just constant turn and people you know discussing things and arguing this and you know this bike shed should be you know purple instead of red.
You know kind of you know sometimes and do you mention spaces and tabs are you.
I'm a big believer in the the tabs but you know we're I won't start that religious work.
But yeah like the contributors having access to the mentors and one and the mentors wanting these projects to get done this the contributor is wanting to work on these projects it's a huge boom to.
The new contributors and gives everybody a really good framework for trying to help bring more people in and I mean that's kind of what Google summer code was always about which was you know yeah the students get paid yeah the organizations get a a stipend for for mentoring the students.
But that stipend that the organizations get it's it doesn't even remotely begin to cover anybody's time for for the the 12 weeks of mentoring that the the contributors are going to get it really is you know get the contributors to the point where they're financially stable to actually work on this.
And then you know work everybody works together to try and get the the contributor to the point where they'll actually stick with the community afterwards is always the the ideal perfect you know a goal for all of these kinds of things so.
Yeah none of us are getting rich but but we we have had a lot of contributors over the years go through the program and like I said yeah a lot of them have actually stuck around with the projects or they they've stuck around at least in open source you know maybe not with that specific project but a lot of them have stuck around an open source.
Yeah that I'm not not super familiar with that I know the concept but I'm is this something where that let's say people work together on projects or are they all individuals working on their own fits that that interest them.
For the most part just because of the way the projects end up getting have to kind of get structured the contributor tends to be working on their own in terms of the Google summer of code stuff but they tend to be working in code bases where you know lots of people are working like if you're in.
Yeah I mean I'm going to blank on like a specific project.
Yeah yeah yeah FF MPEG I mean people are actively working on FF MPEG every day and the the contributor is working on a specific feature inside of FF MPEG and while that feature might be kind of isolated with what they're doing.
You know that like if they do a get pulled things are going to be changed you know every morning so.
Yeah so I see what you're saying earlier this is really getting people to navigate you know that those projects or or don't do all the open source when they're not used to.
Yeah.
Working in those kind of environments rather than as a team work on something that they're interested in yeah kind of.
Okay one thing I we kind of maybe test one earlier on the under container piece but I picked up a lot of your blogs a few months ago and the.
Would you like to discuss a little bit about the trace friendship project that you.
Oh yes trace.
I do like that being not not off the.
Chris likes to use all these things at the little possible but for me like my life a little bit easier.
Yeah well this.
Trace country is interesting so if you look at and this is going to take a little bit of background to explain why trace country is interesting.
So look at the Linux kernel over the years it is developed a rather rich set of tracing functionality built into the Linux kernel mostly to try and figure out what's actually going on inside of the Linux kernel.
And I say that but people have this vision that inside the Linux kernel everything is knowable when.
Anything is actually knowable inside the Linux kernel because there's so many different subsystems all interacting in completely different ways and the the ABI's inside the Linux kernel are always changing.
Because new functionality needs to be bolted in and this and that and so the tracing subsystems inside the Linux kernel are actually really good for trying to track down what's going on.
And of course standing for application boundary interfaces i.e. the interface that applications or kernel components used to interface to other components.
Yep.
And so the so the things like F trace and Perth and all these other tools have exist inside the Linux kernel.
Well there's a really interesting side effect of living inside the kernel is that the kernel is effectively one level higher from a permissions perspective than root.
Because the kernel literally has access to everything.
And so when you think about it there's fundamentally nothing different in tracing the kernel and what it's doing versus tracing is user space program that just happens to live on top of the kernel.
And so kind of where trace cruncher and a lot of the work that I've been working on lately is going is let's start bringing these tools that are down inside the Linux kernel.
And exist and can trace things up into to user space because they already can see everything.
And let's make them easier for developers outside of the Linux kernel to actually be able to interact with these and use them because right now or at least classically these tools you basically needed to understand how the Linux kernel work to understand what they how to get them to work and how to interpret the data that they were kicking back out.
And so there's a bunch of new libraries that are being built up in user space to kind of facilitate interacting with these things.
So trace command and kernel shark and some things like that with kind of the the long arch of where this is going is up into a project called trace cruncher, which is a set of bindings currently supporting Python for interacting with all of these layers down below it.
So that you can take a 20 line Python script and be able to start tracing things inside of our certain to trace things on your system.
Now, where this gets interesting because I've said a lot of mumbo jumbo here that that you know like your four users are probably going to just only sort of follow.
But when you start you know when you start looking at things that like containers.
There's they're very they tend to be very opaque because they run in their own namespace on the system.
And so poking at them and trying to debug them can be kind of come or something complicated.
And to the point where a lot of the time when somebody wants to debug something that's going on inside of a container, they actually have to instrument the actual container itself.
Now, if you've ever done anything in computers, the minute you instrument something is you've changed it.
You've changed all of the be potentially changed all of the behavior of the thing you've instrumented.
And this could be a problem, particularly from like if you're tracing down a race condition, just instrumenting it alone sometimes adds enough delay that the race condition goes away.
So this can be a problem.
And what happens when you get a container that you don't have the source code to for some reason, you know, you can't easily rebuild it while trying to get it instrumented can be really complicated.
So what you can do with something like trace cruncher is you can actually use all of the kernel tracing functionality to actually poke all the way from the kernel all the way up into user space and start looking at what.
That container is doing from what the kernel can see and the kernel can see pretty much everything.
And the best example of this I can give folks is a made up example of let's say you've got a container all it has is an engine X process in it and it's serving a static website.
Trying to make this as simple as it is as extremely possible.
And let's say you're the made up scenario here is that it's serving content really slowly and you can't figure out why.
And obviously this container almost has nothing running in it. It should just be lightning fast and you start digging you start digging you start digging you can't find anything about why it's taking so long.
But if you look at it from the kernel perspective because the kernel can see what's actually you know the engine X process and the name space and everything with trace country you can actually also see.
That underneath this entire container is a fuse file system and if you're unfamiliar with fuse it's a file system in user space and.
File systems in user space have a particular performance penalty because of the context switches that have to constantly happen to go from the user space side of the file system back into the kernel space side of the file system and it's just like basically playing playing ping pong as data goes back and forth.
And this can depending on your file system this can be a huge performance penalty.
And the you know some of the container runtimes use this file fuse file system to combine a whole bunch of different images into a single cohesive file system that the container actually sees.
And you know maybe that's where your your performance penalty is and if you were instrumenting this inside the container you would never actually see the fuse file system underneath because I would be outside of your scope.
The only way to actually see that fuse file system being even anywhere in that transaction is to look at it from the opposite end up and so that's where trace country.
And you can see all of that that fuse file system and everything in that particular interaction you can see all of that without doing any instrumentation to the container itself.
Which means you've you haven't changed the container you haven't changed the problem.
Well you potentially haven't changed the problem it's still possible like in race conditions that even adding tracing functionality will add enough of the potential delay that the race condition will go away.
But if that's your case at least you know it's probably a really nasty race condition.
But this is this purely am the container so there's no relation to more legacy approaches.
I'm them to like the extended Berkeley background filter or something called detraise.
Yep, you could use both of those with hypothetically you can use both of those with trace country we're still working out how the libraries get all the way back down from you know like Python all the way back down into the Linux kernel and being able to get that back out.
But yeah there's no reason that you couldn't use detraise or ebpf or you know any of these other in kernel tracing functionality to get information about about anything that's running on on your system containers just are really easy.
You know nice example because of the inherent problems and trying to debug them.
But in a hypothetical perfect world kind of the trajectory we would love to see is you know great we now have Kubernetes and we have the ability to trace you know a single system.
Why don't we start aggregating all of this data across like an entire Kubernetes cluster.
And now now you can see all of the interactions of all of the containers from what each host systems you know Linux kernel can see.
And you can start building up a really complicated graph of all of the interactions and how everything works and start seeing you know well I believe that this got put on to the network wire what actually got put on to the network wire.
You know what was received on the network wire you know how long did it take to actually traverse the you know those kinds of things and.
And this is all functionality in essence that that already exists that is already you know potentially even on the system.
It's just we need to to wrap it in such a way that people can actually get to it.
So that's kind of where trace renters coming at.
Certainly step up from qtl get folks.
But you see Martin this container thing would go away with this two weeks anyway so.
Well it's like the internet you know it's a one way maybe one month or something but not exactly but given the given behalf of the internet as I said I wouldn't get up my hopes to.
I don't know about the house on the house.
Cat no cat video networks are way sure way sure a bet I suppose anyway but that's but that's the point anyway doesn't matter.
But yeah that that's kind of the direction we're heading with with those kinds of things and.
I mean it's a very nascent you know kind of field is trying to figure out how to bring these things up and there's a bunch of different people coming at it from completely different angles and.
Open source perspective that's amazing because you know not only do you know that great we're solving a problem that other people are having.
But people are coming at this from different perspectives and you know maybe trace cruncher doesn't end up being the way that people go in the long run.
But trace printer will influence whatever that that final thing is if it's not.
And all of these are all of these other projects and all of these other pieces are going to influence how trace country works and yeah it's definitely a fascinating thing.
We'll put the link to the show.
For those two people who are interested in tasting the linens system of course.
Maybe we need a whole lot of sort of pass it to some time ago.
The code is not good I suppose.
Yeah yeah it's on github.com slash VMware slash trace cruncher.
For that and then a lot of the other pieces depending on kind of where you're at some of it lives on get dot kernel dot org and some of it lives and.
Some other some other repositories but it's trace country itself lives on up on get up and so.
And let me guess this this code is written rust rather than see or a mother language.
I was gonna say trace country is primarily see in Python.
I mean.
We're not opposed to somebody coming and working on rust bindings if somebody wants to come and work on.
I'm joking John I'm joking I mean.
I'm what I'm saying is patches welcome.
Now I give the fact that Python is actually has has has found its way into the basic kernel configuration functionality already anyway so no sweat there.
So I mean if you want to build your own kernel you when I have your Python you better have a Python interpreter at the ready because otherwise you won't be able to do this.
Yeah it used to be best but now people have early have moved on for enough.
Yes interesting very interesting of course details kids maybe show you never know.
Okay see you had another.
And no actually that was it.
Yes that was the rust question.
I just do check in about two years time maybe maybe the people who have come to the lights.
No I'm joking.
No I put a quest out of course why come because what I say.
Okay um yes so how do you see this going.
Let me talk to a little bit about what you've done in the past and how do you see this going forward at all.
We have this question for everybody.
The whole open source thing so having spent the last 30 40 years.
Yeah I mean open source isn't going away.
Fundamentally open source going to.
Well like I said it's like the internet you know it'll be gone on a week no but it's it's.
Hopefully everybody has seen the value in how open source works.
Whether that be from something like FFM peg to the Linux kernel.
To to you know Kubernetes or whatnot and if you like literally you you point to a successful company and they're using open source.
I don't think I think you would be hard pressed to point to any company.
No they're they are absolutely positively not using any open source.
And if you look at how the trajectory's been going you know it's literally just been more and more and more open source of people are using and consuming and contributing to and everything.
What I would love to see is more contributions back from people who are using stuff.
And I know that everybody says that but you know I know that there are projects and entities who are holding patches that they either don't know how to get upstream.
Or they think that upstreams hostile or something and I would love to see the ecosystem somehow figure out how to convince everybody that know that they want their patches.
We want to see how things are working. We want to help you make your stuff better because if you've already fixed a problem.
We you don't want 10,000 different fixes for the same problem. You want to fix it once that everybody doesn't have to do this again.
And so you know taking you know getting people's patches and getting their technical back would be would would be that like in my ideal you know future.
Because open sources like isn't going away it's only going to get more more prolific you know it's it's definitely interesting now watching how open sources changed in in the years since I started.
Just because you know in the early days we all kind of had to figure out how all of this licensing stuff worked and had to be fairly knowledgeable about stuff.
But now you've got folks coming up out of the universities or just getting into coding for the first time.
And they know they sort of know it open sources but they don't have like all the history and all the the the wise you know what where the bodies buried kind of stuff for all of this stuff.
And it's fascinating watching them come in open source from their viewpoint versus from what I remember kind of being at the same point.
And I think that's actually probably going to be one of our bigger challenges is just trying to make sure that we pass on the knowledge about what you know open source is how it works why it's important you know why various projects have gotten to where they are.
Being as open sources they are and so that people understand why open source is important but yeah I mean ultimately open sources and going anywhere you know someday somehow magically Linux is going to get replaced I have no idea what it's going to get replaced with.
But like like it's almost inevitable is that something will come along and disrupt the operating system space the same way that Linux did.
And for all I know there's someone out there right now who's literally just posted something on a random mailing list that said hey you know this is some toy project it's it's not going to go anywhere.
And that will be the thing that finally dethrone linux.
Do I realistic you know it's not like getting to where you know something as prolific as as linux or you know open SSL or anything like that it takes a lot of time and it takes a lot of trust in from the community that in the software itself and that just takes time.
So yeah I think I think open sources future is very bright and it yeah it's not going anywhere.
But yeah there's something what you mentioned just a moment ago is that yes people do fix bits of open source themselves and as you say they're a little bit wary to maybe contribute back or try and open the discussion with the project and stuff like that.
So maybe that's where there's a bit of work to do right now everybody you know it's just more happily engaging with open source project rather than just fixing bits and pieces.
Yeah no I mean it's fundamentally a hard problem because you know the hardest parts of open source are not the code it's not that not anything it's all people.
And when you get down to it an open source project is it it's literally just people not to make some really bad soil and green reference there but.
And it's hard to it's hard for people sometimes to to communicate because maybe this isn't you know English isn't their first language or whatever language the project is being done isn't their first language.
Text communication lacks any sense of nuance like you know we throughout this podcast you know we've made you know random jokes and and laughed about them but how do you put that kind of an expression down in a written communication as well and have the same meaning come across and so people have a tendency to like text communication sometimes has.
Absolutely ridiculous screw ups and misunderstandings and one of the things I've always said about open sources you know why do people in open source go to so many conferences well 10 minutes and a beer or a drink of your favorite choice can sometimes say you six months of angry emails back and forth.
And it's absolutely true because if you can sit down with some of these people and actually discuss the problem face to face sometimes you the problem literally goes away but if you try and explain it like on an email list or something things just get lost in translation and so.
You know particularly with with the pandemic and all all the the advances advances we've made in telecommute stuff I would love to see this filter into the open source world more just because I think you know there's things like big blue button and.
Yeah that where people can sit here and communicate more freely.
Yeah record podcast like you know that there's there's a lot there.
Mask credo wasn't it Martin.
That was a mask credo wasn't it it was yeah it's yeah I like the idea of not being a dethrone by something else.
Any time soon I suppose no it's not going to happen anytime soon but at some point you know some crazy new thing is going to come out and Linux isn't going to be the right right thing anymore.
But you know if you take a look at where Linux started and where it's at now like the evolution it's had from a from what it runs on it is astronomical like.
It's it's ridiculous how crazy we're Linux started at running on on the hardware that started on to now it's like it's literally running on Mars on a helicopter.
And on our containers.
Yeah and some random data.
Exactly maybe like it might even be as high as five.
Yes never mind these kind of small part of the computers.
Yeah like it's and it's hard to predict like you know I love the questions of you know where do you see yourself in five years I'm like I can't I can't even tell you what.
I think next week is going to hold let alone five years from now.
Like like the stuff stuff is changing so fast and so rapidly like you know containers you know I remember I was at a Google summer of code mentor summit and a gentleman walked up to me with a stack of middleboards that he had put together and he's like I think this might be the first.
Test cluster of Kubernetes and don't quote me on any of that because I don't remember if that was exactly how it was priced but he did mention Kubernetes and he tried explaining Kubernetes to me at the time.
And this is this is maybe 10 years ago or something like that.
And so I'm like you know yeah that that's interesting and I'm thinking you know well why wouldn't you do this with with virtual machines or something at the time and now look at a Kubernetes you know cluster containers are everywhere.
So yeah like it's hard to predict the future the only thing I can predict is that open source will be a part of it yeah yeah everything's going to change and open source will be will still be there.
That's something known in the trade as a safe back yes.
John that nicely leads us to something called the poxies and the poxies for those listeners who do not know it's something that we discussed at the end of every of each and every episode.
It's something that is worth mentioning over the last maybe one or two weeks that has come to once attention in terms of Martin normally discusses his new drug of choice.
I discussed movies TV series what have you but it really anything goes books what never mind or even politics I don't know so without further you know let's speak our guest let's speak our guest speak first what is your pox of the week.
Oh what are one of the things I've been working on if you could actually see my desk it's been.
I think you have seen my desk has been described as intimidating just because there's so many projects literally strewn across it actually I guess the project that's been the most fascinating to me lately is a friend of mine.
Who accidentally created an internet exchange here in the air out in the Bay Area has dragged me back into doing Linux mirroring and which I used to do with carnal.org and yeah so he's been kind of playing catch up on on all of the stuff I remember from having to figure out on on Linux distro mirroring.
And I've been diving into how to collect better statistical information about what people are downloading and and and what not and so I have this ridiculously messed up like engine X log files into.
To a sys log getting passed around eventually into a Python script that processes and shows it into influx and then I can get pretty graphs out of kerfana out of it and and because when these kinds of projects particularly with his name's Kenneth.
Because you can't just accidentally create an internet exchange in California you have to start a new project.
These kinds of things with Kenneth always spiral out of control and into very interesting places not only have do we have one mirror system but now we're literally taking these like little thin client things that you would normally just hook up behind a monitor.
And we're throwing like NVME SSDs into them and everything and then shipping them out to random internet service providers and having them hook them up into their on to their backbones that we can do these like little tiny micro mirror projects.
And so now we've got like I think we're up to four or five of these that are actually like live right now and so we're collecting all of this data back and I'm having to.
To figure out you know how do I convince influx to to process this data really well and you know get us some pretty graphs that don't take.
Excuse me like an hour to actually show on it's it's a fascinating little project and it's fascinating watching Kenneth you know.
We learn everything that like he'll ask me a question and I'll be like this is how it's probably going to have to go and I'll explain you know all of my stuff he's like okay I'll think about it and he'll go try a bunch of stuff you know he'll come back he's like nope you were exactly right.
I think that is exactly how the world works.
I take it to go the code isn't a good type yet.
No although I've got three or four people particularly from the all malinux project that have been hounding me.
Yeah who have been hounding me to to get this kind of cleaned up and published because they want the pretty grass to.
And I know when I yeah okay like ego and friends yeah.
And and at some point I mean you know towards the end of my my stay at Colonel or I actually was working on a project where we could collect better mirror stats from back from all the mirrors.
And so it's it's kind of interesting watching something I kind of left you know a decade ago suddenly cropping back up and being a thing again and kind of seeing it come to fruition in a completely different way than I was expecting it to come to.
So that's that's kind of way that's my random project lately amongst you know like 30 others.
Martin what's your pox apart from the queen has just passed her a certainial range ship whatever dominion whatever you want to call it or.
Apart from the kingdom in dominion for the last hundred years or something.
No no no yeah and I'm going with the movie this this time because it's something that I hadn't seen yet but it was actually very fascinating how that all happened.
And it's called zero doctority which you probably are familiar with.
It's funny enough I'm not.
Okay.
Can't you elaborate.
Well this is the story about how it's armed and armed and captured so.
Okay.
That's a TV series or it's a movie.
It's a movie.
Okay.
So it definitely was much.
It's not just a bunch of Marines goes away.
It's more about the whole build up to how they actually found themselves.
Okay.
No personal war from that suppose.
I can't possibly say.
I'm not talking about the movie now I'm talking about mountains of orphans.
It's more safe to say that details will not be in the show.
Okay.
Which leads me leads me leads me leads me to my pox is actually a podcast called commander heroes.
I run by certainly a barrack details where we show notes.
She for the last nine seasons.
It's a seasons.
It's a podcast run by redhead.
I used to run by redhead and she goes through a wide variety of subjects.
From programming languages right up to sub-securing all the rest of it.
It's probably worth listening to.
If you are not heavily technically inclined in terms of because.
She doesn't go into the nuts and bolts into the bits and bits and bars.
But rather kind of gives an overview of what's happening in particular.
It's your knowledge of your related to open source.
So details with the show notes as I said.
It's been good.
It's been going on for the last nine seasons.
The podcast according to her is taking a break at the moment.
Maybe red hat is tempted to revive it at some stage.
John, thank you very much for taking the time.
It was a pleasure.
Definitely.
And hopefully have you back in the near future to talk about more riveting open source stuff.
Be happy to come back.
Thank you.
Thanks a lot, John.
Thank you.
Bye.
This is the Linux in-laws.
You come for the knowledge.
But stay for the madness.
Thank you for listening.
This podcast is licensed under the latest version of the creative comments license type attribution
share like credits for the intro music go to blue zero stars for the songs of the market.
To twin flames for their peace called the flow used for the second intros.
And finally to the lesser ground for the songs we just use by the dark side.
To find these and other details licensed under cc.
Achimando website dedicated to liberate the music industry from choking copyright legislation
and other crap concepts.
Thank you.
Let me guess you are on post audio.
I am not actually I'm actually talking to you on my windows machine.
Just because it has a slightly beefier processor and a 10 gig connect wired connection into everything.
What's with it for windows?
It's a little operating system.
Nobody's ever heard of it.
I see.
Hello.
Welcome to names and laws season one episode 63.
Oh.
Oh.
Let's do once again.
We thought we didn't check with you on how many hours of time he has.
Yes.
Very important.
I was going to say I can it's what 11 now I can probably get to one without too much issue here.
So I've got at least two hours.
Perfect.
That means we can cut it down to 10 minutes.
What's just the average episode right?
I'm joking.
Well, I was going to say if I have to do this in 5 words or less.
Yes.
No, maybe.
No, we don't be caught.
You have been listening to Hacker Public Radio as Hacker Public Radio does work.
Today's show was contributed by a HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contribute link to find out how easy it really is.
Hosting for HBR has been kindly provided by an onsthost.com, the internet archive and our sync.net.
On the Sadois status, today's show is released under Creative Commons, Attribution, 4.0 International License.
Thank you very much.
