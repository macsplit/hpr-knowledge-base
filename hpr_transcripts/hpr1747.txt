Episode: 1747
Title: HPR1747: Scale 13x Part 4 of 6
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1747/hpr1747.mp3
Transcribed: 2025-10-18 08:45:43

---

This is HPR Episode 1747 entitled, Kale 13X Part 4 on 6.
It is hosted by Lord Rush and Blood and is about 53 minutes long.
The summary is 5 interviews from Kale X 13.
This episode of HPR is brought to you by An Honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's Honest and Fair at An Honesthost.com.
Greetings, HyperPublic Radio, Lord Drought and Blood at scale 13X.
And currently I am at the Pearl Mongers of Southern California Booth.
And who do I have the pleasure of speaking with today?
Hi, my name is Mark Nagel.
Mark Alpama.
Come over next.
David McDuffie.
Now, who are or what is Pearl Mongers of Southern California?
Well, Pearl Mongers in general is basically a collection of groups.
It all basically do a lot of pro-programming and, you know, pearl, you know,
pearl aficionados involved in either development for actual companies or projects
or just for fun.
And so all over the country, all over the world is Pearl Mongers organizations.
So if people are interested in the Pearl Mongers in general, where should they go to find out more information?
Well, the main website is pm.org, right?
Yeah, pm.org is the main site.
And it has all the local Pearl Mongers groups.
And I typically attend Los Angeles Pearl Mongers meetings, which happen either in
near the Santa Monica, Venice area or sometimes in downtown LA.
Now, what is kind of the goal that Pearl Mongers have in general?
I would say in general, just to spread the general knowledge about Pearl,
let people learn from each other, and just a general sort of club, right?
Just to make sure everybody who's involved in Pearl has somebody else talk to,
and their ears learn from each other.
Now, how long have you been involved with Pearl Mongers, and how long have you been using Pearl?
Personally, I've been involved with Pearl for, gosh, 20 years?
At least, I can't even remember.
Pearl Monger is not as long.
I've been involved in the mailing list and talking people and doing a lot of different, you know,
conversations and such, going to meetings hasn't happened as much.
And this is actually my first time hosting the booth with these folks this year,
so I'm trying to get more involved right now.
And what is it about Pearl that keeps you using it over, you know, some other, you know,
newer languages or different languages?
Oh, you know, there's so many different languages out there, and Pearl, you know,
Pearl, I think, got its roots as far as popularity back when the web was sort of young,
and people were using it for CGI development, and so it got very popular during that time,
you know, with all those people involved, you know, built this huge infrastructure
and ecosystem of modules and reusable code that makes it very, very nice to a program,
and Pearl itself is a very powerful language, so.
Now, one thing I'm aware of is Pearl has, I believe it's called CPAN,
was it kind of the first language to implement the idea of a language having its own repository
for lack of a better way to put it?
I'm not sure if CPAN was the very first repository, but it was definitely one of the most popular ones,
it may have been the first, you know, was it CPAN first?
I don't know, but it's, you know, it's still going after all these years,
and you know, there are some other sites which mirror what gets put in CPAN like Meta CPAN.
It has a slightly more modern interface, but, you know, CPAN by far is the largest, so.
The idea of CPAN basically, that's been duplicated by all the other languages
that they all have their own repositories, and they all use the same concept
or, you know, everybody gets to contribute and everything's well documented,
and you can easily install modules.
So, I think a lot of people think Pearl's sort of dying off, but it's not.
It's just, you know, there's a lot more language to choose from,
a lot of different things people are involved in, that point towards different things
we were talking about that earlier.
A lot of people get involved in Ruby now, because Ruby's used for Shaft and for Puppet,
and this just depends which toolset you are involved in.
So, how did you get started in using Pearl?
Well, my first exposure to Pearl was when it was Pearl IV, the 4.4.5 came out.
Yeah, look at him. He was like, whoa, and that was just amazing.
It was just an amazing thing compared to working in a shell script or sea shell script at the time,
which is pretty much what you have, or sad, or awk, and you got all the things you needed
or right there. And so, you know, pretty much from that point on,
it was anything of any medium to high complexity needed to be done in Pearl for Microsoft.
Now, if someone, you know, interested in getting it involved in using scripting languages,
programming languages, why do you think they should start with Pearl above any of the other options out there?
Well, I'm not sure that that's actually the best thing to say,
as you should say, I'm going to start with Pearl just because Pearl is good.
Pearl is good, but I think anybody who's getting involved in any project
should look at what they need to do that project with.
I mean, it may be Pearl, maybe into the language.
Like I said, there's a lot of choices out there. I guess, I suppose I should be here and say,
hey, we're in the Pearl booth and you should only do Pearl and all those other languages suck,
but I don't think that's true. I think every language has its place.
I wasn't trying to insinuate that. I mean, I was just talking more someone
who was sitting down for the first time trying to learn how to do, you know,
a scripting language in general. That's where I mean,
why should they choose Pearl over something else?
Not someone getting involved with the project, but...
So I have a couple of...
I mean, the reason why I use Pearl and I enjoy using Pearl is really twofold.
One is the freedom because it's a language that's very expressive
and it lets you do it however you want.
I mean, the motto is, Tim Toddy.
There's more than one way to do it, right?
So it's a language that doesn't get in your way.
There's not a lot of strict rules about how you have to format your code.
Which, you know, some people look at as a detriment because then all pieces of code
could be very different in how they're written and style.
But I like the fact that it gives me the freedom to write code the way I think,
the way I speak, and it supports very expressing code in a way that's very
close to natural language, right?
So I can code almost the way I speak and a lot of other languages
don't afford to be that freedom.
So that NCPAN, I mean, NCPAN is like...
It's awesome.
Yeah, NCPAN is very, very, very handy to have available.
Although, one of my things is I'm always trying to write my code
I don't have to rely on too many modules, but it's there for you if you need it.
When you're doing short utilities, you don't want to have to make it dependent on a bunch of modules.
But you can, and you can need anything special.
There's tons of stuff built into the language.
You know, it's powerful in and of itself, but then there's a bunch of modules to come with it.
And you can do many, many things out of the box.
But again, yeah, a lot of languages share those features.
If you're learning a language from scratch and you're like,
oh, I learned something interesting, I would choose Burl.
I wouldn't say you'd be wrong to choose another language,
but Burl is very expressive, and I would just be careful when you're using it
to make sure that you can read it when you're done.
Because that's one of the complaints people have about Burl is it's right only language.
Because people can do it in a way that is hard to read afterwards.
But that's just for programming skills.
That's not a language issue.
So, other words, document your shit.
Document your shit.
Yes.
And use good life variables and don't rely on the two character variables.
And, you know, there's all sorts of stuff you can do.
And that's what people don't like about Burl, I think,
is because it allows you to do anything,
so it allows you to do things badly or well.
So, you know, program well.
I was going to say, you know, for documentation purposes,
HOD is a great CPAN module, right?
If you sprinkle your code with HOD compliant bits of syntax,
you can actually get great documentation into your code and out of your code.
That's part of core now.
The only thing I wanted to mention was that, you know, Burl,
because it's embedded in almost every Linux distribution there is,
it can be found on all kinds of devices nowadays, you know,
from Raspberry Pi's to...
Raspberry Pi's?
Yeah.
So now, my synology housing, yeah.
All right.
Is there anything at this point you would like the HPR audience
to know that maybe I've missed in asking?
I cannot think of anything specific.
You have anything else for an ad work?
Try it out.
Purl6 should be dropping in December.
Wait, wait.
So the mythical Purl6 might finally actually maybe happen?
Larry has said it will be here in December.
For his 61st birthday, so it's verisius.
Also, there's the conference in Salt Lake City,
and you have the details.
No, the payments and it's Yopsy, right?
All right, so just...
The Purl6 or the Purl conference,
the details you have available for that Marco?
They are available at YAPCNA.org,
and that is yet another pro-conference North America,
2015.
It's happening in Salt Lake City, Utah, June 8th through 10th.
Okay, for this interview, but you ended this month.
All right.
And one question I was asked to ask,
what is your favorite tech senator?
My favorite tech senator?
I use them mostly.
Them.
All right, folks.
Well, this has been Lord Drockenblut at scale 13x
with the gentlemen of the Pearl Mongers of Southern California.
All right, ladies and gentlemen, Lord Drockenblut.
So it's scale 13x, and I'm at the key cloud booth
if I'm not mistaken.
Who do I have the pleasure of seeking with this afternoon?
My name is Chris Tickner.
I'm the director of marketing for key information systems.
And you, sir?
I'll...
Okay, we'll stick with just this one, gentlemen.
So it is key cloud.
I didn't get that incorrect.
Yeah, it's key cloud.
So key clouds are one of our products that we sell
to enterprise hybrid cloud.
All right, so what does...
What is the goal of key cloud?
What are...
You know, what are you guys trying to accomplish, exactly?
Let me bring in Clayton here, too.
Clayton.
Oh, wow.
So the question is, what is key clouds goal?
What is it trying to accomplish?
Oh, that's an interesting one.
So the goal is to provide cloud services for clients
looking for enterprise-class service.
And I'm going to put this...
Our target client is mid-market to large enterprise.
And then we're going to be shifting that
over the next few months to also focus on startups as well.
But it's to be able to provide reliable and secure cloud services
to that type of customer looking for.
So you guys are probably built on top of a lot of free and open source software.
What is kind of...
What projects do you guys use?
And what projects have you possibly created
and put out to the community?
Okay, so I was contributing to cloud stack,
which is a cloud orchestration tool.
And then we are actually in the middle of our open stack rollout.
One of the things we're doing this year is expanding
to get more open source software to run on IBM's power systems.
Because we think the chipset is superior to Intel.
And so we're actually going to be...
We're developing our own database as a service,
sort of like Amazon RDS, but based on the IBM power chipset
to provide better performance,
then what people would get on an Intel platform.
Now this new database is that going to be something
that's fast to some extent completely
or is it going to be something closed
and people will be able to use?
No, it's all...
So everything for us is open standards, open APIs,
and open-based.
So we're not developing a new database.
What we're doing is providing a way to provision and manage
database clusters and those things on top
of what we think is a superior hardware platform.
So Postgres, MySQL, MariaDB,
well not as much MySQL because of the split-away there.
But those open source types of applications,
Mongo, Cassandra, all to be running on this hardware platform
with using open stack and cloud stack APIs
to be able to provision and manage those things.
But everything is open standards basically.
We don't want to have any hardware
we don't want to provide during technology.
Now what projects have you guys created
any projects that people could go out,
grab and use themselves on their own systems?
Not yet, so that's part of what we're doing
with developing this platform for the database as a service
is to be able to have that and have that available in the community.
So people will be able to,
if they really wanted to be able to go out and recreate
or kind of recreate what you guys are doing,
but then you guys are kind of, you know,
you're kind of the Cadillac of the service
where people want a complete, fully integrated system
where they don't have to think about it.
They come to you guys and you help them make it all happen, right?
Yeah, absolutely.
So it would be, it's a mix, right?
So there's the part where we would provide
all the hosting and the management in those services,
or whether it's a client hits a certain scale
that it doesn't make sense for them to do a fully managed solution,
or if they want to do it themselves,
we'll provide them with all the same tool sets
and everything that we get it all.
Okay, and what do you think it is about the IBM Power 8, you said?
Yeah.
What makes that better than just using,
you know, commodity, Intel or AMD?
There are a number of things.
One is they have an alternative to FPGA,
which is much easier to develop on called Cappy.
So if you're doing, yeah.
And what's an FPGA for people who may not know?
The field program will get gateway interface
and it's a type of hardware interface,
kind of like what you would use
if you were building something to be spun on the silicon,
so instead of using a generic processor,
like you would with a regular CPU of some sort,
if you wanted to develop something in ASIC,
FPGA is a way to program with that type of hardware level speed.
IBM has their alternative to that called Cappy,
which is also open standards-based,
and open source and available.
So one of the reasons why we like the Power 8 chipset is that,
and the other is from a hardware architecture standpoint,
on a standard commodity box,
you have what's called an IO bridge.
It sits between the memory and the processor,
and you're limited to 16 gigs per second on that IO bridge.
In the case of the power systems,
they have removed the IO bridge.
So you go from 16 gigs per second up to 96 gigs per second.
And that's really important when you talk about in-memory databases.
So things like you might do with Redis,
or Cassandra, and MySQL, or Mongo,
where you're going to have a lot of table stored in memory,
you get much faster transactions on the power system.
So for us, for those types of database workloads,
that are very memory intensive,
power provides a much, much better price performance ratio
than on the top.
All right, and if people want to get involved,
or learn more about key cloud, where should they go?
They can just go to keycloud.com,
or to the keyunfo.com website,
and they can contact us on the phone numbers there.
All right, now I noticed at your booth,
you guys are showing off another really interesting piece of technology.
What are you guys showing off today?
Yeah, so we have a pair of Oculus Rifts that are up.
We thought it was just a really cool technology,
and we've always been a big fan of it.
I was a contributor to the original Kickstarter project.
So we've got two of the dev kit twos up and running here for people to try out,
and just see what it is.
I think there's some pretty cool implications for technology beyond just gaming.
But it's just great as entertainment,
and we just want to...
It's just a blast.
It's just to give people out here now some fun.
What do you think of the fact that the DK2 is basically,
if I remember correctly, a Galaxy S5 minus the phone components?
If you open that up, there are actually a lot of the pieces that's...
It's actually the same motherboard that's in the Galaxy S5, I believe.
I mean, there were...
One of the main differences between DK2 and DK1 was...
Well, the board aside, actually, the primary difference was they switched the screen type
and they went from LCD to AMOLED,
and that let them get much better tracking,
and it got rid of a lot of the problems of simulation sickness.
But, yeah, I mean, it shows in the fact that Samsung has their own product
they're coming out with.
I mean, we're going to see, you know, multiple versions of these things
as different manufacturers come out with their own.
I'm really curious to see what Razor does with theirs,
and all the different headsets.
All right.
Anything you want to add, or you think I've overlooked for the HPR audience?
No, I think it's pretty good overview of what we're doing here
and what we're trying to represent,
and our support of the open-source community, and...
All right, well, this is Lord Dr. Blue.
It's at scale 13x with the key cloud booth.
Thank you.
All right, Hacker Public Radio.
This is Lord Dr. Blue.
It's scale 13x still,
and currently I'm at the Girls in Tech LA booth,
and who do I have the pleasure of speaking with today?
Hi, my name is Muriel Perez,
and I am the managing director of the Los Angeles chapter of Girls in Tech.
I do this on a volunteer basis,
and by day I work as the IT admin and a manufacturing company.
Now, what is Girls in Tech, and what is its goals?
So, Girls in Tech is a global nonprofit.
Each chapter operates to address the local tech community,
and we're basically here to create a positive space for women
that are either working in or interested in technology.
And so, we'll do that just by bringing this community together,
hosting everything from social events to tech workshops,
but a big part of what we do is bringing that community back to mentor
and work to empower young girls of all ages
to pursue interests and technology.
And what do you see as being the big hurdles right now
in getting more women involved in tech?
Well, I guess I'll kind of address this in a slightly different way,
more than the hurdles,
because there are a lot of different reasons
and a lot of different backgrounds as to why we have,
we don't see as many women in tech,
and I think what we're looking to do is just encourage more women
by having this space where people can go and feel comfortable.
It's like, for example, if there's a group of pick some topic
that you've got absolutely no interest in,
like MMA or horse racing or whatever,
if you go into this group and you don't have anybody that you can relate to,
then you're less likely to go there.
So, if a girl, I guess, backing up if a girl never sees another woman
that is a coder or an engineer or working in tech
or working in IT or working in system security,
there are a lot less likely to be able to pursue that
because they don't identify with anyone in that role
or they don't understand that.
So, the more we can provide positive role models for girls of all ages,
the more we can encourage them to pursue technology when they're left.
Now, at one time, women seem to be much more important
than computers in programming,
especially when you go back to some of the earlier days,
and especially if you look at someone like Ladiator Lovelace,
but it seems like there was a sharp decline in that.
What do you think might have caused that decline?
You know, I guess maybe going back to just the media and perception.
If we don't see a lot more of this,
I mean, there was a lot of really awesome stuff with women in computing
and you saw during the war,
and when computing was first getting started,
a lot of engineers and a lot of programmers
that were involved in hands-on in that space.
But I think not having enough visibility for women
that are in the tech space to be able to encourage women
to both stay in there and also more girls to pursue that.
Kind of impacts us just mentally by forming these biases
that I don't see as many women there,
but people just are sort of internally less likely
to be able to pursue her for that direction.
So if I'm understanding things right,
and a lot of ways you see that it's a perception issue
is one of the biggest problems.
Yes, I think you could say that that's one of the big things.
And now, what would you say about the way some people
are portraying current climates?
And to use the really one of the worst examples right now
is the whole game or date situation
and how in other cases,
it'll seem like a woman who is involved in tech
or in different things.
We'll get a lot of questions that a man who said the same thing
would never get those kind of questions.
So I guess backing up so I understand the question.
You kind of wanted me to address just what was going on
with game or date and a lot of the current attitudes
towards women and technology.
I was just using game or date as an example,
not per se then, but just how some people seem
to be really pushing the idea that there is just
a very hostile climate towards women in technology in general.
So in certain ways, yes,
there can be a hostile space,
but it's one of those things that it's very dependent
on personal experience.
So there are some women that have experienced a lot of hostility
and a lot of negative,
a lot of negativity that have gotten trolled and taken down
and death threats and all these crazy things online.
And there are other women that haven't.
And I think what is important is for the community together
to be able to address and support people
across the range of experiences.
So to support women that have seen very hostile feedback,
have gotten really, really negative comments online
and in person and all of this other stuff.
And then also the people that have had positive experiences
if that makes sense.
So I think it's more like as a community,
can we come together and make sure that if there are instances
of negative things happening that they're addressed appropriately
so that they continue not to happen,
or that if people are being treated poorly,
that it's either addressed at the source of that bad behavior
or wherever it's coming from,
if we can kind of target that and stop what's going on.
All right.
Is there anything else you would like the Hacker Public Radio audience
to know that maybe I've missed at this point?
No, I think that we've covered that.
I think the big thing is that if you are interested
in getting more girls or women in touch
to just do some outreach to your community,
to girls of all ages, to schools,
to work hands-on with kids to be able to encourage
and excite them about technology.
There are a lot of fun things about technology.
There are some negative things that happen,
but there's also a lot of positive stuff that's out there.
If we focus on a lot of the positive things
and also try to battle as a community
against the negative stuff that's happening,
then it'll be a better place for everybody.
Now, what would be ways you might say are good ways
to help excite a younger generation
about being involved in technology?
Just having group events, hands-on events.
You know, there are games are a really great way
to get kids excited.
I think bringing kids into tech events like scale
so that they can see what's out there and what's available.
And maybe one other thing is break the stereotypes
of, you know, this is for boys, this is for girls.
That would be it.
Yeah, I mean, there are a lot of stereotypes out there
that are like, it's just the mass marketing medium
machine kind of pushes a lot of that stuff.
Everything from the types of toys and the types of activities
that are marketed towards girls versus the stuff
that's marketed towards boys.
I think if we can get more things like Goldie Blacks, for example,
which encourages girls to start learning how to engineer
and if we can get other things like that out there
where girls and boys can work on tech
and on programming and on code.
Now, see, when I was younger,
I can remember a time when Legos were Legos,
Lincoln Logs were Lincoln Logs.
There was no separation of the idea
that this was a boys toy or girls toy.
And in some respects for me,
and I'd love to hear a response to this,
seeing that they now create Lego blocks for girls.
The only difference is, oh, they're pink and frillian.
You know, it seems like there is this bizarre thing
where all of a sudden it has to be made,
what some people would say as a feminine color
or something like that to be a girls toy.
And I just don't understand it
and maybe you have an insight on it that I'm missing.
You know, it's really a funny thing.
And I think it's kind of the way that just the media
has over-commercialized and market of holidays.
For example, they feel like they have to
brand it in a certain way.
And so now, when you get these companies coming in,
they're like, oh, we're going to market something to girls.
It has to be pink.
You know, like you said, it has to be princess
or it has to be frillian.
Which, yeah, there are a lot,
like, I love pink and all of these other things also,
but it doesn't have to be marketed as pink for me to enjoy it.
And so, I think if we do have things that are marketed
as unisex, that would be a great thing.
I think the problem is just that there's a lot of stuff now
that gets marketed towards boys.
And so, sort of the contrast is, let's make this stuff pink
to be a girls toy.
But I think we can definitely have a lot of toys
and activities out there that are marketed towards kids.
That girls and boys can play on or work on together
and that it doesn't have to be segregated or separated out
into the sort of female space or a male space.
It's sort of a community space where people with shared interests
can get together.
And if that means that girls and guys
are into computing and tech and LEGOs
or girls and guys can be interested in my little pony
or girls and guys can be interested in princesses,
it's across the board.
These are things that don't necessarily have to be gendered
one way or another.
It's just about what are you interested in
and how can we support you pursuing that interest?
All right.
Well, I think that covers a lot of different grounds pretty well.
Is there anything else you could think of you
would like to say before we finish?
No, just thank you for your time and for thinking of us
and check us out online at girlsintechla.org.
And if people wanted to reach Girls and Tech
in general, where would they go?
The main Girls and Tech website is at girlsintech.org.
All right.
Well, this has been Lord Dracomglute at scale 13x
with the wonderful ladies from Girls and Tech LA Branch.
All right, Hacker Public Radio.
It's Lord Dracomglute at scale 13x still.
And I am here with SnowDrift.coop or co-op, sorry.
And who do I have the ability to talk to?
This is Aaron Wolf.
I'm the co-founder and, I guess, main project manager
of SnowDrift.coop.
Now, what is SnowDrift.coop?
What's its goals?
What's it trying to achieve?
We're building a cooperative web platform for the community
to help projects that are freely licensed
to the community.
So, what is SnowDrift.coop?
What is SnowDrift.coop?
It's an opportunity to help projects that are freely licensed
reach their potential.
So, unlike proprietary projects that have a business model
in which you can do pay for access or do things like
put ads on everything, freely licensed projects
are public goods that everybody can access
and everybody benefits from the results and uses freely
regardless of whether they contributed to the development.
What is the good dilemma of how do you fund such projects
when everybody gets the results no matter what?
Well, in a lot of some newer cases,
crowdfunding seems to be a popular method
and, you know, the donation model.
What sets SnowDrift.coop apart from, you know,
a crowdfunding model or the traditional just donation model
selling services around a product.
We're adding to that by kind of pushing to the next level.
Those, the term crowdfunding in general,
means just that you have a lot of people, a crowd,
and they're funding.
And so, in that sense, we are crowdfunding,
but we're not crowdfunding like Kickstarter
where you do a one-time fund drive.
There's a number of problems with such one-time fund drives
where you have an artificial deadline and some arbitrary goal
and if you don't hit the goal, you get nothing and it costs a lot.
You do a lot of hype and maybe some people don't even hear about it
by the time the deadline comes.
Those types of things are really good for one-time initiatives
or for getting launched.
In fact, we don't have our own system to use yet
because we're not fully launched, so we ran our own Kickstarter style
threshold campaign last December, which was a success.
But it was a lot of work.
And it's not a very sustainable way to have a system working.
So, when people do sustaining pledges
where they contribute on an ongoing basis,
there's more accountability and you generally have a more reliability as a project.
But still, even with that type of donation or any type of simple,
one-person unilateral donation,
it doesn't solve this dilemma.
And so, the public goods challenge
is something we're talking about as the Snowdrift dilemma,
which is something we learned about from a game theory.
Essentially, there's a snowdrift blocking the road,
it's obstacle that we need to clear,
and the question is, who's going to do the work?
Everybody benefits from the road being cleared,
and maybe everybody would like to wait and see if somebody else will do the work to clear it.
At some level, it's about cooperation,
which hence, snowdrift.coop,
and in conjunction with that,
we're also running as a nonprofit cooperative as a platform.
So, our solution,
so in part, it sounds like you're creating more of a membership style
means of funding projects.
But membership style is good in and of itself,
but it misses what Kickstarter style has,
which is a mutual assurance in which we say,
I'm not just going to go it alone,
I need help from everybody else to make this worthwhile.
So, we're a combination of both of those in which I say,
I will contribute a little bit each month
for every additional person who will contribute with me.
So, at a minimum level, I might say I'll contribute a tenth of a cent
for each person who's contributing with me.
There's a thousand people I'll put in a dollar,
but if there's five thousand people I'll put in five dollars.
When the rest of the community joins me,
it's more worthwhile for me to put in what I can,
because together we make a bigger difference.
Now, would people still have the option to say,
I just want to donate five dollars a month, five dollars a year.
We don't stop any of the projects
from using any traditional funding system
as long as it's consistent with being freely licensed.
So, we don't want pay for access,
but if they have a service-based model
or they have a donation button on their website,
we're not stopping them from doing that.
But in our system, the message is,
your donation will make a bigger difference
if you tell the rest of the world that you want them to join you,
then if you just give all you can right away.
If you give all you can right away, then it's not an incentive.
It doesn't provide that invitation to the rest of the community.
We need to get freely licensed projects like free software
supported by a lot more than the developer community.
We need to reach out to the general public
and get a lot more people involved in supporting these projects
that we can all then benefit from.
Very, very interesting.
So, what level are you guys up in an operational two at this point?
We are testing with fake money at the moment.
We have a few hundred people who have been involved in the community
in a loose sense and a handful of active volunteers.
And we're talking with lawyers and accountants right now
about getting all of the details for handling money in place.
And we hope to be actually operating probably in the next few months.
And what license are you guys using for the platform you're building?
We are licensed under the Gnu Aferro General Public License, the AGPL.
And our work that is not code but is like the wiki writing pages on our site,
the writings and illustrations are under the Creative Commons Attribution Share Like license.
So those are both strong copy left licenses.
But we are deferring to the existing organizations for the licenses that projects can use.
So any project that uses a license accepted by the FSF or the OSI
or the definition of free cultural works or the open definition from the Open Knowledge Foundation,
any of those accepted licenses will be fine for the projects that want to use the site.
And why did you guys choose the AGPL V3?
We wanted to make it sure that everything we were doing would be usable for everybody else
and consistent with our values for free licensing.
But our interest is in protecting that freedom so that when anybody else were to use our work,
they would be still contributing to the commons that we could all benefit from
and that respect everyone's freedoms.
So, and also the AGPL V3, say someone creates a similar site to you and someone joins that,
they can still get access to the code that changes someone else makes on another site.
Sure, this is a little bit of a simplification but I think of it as the GPL has a loophole.
The GPL says you can use this code but you have to keep it free and you have to keep respecting the freedoms
for other people you distribute the code to.
But people can say, oh, I didn't distribute the software to you because I just let you use it over a server.
So the aferro clause closes that loophole and so it does a better job of protecting everyone's freedoms.
All right, now is there anything you think I missed at this point that you would like the EHPR audience to know?
Well, the main thing to know is that anybody who likes what we're doing or even has constructive feedback
that they would like to share, you can come visit snowdrift.coop and we're on freenode.net IRC at snowdrift.
So come say hi, we're very welcoming community and we really are hoping that we'll have some real impact in the world.
So we hope people help us get there.
And if people want to, what kind of help do you guys need right now to get up and operational?
Well, the most valuable help is probably helping us code the website.
So if you want to learn or know already some Haskell because we're written with the Yasod Web Framework which is written in Haskell, that's one way.
But I'm not a programmer myself and I've been doing lots of work on writings.
We can do translations to different languages.
We could have legal help with some of the finances and the organizational things, handling volunteers, welcoming people.
Even there's a lot of different things that are happening with building this whole community around this project.
And if people want to get involved as you said, IRC and the website, so people are understanding fully, it is snowdrift.coop, correct?
That's right.
.coop is a sponsored top level domain.
It's exclusively for legitimately cooperative organizations, which is what we're doing.
So everything we will do will be run by the community as a democratic fashion, as a cooperative.
All right, well, this has been Lord Dracabloot at scale 13x with Aaron from snowdrift.coop.
All right, this is Lord Dracabloot at scale 13x and I'm at the Saltstack booth and who do I have the pleasure of talking to?
My name is Seth House, I'm an engineer at Saltstack.
All right, so for people to fill people in, what is Saltstack?
Salt is a high speed communication bus that is something you would use to manage your infrastructure.
What that high speed bus allows you to do is things like remote execution, things like command and control, things like configuration management, things like high level orchestration
where you need things to happen in sequences of steps or optionally fail uncertain things, things like reacting to live events and taking either corrective action or whatever else you need to do.
It is a high speed communication bus that is very open-ended and what you can use it for.
All right, so Salt kind of falls into the recent DevOps movement.
Other tools are out there in that space and what sets Salt apart from the others?
Salt has an awful lot of overlap with a lot of the tools in this space but it's a very different kind of tool for the reason that we've got this communication bus at the core.
So although Salt overlaps with tools like Puppet or Chef, Salt also works very well with tools like Puppet or Chef.
If you are an existing puppet shop, for example, you use Salt to orchestrate puppet, you use Salt to integrate with puppet into that existing tool.
So that is one place that Salt differentiates and that it integrates very well with all sorts of systems.
It's also a different approach to solving these sorts of problems because once you have a finger on the pulse of your infrastructure, you start to approach problems differently.
It kind of unites things like data discovery and command and control with things like monitoring or auto scaling and that sort of thing.
All of that is within the curvy of Salt if you don't mind me being too open-ended about it.
Oh, by all means, as verboses you want, the worst that happens is I fall asleep with the recorder held up in the air and you get to keep talking.
I like it.
Now, why would someone get involved using something like Salt?
What would be the motivation for someone to use something like Salt in general?
So it usually starts with a problem that needs solving and oftentimes the considerations that go into that problem are things like whether or not the software is open source, whether or not it can be modified,
whether or not you can customize or build additions on top of it.
And Salt facilitates all of those things.
It's got several APIs, both for getting data into and out of Salt.
It's got a module system, so the modules that Chippa Salt's core are on the same footing as modules that you would write to solve, a custom problem if you have a custom problem.
It is a very, very pluggable system by design and a very scalable system by design.
So, yep.
Well, I guess the question, and I phrased it a little bit because I don't think I quite got the answer to what I was looking for.
Why would someone start using Salt instead of just configuring a machine by hand or custom shell scripts?
Oftentimes, that's the place that most people start, and oftentimes what people run into when they do that are they get tired of having to build out every custom little thing.
Every single time they want something that has been pre-built out for them, or oftentimes they run into problems with scaling.
You know, a custom shell script or a necessary to an Apollo works when you've got five servers or ten servers.
Once you start to get above that, then you're in for a bit of a wait.
If you're trying to configure a machine or if you're trying to pull data for a machine, then that process takes a little time.
One of the neat things about Salt's pluggable interfaces is say you did start with those things.
You can use Salt to call into those existing scripts, those existing processes.
And you can phase them out over time as you phase in Salt.
When you go to build new things, we've got pre-written modules and formulas to work with existing tools, both to get data out of them, to get data into them, to configure them.
So Salt will help you avoid having to reinvent that wheel yet again.
Salt can almost in a lot of ways turn the machine you're configuring into code.
Yeah, that's a nice way to say it.
We configure Salt by putting together data structures.
And how you generate those data structures is entirely up to you.
If you enjoy writing YAML and Ginger, that's our default.
If you'd rather write Python, that's easily done.
If you'd rather write Ruby, it's not out of the realm of possibility.
So we aim to be flexible.
And yeah, we say infrastructure as data.
And that is both incoming and outgoing.
You configure Salt using data.
You pull data out of your infrastructure into Salt for things like reporting or that sort of thing.
And Salt can also help with security in your infrastructure.
Can't it by helping, by making things more automated, more programmatic, and more repeatable?
Exactly right.
Having your systems set up to a known configuration, knowing that they're configured with the latest version of OpenSSL,
or that sort of thing, is definitely within the purview of Salt.
And not only making Salt set it up that way, but purring your infrastructure to find out what is vulnerable.
You know, the latest exploit comes out shell shock, or heart bleed, or something like that.
Purring your infrastructure is as simple as running a single command.
If it then goes out and returns results almost instantly to you about what is vulnerable on your infrastructure.
PCI requirements is the same kind of thing.
You know, ask your infrastructure what is its current state, what it's vulnerable to,
and get a report back immediately that you can take some action on.
And speaking of states, isn't Salt capable of going through at a set interval
and making sure a machine is still at the state you set it up?
Yeah, well said, we're pretty open-ended in that too.
So you can set Salt to run on a schedule.
So you can say every 15 minutes just in four states, make sure it looks like I've already got it configured.
You can run it on demand.
So you know, you can do it when you want to, or you can do it in response to something.
So you know, spinning up a new VM, for example, you can kick it off right then.
You don't have to wait for an interval.
You can configure the schedule to run on the central server, the master.
You can configure the schedule to run on the minion.
So it just depends if you want it to be pushed, or if you want it to be pulled.
In addition to that, you can kick off that process in response to real events.
So you can monitor your web servers.
And you know, if load on your web servers, you know, load on several of your web servers,
gets above some threshold.
You can then use Salt to kick off some corrective action, like to bring up a new machine
and bring it up to a new configuration and tie it into the load balancer.
So someone could say, you know, to take something that doesn't quite happen like it needs to.
If someone were starting to get slashed out, they could automate a system to roll out extra machines
added to the load balancer to go get slashed out the finger and say, I'm not going down.
Exactly right.
It's just a matter of putting the reporting in the other place that you want to report.
Are you interested in load?
Are you interested in users coming through the load balancer?
And then writing a small script to aggregate that data,
and then make some determination based on that data.
So, you know, if that data, you know, has certain properties,
then kick off this process or kick off these series of processes.
Now, what technologies are Salt built on?
So, Salt itself is written in Python.
And for the transport layer, by default, we use zero and few.
If you'd rather use Salt without the additional agent and you prefer to stick with SSH as your agent,
we've got SSH as an optional transport.
All right.
And if people want to get involved with Salt, learn about Salt, where should they go?
So, saltstack.com is our main website.
And from there, we've got links to our documentation and to our GitHub page.
Salt is all open source.
It's Apache 2 on GitHub.
And our documentation has contributor guidelines getting started.
We've got Pound Salt on IRC on pre-note.
And it's just as simple as diving in and scratching your own itch.
All right. And is there anything at this point you think I've missed
that you would like the HPR audience to know?
It's not widely known that Salt is such an open-ended tool.
We're often lumped into the same category as similar tools.
But it is a very open-ended tool and it's very good at solving problems.
So, I would invite people to dive into it and see where they can integrate
with their existing tooling and what problem salt can solve for them.
All right. And I think that's all the questions I have.
Is there anything further you'd like to add?
Scale is awesome. It's one of our favorite conferences.
It's been very good to us.
All right. Well, this has been Lord Drockenblut at Scale 13X,
talking with the folks from Saltstack.
You've been listening to HeckapublicRadio at HeckapublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
HeckapublicRadio was founded by the digital dog pound and the infonomicom computer club
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly,
leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released under Creative Commons,
Attribution, ShareLite, 3.0 license.
