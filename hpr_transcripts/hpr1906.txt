Episode: 1906
Title: HPR1906: Apt Spelunking 2: tvtime, phatch, and xstarfish
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1906/hpr1906.mp3
Transcribed: 2025-10-18 11:01:44

---

This is HPR Episode 196 entitled Up to Pelunkin 2, TV Time, Fash and Next Halfish.
It is hosted by Windigo and is about 18 minutes long.
The summary is, Windigo digs through his software repositories and finds another couple of gems.
This episode of HPR is brought to you by AnanasThost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's honest and fair at AnanasThost.com.
Why hello, this is Windigo and welcome to the second installment of Apped Splunking.
And that's APT, not App, not an App Store.
Anyhow, if you missed the first episode, I should probably explain what Apped Splunking
is.
Apped Splunking, which is a hard to pronounce title, I'm starting to regret that, is the
act of aimlessly searching through your distributions software repositories and picking out the gems
and the rarely used programs that you find that you find useful.
I call it apt splunking because I use Debian and apt is the Debian package program.
You use apt to search the package repositories for Debs.
And I also call it apt splunking because no one uses the lesser known packaging systems
like RPM and Pac-Man, right Lyle?
I'm going to cover three more of my favorite discoveries in the app repository, ignoring
Ken Phalan's protests that each should become their own show.
Considering the Debian reposal loan contained 43,000 packages at last count.
At three packages a show, that would still be over 39 years worth of shows for every single
day of every year.
Having HPR only publishes on weekdays, and there are other hosts who are queuing up to
contribute fairly often, I'm certain that I could do as many episodes as I like before
ever hitting well-known applications or libraries.
Speaking of hosts queuing up, have you submitted your HPR episode this year?
If you're listening to this, then you are part of the HPR community.
You are a HPR community member, you're a listener.
And that means we need your help.
How about contributing your first show?
There are several lovely topics to choose from, like what is in your daily carry?
What do you keep around when you're going about your life?
What brought you to Linux if you're a Linux user?
Or what brought you to BSD if you're a BSD user?
I would even enjoy hearing a quick description of the places people live.
We have HPR contributors in France, in Belgium, in the UK, in America.
We've probably got some in Antarctica right now.
If you're a scientist in Antarctica working on a research lab, I want to hear an episode
from you.
I want to hear two episodes from you.
So there is absolutely no excuse as to why you haven't submitted your episode yet.
Come on.
Help us fill out that queue.
Anyways, that's enough of the introduction and the guilt trip.
Let's just jump into the first package, which is TV time.
The package TV time is a very simple one, but it does what it does very well.
TV time is a front end or an interface for TV tuner hardware.
And a TV tuner is specialized hardware that allows your computer to process analog
television signals.
So it'll accept a coaxial cable.
That's the stereotypical cable, the one with the single core and the insulator around it.
It will also take RCA video cables.
So if you have seen these or have a device that supports these, these are the little
yellow colored cables with a metal plug in the middle.
These are RCA.
They usually come with red and white, which are left and right or right and left.
I'm not sure which order audio channels.
If you have a TV tuner, which can be a PCI card or a USB peripheral, TV time allows you
to use your computer as an analog television.
It will display whatever signal is coming into that TV tuner.
Every time binds to whatever tuner you have, it lets you switch between the different
TV standards.
So NTSC and PAL, I don't know the difference, to be honest.
I don't know what any of those stands for.
If I had to guess NTS sounds like national television and there might be a channel in
there, it doesn't matter.
NTSC is what I use because that's what's used in America.
In anyways, once you've chosen all that stuff, TV time shows you a beautiful analog grainy
video signal.
It has filters that will smooth that out.
You can jazz it up a little bit, make it look a little better, but it's analog video.
What are you expecting?
And speaking of video, TV time is video only.
You need something else, whether it's software or hardware, to handle audio from whatever
you're hooking up.
If you have a hardware TV tuner and you're using a coaxial connection, my TV tuner particularly
has a 3.5 millimeter jack that offloads the audio from the coaxial to something else.
I plug it into my sound card, for instance.
RCA cables are already split out, so you plug the yellow video signal into your TV tuner
and red and white audio channels get plugged into something else.
So I have that as well, and I use a special Y cable that takes the red and white RCA adapters
or connectors, and it converts them to a 3.5 millimeter jack, and that goes in the same
sound card.
Personally, I use TV time to hook up old video game consoles like my GameCube, VCRs, which
is a whole nother episode, I'm afraid.
And older computers, I had a TRS-80 for a short period of time, and to make sure that it
worked, I plugged it into my TV tuner.
So there was a TRS-80 computer displayed on my modern, fancy, dancy Linux computer.
TV tuner is a fantastic alternative to keeping an old analog TV box around.
If you have something that still uses analog video connectors, and you want to be able
to view it, I'd say go with TV time in a hardware tuner.
It's so much nicer than keeping an analog set top box, or a whole analog TV, even.
Okay, that brings me to the second package of this episode, which is patch.
It's spelled P-H-A-T-C-H. So, patch, if it's pH-like, fat, which is cool, which this
is, but I don't think that's what they were going for.
Never mind.
So the program is spelled P-H-A-T-C-H. Don't try and say it out loud, it doesn't matter.
Anyhow, this absurdly spelled program is also very good at what it does.
I guess that patch is some sort of unholy combination of the words photo and batch.
So F-Fatch, yeah, Fatch, that's a terrible name.
Anyhow, whatever it is, it is a gooey interface for assembling chains of actions to manipulate
image files.
Only I use this program for web development.
This saves tons of time when I'm creating static photo galleries or optimizing images or
whatever else I have to do on a whole directory of image files.
To use this program, you assemble a set of operations, which the program refers to as actions,
in an ordered list that's called an action list.
So I'll use my static image gallery example to explain how this program works.
I'm not going to say the name, it's so terrible.
So there are two actions in this gallery list.
This action list takes a directory full of images and creates thumbnails for them so
that I can put those on a web page and not overload your internet connection.
So there are really only two actions in this action list, fit and save.
Now each action has a set of predefined parameters and options that let you tweak what happened
to your files.
The fit action, for instance, resizes an image without goofing up the aspect ratio.
You give it a box to fit the image in, and it fits it fully into that box and trims
off any extra edges.
The most important parameters for this action are canvas width and canvas height, which
tell the program how big the box is.
The save action have parameters that let's you set which image format to use, which folder
to save these images in, and even what name the file should have.
So for instance, my thumbnails, I have them named their ordinary file name with an underscore
T at the end, which also makes the image galleries very easy to put together.
So once you have your action list together, you can tell Fetch to run on an entire directory
and include or exclude different file types.
There is much, much more to this program than just resizing images.
You can do an entire litany of actions, including erasing metadata, cropping, moving,
rendering.
Again, this would be its own episode, so I might just do that sometime.
Anyhow, let's move on to the final selection in today's episode.
The last program I have picked for this, this second iteration of apt splunking, is called
X Starfish.
It's all one word, there's no spaces, well obviously there's no spaces, it's a package name,
but there's no hyphens or underscores, it's just X Starfish, boom.
So I left X Starfish until the end, because it is so, so much fun and so very, very weird.
X Starfish generates a random, tie-able background that can be dumped to a file or just put straight
onto the X display, or a X display of your choice, it doesn't even have to be your primary
one.
So the way it does this is it uses some sort of magic random sauce to pick a color palette,
some patterns, and some other distortions or filters or effects to apply to this image
so that you get a brand new unique background every time you run it.
I'm actually looking at one right now.
It can also be started in Daemon mode with a timer to automatically change your wallpaper
periodically.
So you could say, have this application or this utility, I suppose, run every five minutes
or every hour or every ten seconds, it really doesn't matter, it's very variable.
So now that I've explained what X Starfish does, I should explain that there are at least
two problems with this application.
First of all, let's start with the practical aspects.
You can set the size of the image X Starfish generates by either using the G flag and
manually setting the geometry with a pixel width and or height, or you can use the S flag
and set a general size like small, large or full, full being the full display.
So X Starfish will generate an image that will cover your entire X display.
Kind of handy because I don't know how many people would want to look at a kind of cheesy
tiled display.
The full display makes a better image, I think.
But anyhow, since X Starfish generates randomness, which is often CPU intensive, and uses
that to generate random filters, which can be hard on your CPU to apply to an image,
and it can be set to do this periodically, which depending on the frequency you choose,
and eat up a lot of CPU, this utility can be a resource hog.
I have dual monitors set up, each of them running 1280 by 124 pixels, and when I set it
to generate a new background every 10 seconds, it didn't.
Not really at least, it just maxed out one of my CPU cores, so I'm assuming this application
is not multithreaded, and it's been a background image every once in a while.
I'm not sure what else it was doing in the meantime, or how it ended up cannibalizing
itself to finally output an image, but it took quite a while.
Cutting it down to only a single monitor, so just 1280 by 1024 pixels, every minute or
so, made it much more reasonable.
So if you're okay with having a slight delay in your image, and you don't want to make
an animated gift background or something, then you should be just fine.
But if you have a bigger display, I'm assuming it will take much more CPU resources, because
it has to calculate each pixel.
The second more pertinent issue with X starfish is that it randomly picks colors and patterns.
Sure, that's kind of the idea behind the utility, but it is exceptionally random about
it.
Imagine for a moment that you need to paint a room in your house, and you want to depict
random colors and patterns for that room.
You could begin by but blindfolding a friend and pushing them into the paint aisle at your
nearest hardware store.
Whatever three buckets of paint they bump into first, well, guess what, that's what color
your room's going to be.
What do you mean you don't like orange seafoom and gunmetal gray?
Those are the colors that happened to be picked, that's what you get.
There's no counting for taste in X starfish.
Well, there might be, but they're very liberal about it.
So now that you have your awful, awful color selection, how to paint your room.
Well, you could tie one to your ceiling fan, one to your eight year old, and just swing
the third can around your head at a 35 degree angle.
Fairly quickly, you will have a room as designed by X starfish.
It's really amazing some of the images that this program spits out.
With all the potentially awful things that can happen, I do like X starfish.
It's not something I use because it's really a ridiculous utility.
But it's kind of fun to do every once in a while.
A lot of the images you end up getting out remind me very much of hideous pants you've
seen in the 90s and 80s.
It looks like, well, it's really something to behold.
My partner described it as a generator that makes those laser backgrounds for the 90s
school photos where there's neon colors and random shapes, and that's a lot what these
images look like.
But then again, sometimes you get very nice images out of X starfish.
You'll get some very nice patterns, and for the effort involved, you can't really beat
it.
It reminds me a lot of the old, infinite fish backgrounds from when I was developing
websites in the 90s.
I don't know if there's a practical use for this application, but there you have it.
It's fun if not anything else.
So this concludes the second installment of apt spelunking.
Please, once again, don't let me take all the glory of this idea.
Everybody's got a package manager that's using Linux, unless you're using Linux from
scratch, I suppose.
Take a look around your package manager.
Take a look at your installed programs.
If you've got it installed, odds are you might find it useful and maybe someone else will.
So go make your own spelunking episode.
It doesn't have to be apt spelunking, even though I called out Lyle just because I'm
a jerk.
You can make your own spelunking episode with whatever fun packages you have.
This is also a very easy way to make that first HPR episode that I mentioned you need to
make.
So that's all from me.
And don't forget, send in your episode today because we have server logs, and we can
geolicate your IP address, and we will hunt you down.
This has been Windigo, and I will see you soon.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out
how easy it really is.
HECKERPublic Radio was founded by the digital dog pound and the infonomicom computer club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment
on the website, or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the creative comments, attribution,
share a like, 3.0 license.
