Episode: 551
Title: HPR0551: Interview with Wendy Seltzer
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0551/hpr0551.mp3
Transcribed: 2025-10-07 22:54:22

---

Hey everyone, this is Scott too, and I'm at South East Linux Festings, or just winding
down.
But not for me.
I'm sitting here with Wendy Seltzer, who gave a really cool talk on software patents.
I have to talk about software patents and software copyrights, and copyright treaty
making, and even a little bit of network neutrality thrown in there.
Well, okay, so it seems to me, and you can tell me if this is just my impression or if
this is correct.
But it seems to me like the whole issue of software patents has kind of like blown
up recently, or maybe I'm just becoming more aware of it, but is it like sort of coming
to a head or something?
Um, again, so I think we've seen a huge spike in the numbers of software patents and
the number of software patents being asserted in lawsuit demands, litigation, settlements,
and a lot more companies are being drawn into patent sites, and a lot more nonprofits and
free software projects are getting concerned about the proliferation of software patents
and what that means for their ability to continue producing and distributing software
that is free and free to modify, because that's such an important part of many free and
open source software projects, but with a patent in the software, it's very difficult
to tell your downstream users, modify this freely, if that might mean they too would run
into patent problems.
So the company is asserting the patents, are they just doing this for their, I mean,
literally for profit?
I mean, I mean, is that their goal, or is there a clear answer to that?
There's a mix of motivations.
There are some companies who get patents to preserve what they genuinely believe is the
new technology that they have spent money developing and they want to preserve a competitive
advantage in that by locking others out from being able to use it.
And there are some fields where that rationale means a lot more than it does in the software
fields.
There are pharmaceutical fields where it costs millions and millions of dollars to develop
a drug, to run it through testing, to get it up through their human subject testing and
determine that it is safe and effective medicine.
A company wants to be assured that if it goes through that process and cries it dozens
of times and fails, but has one success that it will be able to protect that success against
imitation because it's much more difficult to find the molecule among many that don't
work than it is once you've seen that the molecule works simply to duplicate it.
So sure here.
And so a lot of people think maybe patents are useful in the pharmaceutical industry.
So if we develop themselves and seem to work that way, it's not the, there's a great
idea and if only we could find that idea, we'd have struck gold.
There are lots of great ideas, but it takes a lot of time and effort to implement, to
develop it well and where you gain your competitive advantage is by doing good implementation,
by doing good marketing and customer development, by working with the customers to tailor products
to what they need and then where you should be gaining the exclusivity is in those relationships
and not in being able to lock anyone out of equivalent functionality.
Another problem with the software realm is that a lot of interconnection and interoperability
depends on standards where we're not necessarily talking about what is the best way to solve
a problem, what's the best codec for encoding video, but what codec will allow me to view
the videos that are out there and what format will allow me to exchange with the other people
I want to communicate with.
And there are patents just serve as rent seeking, it's a way for somebody to claim the format
and extract a little bit of money from everybody else who wants to use it.
Especially when people come in with patents late in a standards process or watch a standards
process from outside without coming forward to volunteer that they have some patents involved
with the mix, that the combination can get really toxic.
Okay, so I mean that last bit because you mentioned the word codec and I do a lot on all
the media, so interesting to me, something like that groups are literally trying to patent
the act of encoding video, which I imagine cannot possibly be, I mean the code that one
that somebody a uses maybe unique, but the act of encoding video certainly cannot be
unique, so that what you mean by them actually trying to patent something that they don't
want anyone else to be able to do, but they're not actually patenting the implementation
of that.
They're patenting the idea, I guess.
Well, patents can be issued for processes and methods as well as for machines and combinations
of matter, and so a novel and non-obvious method for encoding video could be patentable,
so somebody discovers a new compression format and implements that to encode video patent
office has granted lots of patents in this realm.
Now, I'm not saying that all of these are good patents for patents that should exist,
but lots of them currently do exist, and once the patent office has issued a patent, it
comes with a presumption of validity, so somebody who is accused of infringement bears a burden
to prove that the patent is invalid.
That's weird, and you've kind of like the inverse of sort of the way things are supposed
to be done here, at least in America, because there isn't it more like you're innocent
until proven guilty, but it feels like in patents you're almost guilty until proven innocence.
Well, you've got two chances to prove your innocence.
You can claim against a claim of patent infringement.
You can claim non-infringement that the patent is that may be out there, but what you're
doing doesn't infring the patent, and you can claim invalidity.
The patent is out there, but it's invalid and should be struck, spricking down, so even
if what you're doing comes within the patentable realm, your safe because the patent is no
good.
And both of those are expensive to prove, and the burden of proof for invalidity is against
the accused.
Right.
Because the assumption is that the patent office has already given it one examination that
they have some expertise, although one problem in the realm of software patents is that
their expertise only stretches so far, and there's an awful lot of software development
and software design that's out there, but not documented in patent records.
So patent examiners, even if they're smart people, and even if they are doing searches
aren't necessarily finding all of the prior art that would make a newly claimed patent
invalid, so they don't see anything that directly matches and may allow more claims than
are warranted.
Okay.
So I got a small company, I'm developing some software, I'm working really hard on it,
I've invested a lot of money.
I come up with my product, I mean, if there's something that I feel like I can patent, and
that would secure, you know, that would kind of like walk out the competition, and I mean,
what other avenue is there if I didn't want to do a patent, I said, okay, I don't agree
with patents.
What do I do?
I mean, I just release it and just hope that someone doesn't knock it off tomorrow and
that can be with me.
Well, if I were giving legal advice, and of course I'm not giving legal advice in this
project, but one walk through the steps of what is it that you're trying to do, and how
is it that a patent will or won't help?
So your young company are starting out with a product.
How much is it going to cost you to get a patent, and would you be better served spending
that five to fifteen to twenty thousand dollars on development and developers and engineers
and user interface designers and marketers, rather than on a patent attorney?
How much time will it take your engineers away from their work to be documenting this
thing in order to obtain a patent, rather than doing the work of developing new product?
Okay.
Well, I'm sold.
And even if you got that patent, would you have the extra resources it takes to enforce
it against somebody else who was infringing, or would you, because bringing a litigation
is expensive too?
Right.
And if you think you're going to be up against better financed competitors who will feel
free to just walk over you if they think that you're doing something cool and they'd
like to take it, then the patent isn't going to help much, so if you can, early on, spend
the money to be the first one in the market and do it better than anyone else.
Build a following and build up the network effects around your product or service.
That's often going to be more valuable.
So almost like build up a little community around your project or something where people
know you, they know you have good quality, and they are going to stick with you.
And you don't have to reveal everything to the world if you are going to be more proprietary
routes.
You can keep things as trade secrets and not tell them how you've done everything.
Or you can take a more open route and say we're going to share this with the public so
that customers know that, you know, we are the developers, we're not afraid of others
coming in.
But if they want to come to the original source and get customization or advice, this
is the company that knows the product best.
Right.
Okay, so along a similar vein probably.
So if I've got a program and it does certain things and it's laid out in a certain way,
I'm just thinking of like something like Photoshop and then something else comes out maybe
again.
And it's very, very, very similar.
How is that not infringing on patents, or is it possibly, or is that the kind of gray
area that patent?
Well, there are a couple of kinds of intellectual property that cover software, of course.
There's copyright that covers the expression and that covers the particular instance of
source code and object code that makes up Photoshop.
So nobody can come along and just wholesale copy that and sell it to you as Photoshop prime.
Right.
Because that would be a copyright infringement.
But there's a gap between what copyright covers and what patent covers.
Patents covers the functionality, copyright covers the expression.
But patent only covers novel and non-obvious functionality.
And if you're looking at Photoshop and looking for what's novel and non-obvious in there,
there are a whole bunch of patent numbers that flash up on the screen when they hit the
launch.
Yeah.
Or at least the last time I ran Photoshop.
And so they're claiming something in there.
I haven't gotten looked at them up, but it's probably some of the filters that they applied
to images and some of the particular manipulations.
It's unlikely that they could patent something like the basic workflow of open up an image,
drop it, draw some lines over it, because those are things that exist in the prior art
in various ways.
I think one of the things that Adobe has tried to claim at some point is it's menuing
system.
It's message and menus and pellets and little toolbars on the side.
And those little pieces of interface design, sort of once you see them, they don't look
like a whole lot of novel, non-obvious material, but unfortunately courts tend to be overcautious
about the notion of hindsight bias.
They're afraid that they'll be too tempted to apply.
Well, once we've seen it, it's obvious, but beforehand it took some greater insight.
And so I'm not quite sure where that patent is.
Medication.
Okay, so on a video artist, a filmmaker, I make a cool movie about space alien who goes
into the future and conquers a planet and becomes the ruler.
Just three years later, Hollywood comes out with a really cool movie about a space alien
who goes back time.
Why can't I get a patent on my idea and say that they infringed on that patent?
Like an idea of art.
That's one of the areas where patent does not apply.
Why not?
Because it's not the patent.
It's a textural matter.
It needs to be, at least in the words of the Federal Circuit, in considering the Bilsky
business method patent, it needs to be either an implementation on a particular machine
or transformation of matter.
But I'm trying to bring visual vision.
I mean, it's on film, and I'm transferring it to your eyeballs, and then Hollywood's transferring
the same story on film.
If it's just an abstract idea, it's not patentable.
But how is like a software, something that software does?
I mean, that's a pretty abstract idea to me, like you.
And this is one of the reasons that people have questioned why software is patentable
as well, because it seems like just generic implementation of abstract ideas and algorithms
are facts of nature.
Right.
Right.
Einstein didn't patent E equals MC squared.
He only discovered that that was in fact how energy and matter were related.
And it seems similarly that even more complex algorithms that you use a computer to implement
are just figuring out laws of nature shouldn't be patentable, but whether it's because they
have become more economically important, and that has inclined lawyers to seek them and
courts to grant them patents, or whether people have a hard time drawing the line between
machine and abstract idea, once you start implementing the abstract ideas, in software
on a machine, there has been a greater tendency to grant those patents.
The Supreme Court is currently considering the Bill's key case.
By the time this comes out, we'll actually have a decision.
I'm sorry, I'm not a patent geek or anything, so the Bill's key case, can you give me like
a 250-word summary or more?
All right.
So Bill's key and 1997 went to the patent office with his claim to a method for the hedging
of commodities trading risks.
And it basically was, you find somebody who bears a risk if the market goes up and somebody
who bears a risk if the market goes down and you buy something from each of them to put
it together into a hedge, so that you in the center are okay, whether the market goes
up or down, and his examples were around the energy market, but basically he was describing
in words what commodities traders and others who operate in the financial markets tried
to do all the time.
And the patent office saw this and rejected his patent application as not within the scope
of patentable subject matter.
And the patent appeals rejected it and the Federal Circuit, which here's the appeals of
those cases, rejected it, saying more long lengthy terms that this was neither implemented
on a particular machine nor a transformation of matter.
And because of that, it failed the test for patentable subject matter.
You can patent anything under the thumb that is made by man, the courts say, but this
wasn't something that was made, this was just an idea he was thinking about how to hedge
risk.
And he appealed that up to the Supreme Court and the Supreme Court took cert on the case
and heard it last November.
And during the arguments they raised all sorts of questions of why descriptions of this
sort should be patentable.
And so this is a business method patent, which have been sort of controversial since courts
started allowing them a while back in the state street case, another financial instrument
and trading patent.
And this is the chance for the Supreme Court to give some more clarity.
I hope by saying, no, these business methods are not patentable.
You don't need the patent incentive in order to innovate new ways of doing business.
Your business will make more money.
Right.
There should be incentive enough.
And describing these things shouldn't be permitted to block someone else from using them.
Now, the hope in the software community, especially among free and open source software who
tend not to like software patents too much, is that the Supreme Court can also get some
guidance on narrowing the scope of software patents that they too are, as we were saying
earlier, often just algorithms used on a generic machine, no tailored to a particular machine
or changing the way it operates, that those should be public domain and not patentable.
So depending on how the court rules, that could help to narrow the scope of software
patents, conceivably it could enlarge the scope, although they've been going so far.
It's hard to see how they'd go any further.
Right.
Okay.
So you're like a patent lawyer, I guess.
How did you get, I mean, it doesn't sound like patents necessarily are going to lead to
all the Uber technical stuff you're actually involved in.
So how did you get involved in the whole technical side of things?
Well, I'm not patent agent, but I am an intellectual property lawyer, and I got interested in both
intellectual property law and technology around the same time, and as I was going through
college and law school and playing with the early web and all of the things one could
do with open source software on a machine sitting under the desk, and looking at intellectual
property law, which was supposed to be, as the Constitution puts it, to promote the
progress of science in the use for, and so in theory, intellectual property law is supposed
to be promoting the same things that technologists want, the progress and development, but as
I got further into the open source world, I started to see places where they just didn't
seem to fit together so well.
Right.
That copyright law was being used against free access and sharing of information, patent
law interfering with development and interoperability, and of course, copy left in the canoe GPL take
an interesting twist using the tools of copyright to enforce freedom of software, and that's
neat and fun and clever.
Was that your introduction to Linux by chance, like the finding out about the GPL and stuff?
It was sort of a convergence, because I was a poor college student and trying to make
the most of my technology book, had an old computer that could run Linux and do things
with it that it couldn't possibly do with the consumer version of Windows, I could run
a web server, and I could download this software that people were sharing freely, put first
the O'Reilly web server and then Apache onto a machine, and that was cool, and then when
I got into law school, I also saw some of the cool things being done with licensing.
So I wanted to see how I could combine those first legal work with the Berkman Center
and electronic from here foundation, and then trying to, through teaching, introduce
more students to these ideas, because if they get the power of open source and get how
development can work when people can share freely and are encouraged to do that and can
be motivated by things other than the right to exclude, often we get developments that
couldn't imagine getting by paying people, and see that in lots of the open source software
that powers the web, that powers the internet, and more recently in some of the content sites
on top of it, Wikipedia, photo collections on Flickr with huge amounts licensed under
creative commons, sharing encouraged licenses, producing stock photography collections, but
our way beyond the scope of what a Getty image has, and that's starting to scare some of
the people who made their money by excluding people from use of material, but for the general
public and for the public at large, it's a great thing, access to a huge amount more
information and a wide range of choice of how they want to share creative commons, and
GPL don't say everything must be licensed under these terms, but they do provide a strong
alternative for people who want to share rather than to exclude.
Yeah, cool.
Alright, last question from us, was the bar really that hard?
The bar examiner is a pain, lots of minutia on subjects that may not have been paying any
attention to in law school, or may not even have studied in law school, and for the brief
three months of studying and taking the exam, these are the only things that you think
about, and then after you pass the exam, you don't often think about them again, but it's
sort of the price of guild membership.
Okay, cool.
Thanks for talking to me, Wendy.
It was great to see you again this year, and hopefully I'll see you next year.
Thanks for having a great talk to you.
Cool.
Thanks.
Thank you for listening to Hack with Public Radio.
HPR is sponsored by Pharaoh.net, so head on over to C-A-R-O-D-E-T for all of your
