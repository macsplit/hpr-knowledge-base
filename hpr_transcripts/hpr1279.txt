Episode: 1279
Title: HPR1279: Russ Pavlicek on Xen Project
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1279/hpr1279.mp3
Transcribed: 2025-10-17 22:53:51

---

All right, our speaker for this session is Russell, who's got ink, is here to talk about
what this is going to be.
Thank you.
Yeah.
This is not a technical session, but this is a community type session.
How many people first off have used Zen before, Chopin?
Okay, hands down.
How many people have used the Amazon cloud, Chopin?
How many people have used the Rackspace public cloud?
Okay, everyone that just answered, put their hands up the last two of your Zen users,
what can you know what they're up?
Zen is out there in many, many places, and frankly, hasn't gotten a very good rep in
the last while, and that's another reason why I'm here, but that's getting ahead of
myself.
So, who's the fat geek up front?
The guy with a big mouth, that's me, and a lot of experience in the open source world.
I've been a lens user since 1995, went to a Linux desktop in 1997, did a lot of speaking
inside Linux World Expo and Oskon, and all these things back in the late 90s early
walks.
We call it early 2000s, but we've really got a name, it's like the walks, I don't know,
theory.
Okay.
I was early, Linux advocate of deck and compact, and wrote colonies for info, we're
in the process there, did a lot of freelance journalism, Linux, how many people actually
remember the Linux show, this show, and anyone who wanted to do that, was one of the earliest
Linux weekly web tests, podcasts we call now, and we're call that background, that was
great fun.
I was just on the Linux link tech show, I mean, people don't Linux link tech show, why
the T-L-L-T-S dot word, I was on last Wednesday, the past Wednesday and download the podcast
and everything.
That's a neat experience, because you get people talking about stuff that they're doing
and other people talking about stuff that they're doing.
So I've been around, I wrote a book, sold all it sold within like two weeks after slash
dot, I mentioned it back in 2001, I've done a lot of speaking over the years.
I was really involved with open source, 15 years ago, and then I went to a company that
actually used open source a lot and was talking about maybe making some stuff open source
but never did, and then in 2008 when the crisis hit banking our 11 and a half month runway
turned into three weeks, and most of the assets and the human compatible liveware were sold
off to a company that was allergic to open source.
So I've been through purgatory, it's not fun, but getting of this year I was hired on
by Citrix to be a zen evangelist, so it's like I feel redeemed, I can actually talk again,
and I actually get to work with open source again, professional, the really neat thing
about my job is Citrix has some zen products, I don't care about any of them, it's not what
I'm here for, I'm here for the community and for the project, that's it.
So it's actually a really cool thing to be involved with.
This talk will spend a little time reviewing what happened to history of the zen project,
we'll spend some time on the history, but the big part is the bottom.
There are lessons to be learned about what happened with the zen project that could affect
anyone involved in any project, open source.
My job here today is to give you something to walk away with, if I don't do that then
frankly I don't think I've done my job, so that's what we're going to take a look at
here today.
What's the zen project, how many people know what the zen project is, really, but okay.
It was the premier open source hyperbots, you know, it's we're celebrating our 10th anniversary
this year and we've got some of the biggest clouds as you can see up there, Terramart,
and Terramart just announced a zen-based cloud offering within the last couple of months.
It's still quite solid, Linux Foundation collaborative project, that happened six weeks
going as it is, Citrix, well we'll go into the history of it, but zen projects now part
of Linux Foundation and you can see the list of companies that have signed on on the beginning.
If anyone tells you that zen doesn't matter, take a look at that list of companies and
tell me that doesn't matter, it matters to them and chances are it's going to matter to
you one way or another.
So what is zen produced, a hypervisor number one, it's called a type one hypervisor, I'm
not going to go into details, but basically it runs bare metal, the hyperbisers here and
then the operating systems run on top.
That's not necessarily the case with a lot of hyperbisers where you have an operating system,
the hypervisor runs in the kernel or on top of the kernel and then gets run about that.
It's a different theory.
My boss likes to refer to it as a type one with a twist because we can actually offload
certain device drivers and things so that we can avoid bottlenecks, but I won't go into
architecture.
It also has cloud design, not only out of the box, but it is basic architecture.
If you go back to the early papers, late 90s, when people were actually beginning to put
together that concept of zen, it foresaw a type of computing which we now refer to
as cloud.
The term cloud wasn't even being used back then, but the guys who started putting this together
had the force to say, there's going to come a time when you're going to want that
ultimate flexibility and zen was designed for that purpose.
Even out of the box right now, the XAPI Zen Cloud Platform, these are things that are meant
to give you cloud functionality.
There are other projects.
If you go to zenproject.org site, you can see stuff about the Mirage subproject and
the ARM hypervisor for mobile devices.
We support it in ARM on servers, there's also work coming on mobile.
Why would you want virtualization on mobile?
Well, this thing here on my waste has more computing power in it by many times than my
college did when I got my undergraduate degree.
The things that would make no sense to be running virtual system on your phone are going
to be making sense because when you start thinking about the applications for that segmentation
and so forth between maybe your business and personal, between other things, it's coming
we're getting ready for it.
It has a lot of bleeding edge stuff coming, but here's the 30 second story.
It was first in the open source world to do what it's doing.
Very high rate of adoption 10 years ago, the only game in town had some excellent technology.
It even had its own corporation behind it, Zen source was there to push itself, so it
was very open source friendly.
But yet two years ago, the state of Zen was such that by the time it was made it to this
year, no one was here, something happened to the project, despite the fact it had all
the first, it had technology, it had a position, it had a company, and yet it almost became
a footnote of history.
So how did it happen?
The project was wide open, but it forgot its connection to community.
It wasn't reaching out to its users.
The code development continued, but the community was stagnant, it was insulating.
And no one stepped up when we started getting around, that's like, you know what, Zen's
old hat, Zen's dying.
We got other things to concern ourselves with, because no one stepped up everyone started
to think that was the truth.
The project forgot what it was to work within an open source ecosystem.
You know, we got to remember, part of what's going on here, I mean, this is what I love
about this conference, how many people have been to a closed source type of event, where
there's a guy standing up front wearing a suit that's more expensive than your car?
And he says, the whole look what we have wrought, applause, applause, applause, and it's all
about the guy in the suit and a few little lackeys on the stage.
Open source is about you, you're going to give applause to anyone, it's going to be to
you.
The guy standing up here, me and others, we're just facilitating some knowledge transfer
because that's it.
The work is being done by you, it's community.
If we forget the community, we lose, and Zen began to forget the community.
Upstream projects then rely on things like what's going on in the current.
It relies on things like, she and you.
So what did it do?
It started forking them, and there were patches that were not getting into the upstream.
They were not becoming part of the standard distributions.
Why?
Why would that happen?
Well, you know, when you're the only game in town, you'll put up a shot, right?
It takes a little bit of work.
That sort of arrogance for life is a better word.
The project decide that the ecosystem, in this case, particularly with distributions,
has to do labor.
How many people remember when on your distribution disk, you'd have the normal
kernel, and then you'd have what was called a Zen kernel.
Anyone remember that?
And you have, if you wanted to use Zen, you had to load the Zen kernel.
Well, that's because that had all the patches in it that was going to enable the Zen experience.
But that was separate from the normal kernel.
One thing is the distributions were the ones that had to make those kernels.
It's not like it was given to them.
And this just went on to normal, and the ecosystem began to get fed up.
And so when other options came, like ABM, it's like, heck with this, we got another choice.
It makes more sense than they played well with us.
Also, Zen source, open source friendly company, was sold to a company that didn't
know to spit about open source.
Long time photosource producer, Citrix, and the new company was interested in the technology,
but didn't really know what to do with an open source community.
You know, it's like, what do you do with this?
They were assured.
So what happened?
It wasn't about malice.
It wasn't about incompetence.
It wasn't about fear.
It was about disconnection, because disconnection that arose because at every point, as I've
listed here, you know, it was getting disconnected from the community, it was getting disconnected
from its own user base, and it was getting disconnected from the company that was supposed
to be helping the law.
It wasn't being integrated into anything that open source does.
So two years ago, here's the status report.
By then, the Zen hypervisor was basically overcome in the commercial market by VMware.
Because VMware does what any good company will do, and that isn't closed for.
It was overcome by KBF and the open source community, because they were doing it right.
They used to remain connected to the community, and they placed either rules.
The distribution got fed up, and some of them began to either not include Zen, or not
working to provide the services that would facilitate a Zen experience.
And the community, greater open source community itself, just began to forget.
A reversal in direction occurred two years ago.
This had to be conscious.
Some of the people within citric management began to say, you know what, we screwed up.
We got something important here, it's not being nurtured.
And now, it didn't want to, best things it could have done.
And that is, we don't know what to do, but let's hire some people who do know it.
So it actually began to reach out and found people who actually had open source knowledge.
They brought them in and said, where did we go?
And as a result of this, there's been a steady reconnection with the community.
That's part of the reason why I'm here.
That's why I was hired, is to get out and talk, to reconnect, to get feedback from you all.
But before I came on the scene, this was already occurring.
You see the birth of open source projects, some of which were nurtured within citric.
You know, Apache Cloudstack, which Joe, Dr. Ron Martin, just talked about the other room.
So you can go back in time with your time machine and you can think that anything.
Apache Cloudstack, coming out of it, the open daylight, which was just announced.
Zen going over to Linux Foundation.
Things are now being incubated more properly in an open source way.
And now we've got to come up.
Every once in a while, this thing goes in multiples and it just chose to do it then.
Let's try it again.
Two years ago, going to a conference like this,
Lars Perk, who is our community manager, said these are the questions you hear.
Zen, Zen, Zen, that's dead, right?
That used to be an open source thing.
Or as a closed source now.
It's owned by that closed source company.
And no one uses Zen, right?
That's pretty bleak, especially in the end.
I mean, those are words of death in the open source community.
The reality today, however, is very, very different.
You're running a 3.0 kernel.
It is enabled upstream from everything that you need to run Zen.
Now, Zen does not just be clear.
Zen doesn't run in the kernel, but it needs certain things to be in the kernel
to be able to diversify it, but that's all there.
That's been remedy.
Most Linux distributions are currently Zen enabled.
The big exception, of course, is Red Hat, which made a business decision to go with KVM.
You can understand that.
But the interesting thing there is that Santos, which, of course, has, you know, Red Hat
free sort of kind of.
The Santos project, some people over there have decided that they're going to issue something
that will allow Santos users to actually use Zen again.
And from what I just heard from one of the, one of the Santos guys inside, you can talk
to them inside.
They're probably just a few weeks away from what they'll probably release as a beta.
So Zen is made of recurrence.
Zen project, now part of Linux Foundation.
So no more of this stuff about it being owned by Citrix.
And we've had to do more user friendly websites than project nor, as I said, for people who
are later writers, please, I've been there, go there, sign up for an account, and tell
me, because I worked on it a lot.
Tell me if there are things you need to see there that you're not seeing.
Because if you ever went to the old Zen.org, it was a developer site.
It looked like it was 10 years old.
It looked like it's done for colonel hackers.
It's not friendly.
We want something that we'll talk to users as well as developers.
So what do we learn by all this?
And this is the hopefully some of the takeaway for it.
Because in one, it's possible to die when you're winning.
I mean, Zen was kind of on top of a hill.
It was first.
It had good tech.
It had good adoption.
But it almost died.
It's not enough to have walls.
It's not even enough to have your own open source friendly company, meh.
It had everything you could think of.
So the project itself has to stay vibrant, or you can kiss a good bump.
Lesson two, disconnection for users can make you a dead project walking.
You know, it's easy for us as each to think about the code.
And we need to think about it.
It's important.
But if we're thinking about just the code, we can get disconnected.
And suddenly, those people who want the code want to do something with it, we don't
know what it is they need.
You know, this thing about open source, I get furious at times when people say, open source
ad is just another means of program, crap.
Open source is about people, about people.
And I remember just a quick spin back, 1997 at Lanolinics Showkits.
First, open source conference ever went to.
500 eeks, mostly it would be fat white male variety on a weekend in Atlanta.
You look around at the faces of these people and they weren't there because they were being
paid.
They weren't there because they had some sort of grand mission for something.
They were there because they actually understood that if they worked hard enough and they connected
enough, they could change stuff.
They could do something that would help people.
You know, and I still remember the conversations looking into the eyes of these people, their
eyes were on fire because they realized there was no one in the room to tell them, no.
If you ever worked in the closed source world, you realize you got good ideas.
Yeah, that'd be cool.
We'll do that.
And you go to the management chain and someone up the management chain says, nope, we're
doing that.
These folks figured out there's no one to say no, I'm going to go forward and I'm going
to do my best.
And if people use it, Rick, if I fall on my face, I gave it my best, but they understood
it was about people.
It was enabling people.
And if we lose that, and this is totally aside, you know, when I started coming back
into the comfort scene a few months ago, I began to realize I'm not looking at the same
faces I saw on when I left.
And I just hope, I hope, that this knowledge is being passed on to the next generation,
that if this is just because you have an open source job somewhere, someone's paying
you to do something with open source, then the soul of open source is going to die.
We have to remember what it was here for.
We have to remember it matters people matter.
And that's why open source matters.
I mean, that's entirely separate.
But if you're not interacting with your users, whatever your project is, you're at risk.
Also, connecting with your developers, not the same as connecting with your users.
That was actually pretty good at keeping in touch with its developers, but it had no
idea what the user's doing.
They're not the same things you need in both.
So you need information sources that are good for both.
The user can't come along and figure out, well, what do we need this for, how do I get
started?
You're in trouble.
If you have any maturity at all to your project, you've got to dig through the technical
websites and everything just to find a simple answer to your message and something.
Connect.
And even the Linux kernel development, you know, when you think about it, Linux kernel,
no one in the user base talks about the Linux kernel.
They're using a distribution, they're using software.
But even the Linux kernel, if it ignores the stuff that trickles down to it from the user base,
it's going to have trouble.
There is no safe place.
We need to have that connection with users.
Never in lesson three, never ignore your root structure.
You know, open source is organic.
It's living.
Living things have roots.
And our roots are right here in this community.
The distributions, the libraries we use, all the various parts and pieces.
The user groups.
These things are all part of it.
You can't stand alone.
If your project relies on something upstream or downstream, connect or you're at risk.
Never ignore the support structure.
You know, in this case, the distributions provided a lot of the basic zen support functions.
And by not connecting to them, the project began to wilt on that one.
It has to be cultivate.
And once more, when in this case, when Red Hat decided, okay, we're going to do something different.
And block boomer net and brought on KVM said this is going to be the way we're going to go.
A lot of the other distributions were swayed by that.
It made sense because they had someone who was playing well.
Lessing five, corporate backing isn't enough.
I mean, you know, this was one of those brass ring issues.
I remember way back when it was like, wow, you know,
you have someone who pay us to do open source.
Wouldn't that just be my brush? Wouldn't that be great?
And to have the company that's standing behind you and saying, yes, we're going to do good things.
That's wonderful.
Except that you got to remember that even an open source friendly company has different goals in the project.
They have to make some sort of profit.
They've got some sort of support burden.
They've got all sorts of things that are business minded and they have to be able to mesh.
And it's not about good versus evil.
It's just about two different organisms that have to work together.
They have to cohabitate. They have to be partners.
And so if that backing is disturbed, problems can occur.
And the fact that it's an open source company is no guarantee.
You know, companies get sold.
Some go on and they exist pretty well.
You know, Chavos and Bluster and all the ones that Coomeronette,
some ones that Red Hat picked up and so forth.
But then you got things like, you know, my sequel.
It's not really the best story in the world right now.
You know, Zen went through this.
I listed Kassat because Kassat was the company that I was with.
That was very open source friendly, even though I was consuming.
And that was the one that was kept thinking about open sourcing stuff.
It never did.
But then it was, you know, then sold to a company that I swear the lawyers had a picture of Richard Stolman
with a pitchfork and a tail and they used it for a dartboard.
I mean, they just loathed.
They were scared to death of open source.
And that happened in a month.
So that condition can change.
I mean, if you're in a project that's got an open source company behind it,
that's great for now.
That can change.
If you get to the point where you start thinking what would happen to our project
if we didn't have this company behind.
Then this may be a time to actually start considering some of the foundation stuff,
like Zander was talking about before in the earlier session.
You know, if that's what you need, if you need that company to be just like that to survive,
you may be very vulnerable.
So consider, you know, going to a foundation or something that can help foster your project and keep it from.
Less than seven years, no such thing as autopilot.
You know, it's easy to rest on your laurels.
It's easy to say, hey, it's always worked this way.
We're good.
How many people have worked with companies that said, hey, it's always worked this way.
We'll just keep doing it.
And then it just...
Especially in the IT world.
You know, if you're working the same way in the IT space that you did 10 years ago,
you're probably, you know, kissing the Titanic's bow right about now.
I mean, it doesn't work that way in this industry.
And it doesn't work this way in an open source.
There's no such thing as autopilot.
You've got to be planning for your success.
Now, for a project's success, it's not selling things, but it's being used.
It's having input from your community.
It's having a growing number of developers, et cetera.
So you have to have some sort of plan as to what success looks like.
You've got to be going for it.
Don't just let it appear along.
You can have great software.
But if some other, particularly like, you know, big company comes in and says, you know what?
We got something else.
We're going to push into this space.
What are you going to do?
What are you going to do?
Great software.
I mean, if you've been inside the IT world for 10 years,
you know that the best software doesn't always win.
It just doesn't.
Open source or not.
You have to be ready for something.
You have to be able to pick your position.
How many people remember Windows 3.1?
We'll have prayer for you later.
How many people remember an IBM operating system that came along fairly well after just after 3.1?
What was the name of it?
OS 2.
OS 2.
It was the bomb.
It was the bomb.
It exploded.
It exploded.
It exploded.
It exploded.
But once again, it's like which one was more technically superior?
It was the 5 out of bomb.
Yes.
The dang thing ran.
Which one won in our space?
Windows 3.1?
OS 2, man.
Provided you have hardware that had drivers that supported it and you had to eat in a hardware.
That's not be picky.
What this is the thing?
This is the thing.
Best doesn't win.
You need something more than that.
There's actually OS 2 still running today.
It runs a lot of ATMs.
Yep.
Yep.
I remember saying that not too bad.
Made things that it offers commercial support that isn't IBM.
Yes.
So, if you want an ATM,
it's that end of it.
But the lesson is still there.
This industry has never been about the best software wins.
So, if you have good tech and Zen had good tech,
it's not going to be enough.
You have to have everything else in place.
If it ain't growing, it's dying.
Once again, organic model, that's true.
If it's not moving and growing, it's dying.
So, if your project isn't seeing a new blood,
get a little worried and get some new blood.
Why is that important?
Growth.
But the other thing is perspective.
You heard that inside the keynote this morning.
Where it's going to make you a rough chemo.
I hope all of you.
You know, you need perspective.
That's change in perspective.
You don't want to get in growth.
Organisms new, happy movement grow,
and new folks are part of that picture.
Know where your project could fit in the world
and make a plan to get there.
You know, it's, when the early days of open source,
the race was on to cover ground.
You know, we didn't have a good GUI,
so people weren't going to do it.
We didn't have a good this, so people ran to do this.
And so there was generally, there was like one or two,
and there was one that sort of emerged the leader
and frequently had some adoption right away.
Because it was the first one to get the job done.
That is not open source today.
Open source today.
There's going to be competition,
and there's going to be certain areas where one thing makes sense,
and other areas where a different thing makes sense.
So you have to start making the concept in your mind.
Okay, I've got this really neat stuff,
and then answer certain user problems.
What are those problems? Where's it going to fit?
It's not going to be one size fits all properly.
Because even if you're first,
and you're the first one to think of this really cool thing,
chances are two years from now,
you're going to be in a horse race.
Two or three others, mate.
Where can you fit better?
Part of what's going on in the Zen World right now,
KBMD, I use a different type of hyperboxer.
It's not a question of one's better.
They're different, one's type one, one isn't.
One's curl, center.
They have different properties.
They have different uses.
Virtual box.
You know, how many people use BB?
Wonderful little thing.
Where you want to spin up an alternate desktop,
you know, because your company's got to have a Windows desktop
and we're going to shove it on this thing here,
because there's a little goofy little program that's got to run,
you know, so you can flip it onto the desktop
and you can do your thing,
and you can shut it down and get some real work done.
Real quick and easy, you know,
to just kind of boot it up and go
and get things done and so forth.
Great for the one thing, the two thing.
Imagine managing thousands of them.
Just think about the best type of looks.
Actually, that was a virtual life.
It's not, it's not the use case.
It's not the fit.
Does that mean the software's no good?
No, the software's fine for the proper use case.
So we have to be thinking about with our projects, you know.
Where do I fit?
That's a problem I saw.
Not just in general terms, it's specific terms.
Who's going to be there?
Why?
Well, how big is it going to be?
These are the questions we should be asking ourselves.
So you need to figure out who your users are.
You need to talk to them to find out what they really need
to make a plan to get there.
Because there's always room for improvement.
Less than 10 competition.
Increase since innovation, man.
You know, I've had people say,
you know, you Zen guys must hate KVM.
Why the hell would we hate KVM?
Iron sharpens fire.
Especially the open source work.
It's not about who gets to the top of the hill and becomes
the mega monster mashup, you know, who owns it all.
Kind of like, you know, the Microsoft sort of concept.
We don't have to go with it.
And then you have competition between open source projects.
Innovation occurs because it's like, well,
we can do something better.
Oh, look at it this way.
And the other one's like, yeah, well, look at it this way.
And we'll do something better over here.
And it keeps pushing the ball along.
You know, as an aside, too.
If you're working close source, I don't know.
You know, if you're working with a closed source cloud,
I have no idea why.
God help you.
Because if you look at what's going on in the cloud world,
so much of the innovation is going on here in the open source world.
Why?
Because it has to constantly change.
It's got to be constantly thought.
It's got to constantly move.
There's so much innovation going on here.
And it's because they're competing technologies.
They're competing thought streams.
People are trying to do something better.
How many people remember CDE?
They come and desktop and burn.
Real slow on a hand, guys.
You don't want to admit.
We're all trying to pound that down.
They go, oh, God, no.
CDE was the unit desktop back in the days of the grand unit source.
I heard this story.
So I knew one of the guys who was one of the principals of X11,
Jim Gatties.
And one of the engineers at deck, when I was working at deck,
worked alongside Jim on certain things.
And he said, you know, when Jim and the other guys were working on X,
the X window system, they said, they poured their heart and soul.
They wanted something that was going to be flexible and powerful.
They're going to do all sorts of great stuff.
And then standards.
Okay, standard, standard is the good thing.
The standard of CDE.
And it was so mundane.
It smelled of mundane.
It was just, you know, for people who didn't work with it.
It was just a miserable sort of thing.
And Jim has this infectious lamp.
I mean, he could light up a room like nothing when you get him laughing, man.
Because it's infectious.
It's infectious.
My friend Jay said, you know what?
Jim lost his life.
He poured his heart and soul for years into getting X right,
giving it power.
They did something wonderful.
And all they came up with was CDE.
He said, sometime later, you know, Jim had gone on to other things.
And then, sometime later, someone brought him a Linux disk.
And it was at the time when Gnome and KDE were rocking it out, you know.
And he said, hey, Jim, have you seen what they're doing with your,
with your access to these things?
What?
So he plugged it in and started showing.
He said, Jim got his life back.
Because things were starting to do what he always hoped.
You know, we get this thought
where we can just standardize
or just sort of keep it out even plain.
No, we got a fight for innovation.
And that means that we got to go to Togo sometimes with people
who think differently than us.
So you've got a competitor.
Great.
You're going to move forward.
So you got to keep it going.
KVM VMware.
Make sure the virtualization is going forward.
Because now we're going to have a nice freeway fight,
along with other things.
Lesson 11, this is sort of a subtle one.
You've got an established project and you've got some good stuff.
Make sure you're releasing new stuff.
Good stuff.
Here we are.
Why?
Because otherwise people start to think, well, you're done.
You're old half.
You know, you've got hyperbibers.
What else is there?
Well, there's a whole lot else to talk about.
That's part of what I'm here for.
To talk about.
We got all sorts of stuff out there.
You know, all the arms stuff that's going on.
The mirage stuff.
The mirage stuff is really weird.
Teeny, tiny, highly efficient little VMs that, you know,
can just do all sorts of possibilities.
It's really neat to go to the website.
Take a look.
If you're not making a headway and people aren't aware of it,
you could be in trouble.
It doesn't matter whether or not you really are.
You've got to let people know.
So those advances are going to keep the project rolling.
And sometimes perception really is reality.
That's a real hard one for our four beats.
So it stands sometimes.
We think in terms of bits and bytes.
See, there it's not.
The works are enough.
Well, you know, there are times when someone thinks it's a piece of crap.
It's a piece of crap.
That perception has to be managed.
You have to reach out.
You have to be talking to people.
You know, rumors arise that you're dead.
You're outdated.
You're outmoded.
You're not doing anything.
You got to speak up.
You got to show your hand a little bit.
Because unchallenged lies become accepted to this truth.
I live outside of Washington, D.C., it's true.
Ever at Florida Center, it doesn't matter.
What the party is at office, it's true.
You know, and we have to, as heats, we have to understand.
We want something to be vibrant.
Concert point to this.
Just look at what Red Hat and KBM did.
You know, when IBM, when they bought Kubernetes,
and they said, we're going to focus on this KBM stuff.
I still remember some way back then,
seeing some rumbles in the community saying,
well, what's Red Hat going to do with this?
And it was a power play, believe it or not.
This thing is they did it right.
They did it right.
KBM became a reasonable, and what was was,
but it stayed a very reasonable entity within the open source world.
And any sort of qualms that were developing
pretty much just a whole little way,
because everyone played by the rules, and they did it right.
We have to play by the rules.
And so as a result, you know, Red Hat, IBM,
both of which had real money in the game,
they can read the rewards because they played the game right.
Here's a crash course in Perception Man.
I'm not going to go through all of this.
Okay, good, good.
I'm going to go through all of this thing.
You can see the slides.
By the way, are up on the Linux West website.
I put them up there, like a day ago.
They'll also be available from ZenProject.org,
probably in a couple of days.
The old version, but yeah.
The one I did from the Linux World War quest, pretty close.
But, you know, we've got to make a thing.
It's like, submit talks.
You're working on a project.
Talk about submit talks to places like this.
Great place to be.
It's like, I don't know how many times I've heard, you know,
he said, well, I don't like talking.
Well, you know, if you can handle calculus,
you can handle talking.
Talking is easy. You learned it when you were five.
The calculus is hard, engineering is hard.
It's actually not that bad.
Just as a side to one of the things
I remember from the early days,
I think it was like 99, maybe.
The old Linux Expo, not the Linux World Conference,
the next book.
The old Linux Expo that Red Hat used to,
in North Carolina.
Miguel LeCaza, how many people know Miguel?
God, I'm feeling old.
Miguel LeCaza, who was being a lot of things,
you know, being one at the time.
He had the major presentation at the show,
not the Linux Expo.
So everyone's crammed into this theater
to hear Miguel's talk.
And I mean, people standing up against the wall
and the whole nine yards waiting with David Brick.
Miguel and his laptop,
which was made for the Mexican market.
Well, for whatever reason,
that Mexican market laptop didn't want to work
with the projectors.
They could not get into this life.
On top of it, that was his notes for the talk,
for the slides.
So he couldn't see what he was going to talk.
So what did he do?
And I'm not sure.
I'm pretty sure Miguel is more comfortable working
in Spanish than English on top of this.
Just to add a little sauce to the menu.
He stood up for an hour.
And the audience was riveted.
Worked with out notes,
without slides.
He just spoke from here.
He told people what he knew.
And at that moment in time, a revelation hit me.
Presentation isn't about wearing a good suit
and having great slides.
And, you know,
there's a little rubber dolly type of personoid
up there going up there.
Oh, no, no, no, no.
In fact, open source people have a great advantage
because we believe what we're talking about.
Let it out.
Let it out.
I still remember the first job I was ever in.
VPS sales.
I was coding at the time.
Close source number.
We didn't know what open source was back then.
God.
Your surface is just cool recently.
And the VPS sales told me,
you know what?
When you're showing me the new features of the new release,
I want you to make sure that I believe this is great.
If you can get me convinced that I'm doing a disservice,
if I let my customer buy from the other guy,
because we've got a better,
and they will do better with us than them,
there's going to be a look in my eye,
a sound in my voice,
that will let them know that I'm speaking the truth.
And that matters.
And that ran true for me that day,
more than anything else,
to see this man stand up,
wing it for an hour,
and standing ovation when he was done.
I have seen the best presentations in my professional career
from open source in the period.
If you don't think you can talk,
chances are it's because you haven't tried it.
Try it.
What's the worst that can happen?
Someone's not going to like it.
Get on a mailing list and say something controversial.
There's lots of people who don't like you.
You're useless to that.
Say it.
Say it.
Let the lead.
Let your intensity sneak out.
Don't worry about whether you've got this soup
or any of that garbage.
I was talking with Joe earlier.
I came to the conclusion one time ago
that I wasn't going to pump too much into my slides
when I do a talk,
because if I put together a bunch of slides
that any rubber dolly can recite to me,
you're going to get up,
and you're going to look like a rubber dolly.
No, let it come from here.
And that's something that we've got in spades.
In spades, we believe what we're doing.
If you don't believe what you're doing,
you've got a problem in open source.
Simple as that.
Let it lead.
You know, there's a bunch of cheap stuff.
Four books.
You know, stuff that's going on out here.
You think this is big money that's going on out here?
You know, in most of these regional conferences,
they'll either one charge at all
or you've got a big 50 bucks or something.
You know, a car wash for crying out loud.
You know, get yourself an org booth.
Get yourself a few flyers that describe the stuff
that you're doing.
If it's a small little project,
bumper stickers, you know,
little business cards.
You know, you can get $7 million for $10 or what.
You know, do it.
Just get the word out.
It's not that difficult.
You're volunteer to talk.
Learn, you know, I mean,
you're going to school.
You might as well school up in front of your friends.
Seriously.
Where do we learn anything?
You know, the thing is we're here with community.
We're not here with the stickers.
We're all in this together.
Remember, do it.
Shout out to your mouth up.
Blogs.
Talk about cheek thrills.
Everyone's got a frickin' opinion.
And if you've been on a mailing list,
you've used it a lot, probably.
So put it in a blog.
Make it document what stuff that you're doing is.
Simple.
A usable website.
Once again, not rocket science.
It's one of the other, well actually,
I think it was Joe's talk just now.
Quoting for you a lot, Joe.
You know, if you're a suck at websites,
you've got to skill up some other project to use.
So pitch in and help them with their problem,
then say, oh, by the way,
can you kind of like paste together a website?
Please.
There you go.
You know,
June alone, three hours,
suddenly you're looking fit.
Podcasts, you know,
links like text shop.
Listen.
For crying out.
You know what I mean?
Just send them an email saying, you know what?
Look at this project I'm doing over here.
You mind if I come on just for 10 minutes?
Let me talk about it.
Chances are, if you look legit at all,
they'll say, you have to mind.
Let's talk.
If you do a good job,
you can go back on another, you know,
a few weeks and talk about the new stuff you're doing.
They like it.
They just think what stuff has to do with us.
And it doesn't cost the day.
Social media, of course, you know,
Twitter and Facebook.
You know, do something.
Talk about what you're doing.
YouTube demos and tutorials.
Big stuff.
Once you get to users.
You can't take it out of them.
Who needs that?
Well, guess what?
Users will mind it.
Give them something that they can do in 10 minutes.
Press the socks on.
Get a kiss.
Kick a ass little mask off.
You can't do it.
Hey.
And just finalize.
Shout out.
Live or shout up and down.
That's kind of what we're doing here.
You know, talk about stuff you're doing.
You know what?
I have another story.
Something early, early shows.
I think it's like the late 90s.
You go and there be the bar after party or the night thing.
And you go there and there's everyone walking around the pier
in their hands.
No one ever got drunk.
Why?
Because they're busy talking.
You can't get drunk if you're never lifting the cup to your lips.
I mean, I can remember very much, you know, spending three, four hours
at these after-after conference events.
And you're just talking and talking.
And people are coming up to you.
And people never met before and say, what do you do?
Oh, I got this thing.
You know, this is what we're doing.
I mean, you're explaining everything.
You're trying to...
You want to talk about the code.
You know, we have to remember that we can talk about what matters to us.
Do it.
Just do it.
A couple of lasted and we'll be done before we're connection.
This is important because how many people here
you are in a job that inside some way, shape or form,
facilitates something you're going to open source of you.
They're paying you to use it.
They're paying you to write it.
They're paying you to do something with it.
You know, when I first started in this adventure,
that was like, that was the grass rain, man.
Oh, someone actually paid me to do this.
Oh, God.
That's wonderful.
Now, you take a look at some of these big projects.
You've got all these corporate emails.
And you can watch the pie charts.
You know, it's like there's a lot of corporate work going on.
But you need to have a grip on what your corporate world needs
and what your project will be.
You have to get that right.
And that's something that you can't get disconnected from.
You've got to manage the relationship between business and the project.
And this is the Citrus problem.
You know, if it looks like if Omen do,
that's what other people have mentioned for it.
You know, if you've got a project that looks like Omen by a company,
people lose enthusiasm to imagine that.
So you've got to get that relationship right.
And the perception really is dangerous if it's not handled right.
The symbiotic relationship.
And you can end up with fake open source.
I'm thinking of an open source portal that I used in my last job.
It was an open source, quote unquote, get the software.
Try to hire someone to work on that portal
who didn't have current or past badge of the company.
Find it was impossible.
Yeah, no community.
The community was their company.
That's a problem.
That's why I consider fake open source.
You don't want to get there.
So final thoughts.
Is your code good?
You're reaching out to your users.
Your development community active and engaged.
You reaching out to the rest of the community regardless of what you're doing.
Do you have proper support?
And do you have the freedom to do what you need to do separate from your corporate interests?
Are you getting the user feedback you need?
To know whether or not you're doing the job right?
And the project I got to be getting lost inside some corporate hate.
Bottom line, whatever you do, don't give up.
Don't give up that matters too much.
If you feel like you're on the road, time to change the road.
Send hate mail there.
Go to zenproject.org.
We got one minute for questions.
Question.
Do you think it's healthier for most open source projects to be part of a foundation or to be part of an incorporation?
I think it's healthier for them to have whatever is appropriate relationship.
And that, unfortunately, takes some figuring out.
Like I said, the big thing is whatever it is, it can't be only done by a company.
It can't be facilitated.
But it can't be only.
So sometimes foundation-to-fixation.
But a lot of smaller efforts, particularly, if a company's got, you know, skin-in-game fine.
Just make sure that that relationship between the Humanities is managed.
Don't let it go on a long while.
And don't just say, well, you just do your own thing.
That was kind of the citrus thing.
That's what let them do whatever they want.
That's so good.
Because there's no relationship.
You need the relationship where you lose it.
I don't like a decent example of a project that's done good.
It's done pretty well.
And the corporate stewardship is ABM.
Yeah, Red Hat's very good at making sure that their open source projects were made open source projects.
They got a good model.
One-to-border KBM is in the kernel.
True.
So that's not, I mean, Red Hat has done good things like ABM.
But it's not like they're running the entire show.
And that's the part that has been getting it into the kernel.
It was in the KBM and the kernel when they bought one or whatever.
Do you like that?
I don't like that.
Every day is just a little day from there.
And it was in the kernel.
It was in the kernel.
Other questions before we close?
I want to thank you all for coming.
I really appreciate you all being here.
And I'll be having a great finish on the show.
You have been listening to Hacker Public Radio at Hacker Public Radio.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR listener like yourself.
If you ever considered recording a podcast, then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the infonomicum computer cloud.
HBR is funded by the binary revolution at binref.com.
All binref projects are proudly sponsored by LUNAR pages.
From shared hosting to custom private clouds, go to LUNAR pages.com for all your hosting needs.
Unless otherwise stasis, today's show is released under a creative comments, attribution, share a like, 3.0 license.
