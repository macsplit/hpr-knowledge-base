Episode: 1664
Title: HPR1664: Life and Times of a Geek part 1
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1664/hpr1664.mp3
Transcribed: 2025-10-18 06:38:22

---

It's Thursday 18th of December 2014, this is HPR Episode 1664 entitled Life and Times of
a Geek Part 1, and is part of the series How I Found Linux.
It is hosted by Dave Morris' and is about 27 minutes long.
Feedback can be sent to Dave. Morris' at gmail.com or by leaving a comment on this episode.
The summary is, I've been using computers for more than 40 years.
This is part one of my story.
This episode of HPR is brought to you by An Honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Get your web hosting that's honest and fair at An Honesthost.com.
Hello, welcome to Hacker Public Radio. My name is Dave Morris. Today I want to do a show for you,
entitled Life and Times of a Geek. I really liked David Whitman's idea of doing a show on his
birthday, if you look at HPR1547. So I like to so much, I'm borrowing the idea.
This show is being released on my 65th birthday, and I thought it would be a good opportunity
to tell you about my long experience with computers or more generically computational devices,
and I've made this part of the series How I Found Linux.
Thinking about my 65 years, I realised that there might be quite a long show,
so I'm going to do a series of short episodes, hopefully not too many, I don't want to bore you too much.
I have wanted to do this for a while, and up until now I was concerned, seems a bit self-indulgent
to be honest, and it doesn't really fit with my way of doing things, but people have said to me,
just do it, people are going to switch off if they don't like it. Anyway, I hope you do find
the show's interesting. So I'll do a little bit of preamble. I was born in the UK in a town called
Uxbridge in 1949. The area that Uxbridge is in is now part of Greater London, and it's not very
far from Heathrow Airport. When I was a kid, the air in this part of the world was very heavily
polluted. Everybody had coal fires, gas, domestic gas for gas cookers and things was created by
processing coal, and so this produced massive amounts of pollution, and I was there during the
Great London smog of 1952, which caused quite a number of fatalities. I guess we escaped a bit,
being a bit out of the centre, but there were other smogs there after I remember walking home
from school. As you did when you were about five years old in those days, and hardly being able to
find my way across the street, because of this pollution my family decided to move away from the
area in 1955. We went to East Anglia, on the east of England, to the city of Norwich, the county
of Norfolk. There, it's a bit more agricultural than the air, was a good bit cleaner. I quite enjoyed
school when I was young, but I didn't take to secondary school after the age of 11. This was the
area, this was the era of the so-called tripartite system, where education and where children were
streamed into different types of school according to a test at age 11. I passed this and got a place
at a local grammar school, but it was quite strict. You had to wear uniform, they had lots and lots
of rules. I really didn't get on with it. Never been that good at people telling me what to do,
and it took me quite a long time to get the exams that I needed. Of course, there were no real
encounters with computational devices of any sort in those days. Schools at that level didn't have
anything like that. If you needed to do anything complicated in the way of arithmetic, then you use
log tables, logarithms, and you were all expected to own a slide rule. I've given you some links,
if you don't know what a slide rule is, and there's a picture of my old one looking very battered
on the show notes. I was a bit of a geek as a child, enjoyed making things, taking stuff
apart to see how it worked. I was always fascinated with science and enjoyed biology. I was always a bit
of a biology geek, and I was always watching animals or collecting them, and an answer nest in my
bedroom or a centricle had plants and fungi and anything biological. Sometimes to my parents
and noons and disgust, of course. So I left school in 1967. I went to a technical college
to take A-levels, which are the advanced exams you need to get in the university.
This was a much better environment than being at school because it wasn't a high band with rules
and uniform and stuff. It was a bit like being at university. It was a great environment. I studied
botany chemistry and zoology during that time, and it was only at the point I was doing this that
suddenly dawned on me that I could actually go to university and study biology. So I did what was
necessary to make that happen. Quite surprisingly, surprisingly to me, anywhere I got marks good enough
to get into university, and I chose the University of Aberystwyth in mid Wales where I was going to
study zoology. I liked the look of Aberystwyth out in the country by the sea, and this struck me
as a good place to be. So I headed off to Aberystwyth in late 1969. It was then called the University
University College of Wales Aberystwyth, and it was part of the larger federal university of Wales.
It's not anymore. It's an independent place. While at school, I'd been pretty bad at mathematics,
so I was imagining that I was going down a track where maths was not on the horizon very much
at all, which was amazingly naive of me, and it was a bit of a shock to find that we were being
taught statistics as part of ourology course. So here's when computation started to come into my
life. We had lab sessions where we tediously worked our way through statistical calculations
like chi-square tests and students t-test. But the thing that made this so laborious was that we
had to use mechanical calculators. We started with hand-cranked calculators, similar to the
thing called a triumfator. I've never heard of this until I was writing these notes. I couldn't
find a picture of the one that we had, but if you look on the Wikipedia link, it's a strange
device with a handle on the side that you crank, which you put numbers in on the front by moving
different sliders to make a multi-digit number. The multiplication is produced by turning the
handle and producing successive additions. I really don't remember how it worked now. It's a
long time ago, and I certainly can't remember how we used it for divisions, but we did. Later on,
they handed us electro-mechanical calculators, which is essentially the same thing, except that the
handle turning was done by electric motor, and the numbers were put in on a sort of primitive
keyboard type thing. But neither of these were very good, and of course, doing statistics, the actual
process of crunching the numbers was pretty damn tedious using that method. So it's my recollection
that about year two, 1970, we were taught the concept of computers and programming. It was quite
a short series of lectures. I think students in biological sciences get far more these days,
and we had a book which taught us the rudiments of the popular high-level language at the time,
called Algole 60. Just as an aside, this book was a so-called program text where you read a piece
of information, thought about it, and then answered a question, and then depending on what answer
you gave, multiple choice questions, you either got positive feedback, yes, this right or negative
feedback, and sent either forward or backwards through the book to move on to the next thing,
or go back to relearn what you'd failed to understand. I found this quite in a nice way of learning,
actually. I enjoyed this, but it doesn't seem to be very popular, it died out, as far as I'm aware,
anyway. Anyway, I found that programming computers was a fascinating idea, even exciting.
I guess this was around the time that I was possibly starting to get more interested in
working with computers than being a biologist. In this course, we had access to the university
computer, which was an Aliet 4-130. I later discovered that the Aliet company was a pioneer
in, at least in Europe, in producing a commercial Algole 60 compiler. I didn't know much about
them or who they were or anything special about them at the time, and I must admit, I've not
done a huge lot of research until I started putting it together this talk. I've given a few
links on the subject in the show notes. There's a lot to research that I doubt whether anybody
would be interested enough to do so, but it's an interesting subject how computers are developing
in the UK at this time. At the point that I was learning this stuff, I was surprised that there
weren't many books available this subject. You couldn't go to the library and find much.
I did come by a book called A Course on Programming an Algole 60 later. I don't think I had it at this
time. I think I got it later after I had left Aberystwyth, but I've presented it to you. There's a
photograph of the cover and an example of what's inside. This is similar to the sort of stuff that I
was looking at at the time. There was a formal language definition called the revised report on
the Algole algorithmic language, Algole 68. Now this is, you can see it yourself in the links,
it's pretty heavy going. It's not the sort of thing you'd sit down and read, especially if you're
not had much background in this type of stuff as I didn't. It contains a method of defining
computer language using so-called back us now for, which I actually found was quite an appealing
thing once I got my head around it. So I guess I was turning into a computer geek at that point.
My hidden geek was revealing itself. So although the whole process of writing programs was
utterly fascinating, I found that Algole 60 itself was an odd language. The thing that really got
to me was that the language was defined in an odd way and looking back at it from now, I can see
how weird it was. If you look at the example in the book, you'll see that the keywords in the language
like begin and if and then were marked in bold font. They're not in a sort of font you'd normally
see in the computer book. They're in standard font, but they've been made bold and in the report
which was written in a different way, they were underlined. So as a very, somebody with a very
literal mind, I could not work out how on earth we were supposed to type this stuff in. How are
we supposed to do bold stuff on a, on a punched card, which is the way we were preparing stuff?
And how are we supposed to underline it? That really puzzled me. Obviously we were given some sort
of answer to this, but it still seemed weird that it was being represented in this way. I think
my memory's a bit hazy here, that Elliot Angle, Algole used the method of enclosing keywords in
single quotes, a method called stropping, interestingly, and I've given a link to that. I don't have
anything in my records about this. It's probably somewhere lurking in the house, but I haven't come
across here. I'm in the process of tidying up this house, which is full of junk. But I couldn't
find any of this stuff. So certainly other versions of Algole represented the keywords in this way.
The other thing I had difficulty with was the way in which symbols like greater than or equal to
or the division sign is shown in the, in the texts. A division, integer division, was represented
by the thing you'd normally expect to see in it, in a textbook, horizontal line with the dot above
and below it. But there is no such symbol. There was no such symbol on the card punches. So there was
no way you could actually represent that. So how are we supposed to do it? It seemed, the
explanations to how this was to be done seemed very strange to me at the time. The language would
be defined in a way that you couldn't actually use. There must have been something that described
this. I think there were different ways of dealing with this for the different implementations
of Algole. Elliot Algole did it its own particular way. But I don't recall ever being shown any
documentation about it. Of course it was hard to get hold of stuff like that in those days
if it wasn't in the in the department library. Anyway, be that going on about this too much.
Algole 60 was quite an advanced language for its time and it was the precursor to many of the
high-level language concepts that you would see later in languages such as C,
modular 2, Pascal and so on and so forth. It's pretty much the grandfather of a lot of these
things. It uses begin and end to enclose blocks of statement which the blocks which you can also
contain declarations of variable and each block has its own scope. It invented this idea of
scope so that the variables in it were private to the the blocks above it but not within it
and they were destroyed when you exited the block. So this also was found in later languages.
There may be less so. I don't think Algole 60 tended to do this more than some of the later.
Anyway, I thought I'd tell you something a bit about the university computer. This was, as I said,
the Elliot 4130 which was for its time quite an advanced mainframe. It was to be found in
the mathematics department I think and on the upper floor. It was in a sanctum.
That sort of classic thing where special people were allowed in there and they wore white coats and
that type of us mere humans coming along to use it weren't allowed anywhere near it. It's a 24-bit
computer which seems odd by today's standards. I don't remember how big it was in terms of memory
but the range could go from 32k to 128k and this was core memory. This was ferrite cause. There's
a link to what that is if you're not sure. In 1965 apparently there had been a government
a report written which had recommended computers for UK universities and they'd said that the
Elliot range of machines were to be made available. The funded I guess because university computing
was funded centrally and an Aberystwyth was allocated this particular one. I'm not sure when it
arrived but I think it was fair bit before I encountered it. So the way of interacting with the
computer was to prepare a program, think about what you want to do, design it on a bit of paper,
then write it out on a coding sheet and you'll see what that is in one of the links that talks about
the punch card era. Then you'd submit it to data preparation staff who would type it up into
punch cards, 80 column cards. It's a picture of I have a collection of these things in my house.
It's a picture of some of them. They'd be returned to you as a card deck between two bits of card
board to protect them, the rubber band around them. You could have your program punched on
a paper tape but you wouldn't want to do that at this stage because if you need to change anything
you have to punch the whole thing again. It was a recommended way of archiving stuff you'd
already produced and finished off. It's a picture of a paper tape that I found when I was
digging around Hubstay's recent. I think the deck that you prepared had to have a job so-called
job control card. This is early command line business at the front and the back and this was to say
whose job it was and so forth so that the operators could identify and the computer could also
identify. Of course a whole bunch of card decks would be stacked together and put into the hopper
of a card reader and then zip through it read by the computer and process. So the job the program
would run and usually produce line printed output. Oh it didn't have to. It was the convention.
Then the red card deck would be returned along with the printout which you'd collect. Of course
none of this would happen while you were waiting. You'd submit it, you'd put it in a pigeonhole,
somebody would come and pick it up later on, put it through the computer, return it to the same
pigeonhole for you to pick up. So you'd drop the stuff off wander off, do something else come back
later on. In those days the mainframe would be unavailable from time to time for various reasons.
Most of which we didn't fully understand as mere users and the convention they used was they
had a colored rectangle in the window of the building and an external window and so you could see
from different points around in the campus what color rectangle was there. If it was green the
the mainframe was running but if it was red it meant it wasn't. We learnt then to say the computer
was down. I don't know why we did that down. Why down? I don't know. I do remember somebody actually
causing both the Elliott to to conquer out. There was a guy ahead of me waiting to to pick something
up. He was being scolded by one of the staff of the computer unit because he'd run something.
I think he was a computer science student and I think that you effectively had sole access to
this machine with just a very very thin operating system around your job and his was an assembly
language program which had gone rampaging but all over the place and completely wrecked the
the operating system and just so crashed it totally which meant that they then had to go and
reload it which I which as I understood at the time and read a bit about afterwards was not a
trivial thing. Getting a machine back to a state where it would run card decks through it was
something that would take 20 minutes but I've not found a huge lie about this. I'm not sure
anybody would be that interested if I did but just just as a point of interest. So if your program had
errors in it then you'd need to correct them. I mean the classic thing would be you'd submit this
you'd get your printout back and it would say syntax error you'd forgotten a semi-colon or
something. So you'd need to correct that. Well I don't think at that point we were given access
to card punches ourselves so the thing to do was either write out another piece of program on
a coding sheet and hand that in to be punched up and then insert it into the deck or they
have risked it had this method never saw anybody else do this they had they must have had their own
customized punch cards produced they had a red stripe on the bottom edge and they had an 80 column
form one line of a coding form actually printed on the front of the card. If you took the card out
and route your correction on it and then flipped it upside down so that the red edge showed
and then put it back into the deck then the operator spotted this on the on the way in and would
repunge that card and replace it. So that was the way in which you edited your program. There was
some sort of multi-user mode on this machine I vaguely recall there was a room with about half a
dozen tele types in it which which could be used for some form of access simultaneous access
to the machine. I think it was only available to the computer science students because I never
got access to it that would have been quite interesting but it wasn't for the likes of us as days
but it must have been extremely basic stuff. I wonder if anybody listening has any other experience
of this would be interesting to hear if they have any knowledge of the Elliot 4130 or the Elliot
range in general. So what happened then with with my dislike of statistics using mechanical calculator
then I think this is what we were expected to do although not many people did that we would write
programs to handle quite a lot of the stuff that we were doing. I don't think there were many
people who after the course carried on using alcohol and programming to do anything very much
but of course I was getting really excited about this stuff and enjoying it immensely
and was writing programs to do all the various statistical evaluations that we
that we were being required to do and so I built generic card decks you know one for a
chi-squared one for t-test and so on and all you needed to do is to get the data punched up on
cards and stick them on the end of it and then submit it and then you get back an answer to your
your calculation without having to do any nasty hand cranking and whatever other method of
calculating this stuff. So this came to the attention of the staff in the department and I was
asked if I would be prepared to donate these programs to to the department and I think there was
some sort of an online library system probably on mag tape or something that the department was
maintaining. So I did this and obviously had to do documentation with it was asked to do this
so I remember writing this stuff out is how you did it and you know what we had to put in
because it was all data in specific columns and this type of stuff how you signaled to the program
that that was the end of the data which was not a trivial matter in those days strangely.
So the documentation was then handed in typed up by one of the departmental typists
and put in the in the annals of the department. So I guess I can finish by saying that somewhere
in the early 1970s I was contributing to a type of open source software not not at a world level
but at least the level of the zoology department of Aberystwyth University. I hope you enjoyed
that. That's the end of my first summary of my geeky life. Okay, bye.
You've been listening to Hacker Public Radio at Hacker Public Radio.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast and click on our contributing to find out how easy it
really is. Hacker Public Radio was founded by the digital dog pound and the infonomicum computer club
and is part of the binary revolution at binrev.com. If you have comments on today's show,
please email the host directly, leave a comment on the website or record a follow-up episode yourself
on this otherwise status. Today's show is released under Creative Commons,
Attribution, ShareLife, 3.0 license.
