Episode: 1776
Title: HPR1776: Vim Hints 004
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1776/hpr1776.mp3
Transcribed: 2025-10-18 09:09:35

---

This episode of HBR is brought to you by AnanasThost.com.
Get 15% discount on all shared hosting with the offer code HBR15 that's HBR15.
Get your web hosting that's Honest and Fair at AnanasThost.com.
Hello everyone, this is Dave Morris. Today's show is another in the series of Vim Hints
and this is number four. Today I want to cover using the commands we've learned to
fire and joining them together with some new ones and to actually get the point where we
can change things in the file. We've been talking about moving around and configuring
it but we haven't actually touched on anything about changing the contents of the file.
This episode is probably going to turn it to be quite long. I've covered quite a lot
of ground here including a fair number of new subjects. I thought that perhaps the shows
up to now were going quite slowly, maybe too slowly for a lot of people. So I thought
that if you wanted to really get into Vim and you were a new user then I should bring
you up to the point where you could actually do some stuff with it, change things with
it. So I hope the length of this one and hopefully the quicker pace doesn't put you
off and that you enjoy it. So I'm going to start today with some more commands that
help you move around the file. We've seen how to move by character and by word and by
lines so far and we saw this strange thing about how Vim looked at words in different
ways, whether it included or excluded the punctuation, the spaces around it. I'm going
to look at some more movement commands and this time I've started giving you pointers
to the appropriate places in the Vim help system. Now to get to the help you type a colon
command, colon help or you can abbreviate that to H which is what I normally do. You follow
that with a variety of things. Unfortunately just using the help system to search for
a topic can be a little bit difficult because it's effectively doing a search through many
many files and it sometimes can hit things that you weren't intending. I'll talk about
how to do this better a bit later on to be honest when I've really worked out for myself
and feel confident to explain it. But the moment I'm pointing you at the documentation
files, so the one that covers the movement is motion.txt. If you type that name in full
after help then you will be able to look at the entire movement file. There's a lot
of stuff I haven't covered yet in there so beware if I get lost in there. I found it
a bit confusing digging around there myself but I'm trying to abstract things for you
to make it a bit easier. There's a help page about help itself. If you type colon H space
help in Vim then you will get some information about how to use help. In all of the cases
that I refer to help there are also online resources that effectively give you the same
text and I've linked them in the show notes. We're going to move around by sentence and
paragraph and these are referred to as text objects in Vim. A sentence is a sequence
of words followed by a full stop period if you like to use that term. An exclamation mark
or a question mark and then followed by either the end of the line or by a space and a tab
or a tab. So that's what you would call a sentence. There's a little bit more to it
than that which I won't go into here but anyway in normal mode then pressing the close
parenthesis character will move forward one sentence and the open parenthesis will move
backwards. Both of these commands take account so you could type three followed by the
close parenthesis to move forward three sentences. So that's pretty simple. A paragraph is a
group of sentences and the group is expected to begin after an empty line. In other words,
it's a block of sentences with blank lines in between them and in normal mode the close
brace, the curly bracket if you like to call it that. That character moves forward one paragraph
and the open brace moves backwards. Again both of these take account so a number followed
by any of these, either of these commands will move the appropriate number of paragraphs
forward or back. Now you might also want to move up and down the file. We've already seen
some ways of doing this. There was a minus and a plus command that moved up and down by single
lines or if you put a count on the front of it would move by multiple lines. So a 10 minus
moves up 10 and the line is 10 plus moves down. Now we've got a capital G command and that
moves to a specific line in the file. It's useful if you're writing a script and you get back
a message that says there was an error in line 42. You can move directly to line 42 in the
editor to see what's going wrong. If you just type a G capital G on its own in normal
mode it moves to the end of the file. If you type one G capital G it will move to the
first line of the file so the number that precedes it is the line you want to go to. There's
also another equivalent command which is two lower case Gs and that means the same as one
capital G. So as I say in my notes 42 capital G moves to line 42. You can also use the two
lower case Gs to move to a particular line as well. So 42 followed by two lower case Gs
moves to line 42 in the same way. It's a case that there's sometimes equivalent ways to
do the same thing with different commands in VIM. In fact you could say that some commands
are aliases of others or synonyms as they put it in the documentation. So that's pretty simple
stuff. So another way of moving around in the file is to search for a pattern and it's
not too surprising that VIM can do that. And if you want to find out more about that then
the file to look at in the help system is called pattern.txt. It's pattern because the thing
you're looking for is a pattern or I've used the term target, the string that you're looking
for, the sequence of characters you're looking for is referred to as a pattern. So to search
forward you press the slash key. Now it's the normal slash key, the one you use in URLs
and that moves you forward. The question mark key moves you backwards. So to begin a search
you press one of these characters the slash or the question mark and it appears in the
command line at the bottom of the screen the similar way to when you press the colon it
appears there. And then the next thing that you type the characters you type are going to be
the search target or the pattern. When you have finished typing that sequence that you want
to search for then you press the carries return key which I've signified in the note as
we are with a less than greater than around it. Carriage return or indeed the enter key
that most people have on their keyboards and then the search starts. Now the search target
can be something quite simple like a sequence of letters and numbers but as I've said already
it's actually a pattern which is a more complex thing which can be a regular expression.
Now regular expressions in Vim's big subject so I'm not going to deal with this today.
We probably need to spend one or more episodes looking at this in a fair bit of depth
because this is where a lot of power is in Vim. We'll restrict us to simple searches for the
moment. So in the notes I've shown if you typed slash THE and then press the character
and key or enter key then it will search Vim will search for the characters THE in the
file and the cursor will be positioned on that next occurrence forward in the from where
you were at the start. Now if when you are typing your search target you press escape
because you've changed your mind or whatever then the search will be aborted. Once the
first occurrence of the target of the pattern has been found then pressing the N key will
move to the next one. This is all in normal mode of course. Now the N key results in forward
movement if the search was initiated by a slash which means move forward and it will be the
next occurrence backwards if you're using the question mark. There is an alternative which
is to press the capital N and that causes the search to move change direction and move to the
previous one in the opposite direction. Not too surprisingly you can put a count in front of
searches. I don't do this much myself I have to admit but you can if you want to. So if you typed
THE which would be invisible you don't see the counts that you type you start in normal mode.
Type of 3 then slash BT press the character turn key then it will position to the third instance of
that sequence BT from the current cursor position. Now there's quite a lot of things that you can
configure to affect the way that searching works and in this episode I've recommended several of
these but I'm going to do them later on in the in the show so I'll just summarize them very
briefly here their things around to the configuration file and of course. So you can if you want to
set things up so that you ignore the case of letters when you're searching so if you typed
the example THE then it will go for any capitalization or lowercase combination of those three
letters. Now you might find that useful I have enabled that recently and do find it quite
useful. There's a way to say yeah but if I want an explicit capital I want it to begin with
a capital T followed by lowercase HE how do I do that well the answer is you would type it
in in that form any pattern that contains a capital will invoke a search for that specific
set of characters in the relevant cases. You can also configure things so that the search
starts as you're typing the target so you'll see the window moving to the appropriate place as
you're typing it typing the sequence I'll talk a bit more about these when I get them. You can also
make the search wrap round so when it hits the bottom the file it will start at the top or if
you're going the other direction if it hits the top it will start again at the bottom and you can
also make it highlight all the matches to the search so that it's very obvious when you initiate
the search where you're going to jump to for the next search the next when you press the N key.
As I said I'll talk a bit more about these configuration options a bit later on but I'll leave
searching pretty much alone for much of the rest of this show and go into it in a bit more detail
later. There's another thing you can do in moving around which I thought would be quite
interesting to talk about at this stage of course there's lots more I'm skipping over today.
It's possible to move between move the cursor between matching pairs of characters so if you've
got an open and close parenthesis then or parentheses the program I should say or opening and
closing braces or opening closing brackets the square brackets then you can jump between
them which is very useful if you're typing code which where you've got nested brackets.
So you do this in normal mode the command that you use is the percent sign.
If the cursor is placed on the first character of one of these pairs it will jump to the closing one.
It was on the closing character it will jump to the opening one. I didn't find it documented
but I experimented and found that if the cursor is positioned before the opening character of the pair
it will jump to the closing one so it was on the same line and before it it will jump to the
closing one which is an interesting way. I suppose Vim is assuming that you position on the opening
one even though you're not but you're close to it. If it's between the two characters then it
will be positioned to the opening one so again I guess Vim is assuming that you're closer
to the closing one and jump to the other one. The percent command can be used to jump
between the start and end of C style comments as well so if you're writing the C program or
you're writing CSS or something which uses them then you can do that quite a number of
languages use those comments. That's a slash and a star in case you're not looking at the notes.
It's possible to configure Vim so you can have other pairs of characters in that list of matching pairs
but you're fairly limited because the two characters have to be different so you can't do things
like jump between opening and closing quotes because of the same character.
But there is a plugin, Vim has got a whole plugin infrastructure available to it and there's one
that does a very very nice job. You can jump between an if and however you close an if
in the language you're working with an end if or something like that or between the if and the else.
So that is very very powerful. I have this installed but I'm going to leave that alone for now
until we get to the point where we look at plugins in this series and be several episodes ahead I think.
So now we can come to the thing that I've been working towards now for three episodes
which is to tell you how to change the contents of the file that you're working with.
I don't think I've said so far and I will need to enlarge on this but when Vim's editing a file
you're not editing the file directly, not too surprising.
What you're doing is you're editing a copy of it. It's stored in what Vim calls a buffer.
The buffer is what you see on the screen in what Vim calls a window.
We'll go on to this much more detail later.
So it's pretty obvious that that's what's happening because you know that you can discard any changes
you've made with typing colon Q exclamation mark or you can save it with colon W.
That's the point at which it's written out to the file and you can also undo stuff and so on and so forth.
So what we're talking about here when we say making changes is making changes to the buffer.
So let's start with the insert commands that allow you to insert new text.
There's a bunch of them and they are always preceded. It can be preceded by a count if you want to.
I think it's good to know this because it's a good way of inserting blocks of stuff.
We'll come on to that in a more detail in a minute.
Now the help text that I would refer you to for this is called insert.txt.
So you type colon H insert.txt and I've also given you a pointer to a version of this on the web.
So let's start with the commands to append.
The lower case A command appends text after the cursor.
So what happens is that Vim moves from normal mode into insert mode, which we discussed briefly before.
And anything you then type will continue to be added until you hit the escape key.
When you do that, when you press that escape key to end your insertion.
If there was a count before the command, the insertion you just done will be repeated that many times.
That's the lower case A that puts it directly out of the cursor.
The upper case A is also an append, but it appends to the end of the line.
So it moves the cursor to the end alone and then starts inserting there.
There's a plain insert command.
The lower case I inserts text in front of the cursor.
And again, it takes the editor into insert mode.
You type stuff and then you hit the escape key to stop.
And then again, if there was a count before the I, so if you did 10 I and then type some stuff, escape.
Then the insertion is repeated that many times.
There's an uppercase version of this uppercase I inserts text at the start of the line.
Now, it does this before the first non-blank.
So if you've got some spaces or tabs and then some text and you want to insert before that piece of text, this will...
This is the command to do it.
It'll repeat if there was a count.
And there's an alternative command which is lower case G followed by uppercase I.
It's just similar to I, but inserts the uppercase I, but inserts the text in column I.
So that's a useful one to know.
There's also a couple of commands that deal with beginning a new line, adding a new line to the file.
The command lower case O begins a new line below the cursor, regardless of where it is on the current line.
And then you can type text into that line that's just been created until you press escape.
Oh, it opens a line, the documentation says.
If you have used a count before the lower case O, then after the escape it causes multiple new lines and text to be added.
The uppercase O command begins a new line in pretty much the same way, but it puts it above the cursor.
It opens a line above where your cursor is and everything else is pretty much the same.
So I've given a few examples just to help you get your head around what you can do with this.
So for example, if you typed 8080 as your count, followed by a lower case I, followed by a hyphen, and then hit escape.
When you do that at the beginning of a blank line, you will fill that line with 80 hyphons.
That's a very convenient way of putting a line of hyphons in a document when you're doing it.
The next example is using the E key, which remember moves to the end of a word, which have a word you're currently on.
It moves the end of it, followed by a lower case A, followed by an S, followed by the escape.
So what that means is, move to the end of this word, and then append an S to it.
So you could that way add the character on the end of the word that you've forgotten when you typed it originally.
My last example, if you typed 1010 as the count, followed by a lower case O, then hello world, followed by an escape.
Then you'd get 10 lines containing hello world inserted into your buffer to be exact.
Let's look at deletion, to information about deletion, and the next topic is in the file change.txt in the VIM help.
First of all, there's a command called X, a command, a lower case X, and in normal mode, it just deletes the character under the cursor.
If you use the count with it, it would delete that character, and then the next count minus one characters to the right.
But if you put 99X, and there's only three characters on the line, it just deletes those the characters to the right and under the cursor.
Point is, it won't delete beyond the end of the line. It doesn't keep on deleting into the next line.
The capital X command, in normal mode, deletes the character before the cursor.
So X, the lower case X means delete under the cursor and to the right, uppercase X means delete the character to the left of the cursor.
Again, you can put a count on it. It will not delete before the start of the line.
Now, there's a group of commands that begin with D. If you type DD, two lower case Ds, then on a line, it deletes that line.
If you put a count on it, five DD or something, it will delete five lines from the current line downwards.
The capital D is a slightly different thing. It deletes from the character under the cursor to the end of the line.
So it's a good way of sort of chopping off the end of the line.
If you put a count on that one, it will delete from the cursor to the end of the current line, and then it will delete the next count minus one full lines.
So it's a slightly odd thing. I never use that because I don't find it useful, but I think it's just because I've never got into the habit of using it.
I can't always see a use for it, to be honest. It's more efficient of mine than anything wrong with them.
There is a lower case D command, but I'm going to leave that for the moment because you need is usefulness comes with the next topic really.
So I'll leave that in for a few minutes.
There's a similar group of change commands, which allow you to change the contents of the buffer.
The CC command, this is two lower case C's, it deletes that number of lines specified by the count if there was one and one if not.
And it enters in certain mode to allow text to be inserted, and then you press escape at the end to finish the insertion.
So C stands for change, so thinking of it as a change is probably the best thing to do, but effectively what you're doing is deleting what's there, and then replacing it with the stuff that you type.
The uppercase C command, similar to the uppercase D command, and it deletes from the cursor position to the end of the line.
And then it inserts, it goes into insert mode so you can type stuff and press escape at the end of it.
Now if there was a number, or if you put a number account in front of the uppercase C, then it will delete that number of lines including the bit of the line that you're on,
depending where your cursor is, and then allows you to insert stuff.
So it's very, very closely equivalent to the D command, the uppercase D, except that you can also insert stuff.
You could just do uppercase D, and then press I, it's equivalent to that.
There is a lowcase C command, just the one C this time, which is similar to the lowcase D command I mentioned before, but again I'll hold that one back for a short while.
Then there's the S command, the lowcase S command deletes the number of characters specified by the count that precedes it, one by default.
It enters insert mode, and let's type stuff which is ended with an escape as usual.
So that's S for substitute, so that's really for dealing with a small number of characters on a line.
The uppercase S command is a synonym for the two lowcase C's, which is delete this number of lines, and then insert going to insert mode.
So you can type some replacements, so it's just the two are completely equivalent.
Now there are more things you can do to change and add and delete text in a file, but I'll leave them for another time.
It's probably enough to be going on with there, but the power, one of the really powerful features of them is that you can join together commands to get some quite useful effects.
You can join together some of the commands we've just heard of, the ones have changed things with movement commands.
So if you want to do a delete with a movement, such as delete a word or delete a sentence, then you use the lowcase D command that we mentioned earlier.
So you follow the lowcase D with a motion command.
So if you combine lowcase D with a lowcase W, then it will delete.
Remember, lowcase W means move to the start of the next word.
So this means delete from wherever the cursor is to the beginning of the next word.
So it's quite useful if what you're doing is your cursor is positioned on a word already on the first character of that word.
And you type DW, a lowcase in the bookcase, then it will delete all of that word and the spaces that follow it to the next word.
So it's quite useful if you've got VV or something like that in a sentence, then just position to one of the V's and type lowcase D and W and you delete it and the space.
So my table shows this command, command combination if you like, and also talks about the D, lowcase D, lowcase E, where we know that E, lowcase E means move to the end of the next word or the current word if you're on it.
So if you were halfway down a word, for example, lowcase D, lowcase E would delete to the end of it, but not beyond, not to the space after it.
Lowcase D followed by a dollar, remember that means move to the end of the line, will delete from where you are to the end of the line.
So it's the same as using the capital D command we saw before.
Lowcase D followed by zero means delete from before the cursor to the beginning of the line because the movement is from where you are to the start of the line.
As we saw I think in episode one and D followed by a close parenthesis is means delete the sentence.
So the movement is from wherever you are to the end of the sentence.
So the delete in combination means delete to that position.
You can also use the lowercase C command which we skipped over before in a similar way.
So my examples are pretty much the same in the table shows C, lowercase C followed by lowercase W, which means change from the cursor position to the start of the next word.
So if you wanted to do that in order to replace a word, you also got to replace the space after it.
If your cursor is on the beginning of that word, you want to change it, you do that.
It will be fine, you will type it in, but you also need to bear in mind that you move the space as well by doing that.
C, lowercase C, lowercase E will change from the cursor position to the end of the word.
The next word really is the right way to put it because you might not be on a word at the time, but it will move you to the end of the next word to the right.
C, lowercase C followed by a dollar will change from the cursor position to the end of that particular line.
So it's the same as the uppercase C command we just looked at.
C, lowercase C followed by zero will delete up to the beginning of the line and then go into insert mode so you can insert things.
And you can also change the entirety of a sentence with lowercase C followed by a closed parenthesis.
This loads more ways moving around and therefore there's lots more ways of deleting or changing in conjunction with those movements.
We'll deal with those as we go on into future episodes.
So that's the end of the section talking about movements and changes and stuff and hopefully that's got you.
It's either introduced you to some stuff you didn't know or has got you to the point where you feel confident about using VIM as a means of changing stuff in your file.
Now we're going to look at the configuration file. I've got a lot of extras to add to it.
There's some help all about the very large number of options available in VIM and it's in a file called options dot TXT.
So type colon H space options dot TXT within VIM and you'll see it or you can go and look at the link that I've used in the notes.
So first one is the visual bell. VIM tends to beep to alert you to things.
I put up with that for a long time actually I didn't really bother about it but when I was sharing an office with somebody at one point I was saying why is your bed to keep beeping?
So that was point on which I went and switched that off and you do that with set visual bell.
So what it does is it flashes the screen rather than beeping.
There's an abbreviation SE space VB if you want to do that.
Like I said in earlier episodes I would not use those myself because then you go and look in your config file and think what the hell is that?
Visual bell at least is a little bit more understandable but I've put them in for completeness.
You can use set no visual bell. You really only want to do that if your Linux distribution sets that in the system wide files.
Sometimes happens I think you'd want to switch it off to your preference.
You can type these commands on the in the command area of VIM as well.
So you could type colon set no visual bell if you wanted to switch the beeping back on again at any particular point.
But if you do that it's not it's permanent through the rest of the session but having them in the config file is obviously better because that will be the default setting.
When we are typing stuff to VIMs as I mentioned earlier on you typing the count in front of a command you don't see anything happening.
You only know that it's worked when you've done you've typed in your 10DD or something and you see 10 lines vanish.
But if you switch on the option show command SHOWCMD you set that it you will see the components of the command that you're building up, the count and the initial letters of a multi letter command.
You see them down in the status line as you're doing them.
So if you were wanting to type 23DD meaning delete the next 23 lines then you would see the 2 3D part down in the bottom line.
If the phone rang at that point you you were distracted.
What was I doing? You would look back and say oh yeah I'd got that far down that deletion and I just need to type the final D to make it happen.
So it would then happen and the display would be cleared and so on. Maybe the display is cleared before the command's action but there you go.
So there's abbreviations and there's methods of reversing it as well. There's no point in me reading these out to you because A you probably won't want to use them and if you do you can read the notes.
Now then remember the last 50 colon commands that you use and also the last 50 searches and a bunch of other things which you haven't touched on yet.
It keeps them in separate history tables. When you press the colon key when you're about to type a command you can actually press the up arrow key and see the previous command that you entered you can do that for 50 times.
Similarly if you type a slash or a question mark to begin a search you can use the up and down cursor keys to look at all the things you did in the past and reissue them.
So it can be useful to have these tables bigger than 50 lines so there's an option set space history equals and then the number and I've given you the example here of setting the history to 100 lines.
The history can be kept between them invocations but I was going to leave that mechanism till the next episode so I'll skip over that for now.
Now we get to the things I mentioned about configuring searches so you can if you want to switch off the case sensitivity in your searches and you do that with set space ignore case all on word.
I don't use that on its own but I do use it in conjunction with and you need to set both of these I think to set smart case smart case the one I described earlier where it will search for both the lower and upper case forms when they're only lower case letters in the search target but it will search for an exact match when you've got a mixed case target.
Setting the two ignore case and smart case will switch on that functionality you might also want to search in an incremental way that is as you type the search pattern VIMS already hunting for the match to what you've typed so far.
There's an option ink search I and C S E R C H type set in front of that you will enable that feature the matched string is highlighted so if you're typing you want to look for the word the THE you type the T and VIMS already moved to the first instance of T and you type the H and then it will hop along to the next instance of TH and then you type the E and it will move to the THE.
The search is not finished yet you need to press the return to enter key to action it so you actually position your cursor there but you see what you've already seen where it's going to go.
If the pattern that you're typing is invalid for whatever reason or the pattern you're looking for is not found then you're not going to see anything on the screen.
In the documentation it warns you not switch this on if you've got a slow link because VIMS old I mean VIMS fairly old and it relies on an even older VI so those sorts of things were considerations in the old days they still can be if you're running VIM across an SSH connection to a remote machine for example.
So you might want to bear that in mind if you've got a pretty slow connection to a remote server and you're trying to do this you might want to switch it off but I'm sure you'd see things going slowly as consequence and would think to do that fairly quickly.
Anyway ink search is quite useful I think normally you can also make the searches wrap round as I mentioned before so normally if you don't switch this on then VIMS will stop at the end of the file for forward searches or at the beginning through reverse searches.
If you set RAPSKAN W-R-A-P-S-C-A-N then it will just go beyond the beginning or the end of the file and continue the search at the other end of the file.
So you do get a message in the status line that says exactly what it says but the message is conveying the fact that it's wrap round.
But it's useful because you might be starting your search going forward from the middle of the file forgetting that there are instances above where your cursor is so you'll go from the bottom round back to the top and then find the ones above your cursor.
You also can switch on this highlighting business I mentioned before with the HL search H-H-L-S-E-A-R-C-H if you type set in front of that in your configuration file then when you've made a search it will all of the instances that match that search will be highlighted.
Your cursor will be positioned on the first one after the search has been invoked the first one from your cursor position that is but you'll see all the any others that there are there.
Now this is great it's fantastic but if your search has been for the letter A or E or something you can have loads of highlights all over your screen.
You probably want to switch that off after you've done the thing you were setting out to do because the highlight stays on until you cancel it so you need to know how to cancel it and the way you do that is with a command that you type into the command line.
So you type colonNOHL search not too surprising you're switching off that HL search feature that you just that's been enabled in your config file.
You can abbreviate that this is a case where you would want to abbreviate it colonNOHL that switches it off.
Now most people have a key program to do this for them automatically. We haven't yet got to how you do that so but that'll probably be one of the first that we configure in that way.
Now the final one I haven't mentioned before concerns some extra features that you can enable within insert mode.
VIM allows you to do more when you're in insert mode than did VI. Some people even work in insert mode most of the time where VIM would behave in a similar way to editors like NANO for example.
Now there is an option setbackspace which enables these features. There are three things that you can set that are just words that you add after setbackspace and an equal sign.
It's documented in the notes of course. Just to explain what the three things mean.
What it really allows you to do is once you're in insert mode you can move backwards through your inserted text but more to the point you can move out of the inserted area and go and fiddle around with existing text just like you would in NANO and a number of other editors that are not modal like VIM.
So if you after setbackspace equals you put indent then it allows you to backspace over auto indent so we haven't covered that yet but in a nutshell you can make VIM indent as your typing stuff in inserting or appending or whatever.
Make auto indent so that the line the new line you just created aligns with the one above it which is fantastic if you're typing code of some sort like Python or whatever where where alignment is either critical or very highly desirable for readability.
I'll talk about this later but you can backspace over it if you enable that thing so I'd strongly suggest you switch that on.
EOL is the next one that allows you to backspace over line breaks which gives you the feature of being able to join lines together by deleting the new line character between lines and the third one is start and this is the one that lets you as it were break out from the area you've just been inserting into previously existing text.
So I would strongly suggest that you switch this one on in your config file because well why wouldn't you? I mean it just gives more flexibility to VIM.
Okay that's pretty much it in the show notes the long show notes of course I've tried to summarize all the commands we've covered just with a list of what they are and a very brief set of notes.
I was hoping that you'd be able to just go and look at them or copy them into your own notes or something and I've also given you the entirety of the configuration file up to date.
So that includes all the things we've done in previous episodes and the new stuff we've added in today. I'm going to keep doing this for a while longer I think.
I've given you links to all of the documentation that I've mentioned as we've been going along. There's a link back to the previous episode just in case you want to go and have a look at that.
I think I've tried to chain them so if you go back to three you can go back to two and so forth. I'll continue doing that.
The other thing is that I found a graphical cheat sheet which is a poster containing summary of all of these commands and quite a lot more than we haven't covered yet which I thought you might like.
If you've got access to a big printer, probably need an A0 printer and a very large wall for some of these but anyway I thought it would be pretty cool and what you might like them.
Final thing is to say that I have made another EPUB version of these notes which I think are not too bad for this style of notes.
It's the code examples that don't work very well but this is still using PanDoc to generate the EPUB so it's not as nice as I'd like it to be and I haven't had time to do anything else with it just now.
Alright that's it then for this time. See you on the next Vim Hints episode.
You've been listening to Heckapublic Radio at HeckapublicRadio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast then click on our contributing to find out how easy it really is.
Heckapublic Radio was founded by the digital dog pound and the Infonomicon Computer Club and it's part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the create of comments, attribution, share a light, flee.or license.
you
