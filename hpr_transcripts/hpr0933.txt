Episode: 933
Title: HPR0933: Freedom is not Free 1 Introduction
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0933/hpr0933.mp3
Transcribed: 2025-10-08 05:08:29

---

Hello, this is Ahuka coming to you again on Hacker Public Radio and I'm going to start
a little series here.
I don't know exactly, it might be three, four different programs, we'll see as we go
through this.
But I want to talk about what we do in what we call the free software.
Sometimes it's F-O-S-S, sometimes it's F-L-O-S-S, that Linux is considered to be a part
of as well as many other things, free BSDs, certainly in this community and many applications
that we use.
And when we talk about freedom, what do we mean exactly?
Well, there's a number of things, the topic of free software.
I think you really have to start with Richard Stallman, you have to start with the free software
foundation, which I happen to be a member of and I know some other people around here are
also members of the free software foundation.
And I think it's very important.
This all started way back in like the 1970s and 80s when all of this was starting to come
together.
Richard Stallman was working at MIT and he had a program, it was a printer thing that
he was working on.
And the printer was just not working properly on the network and the people he was supporting
were complaining about it.
So he wrote to the manufacturer and said, please send me the source code for this printer
so that I can fix it and get everything working properly.
And the printer manufacturer said, no, we're not going to do that.
We own that code and we're not going to share it with you.
Well, that is the beginning of everything that we're talking about in the free software
community.
So what did Stallman do?
He said, well, you know, there's something wrong here.
There's something wrong in the idea that people are not allowed to access the software
that they need to use every day.
They're not allowed to access that code, not allowed to do anything with it.
And so he started what is now the free software movement.
He looked at it and said what we need is something equivalent to Unix and but something that
is free.
It's not controlled by anyone.
Unix at that time was owned by AT&T, it's gone through a number of iterations since
then but, you know, it was originally developed at the Bell Labs.
We probably know that Ken Thompson and Dennis Ritchie were working on that back in the 1970s
and you know, that came, got released.
But it was owned by AT&T, they wanted to sell it, they wanted to make money, they controlled
it.
Richard Stallman said, nah, let's get away from that.
Let's get something that we control and that can be free.
Now, an operating system like Unix is very complicated, Stallman decided that he was
going to start by developing all of the tools that he knew were going to be necessary.
So you would have to have a text editor of some kind and so he started, he and his and
the people who worked with him started developing EMAX.
He said, you know, you're going to have to be able to compile the code you develop.
So he started writing compilers.
So he was building all of the tool kit necessary and he had just about gotten to the point of
thinking, well, I'm going to start work on the kernel, which was called herd, H-U-R-D.
And right around that point, Linus Torvald's starts what became Linux as a college student
in Finland.
Now when Linus Torvald's did that, Linux was the kernel.
Some people would say it still is, I don't want to get into the semantic argument about
what we mean when we use the word Linux.
But he didn't worry about developing the text editors, the compilers and all of the
other stuff because it had already been done.
And he was able to make use of what Stalman had developed to help develop Linux.
And in a way, that's a great example of what we mean by free software.
Now, after initially releasing under a slightly different license, Linus Torvald's turned around
and released it under the GPL, and he has said consistently, as the best thing he ever did
was to release the source code to the Linux kernel under GPL.
And GPL is something that also comes from the free software foundation, Richard Spalman,
Evan Moglin, all of those wonderful folks who wrote this license.
Now, what do we mean by freedom in this sense?
And Stalman defines this very carefully as the four freedoms.
Freedom zero is the freedom to run the program for any purpose.
So, okay, well, why is that different right now?
Well, if you read a ULA, the license that most proprietary software comes under, you
discover that they may limit what you can do with the software.
Right?
So we just had an example just a few days ago, as I'm recording this, with Apple, that
they developed a software that can be used to create textbooks, and in the license it
says, if you plan to sell the product that you make with this software, you must sell
it through Apple, and then Apple can take their cut, et cetera, and a lot of people
are kind of upset about all of that.
So I mean, that software, you don't always get the right to use it the way you want to,
and that's a problem.
So, freedom zero says, I can take any piece of software and run it for whatever purpose
I want to use it for.
So, that's freedom zero.
Why do we start with zero?
Well, you know, people who are mathematicians will always start with zero.
It's the only intelligent thing to do.
Now, then the next one is freedom one, and a freedom one, according to the Free Software
Foundation, is the freedom to study how the program works and change it so it does your
computing as you wish.
Well, that's exactly the problem that Stalman had with that printer driver.
And then they note that in order to do that, you have to have access to the source code.
That's a necessary precondition.
You can't study how the program works and change it if you do not have the source code.
So when we talk about open source software, that's just another way of saying it is software
for which the source code is freely available.
Now, I don't want to say that open source in Free Software are identical because I don't
believe they are, and that's one of the things we want to talk about a little bit.
But this is clearly one of those places where they're both talking the same language access
to the source code.
Then, number three is freedom two, and that is the freedom to redistribute copies so you
can help your neighbor, all right?
So with this kind of software, you have completely legally the right to give someone a copy of
the software.
Say, here, you know, this will solve your problem, take it, use it.
We're not talking about piracy here, whatever, you know, that happens to me.
That's a very complicated problem that certain people are trying to make very, very simple,
and it isn't.
But that's not what we're talking about here.
We're talking about software that the people who write the software are saying, hey, go ahead,
take it, use it, you know, give it to people, we're cool with that.
We have legally given you the right to do that, so that's freedom two.
Then, freedom three, which is the fourth of the four freedoms, zero, one, two, three,
freedom three, freedom to distribute copies of your modified versions to others.
By doing this, you can give the whole community a chance to benefit from the changes you make.
And again, we note that access to the source code becomes a precondition, all right?
You can't modify if you don't have the source code.
And when you give it to others, you need to give them the source code as well.
So those are the four freedoms, and that's what we mean when we talk about free software,
it really should be what we mean by it.
Now, the problem is, when we use the word free, free has different meanings.
So free can mean free as in freedom.
There's a fellow named Bradley Coon, who has been, it's kind of the chief enforcer of the GPL
license, the free software license.
And he is a great supporter of that.
He's now the executive director of the software freedom conservancy,
which is an organization that makes it easy for a lot of projects to collect donations
and put the money to good use.
The very useful thing that we'll talk about in another part of this series, I'm sure.
And Bradley Coon has a podcast called The Free is in Freedom Podcast.
So if you're interested in that sort of thing, you might want to check out his podcast.
And you can find that at faif.us, that's the URL, I've also got that in the show notes.
So that's free as in freedom.
We also talk about free as in beer, as in, well, you know, free beer is beer you didn't
have to pay for.
What we call free software frequently is free in this sense as well, but it doesn't have
to be.
There is nothing in the four freedoms that says you cannot charge money or ask for money
or anything financial.
It's not part of the concept here.
Now if you are freely giving the source code to people, there is an argument that says,
well, then they could just compile it and run it and it doesn't matter if you're trying
to charge, they can just rip you off.
Now, have you ever noticed that even commercial software, people rip that off all the time?
So I'm not sure that that's a really compelling argument.
In fact, you know, if you go to the crack and wears sites and all of that, that's probably
easier than for most people than actually getting the source code and compiling it.
You actually have to have three or four brain cells working to do that sometimes.
So these are the two things.
One of the things that occurs to me is I've been thinking about this over time.
If you have to explain what you mean by free when you talk about free software, you just
might have a problem.
So that's why I call this freedom is not free.
Let's explore what we mean by that, okay?
In a free software community, you have a lot of developers, programmers, whatever
term you want to use, who do wonderful work.
But all of us have bills to pay, families to support.
So you know, somehow or other money has to flow to the people who are doing this work
if that's what they're relying on.
So in a lot of cases, you have people who are developers who are on the payroll of
a company, but the company says we want you to work on this free software, right?
So you have people from Red Hat who are working on the kernel.
Red Hat is one of the major contributors.
I think last time I saw they were the largest contributor to the kernel.
But you know, that's an example of that.
Other companies, IBM, has developers assigned to free software projects.
Google has developers assigned to free software projects.
So that's one of the ways that happens.
Sometimes people do it as a hobby in their spare time, and so maybe they're not quite as
reliant on the finance, but that's something we do want to talk about.
Now, we talked about open source versus free, and that's an interesting problem as well,
because open source is based on access to the source code.
And in some cases, that's extremely important.
If you were a company and you were relying on, let us say, database software to manage
your business, you would not want to be at the whim of someone who doesn't let you take
a look at any of the code.
I mean, that's just that's kind of silly.
So in a case like that, you probably have people on your staff who understand the code,
and if they have access to it, they can maintain it, they can adapt it to your use, etc.
But what about the home user?
Does the home user really care?
And I said this once in a lug meeting, and I almost got lynched.
Any number of people got incensed.
People are talking about you wouldn't buy a car if the hood was welded, shot, and all
of this.
And what I was trying to say, and maybe I just said it really poorly, is say, what is the
motivation of your average, hey, I got a computer, I want to surf the web, I want to Twitter,
I want to go to Facebook, I want to read my email.
I want to look at videos on YouTube.
Your average home user, does your average home user want to look at the source code?
And in my argument is generally speaking, no, I take a look at myself, alright, I think
I've said before, I am not a programmer.
I like programmers, I admire programmers, I'm grateful for the work they do, I'm just
not one of them.
You could put the source code in front of me, and it might as well be Greek, because
I wouldn't have the painest idea what to do.
So access to the source code is not a big thing for me personally, I'm glad it's available,
I understand it's important that it's available so that people who do understand source code
can get in there and take care of things, but it's not at the top of my list of things.
So I think when we talk about free software, we have a great deal of ambiguity about
what we mean by the word free that causes problems, and we talk about open source, we're talking
about something that kind of goes over most people's heads.
I want to say something a little different, I'd like to refer to the software we use
as community supported software, because I think that really gets at the heart of it.
It's not software that is supported by a profit making company that is going to hang
on to the code tightly, restrict who can see it, and we're going to sell this, and we're
going to make money, and if you try and take a look at the source code, we will sue you
into oblivion and all of that.
Now we're talking about software that is supported by a community.
And I think if you do that, you start to understand that, well, who's the community?
We are, all of us are, we are all part of this community.
And I think that means that if we put any value on this software at all, we have to put
a value on our support of it.
We need to support the software in various ways.
Now I've come up with four ways that I can think of, and Golly, if there's stuff I'm
missing, please let me know, because I'd love to include all of that.
So what are the four things that I can think of?
The first thing is submitting bugs.
That's a topic I want to explore in some detail in the subsequent recording, but that's
an important thing, and anyone can do that.
It doesn't cost you any money.
It does cost you a little bit of time.
But if you have a problem with a piece of software, no software is perfect, just because
it's an open source or free software, I think that software is of excellent quality, but
every software, there's going to be bugs.
And so it really is a help, and developers, you talk to developers, what they always say
is, boy, if you just give us information about bugs, we could probably do something about
fixing them, they really want that.
So that's the first one.
Second one, documentation.
This is one that I would have to say software in general is poorly documented.
Riley has made a living out of a whole series of things called, you know, in certain name
of software here, the missing manual, okay?
And that's generally about commercial software where you would think maybe the company might
actually have an incentive to produce decent documentation.
They don't tend to these days.
With open source software projects, we need much better documentation.
That's another topic I want to come back to in a subsequent recording here.
The third one I want to mention is financial support, okay?
It does take money to run these projects to help support the developers, et cetera.
If it's a piece of software, you use a lot, and there's a donation button on the web page,
you know, give them five or ten bucks.
Come on.
I mean, assuming you have the money to do this, and like I say, five or ten bucks, most
of us could come up with that once in a while to help support some of these things.
So I want to come back and I want to talk about financial support and some of the different
options there.
And finally, I'm calling this advocacy.
Maybe there's a better name for it.
If you get involved in, for instance, Linux users group in your area, get involved in
some of the free software related events that are going on.
I'm involved with Ohio Linux Fest, and I'm sure that's going to come up as we go in.
These are all things you can record a podcast for, you know, record something for Hacker
Public Radio.
I mean, these are all ways of making a contribution.
And that's really what we're talking about here is making that contribution.
So what I'd like to say in closing is that if you use this software, if you value this
software, if this software is important to you, if you would say, gee, my life would be
poorer if I didn't have access to this stuff.
If I didn't have access to Linux, if I didn't have access to, well, you know, I'm recording
this podcast on Audacity, you know, Audacity is important to me.
Whatever it may be, support it in one way or another, or maybe some combination of them.
You know, submit some bugs, help with the documentation, throw them a few bucks.
You know, maybe do a presentation on the Mitch your Linux users group, trying to get
some word out, you know, all of these are ways you can do it.
I think the more that all of us get involved in helping with all of these things, in making
it a community project, the better all of us are going to be.
So this has been Ahuka, and I'm going to sign off now, and thank you all for listening
to my little podcast.
Bye.
You have been listening to Hacker Public Radio, or Hacker Public Radio does our, we are
a community podcast network that releases shows every weekday and Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener by yourself.
If you ever consider recording a podcast, then visit our website to find out how easy
it really is.
Hacker Public Radio was founded by the digital dog pound and new Phenomenal and Computer
Club.
HBR is funded by the binary revolution at binref.com, all binref projects are crowd-sponsored
by linear pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting
needs.
Unless otherwise stasis, today's show is released under a creative commons, attribution, share
a line, free those own license.
