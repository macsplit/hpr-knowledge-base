Episode: 3209
Title: HPR3209: Linux Inlaws S01E17: Nextcloud
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3209/hpr3209.mp3
Transcribed: 2025-10-24 18:55:11

---

This is Hacker Public Radio Episode 3209 for Thursday 19 November 2020. Today's show is entitled,
Linux in Laws Season 1 Episode 17, Next Cloud,
and is part of the series, Linux in Laws. It is hosted by Monochromec
and is about 70 minutes long
and carries an explicit flag. The summary is
chat with Frank Carlett-Jack about Next Cloud and forking your company.
This episode of HPR is brought to you by Ananasthost.com.
Get 15% discount on all shared hosting with the offer code
HPR15. That's HPR15.
Better web hosting that's honest and fair at Ananasthost.com.
This is Linux in Laws, a podcast on topics around free and open source software,
any associated contraband, communism, the revolution in general, and whatever else,
fans is critical. Please note that this and other episodes may contain strong language,
offensive humor, and other certainly not politically correct language.
You have been warned. Our parents insisted on this disclaimer. Happy mum?
That's the content is not suitable for consumption in the workplace,
especially when played back on a speaker in an open plan office or similar environments.
Any miners under the age of 35 or any pets, including fluffy little killer bunnies,
your trusted guide dog unless on speed, and Q2T Rexes are other associated dinosaurs.
Welcome.
This is Linux in Laws with a special guest tonight by the name of Frank Chek.
Frank, why don't you use yourself?
Sure. Thanks a lot.
First of all, I'm really happy to be a guest here and you're in your podcast.
That's really fun. It's an honor.
So my name is Frank Kalichick.
I'm German as you can hear from my accent, but not from my name, I guess.
So I'm a free software open source developer for a long time.
So 20 years, I guess, was my first contribution.
A long time contributor to different projects like KDE where I was like a board member
and did a lot of conference organization and coding and artwork, lots of stuff.
I found that some other projects are initiatives open PC like 12 years ago.
I think was the idea of a complete free open source.
Computer, which is like hardware software and service donation to open source project.
Everything one package was interesting idea, but not super successful.
But that's how it is.
I also launched the user data manifesto, which is more like a more philosophical thing.
Basically rights down rights that people should have regarding their data privacy and control where the data is stored and so on.
But all of that is like all these more stuff. I guess I'm mainly invited here.
I found a project called Open Cloud like 10,5 years ago.
And then 4 and a half years ago, next cloud, which is the successor.
Yeah, which is a big open source project nowadays.
They're like 2000 contributors from all over the world coming together doing software.
And it is basically for for the people who know it.
It's an open source free software alternative to collaboration software like Office 365 from Microsoft or Google speed or proper or many others.
So the ideas that we can collaborate and communicate and chat in the video call and share files and so on.
But everything free software and everything host they want.
That has been more than helpful friends. Thank you.
Full disclosure people. I have been using own cloud since 2013 or thing.
I'm still running next cloud on a couple of service here.
And this is basically how I came across that this is how I came about the open source code base called called own cloud.
Previously, I had been using something called C file.
C file.
Exactly.
For mainly file synchronization, but C file at the time had a couple of challenges. Let's put it this way.
So this is the reason why a couple of people recommended something called at the time, own cloud.
And I've been using that PHP code base ever since.
And it was to say when Frank and we're going to talk about I'm sure in a minute about how own cloud became next cloud.
When Frank for the company essentially, I of course made the move and changed it to next cloud.
And I've been using next cloud mainly as a file synchronization ever since.
Until we actually started the podcast because all of our file synchronization,
all of our calendaring as in scheduling and a number of other features are also done now by a next cloud instance.
We also have an embedded code.
What's the name Frank corner bore instance, right?
This is exactly.
We also have a we also have an integrated office if you will in terms of as fractures and so forth,
Incorporated in our in our next cloud instance.
And what I really like about next cloud and this is kind of some initial feedback is actually the accessibility of the framework because as some of your listeners may already know.
Next cloud supports a number of plugins and there's a vital ecosystem of these plugins out in the out in the marketplace.
But let's spend time on this later.
What my first question would be Frank, maybe you can talk about a little bit about the history of own cloud.
And why you decided to fork the company essentially in 2016 or it was a 2015.
It was 2016.
Yeah, so this is this is a more complicated topic.
And I think I can keep the short version to interested in the long version that there are some interviews with me on YouTube.
I'm talking about it for a lot of time, but they will maybe give the quick overview.
So on cloud is something I started that could have been up years ago.
The idea was to have like this.
I call it at the time.
Open source tropox.
So because it's come completely concept of software was new at the time I'm in tropox was new.
And then someone say, yeah, we can try boxing hosted yourself like no.
So the concept was completely new.
And this was where everything started and it's.
Yeah, I wrote a version 1.0 produced in myself, which I'm really happy to say that none of my code is less than the current code base, which is very good.
We actually have people in the project would know more than what they're doing.
But I started that.
And really, and I released other free software license, the TPL server, of course, because I'm a free software guy.
And yeah, and this basically helps the effect that nice free software has, which means that the community came together.
And people started to use it and then the press wrote about it.
And the people contacted see the head report.
And I support for that.
And it basically, yeah, it.
It moved forward.
And then one and a half years later.
I thought, OK, maybe there's opportunity to find a company around that.
Because it was always nice to be able to pay the people who free software.
Because until then it was all just a hobby project from everybody, which is fine.
I mean, you all have a hobby project, but we can always spend like a few hours of it for our hobby.
So wouldn't it be nice if there would be people who actually can work on the free software.
And this was like, OK, maybe there's opportunity to build a real free software company here where people can live really.
Yeah, so there was opportunity to find the company around that where everybody can like work full time on creating this software.
And I got in contact with two other people and they decided to get a three of us find from this company.
And yeah, we founded this company in the US directly because as I was told that real software is something you do in the United States, not in Germany.
And we got like venture capital from investors on day one and really spilled up this startup real American style as a startup around software.
That's what's ideal and it really didn't work out that well. I have to say, I mean, we got some investment at the beginning and it was growing.
But over time it became clear that we had a wrong team, we had a right expectations from the investors.
There were some some not so good stuff happened basically so that the company and the project own cloud was like, yeah, really close to being, yeah, being bankrupt and being shut down.
Unfortunately, which there was no reason in the software because the software was good and the customers were happy and we had some good employees.
But there are some other things that really didn't go so well. Unfortunately, and then basically the core team, so including me, so it was not only me, but was 12 people, we decided that that we should start over.
That she that we should learn from the past.
And we should take the software because it was mainly free software in the first place.
I mean, one of the problems of the old home cloud was that it was actually open car, which means there was an enterprise edition which had more features.
It was not open source and so on. So there were a lot of things that were not really that nice.
But we we took like the open source pieces, which was 90% and then started over with next cloud and yeah, with next lot, we have no investors anymore.
So there are no external dependencies. We are have the right business model, which is a complete 100% open source business model, which means that we work together with the community in a better way because.
Yeah, everybody's in a simple field and actually did a lot of more improvements all over all over the place.
And as I said, the other talks for me, where which go more into details, I can recommend that.
But we basically try to learn from the past and with next lot, it's yeah, maybe a bit more boring.
It's not a fancy American venture capital startup anymore. It's more like a boring company and project.
But it is more sustainable and it's completely open source free software.
So this is working nicely. This is really happy that this worked out good.
And yeah, next lot is throwing and we had any features in the communities growing and it's.
I mean, they all of course always challenges things that could be better and be better overall.
I'm really happy how everything worked out.
That has been excellent to at least for an overview of what's been happening.
Do you have any idea about your user base? How many people actually using the software?
And now it's hard to say because we obviously don't track our users.
Would you would go against our mission? But what we have someone else because the next cloud server asked.
Update server on our side. If there's a new version available.
So we sometimes get this like from time to time with pinks from the servers and we can see roughly how many pinks there are.
And we know how many docker containers are there?
There's some stuff built into the docker hub stuff where they can somehow know that.
And we have some other data points so we can estimate it.
So it's like probably between like 30 and 40 million users overall.
But it is just an estimate.
You just mentioned the fact that apparently when you fought the company,
you reengineered the code base with regards to fresh start in terms of.
There are no own cloud artifacts in the code base anymore.
Ah, that's not completely true. I mean, the code base is still based on the old code code base.
But of course, we invest a lot of energy in modernizing it.
And actually now I don't know when this interview will be broadcasted,
but from today in one and a half weeks, we will launch next big version, next cloud 20.
So this is already like 10 iterations since we fought from the own cloud code base,
which means for 10 major releases, we already like basically re-architected and improved the code base.
And it's getting better and faster and more secure all the time.
But it is still it has the same history.
So what we really changed is that of course,
we couldn't use the proprietary software pieces that are still in the own cloud.
We placed them with open source code and there's stuff that we completely wrote up from scratch.
And of course, we also nowadays we have from functionality perspective.
We have a lot more features that we wrote from scratch like the whole video and talk and calendaring and all those other things.
But it is the history is there.
No one in the next slide is denying that that yeah, own cloud is the grand car basically.
That's great. So so on cloud is sort of your direct competitors.
Still is that is that the case or would you see it that way?
Yes, yes, there is.
There is someone who picked up the old old own cloud,
which has been bankrupt at the time and trying to keep it alive and compete with us.
And yeah, that's still there. That's the competing with us.
But like different people and different interests and commercial interests.
I mean, there's a significant ecosystem of at least five synchronization solutions out there.
Same thing comes to mind, which is a very interesting approach.
Seafire of course is a is a is a is a is a grandfather and feeling of course own cloud in next cloud.
Given the fact that you're not something worldwide as in that you're propagating next, however,
how do you see the market in the from the historical perspective at the moment and going forward?
Yeah, interesting question. I mean, it is.
Let me answer this like a bit more broader because it is not only about those self hosted open source solutions that you mentioned,
but it's about the whole collaboration space overall.
So because as I mentioned 10 11 12 13 years ago, there was like solutions like Dropbox was like,
yeah, you basically have a folder, you drop files into the folder and appear in the folder on another device,
like just thinking start around, which was pretty, I mean, nowadays, that's not so amazing.
But at the time, it was was really a completely new and awesome software and idea.
And of course, the weekly other software appeared, which just did the same.
There was like one try from Microsoft and Google try from Google and so on.
And yeah, Gautner, Gautner, which is this analyst companies, especially for IT,
they're basically created a name for this kind of product, what's been called enterprise file signature.
But the world's really moved on and then this is also like the history of of next cloud and only at the time.
This is where everything started.
But the world moved on and nowadays it all pretty transforms more into something that I would call content collaboration software.
And also Gautner, again, the analyst company, they're renamed basically this whole category from enterprise file signature content collaboration platform.
And this is software which does syncing files, yes, but it does a lot more.
And examples for this software is like office 365 for Microsoft, which is a software that contains one drive.
So file syncing is still part of it, but it does a lot more.
It has like teams for chat and video calling and had like the whole outlook email calendaring thing.
It has like the office component, of course, you can actually edit office documents in there and many, many, many more components.
And this is nowadays called the content collaboration platform software.
And Google actually did the same Google drive of cost to exist, but Google drives now part of the sweet, which is again like chatting, you're calling, calendar, and email.
Pages and so on. And basically everybody in this space basically does the same.
There is like Dropbox also has more integration into like Zoom and Pages and chat solutions and stuff like that and everybody does that.
And we are we are two.
So next lot is really transformed from from a tool that synchronizes files to a tool that you can use for working together.
And that's something by the way, which I mean, we are next lot always do that.
I mean, we have people from all over the world working together with next lot.
So for us, this was also a very natural, but for a lot of organizations, this is not very natural.
They're usually sitting in the same office and work together on the same table.
But of course, now we have COVID-19 this pandemic, this big crisis for the whole planet,
which has the effect that a lot of people work from remote.
And then now everybody sees the value of having this kind of software where we can collaborate and communicate and Zoom can share and edit together.
So that's a bit like the like the history.
So, I mean, you mentioned the opposite of the COVID situation.
And we had an interview with the guy who runs the project management for a big new bus on as well.
And he's obviously seen a bit of a large uptake since that happened.
I mean, I mentioned the G Suite, the Office 365, etc.
And did you actually, I mean, I'm not that familiar with next time I'm using it ourselves.
But in an organizational context, how many people are adopting something like next cloud over a G Suite for an Office 365?
How do you define that?
Or how would you see how to use a population in other business?
Yeah, today's a big, that's a big...
I wouldn't call it fight, but there's a big competition at the moment, for exactly that what you mentioned.
So everybody needs this kind of software like now, because people are in the home offices now.
And there are people pick different software.
Some pick a nice open source project like a big blue button.
What we're using here are Chitzi or Next Cloud Talk.
Also, other solutions like you mentioned C file or own cloud, which are mainly focused on shaking files.
All the Next Cloud files, of course.
I mean, we as Next Cloud have a little bit of the advantage, at least in my opinion, that we are this suite of software that combines everything into one nice package and one nice interface, which is integrated with each other.
But overall, I'm happy for every open source solution that's picked.
Like I mentioned a few.
Unfortunately, our competition is very strong, so especially Microsoft.
They're really pulling in a lot of uses into the Microsoft over 365 cloud at the moment.
And that's a bit of a challenge for the open source world.
You, Frank, that has been more than interesting.
Next Cloud Talk, the way I understand it, basically, there's a free version that has a certain limitation in place.
And after that, it's a paid software component that is not open source and runs on your own servers.
Do you have any comment on that?
Yeah, that's that's old information.
Okay.
So now a days it is in that it's true that they're basically two different modes for Next Cloud Talk.
But both options are open source and you can run on your own server and you can add free software, 100%.
It's only the only difference is a bit like how much technical knowledge you have, because if you just you have your Next Cloud and you activate Next Cloud Talk,
or you have it installed already and you just use it, you can be chat and start a video call or audio call.
Then in the default setup, it's doing all the communication peer to peer, which means if we would have, we have like three people in this call here at a moment,
or if you would do this call in Next Cloud Talk, then this would mean that my browser would send my audio signal to to other process to you of your process.
And you would do the same and then the three of us can talk.
This works fine until like six, seven, eight people in one room.
But then if you have more people in the room, then you really the amount of data that needs to be sent from everybody to everybody because it is basically roasted exponentially, right?
Everybody the number of connection is exponentially to the number of participants in the room.
Then at some point it just overloads the network or CPU resources of both.
And in this case, we have this other mode. This is this high performance backend.
This is an additional component that you can install on the server, which then collects all the streams and centers out to everybody.
And this basically makes sure that you can have a call with like over 100 users in the room.
And it also has like, it's just faster because it's using a new signaling component, which is a go-deam and it has some.
It has a lot of optimizations that only drawback of that solution is that you have to install it and you have to write it somewhere on some server.
Okay. And this is WebRTC based?
Yes, yes, it's all WebRTC.
Okay.
Now, interesting perspective because at the moment, as you know, we're recording this using a big blue button instance and that big blue button instance has certain.
Let's put it this way. Requirements that some people are half of find hard to meet.
I'm just wondering actually does talk and provide recording capabilities?
Not yet. That's then for the next one.
Ah, okay. In the case we just have to wait that.
Yeah, that's something that's actually planned. We will put this into the server component because this is the component where the streams come together.
And then the idea is to just record it together and code it into one big audio file and then uploading into the next loads of participants, for example.
That's actually planned. That's actually planned, but that's one of the features that doesn't exist yet. So you pick the right one.
And this is plan for version 21, 22.
I would say 21, but in general, I'm usually, I'm not a big fan of pre-announcements.
Ah, okay.
Because we have this agile development process, right? Like everybody in also the community, right?
They do what they want, right? So I don't even know what's coming.
So everybody just improves the software. I mean, there's a little bit of a bigger plan.
We're all people do what I want. And then at some point, after three, four months, there is like feature freeze and then we do a new version.
And this works super nice. I mean, it's a really happy list of speed and progress we are making.
But the drawback is that I have no idea what we do next year. So it's agile. Nowadays we call it agile.
So how do you organize the project and Frank in terms of guarding and what can it's going into the directions of the project itself?
Yeah. So I mean, there is a consensus over the overall goal.
I think that's important. If someone wants to turn next to a coffee machine or a card and.
So there's no more consensus that we want to be the free software alternative to Microsoft and Google and all its big cloud services.
And I think everybody in our community shares this goal. That's already very important that we all work in the same direction.
And then the only challenge or the only questions of course, okay, which feature is more important and which speed and what do we do first or do we do second.
There are some things that the next lot company because there is a company we have actually 50 people and a lot of developers in there.
And there we do what we think should be done next also after after talking with customers and that tell you hey these features really important and then we do this feature.
But this is only what we as a company do because the open source project has as I said 2000 volunteers and not 50.
So and there's this 2000 volunteers that do what they want.
The only thing is that we have processes in place to guarantee security and performance and stability and back freeness and so on.
We are using GitHub at the moment and we have a pull request process so everybody can just go there, look at the code and issues and the feature requests and everything.
Create a pull request for a change like a box fix or feature or something.
And then and then when the pull request is created, then we have a bunch of automated tests that executed.
Unit tests and integration tests acceptance tests and so on and they are like doing their tests and they're checking if like if the call if the if the change works.
Then we have a design team which does a review if like the feature is like usable and it's understandable if it's like translatable and write languages.
If security people would check if the security is correct.
And then the last thing that's needed is you need to have a positive review like an approval from two more people.
The two more people to more developers need to say yes, this change makes sense.
And if all of that is is given, then the change is merged and it doesn't matter if if the change counts or the reviewers or whoever.
It doesn't matter who works at a company or as a community member or use our partner or language or continent, it doesn't really matter.
As long as you if you going through this process, then the change is merged.
It's also very very self-regulated and very organically.
Yeah, that's that's very different to some other projects by way you have typically like a core team that decides direction and as gatekeeper of all which commits going a lot and so on.
Yeah, that's a nice model.
I've done it any gatekeepers in the classics and of course we have core people.
I mean, we have people who really work on the code for many, many years and they know a lot about it.
And if they have some feedback at a prerequisite, of course, people take it seriously and listen to them.
But this is because they're competent, not because they have a special title or something.
Yeah, correct.
And I mean, you mentioned there's 50 people in the next company and I guess internally how do you work together there?
Could you use I guess next slide to communicate or next slide.
And all the tools there.
It is anything else on top of that.
Find you that you need to work together.
Yeah, I mean, obviously we use our document sharing next cloud.
We use next door for chatting in our video calls.
We have our calendar and email, all the components in next cloud.
There are some things that next cloud does not do.
For example, we have a separate ticketing system.
Where because the business model we have is that we sell support descriptions to our customers.
Very similar.
Retail and so is another.
And because of that, we need a ticket system where like customers can open tickets if they have a problem or question or something.
And we don't have our own ticket system.
And also, by the way, the goal is of next cloud is not to do everything new.
We don't have to reinvent every wheel.
Yeah.
There's a nice, there's nice open source ticketing system.
In our case, we call view something called summit.
It's an open source self-hosted ticketing system.
And we have a nice integrated into our internal next cloud instance works quite nice.
And by the way, the same is for CRM system.
So customer relationship management is also something we don't have in the next cloud.
And there we use a free software called sweet CRM.
And yeah, that's also nicely integrated nowadays.
So we don't really reinvent every single wheel.
This would be dead.
Yeah.
Yeah.
Makes sense.
Okay.
I mean, not a lot of the people that work for you are working on next cloud.
Are they fully employed as employees there?
Yeah.
Right.
50 people, 50 people are fully employed 100%.
Because I think you mentioned the next cloud started without any investors.
Is that right?
That's correct.
Yeah.
That's correct.
Organically from pure.
That's something that's one of the things I learned from the past.
That everything we do in the next cloud, we try to do in a sustainable way.
So we are actually profitable.
Profitable, not in a sense that we make a huge profit.
But in a sense that we can pay our own bills.
So we don't take the money from the bank or shareholders, but we have like customers.
And that's super important for me because it means that, yeah, we can grow.
We can hire more people.
We don't depend on any investors.
We have like, I don't know, other ideas.
So it's very, very sustainable.
And that's for me, personally, like super important.
Yeah, very nice.
I mean, how many people did you start with when you started out?
We started with called people.
12 people.
Right.
We decided to leave the old company and create a new one.
And it was definitely a bit of an adventure at the beginning because we started with like no customers and no product and no one knows the name and nothing.
It was an adventure.
But yeah, it worked out quite well.
Yeah, I mean, you're 15 now, I think you say.
50.
And then just see that changing again or increasing again in a year's time.
I think so.
Yeah, I think so.
It's what we're doing seems to go well.
I mean, there are some factors that are the help the adoption of the next cloud.
I mean, yeah, I like it or not.
With COVID-19 people understand that you need to have like digital processes that you need to have like remote work.
All the modern tools that you can't write everybody sitting in the same office and walking around with paper.
That's not really the future.
So people understand that something like next cloud is useful.
And also the S of course, the big political discussion at the moment with the whole privacy shield.
I don't know if you've followed that, but there's a big discussion in Europe.
If cloud services hosted in the United States are basically run by companies from the United States are compliant with the GDPR data protection regulations of Europe.
And that's a big unknown at a moment.
And the highest European court ruled like last month that it's actually not compliant.
So yeah, and of course this has like no consequences.
The next lot because next lot you can run on your own infrastructure wherever you want.
Yeah, something something's coming busy together so the things are going well for next cloud.
Yeah, we are probably.
Is that where you see the biggest or one of the big values on the cloud is is that people kind of run it themselves without having to rely on all of the big three.
Yeah, I mean, they are running it where you want is a big benefit.
Extensibility that we have so many plugins and connectors and things done by the open source community.
This is super, super nice for a lot of people.
The fact that you can look inside the code and do a code audit and make sure that there are back doors in the code that's also big benefit.
So for example, next cloud is used by the French government or the German government.
And then I get because they can check that there are back doors in it.
Yeah, there are several benefits, but all all related to open source.
This is a I can't have Martin.
I can't have all the fun.
So I'm going to ask the next question Frank.
Speaking of government involvement and all the rest of it.
I'm just wondering if these people are this will say very concerned about security and privacy field in all the rest of it.
Have you ever undergone or has that been a requirement a formal as an request for a code audit as an order of the code pace?
Yeah, yeah.
I know at least in two cases where an external company is the the code audit of next lot.
Of course, I don't know a lot of details about it because the main point is that this is done without our involvement because they're basically checking us.
But I know that they were done.
Yes.
Okay, interesting.
When I look at the website, you seem to be particularly focused on public sector customers.
And if I understand this correctly, you also provide and manage service as a cloud offering for for next cloud.
Actually, no.
Okay.
So some people come to us and say, like, yeah, next load is great.
Where can I sign up?
Where can I get an account?
And yeah, we don't do that.
So we are we only provide a software and we enable other people to run a service.
So you can run a service on your own root server on a Raspberry Pi.
Maybe inside your company, maybe your service provider, maybe your government.
But ideas that you take next cloud and run it somewhere.
We don't do any hosting.
The whole idea, this is what this is basically what motivated me at the first place to do to do the software, which is I think what I really want to decentralize the internet again.
I don't like I don't like the idea that all data and all communications go through like service of like pick some five big companies.
I really think that everything should be decentralized again.
And yeah, because of that, I started with this software and others work on it too now to enable other people to run those services.
If we would provide like the official next load server or something, this would be the opposite of decentralization.
And so we don't do any hosting, but there are lots of there like I don't know over 100 companies on the internet, which do hosting of next cloud.
So go to one of them.
So all that is subscription it is a content that gives me is essentially support.
Yeah, it's it's actually very similar to what right head and so you are providing.
So it is support that's a big part of it, but it is also like a special build of the software, which is a little bit more conservative with features.
It's a bit similar if you compare like Fedora with right head enterprise Linux, right Fedora is more modern has more modern packages and features.
But that's something that companies sometimes don't want.
I want to have software that she super tested super stable and is like supported for 10 years and doesn't change all the time.
And this is what they get with right head enterprise Linux and that's very similar what we also provide to the users addition to the support.
And there is like long term support as I mentioned and yeah, they we have conversations with them and we listen to them.
If they want to have features feature development of you customization or training workshops help help them to scale it and so on.
And all of that basically together in the bundle.
An interesting perspective changing the tack a little bit as we are a communist podcast focused on open source need to say the licensing place a very important role when we discuss any open source project.
Maybe you can elaborate a little bit on the particular license next loud is available under and why you chose this particular licensing model.
So as you know, they are like two different two main different families of licenses that are considered open source free software with the permissive licenses and the copy left licenses.
There's like this Apache MIT BST style licenses, which basically means I do what you want.
And then there's this other TPL LGPL HPL family of licenses, which also says do what you want, but if you do changes, then it also has to be under the same license.
I mean, that's like that. I'm sure lawyers will kill me now, but this would be my summary of it.
Don't worry about it. We think right no worries.
Yeah, so and I chose at the beginning the HPL license, which is in the in the second camp.
A federal okay.
Yes, which means it is basically it is has is built in guarantee that it will always stay open source because if you change it, if you fork it, if you modify it, it always has to be under the same license.
Which I think is very important to ensure the yeah, the stability of the software with other licenses BST MIT Apache and so on.
There's the danger that someone takes it and makes it makes it proprietary.
And then the changes can't flow back because there's a property that that's not what I want.
What I want. What I want is a real community where everybody is in the same playing field.
Everybody plays to the same rules. Everybody owns the same.
I mean, technically, everybody owns their own piece of software, right?
Everybody owns the only contribution, but basically no one owns everything together.
Basically, the sum of all the pieces is basically owned by everybody together on no one in a way.
Basically, it's in the same thing.
What did you say, communism?
Maybe it's maybe it doesn't be like that and that.
And yeah, sorry, go ahead.
I was just about to introduce it.
Not everybody probably knows what never a GPS license means.
If we to go ahead and explain lawyers, any lawyers listening to this podcast, just send feedback to feedback.
If you're still lost or do you don't massacre in front college, check, please don't do this.
Yeah, yeah, I'm actually intentionally tried to provide a high level view here.
Not really.
Absolutely.
Go ahead.
Because it would be boring to go into details.
But so the idea, I think I believe in the in the GPL type of licenses because it's basically the enforced that everybody is in playing field.
And then everybody is basically the work of everybody benefits also everybody.
That's that's the general idea.
This is why I like that.
And then the federal, a GPL, the HPL is a variant of the GPL, which I think you could say fixes one problem of the GPL.
It's in my opinion, the HPL, the GPL could be merged into one license because at the end, it has the same idea.
But the GPL has in the way it was written has like one problem because it always talks about the rights you have.
If you run a software, so basically you get a software from someone and you run it on your computer, usually.
And then if then you should be able to change it and to start it and then it needs to be open source basically that's the idea.
But the challenge is that nowadays with cloud computing, the code is actually not running on your computer, but on a remote computer.
So basically you are basically using Gmail, but you're not running Gmail because Google is running Gmail, but you are a user of Gmail.
There is this difference now in cloud computing over the internet.
And this was not considered when the GPL was written.
And because of that, the HPL was created and I think it fixes this problem.
So you are also a user of the software, you're basically running the software even if the software is running on a cloud computer somewhere else.
So yeah, let's leave it like that.
But that's basically the thing. And because of that, the HPL is really I think for us the perfect license because it is it enforces the freedom to all users who running a service.
That is what I'm standing as well in contrast with the GPL actually the the Afro GPL enforces you to publish any changes you make.
And I think I'm not allowed in full disclaimer. And the ordinary GPL basically basis this on a request.
So many projects who license that code on the GPL automatically ballers push or publish the error published any changes.
But the Afro GPL actually enforces this.
So it's probably one of the most viral licenses in this context and in the true spirit of rigid storm and himself I would I reckon it's the most enforcing license in this context.
Yeah, that and especially if you want to keep a code based open.
As in anybody who touches this is automatically required to publish even a small typo that it makes absolutely sensible for this particular license.
I've already agreed.
Change in tack once again, where do you see next cloud going apart from recording.
Conversations now.
Okay, should I should I answer this from a high level or from a super high level.
It just shed some light on the project from a philosophical perspective.
So what is your opinion for the project? Where should this go?
So, okay, let's let me let me go to super, super, super high level now for a second.
So when when the whole computer stuff like started in the 50s and 60s.
Where mainly like big main frames running in some from a some IT department.
And then the users were usually using terminal text terminals that are connected to the main frame.
But then basically the IT department was in control of everything.
They have the applications, they have to server and they also have the data and that's basically.
Yeah, it means that the users are the names as users of the software.
They have no rights. There's nothing they can do.
It's like being a customer for company, but you're not really in.
You can't do something with the product or you can't influence.
You're just a customer in the same way you're just a user.
And then but something happens in the 80s and 90s, where the PC revolution happened.
Where everybody could have their own computer, the personal computer.
And the computer that became like the most common was inspired by the IP NPC.
So it was all IP NPC compatible thing.
And what's special about the IP IP NPC was that it was open because there were other candidates.
Also the Apple Macintosh computers exist at a time or Atari or Amiga or Commodore 64 or many other computers also existed.
But they were all not successful at the end, like 98% of all computers were IP NPC computers.
And as I said, they were open, which means you can install any software, any operating system on it.
You can do whatever you want with it.
You can build, even build your own hardware in a way it was an open source hardware, right?
Because you can build like, well, let me build a new CPU, let me build different RAM, let me build a different artist, let me build a different whatever.
Everybody can do what I want.
And this basically created a huge amount of creativity.
So this also that Linux only happened because of that because it was able to install Linux on this computer.
It was not able to install Linux on some other computer because they were closed systems.
But the IP NPC was always open.
And this was really good thing.
And in the last few years, we basically see that the real is turned back a bit.
So yeah, we still have our computers in front of us.
But what we really do with our computers is accessing cloud services on the internet, which are not open.
So we're using like Gmail or like obit 365 or zoom or some video streaming or whatever.
So a computer becomes personal computer becomes more and more useless nowadays without a network connection.
This already basically means that we are all using like software and data and hardware and stuff, which is not our own anymore.
That's controlled by some big companies running somewhere else.
And this is even more true with mobile devices like phones and tablets.
I mean, the mobile smartphone is basically really useless without networking.
If you can't really, most of the applications, most of the apps are just like front ends on top of some web services running somewhere else.
And those web services are, yeah, they're not your own.
They're run by big companies.
You can't change them.
You can't study them.
You can't access the data.
It's really basically turning the wheel back to the old mainframe.
Basically our phones in a way are like terminal computers again.
And the time of the open openness is like really a bit over.
And we can't like install.
I don't know, you can't say, oh, like Instagram, but I want to study the code of Instagram and change the code and running myself and do a competitive Instagram or replace the operating system or play with the database of Instagram.
That's not possible.
They're just a user.
We just a customer.
There's nothing we can do anymore.
Yeah, and that's bad.
That's not that's not really good.
So what we are trying to do is next lot.
And this sounds really a bit like a big, a big task.
But while not only next lot, but the overall open source movement, but also a next lot.
What we're trying to do is to move more into us is into a future where all those services don't exist only once by one company, but everybody can host it wherever they want.
You can actually see the source code and you can change your source code and you can do whatever you want with it.
You can access your data.
You can migrate the data to somewhere else.
You can if you don't like what we are doing next lot, you can take the software and forget and create like the next next lot, which is better or something.
So this is enables competition and freeness and openness and data protection and privacy and everything.
Because I think if we are just using web services run by whatever five big companies that is a very dark future.
So that's the very, very big picture that I wanted to mention.
This is what we're trying to do.
Yeah, so obviously kind of big task to turn all that around.
You don't need to be sitting next to that right now.
You must be a bit naive and stupid to even try.
But yeah, I guess you have to try with all course.
Okay, I wanted to switch, which tack for the last few minutes before we lose sight of that.
The main technology that you're using next service.
Yeah, the big pieces of the service PHP, but we also have more and more components and other languages, for example, go.
And there's also a piece that's written in C++.
Frontend is JavaScript.
We have a mobile client from McVindus Linux in C++.
The mobile apps written in Java and Objective C. So yeah, lots of technologies.
And our, and our, and our, and our app store, our app repository, I think is done in in Ruby.
So you can probably find every single programming.
Next and, and yeah, I mean, we had the myself of this.
We had the programming language special.
I think that was the previous one was an increase.
And just wanted to, if within next time, do you have any kind of discussions along those lines of where should we be moving next or look at?
Which languages to use or do you have any kind of standards around where we're developing or you're happy for?
People's contributing anything they choose.
So, you mean really about the programming language?
I mean, yes.
Yeah, I mean, we have some, I believe in.
If you have eye texture decisions like that, I think you should first analyze what you goals are, what you want to achieve.
And the reason that the big part of next law is written in PHP is that PHP is a language that's really easy to run and to host.
Basically, yes, it's available on all operating systems like, you know, PSD, everything.
It's blood from independent running on arm and 64-bit 32-bit interlame and so on.
It is a basically is very lightweight.
It runs on every web server on the planet somewhere that is like the always PHP available.
And it's also quite easy to program for and to understand and to read, which is nice if you want to attract big community.
And this is why we chose to use PHP for the main server part.
It's also to deploy it just to run it.
You can download the next law zip file from our website, unpack it in a directory on a web server and it's running.
You basically need nothing more you need to do.
No compiling, no checking dependencies, no, I don't know, platform architecture or whatever thing.
It's just unpack the zip file and it works.
And that was a design goal from the very beginning to make this super easy.
Of course, there are some things where PHP is not very good with.
For example, there are some areas where PHP is not very suitable.
For example, if you want to have lots of open connections.
For example, if you want to have web socket connections, I don't know how technically we want to be here.
If you want to have web socket connections to your clients, that is this not really compatible with the PHP architecture.
And in these cases, we have components written in other languages and frameworks like go, for example.
So we have this earlier mentioned high performance talk backend.
This has a signaling server written in go.
And we have a push proxy which just push notifications to clients, which is written in go.
And more components in the future.
But the thing is that these components are optional.
So the idea is that you can start super simple, super easy.
Like everybody can deploy an x cloud and it should work.
And at some point you come to the conclusion, okay, maybe I want to have a little bit more performance.
I can do that. Maybe I suddenly have like a few thousand users.
Then I use additional radius cached and I use a different database where you can migrate to it and you can do this.
You can basically grow together with next clause.
And that's really the design goal.
I'm not a big fan of coming up with a super complex architecture that you only need if you have 100,000 users.
But then makes it impossible to deploy it on a Raspberry Pi.
So for us, it's like the growing from what very big.
Very nice.
For the very pragmatic viewpoint, in our last episodes discussion, it was very much about principles.
And then the type safety in Rust and C plus or have stuff for you with more like PHP is a platform for this.
And for the pieces that we need performance, we use something I go.
So yeah, very good.
So I mean, I can also talk about that.
There are definitely also things that could be better in PHP, for example.
I personally would prefer a stronger type language.
And there are some things.
There are some older artifacts and PHP, which are not so good.
But honestly, I mean, some people might disagree, but honestly, I think every language has pros and cons.
And at the end of the day, you can do.
I mean, you can implement every algorithm in every language.
It's just a matter of what's better fits the task, what fits the architecture, what is.
Yeah, how to deploy it, how to run it and so on.
I'm not a big fan of like discussing syntax, like details.
I mean, yeah, I've had preferences, but at the end, it's like the bigger goal that we want to achieve in other syntax.
Um, I think this is just about enough on programming.
Yes.
For us.
Uh, we.
If you're interested to the previous episode, we leave the similar topic of operating system choices.
And at the same level.
So that's okay.
Well, we have like the I versus e-makes or what's the next topic?
No, no, no, no, no, no, no.
What is your favorite editor?
Uh, rather, what is your favorite strong type language?
Any final thoughts before we wrap this up?
What the last question is basically from from my side, basically, um, how?
And this is something that we haven't quite discussed yet.
How do you manage?
How do you liaise on with your community?
How do you make sure that you get enough external input to keep the code base alive and kicking?
Oh, that's, uh, that's a big question.
I mean, this is.
We have another four hours, not to worry about.
Yeah.
Yeah.
You're for ultimately okay.
Uh, I mean, most of them, I don't know, there are a few things that are very important.
First is we already talked about the license.
Um, in our case, the license means that everybody's has been playing field, right?
So we as next lot company, we don't own the code or something.
Everybody owns the code in the same way.
Everybody owns the code that they write themselves in this state like that.
And this is just fair.
And if you're fair with your community, then the community is happy.
If you're not fair, then they run away.
That's the first thing.
The second is like the communication.
I mean, um, I don't know if you would have in the company lots of secret internal meetings in the community.
And the community is not really part of the communication.
Then there also would be unhappy.
So because of that, we also try to be super transparent and do everything in the open.
So we do on what to everything on GitHub.
Um, discuss every feature, every feedback, every security, every design, every, everything.
So everybody in the community is like part of the process.
And this also makes them happy.
Then, of course, the whole architecture and programming language.
And we just need to be in a way that you have like a flat learning curve.
You want to be able to do like a small change in an hour.
If you first need to study your architecture for a week before you even understand what's going on, then that's not really good.
Then, yeah, I mean, personal contact is also important.
Usually we do this hackathons.
This, um, this hack weeks like several times a year where we invite everybody and we even do travel support.
We like fly people in on our cost that become together a few times a year.
And we also have our big, um, our big conference in Berlin.
And once, once a year, of course, it's not happening at the moment unfortunately because of COVID-19.
But also an event that everybody comes together and they can talk to each other and work together.
Um, I think these are some of the main points.
Yeah, and of course, also you community need to be able to use the software.
So it's, I mean, no one wants to improve a software that I can't use themselves.
Another reason why it's important, the next lot runs like on a small home server.
Um, and then that we have no proprietary pieces where you need to pay for and so on.
Everybody can use it at home and then improve it for themselves.
Okay, I would say those are the main things.
I'm sure there are a lot more, but this are some of the important ones.
Okay.
Any further questions from your site Martin before we wrap this up?
No, it's been great.
So it fits in really well with all the likes of people.
And not open source projects that we discussed in the yesterday great having you.
Thank you for your insight and it's probably also something different in the way you run in Europe.
So it's a project that you like.
Thank you.
Yeah, thanks. Thanks a lot for having me and yeah, it's always, always fun.
And thanks for the good questions.
Thank you again for taking of the time to speak with us.
We're going to check in about two years time when you hopefully have achieved world domination with next time.
So now we're going to speak to you to them.
So Martin, what do you make of it?
Yeah, no, it was a very interesting for me in terms of the way they organized their project, which is quite different from a lot of other open source projects.
What are from particular interesting is actually their vision or Frank's vision with regards to going forward in terms of they come from a simple file hosting solution.
But now with the with the extensions in terms of next start talking all the rest of it, they're clearly driving this forward to more to to kind of open source collaborative solution.
Rather than other approaches in the market, which basically just stay on the fire sharing level.
Yeah, on the technical side. Yeah, no, I mean, the, you know, so they they have a kind of every contributor to next mouth kind of owns the project rather than a BDFL or a project team or something like that.
It's quite nice in a way.
Yeah, the choice of cause of the implementation language as a PHP is the questionable.
But a reckoning that comes with the own cloud legacy because that code base also goes back I think at least seven or eight years and there's simply started to write this in PHP.
And if you take a look at this, they haven't corporate over the time that they haven't corporate quite a few frameworks.
So I reckon doing this properly, Frank, if you're listening to this, no, it's no PHP still the right language, especially for server server programming.
I mean, re-implement this probably wouldn't it would take just too much effort on us.
So just leave it as it is and just amend it over time.
Yeah, is it anything there is obviously a cost of rebuilding, right?
So, and you know, the guys always have a lot of expertise in PHP. So why not?
Exactly. I mean, if we're looking at, I think you, well, he fought the code base.
So he started the next cloud in 2016 for the code base before that.
So I reckon we are looking at a significant technical depth in terms of if you want to re-implement, if you want to re-implement this in a different program language.
So if the performance checks out and PHP is evolving in that department all the time, I mean, I just have to take a look at the difference between say four and five and seven.
Uh, where they did a lot of optimization apparently in the engine going forward should still be feasible from an implementation perspective as a program language of choice.
Yeah, yeah. I mean, it's, uh, the beauty of open sources that people will innovate if they need it and use whatever projects available to further call.
So, interesting project, interesting interview with this.
Yeah, definitely. And maybe we should back in a few years time to see basically where Franken's and the company is at.
Um, after the inclusion of next start talk and all other fun and games in the code base.
So do we have any? Yeah, do we have any feedback?
Oh, we did feedback last week.
People send right people say people write in feedback all the time.
It's just a matter of you picking this up and reading it.
If, if you're talking about, uh, the feedback from Andy and Mr. Zimmerman.
This is the moment.
No, but I think we have plenty of feedback from.
Okay. Well, if we don't have any feedback, people, of course, the old average still goes.
And if you like the show, if you don't like the show.
Uh, send emails to feedback at linux.eu or need to say.
Put something on Hacker Public Radio on the website.
Indeed, because that will actually be picked up and forward to us.
So, um, that we don't have to take a look at the HPA website every day to see if somebody has some, uh, something code after as has commented something.
And that concludes season one episode 17 of linux in laws.
This is the linux in laws.
You come for the knowledge, but stay for the madness.
Thank you for listening.
This podcast is licensed under the latest version of the creative comments license type attribution share like credits for the intro music go to blue zero stars for the song summit market.
To twin flames for their piece called the flow used for the second intros.
And finally to the last year ground for the songs we just use by the dark side.
You find these and other details licensed under cc at Chimando or website dedicated to liberate the music industry from choking copyright legislation and other crap concepts.
You've been listening to Hacker Public Radio at Hacker Public Radio dot org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast and click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the infonomicom computer club.
And it's part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
On this otherwise status, today's show is released on the creative comments, attribution, share a life, 3.0 license.
