Episode: 4214
Title: HPR4214: Making Waves Day 2
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr4214/hpr4214.mp3
Transcribed: 2025-10-25 21:32:51

---

This is Hacker Public Radio episode 4214 for Thursday, the 26th of September 2024.
Today's show is entitled Making Waves Day 2.
It is hosted by Ken Fallon and is about 37 minutes long.
It carries a clean flag.
The summary is, The Hallway Track from Spectrum Day 2.
I just can, with our continuing coverage of the Hallway Track at Spectrum 24, sit back and enjoy.
And we're here at Spectrum 24 again and I'm talking to Morgan.
I'm Morgan, what project are you here representing?
I'm representing the M17 project.
And what is the M17 project?
So the M17 project is an open source project built by the amateur radio community for the amateur radio community,
with in mind the M17 protocol, which is a digital voice protocol for amateur radio.
And what would its competitors be in the priority world?
Well, the competitors would be icons version of D-Star, YSF from Yezoo, DMR and similar protocols.
Okay, for the non-harm radio enthusiasts who are yet to get licensed, what is that? What does that mean?
So basically, it's a protocol which sends binary data containing the voice, which has to be encoded in order to be transmitted.
And it's basically a way to send binary data, a binary talky-walky, if you want, a digital talky-walky.
And what do you need in order for this thing to work?
You need first a well-defined protocol with a high enough betrayed, but you also need a voice codec,
which is something which will take the analog voice and put it in the binary.
And this is something which has been historically very complicated to do, which is why most codec that you find at that low betrayed are proprietary,
which are the ones that are used by icon D-Star, YSF and so on.
So can you not use something like Opus or Speaks?
You technically could, but the problem that you will find is that this is a very, very high betrayed.
When we talk about the betrayed of M17, it is 3,200 bits per second, while Opus is way, way above that.
So you would need much, much faster protocol, which comes with its own limitations.
And just say you have your own codec as well.
So it's not exactly our own codec, the codec that we use is Codec 2, which is the same used in a 3DV,
which is another digital voice protocol for HF, so narrow our bandwidth again.
And it has been developed by David Rowe, an Australian guy a few years ago already.
So you're reusing open projects?
Yes, exactly. We are reusing open projects.
Okay, very good.
So does that use phenomics or does it sample the speech?
Does it sample the speech, or does it use a look-up table to give you a sound that converts the sound into speech?
Oh, I don't really know the specifics of the codec. This is very difficult to go into that.
I think it is based on multi-band excitation, which is the same as AMBE.
And the AMBE stands for multi-band excitation.
I think Codec 2 relies on the same principles, but I may be mistaken.
So what you do then is you take that and you put it into a frame and you define the format of that frame.
Yes, exactly. So we sample the voice, we process it through the black box that we call Codec 2.
And then this black box is cut into small chunks of binary data that is sent over the air.
Why are you doing this? Why are you bothering?
Digital voice comes with different pros and cons than analog voice.
So for example, you always get a clear voice. You don't have the SNR, which you can hear in the voice.
You can also transmit binary data alongside the stream to transfer data like classical data, identify yourself.
You can also encrypt the stream if you want.
Well, you cannot do it in many countries because of amateur radio regulations, of course.
But if you could, yeah, you could do it if you were...
The protocol supports it.
Yes, exactly. And this is not something that you could really do with analog voice.
Because this is binary, you can use binary encryption keys and so on.
You could also do streaming, which is something that has been worked on the last few months.
So you can authenticate the user and make sure that the user you are talking to is indeed the one that you expect.
Why not just use GSTAR or something to be a lot simpler?
No, it would not. Because mainly you are not really...
It's not easy to modify DSTAR in the way it works and add the things to DSTAR.
Because the only DSTAR implementations that you can find in the wild are absolutely none, actually.
So you have I come with their own version of DSTAR kind of, and that's pretty much it.
So here in this case, the protocol is open, the specifications are open.
And you can use it, you can implement it, you can run it on whatever you want on a computer, on a radio, on a phone, or whatever.
Okay, shall we walk over to your booth and have a look at the harder? Tell me about the harder.
Yeah, sure. So we have several hundred devices.
The main one of which is module 17, which is a small red box on which you can attach a microphone and a speaker and a radio.
So the box does the translation between the voice from the microphone and the bass band to the radio.
So this small box with a screen and a few buttons on top.
Basically, you have the buttons to set the parameters, the core sign and so on, and then you will be...
So the blocks sample is the microphone, filters it, creates a bass band signal that it sends to the radio through the packet radio port.
Okay, let me describe what I'm seeing here.
I'm seeing a standard, both when handhelds receiver with the two standard jacks that fit into the front of the unit.
The unit itself is about two inches or, yeah, I don't know, the size of your hand, I guess.
Ten centimeters wide.
Ten centimeters wide, by eight centimeters, aluminium extruded, looks gorgeous.
It's got a volume button or something at the front.
So on the right, on the right part of the front face, you have the volume knob.
In the middle, you have what is called the Kenwood connector, which is this classical two jacks, a small 2.5 and 3.5 mm jack.
And then on the left, you have OHIS, so this is not an internet or ethernet port, this is not that, it's an OHIS.
It's an open headset interconnect standard.
So this is an attempt at standardizing the interconnection between headset microphones and units, basically.
Okay, and what are the several buttons at the top, what did they do?
It's basically arrows, escape, and they're just to navigate the menus.
So you still need a radio in order to do anything with this, I guess?
Yes, because the only output it has is a baseband stream, which goes through the FM modulator of your radio.
So you can change the amplitude of that basement to vary the bandwidth of the signal.
It has to be around 9 kHz bandwidth.
And yeah, so on the back of the unit, you can see that you have several connectors, one USB connector for the power supply and flashing the unit,
one power connector if you want to power it without USB connection, and then the larger one, which is a DE9 or DB9, I always forget,
is the one that goes to the radio to handle the PTT signals, the basement, input, basement, output, ground, and so on.
And why would somebody buy a unit like this?
The main goal of buying this is to convert an existing radio, an analog radio into an M17 compatible digital radio without having to buy another whole radio.
And there's nothing stopping a radio builder from building an M17 into their project, into their radios themselves?
No, absolutely nothing. They would just need to be familiar with the protocol and do their own implementation if they don't want to keep up with the GPL licensing, of course,
because we do have implementations, harder implementation, and software implementations of different parts of the project, which would be needed to do a radio.
Do you do a license? We don't do a license, for now most of it is either GPL for the specifications and some code produced.
The hardware itself is under CERN, open hardware license, the weak version I think.
Very good, very good. How much was, why did we wake up in the morning and decide to do this? Why did you get involved in the project?
Oh, I got involved in the project because my dream was to build an open source handheld transceiver.
I had this idea and some friend told me, hey, have you looked at the M17 guys? They would like to do something like that.
That seems interesting. I basically joined the project and rushed through the design of what we call OpenHD, which is another device, which is an open source handheld transceiver.
And who started the project? The M17 project was started by Vorchir Kasmaski in Poland in 2019, I believe, for 2021, don't remember.
Okay, cool. Anything else? What is your demo? What are you demoing here on the booth, your booth?
So on the booth here, we are mainly demonstrating module 17, but we also show off the RT3S or MDUV380 that we have modded to support OpenRTX and M17.
Very good. Anything else that I missed that you want to bring to people's attention? How can they help? How much is the OpenRTX?
OpenRTX itself is free. So the radio on which you can flash the device, it's the standard Retavis or TYT radios for a bit more than 100 euros.
The module 17 is, well, you can still find a preview through a vision on AliExpress for less than 50 euros.
Otherwise, we plan on having the new revision being released on AliExpress quite soon. It is already, all the files are already available for free on GitHub.
The full unit, including the screen, the aluminum enclosure and so on, would probably be around 100 euros.
So if you've got an old board anchor of a radio, you strap this to it and all of a sudden you've got M17.
Basically, yes. Cool. What other projects were you saying that you could just download and firmware and have a radio? I'm going to have to rewind now.
So that is absolutely excellent. Do you want to walk to the demos or anything?
Yeah, we can do a quick demo of module 17. Keep in mind that many people, so it's hard to discriminate between what is harming the audio that you may hear.
Is it the codec or the crappy Chinese microphone, basically? In this case, you can take my word for it. Those are crappy Chinese microphones that will damage the audio, but we can make a demo for you.
And talk us through what you're actually doing. So I'm taking here the RTS, which is configured on the same frequency as the radio to which module 17 is connected.
And that's a small portable 100 held radio. And you're typing in 433.475 and you need to be a licensed amateur in order to operate on that band.
Yes, you also need valid license in specific countries because this is not a CE certified license. So depending on the country, this may be a regulation issue.
So yeah, 433.475. This is the N17 coding frequency in Yahoo Region 1, by the way. So I have the same frequency entered on the radio.
Yep. So module 17 here on one side. The radio is what radio?
So it's a standard ICOM ICEE 2820. I think it's a portable unit that you might see in the car.
Yes, exactly. ICOM mobile radio from a few years ago. So the microphone is connected to the module 17. The module 17 is connected to the radio and the radio is connected to the antenna.
And in my other hand, I have the portable radio from right to this.
Oh, very impressive. Kind of cool. I mean, not as impressive that you're straight here. I could hear what you were saying, but I do get the idea.
Yeah, exactly. So of course it's always weird having a presentation and two antennas less than a meter apart and hey, look, it works.
No, I promise there is no wire under the table or whatsoever.
No, you can get that from me. Perfect. Cool. Listen, thank you very much for taking the time. Thank you for coming here. It was a great presentation today and it was a great demo here.
Where details to contact you will be in the show notes for this episode.
Thank you very much for this interview and I really enjoyed it. All right. Thank you. Bye.
I'm a spectrum 24 and I'm talking to Silvano, India uniform 2 kilo whiskey Oscar. Nice to meet you. Nice to meet you.
Now you've just given the presentation here. What was your presentation on?
Okay, yeah, presentation is about a project I'm working on since like four years that is open RTX and it is an open source firmware for how many devices and not how many devices.
So like the cheap Chinese radio type things. Yes, but not also those because we already support some of the hardware made by the M17 group.
And we plan to support even more hardware from I would say the general ham radio hacker community.
So it's not only about cheap Chinese radius. It started on cheap Chinese working on cheap Chinese radius, but I mean it's not limited to kind of.
No, I guess so this would be so when you say a firmware this would be like the operations you replace the operation system on the radio with your operation system.
Is that a summary? Yeah, basically we compile a complete firmware image which can be uploaded like if it was a new you know a firmware upgrade for the radio.
It completely replaces the old manufacturer made operating system with the new one.
Is there any special hoops that you need to jump through to do that? Is there any DRM or do you need to harder hack the radios?
Basically no. You can just connect the radio to the computer, put it in the firmware upgrade mode and load the image.
And what's the advantage of doing that? Well first of all I would say open source which brings capability of I don't know experimenting with your device because yeah you have something of which you have the source code.
So basically you can implement whatever you want you can extend it you can I don't know you can play with it basically.
Fantastic. It's hoping to do what Linux did to to desktops I guess.
Yeah, that's the hidden dream basically.
And you mentioned in your presentation and we'll put links to your presentation in the show notes that there's a lot more that you can do because of portability you don't have competition you're looking for open formats for transferring and saving data as well.
Yes, I mean it's not only the firmware because now we are thinking about working on making a common format for code plug that is basically standardized format to allow people exchange information about repeaters frequencies channels and so on.
Because currently each radio has its own format and its own tools and once you have an open source firmware which goes on a lot of devices you can naturally also think about having something common and shared to exchange this kind of information with people.
So I'll say I spent ages setting up my radio with all the local repeaters and all my favorite stations and my modes and stuff.
I can save that and then get this new radio that you are working on from the states paid my input tax and stuff links and show notes.
Top tip for any of the American listeners there's a cool new radio coming with out of the box or open RTS open RTS.
Open RTS are already installed and so none of the pain to make in tea.
And then you could just download this and it'll work even though the hardware is different the manufacturer is different.
Exactly, yes. Also you can send the file to your friend or in the club or whoever.
All of this.
Fantastic. Listen, thanks very much. There's another presentation about to go off here so we'll disappear.
Thank you very much for taking the time. Thank you very much for attending. Was there anything else that you wanted to mention?
I think it's pretty much this. So thank you very much.
All right, see you next year.
We're at Spectrum 24 and you're just coming off the stage and your name is Sebastian Dudek.
And what are you here showing?
I'm showing you a tool which is called Air of Swift which is like a tool box that allows you to save a lot of time because you don't need to find the tool you use.
Of course distribution exists but this is a tool that allows you to make your own recipe to install your own tool or use the tool that we provide in a quick way.
So in 10 minutes you have everything.
And when you say everything, what is everything? What sort of tools are you?
Like all the tools we have already packaged and then we continue to package. So of course there's like not everything in the world.
So you're just give some people context, you're into penetration testing, you've got what sort of equipment have you with you?
So with me, I have several equipment so I'm trying to keep the minimum equipment. I have an essay, I have a letter F, I have a prox mark and I have some dongles. So this kind of tool.
So you've got all that hardware and there's new updates coming up all the time and you need the software for that. So this is where you go.
This is the update. So this is one of the issue but the other issue is to spend a lot of time trying to compile everything. So this is something that is solved with Air of Swift.
So there are distributions out there that already do this based on booting up a Linux distribution, Kali OS, Dragon OS, etc.
But this is something that is based on Docker, but you've added some simplifications on top of that.
Exactly. I mean, with just three commands, you can pull an image over the internet to have like all the tools run the container.
You can mess with that so you can also always run another container. So you can also install your tools, but everything is package and you can also use that not only in Linux, but also in Windows.
And then maybe later in the macOS because we also wanted to work on macOS too.
Your presentation was excellent and I was particularly impressed with the ease of which you could get the hardware from inside.
It's always a pain and ducker. I was going, OK, where is he going with this? And then we had an actual issue where you were trying to get the audio connected.
And you had a pulse audio server and then there's a tool associated with that so you can bring in the sound.
And then you had the USB issues and then there was a few gotchas with modems.
But all in all, it was a lot less pain than I would normally go through setting up some stuff.
So what was your motivation for doing this in the first place?
Oh, because when you try to do assessments and also you want sometimes alive, you want probably to sleep.
You probably want a tool that allows you to scale a little bit and also to have tools that you can reuse.
So let's say that you computer got broken, let's deny before the pen test.
And so you don't want to, you probably want to sleep before the pen test, right? So to be efficient. So this is why actually.
So it's all based on ducker containers, everything's pulled down. It's open source. What license is it under?
It is on the gplv3 license.
Absolutely excellent. And is there anything else that we didn't talk about that you'd like to mention?
No, this is also multi-architecture, multi-activity device, I mean device tool.
So you can actually run it on today, AMD64, ARM64, you can also run it on risk 564.
Because we have also tested it with some SBC, there's the milk 5 Jupiter, which is working very well.
Still, of course, risk 5 is kind of in matter. But we actually, I mean, it is actually working on that.
And you showed us a demo of it running under WSL on their windows as well.
Exactly. I mean, the video, I mean, there's like a video showing you that you can install everything on windows and also run a GPS station with 8 BTS on windows.
Which allows, I mean, on windows will be a pain to actually compile on windows. And you don't know if it will, it will compile already.
So what I love about this is the whole containerization. You can still do your Word document, you can fill out your whatever or send your emails.
And then you have all this stuff nicely containerized. Excellent presentation. I'm going to ask you to put the presentation in the show notes.
So we have that for the folks contact information will be there. Anything else that we want to say?
Oh, no, thank you very much for your intention. And if you have any question, I'll go to www.erifswifter.io.
And the website looked great. Thank you very much for your time and look forward to seeing you next year.
And I'm a Spectrum 24 and you've just given a presentation. Your name is?
Terry. And what was your presentation about?
It's about the VLF world and what we can find in the VLF Spectrum and how to design a receiver.
So VLF for the non-handsomones is very low frequency. But when you're talking low frequency, how low do you go?
Well, we can go very low. In fact, very deep until the end of the electromagnetic spectrum, nearly maybe lower than one air.
One hertz.
So the speed of light is 300,000 kilometers an hour.
That is a very big wave.
Yeah, that's 300,000 kilometers.
Yeah, that's it.
And where would you be in your presentation? Who would be using this?
We will be.
So what type of applications are there for this low frequency?
Oh, military applications, scientific applications to study the interaction between the area in the sphere, the airs and magnetosphere and the sun.
And military people use that also to communicate with their sunrise.
And for us, a matter of videos, we are interested in listening to natural signals that we can find in this frequency range.
Like whistlers, twigs, courters and many other signals.
I didn't have time to speak about it, but there are a lot of things to listen.
And we like also to listen to military signals and try to track them or know their origin where they come from.
And what sort of bandwidth can they get on?
So they use this because they can penetrate into the earth for military bunkers underground and also for submarines.
Yes.
Up to 100 meters from what I can see in your presentation.
So what sort of bandwidth would be able to get on this?
We will be able to watch Netflix.
Oh, by bandwidth, you mean data rate?
Yeah, what could they expect?
You know, at the left spectrum, the Russians, they have 82 hertz.
And they reach data rates of something like bytes per 10 minutes, one byte per 10 minutes, something like that, maybe one byte per half an hour sometimes.
So it depends on the depth of the submarine, I believe.
Wow, you wouldn't be very impressed if you got a spam message after waiting that long.
So how long have you been interested?
How did you get interested in BLF?
And how long have you been involved?
I'm interested since 16 years old.
So that's something like 25 years now.
And I started by listening to long ways radio frequencies broadcasting.
And then I went down and go down and go down to deep effects from until nearly zero hertz.
So if you're interested, where can people find out more information?
Oh, you can go to a very nice website, that is www.vlf.it.
And links for all of that in the show notes.
I'll try and get your presentation as well.
Yes.
I can provide.
Yeah, no problem.
Okay, that would be great.
Well, thanks very much for taking the time.
And people do have a look at the presentation.
It's really, really interesting.
Yeah, thank you.
Was there anything that I missed or should I have covered in the interview?
No, I think that's...
I didn't know Mr. Sorry.
Yeah, have we covered everything?
Anything else?
I believe, yeah, yeah.
We have covered everything.
Okay, thank you very much and we will see you again next year.
At Spectrum 24 again and walking around the booths and I've come across the TX control table
and one of the organizers is here.
Mark, can you introduce yourself?
Hi, yes, I'm Mark, HB9 SSB from Switzerland.
And yes, I can say that I'm one of the organizing team of this nice conference here in France.
I'm for by professional software developer.
And I started the open source TRX control project which aims at controlling transceivers.
That's the very short story.
It's actually a difficult thing because every transceiver has a different protocol to set frequencies,
set the mode, get the operating mode out of the transceiver, get status updates when you turn the dial.
And with this project I'm trying to create a common language for all transceivers.
So the command to set the frequency is the same, whether I connected a Yaezu or an Icom radio or whatever.
And then the promise of this software system is that undetermined number of clients can simultaneously use
and also unlimited number of transmitters, transceivers, GPIOs, rotors, and general extension like querying the qrz.com database,
the hamqdh database, or a generalized memory system we have in.
So you can create a memory system and tap on a memory and then it will load it into the transceiver and set the frequency.
Just so that I get what you're saying.
So I have a radio from some proprietary manufacturer and some of the else is radio from some proprietary manufacturer.
And you want to have a standard interface that you can talk on your computer to that.
So if I've got one radio over here from brand A and one radio over there that I hit my settings and I can tune in and get my, you know, breakfast radio or whatever it is from.
But you also mentioned that it's shareable among other, it's shareable. Where does that shareable come from?
Okay, at the heart of the system is a demon process that runs on Linux and that accepts connections over TCP IP version 4 and version 6 with optional encryption.
And it also accepts connection over web sockets.
So if you have a client that can connect to web sockets, for example, your favorite browser with JavaScript or let's say you're developing an app with flutter.
Then you can immediately and very easily connect to the running TRX control demon, which is called TRXT.
And then by means of exchanging messages in JSON format, you control the transceiver.
So to send, to set the frequency, you create a JSON data structure with a destination field, the name of the transceiver and with a command to set the frequency and obviously the frequency.
And what we do, we not only create a common language to control the transceivers, we also normalize the units.
So some transceivers work in 10 hertz steps, some work in hertz steps.
So we define that in TRX control, a frequency is always in hertz.
So you could, am I correct in saying that say like for something like satellite where you've got, you've got several problems, you've got the, you're transmitting on one frequency.
Maybe you've got a transceiver transmitting, you got somebody else receiving, you've got a satellite dish that you need to point.
It's outside in the shed and you need to turn on the heating or something.
All this can be scripted using this protocol.
Exactly, yes. And if you have a device that has a particular command set and you know that, then it's very easy to add it to the system because all the drivers for transceivers and also the protocols they are written in a scripting language called Lua,
which has been invented at Poocryo in Brazil and has been around for 30 years and it's used a lot in embedded systems and gaming and what else.
The core of the software is actually written in C. It's a complicated piece of software because it heavily makes use of physics threats and synchronization and so on.
But those parts that the ham operator should be touching, they are using this Lua language which is really easy to learn.
I heard this week somebody say that Lua likes to use the best tool for the job and that's Lua.
Anyone could use that Lua like so long as this Lua.
They distract themselves there now. Was there anything else that we didn't cover that you think?
Oh yeah, say a new device comes on the market and is it possible then to share what's the terminology for if I got a new device and I'm making configuration, can I share it back to the community?
Yes, of course. The whole project is on GitHub so if you write a driver for a particular radio then you can make a pull request and if you are willing to maintain it, then I'll add it.
Actually I have gotten some drivers but the people disappeared and I had to remove them so that's not funny.
If you contribute then you must be willing to maintain it. And what's actually funny is now two booths, two stands later is the M17 protocol and open WRTX, the free firmware for handheld radios and other radios using the M17 protocol.
And they are actually working on a remote control protocol, a CAD protocol, computer-aided transmitting, they call it RTX link.
I'm currently now here at Spectrum 24 setting up the OpenRTX system or my development laptop and I just got it running and...
And I'm interrupting you, sorry about that. No, no, that's fine. The plan obviously is now to add a driver for RTX link to TORIC's TORIC's control because as you may have heard there is now the first commercial M17 radio.
The M17 radio available from a US company so it would be nice if it would be supported right from the start.
That's absolutely awesome. Was there anything else that you wanted to mention to people around here that I forgot?
Actually not. I want to say a heartful 0x49, that's 73 in hexadecimal.
And that's greetings, isn't it? Translates those greetings in hand.
Oh, it was warm greetings, 73 yes to all the audience and listeners.
Okay, thank you very much and enjoy the rest of the show. Look forward to talking to you next year.
And that's it, that covers all the people I was able to record before I had to rush off from my trade.
There will be a separate episode where I speak to one of the organizers.
Kristoff about hand radio in general and discussions he and I were having about promotion of hand radio and how to get more people involved and how to get more hackers involved.
But I'll be releasing that as a separate episode.
So I would like to thank everybody who was at the conference, everybody who put along, everybody was exceptionally welcoming.
It was a lot of stuff was way over my head, but I really, really enjoyed it and apologies to anybody who I wasn't able to interview.
Hopefully next year we'll see what happens. Okay, tune in tomorrow for another exciting episode of Hacker Public Radio.
You have been listening to Hacker Public Radio at HackerPublicRadio.org.
Today's show was contributed by a HPR listener like yourself.
If you ever thought of recording a podcast, click on our contribute link to find out how easy it leads.
Hosting for HPR has been kindly provided by an onsthost.com, the internet archive and our things.net.
On this otherwise status, today's show is released under Creative Commons Attribution 4.0 International License.
