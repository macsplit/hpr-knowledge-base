Episode: 2427
Title: HPR2427: Server Basics 101
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2427/hpr2427.mp3
Transcribed: 2025-10-19 02:50:40

---

This in HPR episode 2,427 entitled Cerma Basics 101, it is hosted by Klaatu and in about 43 minutes long and Karima Clean Flag, the Summer Inn, Klaatu and Everton explain the basics of Cerma Administration.
This episode of HPR is brought to you by Ananasthos.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's honest and fair at Ananasthos.com.
Thanks for watching!
If you enjoyed this video, please hit that like button and subscribe to the channel.
Thanks for watching!
See you next time!
Hi everyone, this is Klaatu, you're listening to Hacker Public Radio.
You have stumbled upon a new miniseries and the miniseries is called Server Basics.
I want to cover the basics of a server, but broadly speaking I want to cover sort of beginning-level cis-admin stuff.
I might not be the best person to record this miniseries because I'm not currently a cis-admin.
I have been a cis-admin, but I'm not currently working professionally as a cis-admin.
I happen to be in that industry, and I happen to be training other people on it, and I also do some volunteer stuff that has me doing cis-admin work.
I'm not the worst person to do this miniseries.
The thing that frustrates me and frustrated me, especially when I was just getting started as a cis-admin, was this feeling that you get put into this role as a cis-admin.
You may seek out the role and then you get it, and you start setting things up, and there's just this nagging feeling constantly in the back of your head that someone else has already done this before.
Whatever it is that you're doing, you just kind of think, you know what?
Somewhere someone has solved this problem already, so why am I spending an afternoon trying to learn it myself, or trying to get it to work.
You start to abandon the why am I learning this feeling, and it's just like, oh please, just work.
So it becomes like a very kind of frustrating thing, because you feel like there's this definitive goal, like I want to give people access to this thing, and then you look out around online, and you get 20 different tutorials.
None of them tell you actually what you're trying to do, all of them kind of take stabs around that issue, and none of them work anyway.
It's super frustrating, it's enough to just turn people away from even trying.
And we wonder why people don't set up computers for themselves, you know?
We keep pointing to things and say, why don't you just use that in your small to medium business, or why aren't we using this in our large business?
And then you look at sort of the way people are distributing the information on how to make it work, and you kind of realize, okay well that's why it's not being used, because there's just, there is no push button installer for this thing, even just to get it set up and running for a proof of concept, you know?
Half the software out there that you install on a server, especially I feel this is true.
Half the software out there that you install, after you install it, it is basically non-functioning, it is useless to you.
If you install the service, and then you type slash atc slashrc.d slashrc.fu start, it'll start, but it doesn't do anything, or maybe it won't even start, it really kind of depends.
And that's a problem, and it feels like it's a solvable problem.
But in a way it's not, and that's one of those weird contradictions that you have to come to understand by doing it first, and then you'll look back and you'll see, okay well that's why this isn't a software, it's a framework, and so when I install it I've just installed the pieces that are going to enable me to build this thing, which I could rightfully call my software almost.
Like this is the service that I'm providing to you, because I have assembled all these pieces, and that's why you're a Sysadmin.
So that's a big part of being a Sysadmin, and if you're not up for that kind of role, then you're probably not necessarily looking to be a Sysadmin.
And now I'm speaking mostly from a Linux background, although I have had major involvement in OS X server software from about 2000 and maybe 2008 to 2009 or 2007 to 2009, something like that.
So, you know, it would have been, yeah, 2006 to 2009.
So I'm even talking about, from that perspective, that there's, you know, it's just, even the things with fancy GUIs and little iTunes-like, you know, here's a list of all the things that I can do, I'll just put a tick next to that, and then I'll fill out this little configuration form on the right-hand side, and everything should work, right?
Oh, no, it doesn't. So it's a complex task, and you should be ready for that.
It is, it's a lot more than, well, I know how to use Linux, I figured that out, so now I'll just set up a server.
It's a lot different than that, for a lot of different reasons, which we'll go into.
So, before I sort of continue down that path, or go down that path too far, I should probably just talk about the really, really basics in this episode.
I want to talk about what a server is, what you should use as a server, what you can use, and what you should use as a server, because those are two different things, what you should be running on your server in terms of an operating system, and I bet you will never guess what I'm going to say about that one.
And then how modern servers are different than what a lot of us died in the whole Unix Geek Linux Geek types sort of picture to be as a server, and that's an interesting one too.
And then the next episode will get to more interesting things, so if you know all this stuff already, yeah, maybe this episode isn't for you, this is going to be pretty basic.
Okay, so first of all, a server is, as the saying goes, just another person's computer, and you may have seen that on a sticker or a t-shirt, and it's just really, really true.
A server is just a computer, so especially in the politics world, anything can be a server.
Really, your desktop computer can be turned into a server, or it doesn't even have to be turned into a server, it can just start serving.
So when we say server, we use that connotation because, I mean, it's just a made up thing, we call them servers.
Well, it's really just a computer, but we call them servers because their purpose in life is to serve something.
And you may have seen, like if you go to freeBSD.org or something website like that, well freeBSD.org I guess would be the one that I'm actually talking about, because you go there and you see slogans like FreeBSD, the power to serve.
That's all the computer that serves stuff is, it is a computer dedicated to serving other computers.
And those other computers we tend to call clients, but nobody calls them that in the real world, like out in the, you know, we wouldn't call them that ourselves.
We would if we were a cis admin, but normal people just call them, oh, this is my computer.
And then the server, because it's not your computer, must be something else, right? Oh, it's the server.
So there's no mysterious sort of, okay, this is a server, and that's not.
It's really just whether or not you've designated to serve something.
And as I always say, well, I don't actually always say this, but as I believe actions are louder than words.
So if you just open up a terminal or a command prompt if you're on a non-posix operating system, open that up, as long as you have Python installed, you can turn your computer into a server in about, I don't know, let's call it 18 characters.
It might be more like 24, I didn't count.
All you have to do is type in Python, space-m as in module, space, simple HTTP server.
And that's capital S and simple, capital HTTPS.
So simple, capital HTTPS, and then Erver.
And that will literally turn your computer, that otherwise has never been a server before.
You may not even, you still not even understand what a server is, even though I've just told you.
Don't even know what it is, you type that in and press return, and it starts an HTTP server on your computer.
And if you go to another computer and go to the IP address of your, of the computer running that Python command, you'll technically see a web page.
I mean, it won't, it won't be a very exciting web page.
It'll probably be an empty window, possibly.
But it would be there, and you are serving HTTP now.
So what happens there is that if you go to another computer, so if I just typed that in on my laptop, for instance,
and then I turn to my desktop, and I open a web browser, and I go to HTTP colon slash slash 192.168.4.5, let's say.
I've just gone to my laptop and my web browser.
So the web browser, by default, sort of knocks on what we'll call port 80, you know, on of the laptop.
And why do we call it a port, and why do we call it, why do we give it the number 80?
I don't know these things.
A port is like a ship that goes into a dock, they go to a port, they go to a port.
And that's sort of the analogy that we use when we go to a specific, well, I don't want to say go to a specific place on a computer,
because what does that mean?
But when we send a signal to a computer asking for information, we put a little, we put some text at the beginning of our request,
like that little electronic signal that we're sending to another computer, we put some text in there.
And we say, request this type of service with this magical number 80, and see if we get anything back.
So when we went to the laptop that I've just typed that simple HTTP server in, we present to the laptop this request for a service.
And we're asking for an HTTP service, so that's kind of a web service, right?
And we say, here's my magic number, it's 80.
And now if that computer is running something that is quote-unquote listening on port 80, then it will recognize that request.
It'll say, oh, you want some HTTP, and you know that it should be here at port 80?
Well, actually, then yes, you can have this, and it hands over a web page to the other computer.
That's how servers work. It works like that for HTTP, it works like that for SSH, SSH, it works for that, like that for NFS, it just, that's just how, that's how this stuff works.
So anything can be a server, and if you're in that mythical small to medium business, you could grab a desktop computer from the IT closet,
which might be your bedroom closet, you grab the desktop computer, you install some server software onto it, and you just call it your server, and you treat it like your server, and it becomes this thing that sort of does stuff in the background for you.
Maybe it's backing up your main computer, maybe it's got your accounting software on it, I don't know, maybe it's running a database, maybe it's running your website, that can be a server.
Now, maybe you don't have a spare desktop computer in your bedroom closet, maybe you have a spare laptop, guess what? You can make that a server.
Maybe you just have a Raspberry Pi, yes, that can be a server too. Maybe you just have a motherboard hooked up to a power unit with a CPU and some RAM on it, that can be a server.
You're going to need some kind of hard drive, but yes, that could be a server. So in other words, a server is simply a computer. If it is a computer, then you can pretty much turn it into a server probably.
Okay, now that we've got that out of the way, let's talk really briefly about what you ought to use as a server.
So I mean, sure, if you're just learning this stuff, if you're just playing around with it, if it's just something for home and you just kind of want something that you can run maybe a music server on or something so that you can go around the house and kind of dial back into your music server and just play some songs, no matter where you are in the house or something like that.
You can, yeah, you can just use anything that you want as a server. It doesn't matter. An old laptop, off in a corner, a Raspberry Pi, whatever. It doesn't really matter that much.
In the real world though, it matters very much of what you use as a server because servers, you know, your laptop or your Raspberry Pi or your desktop, it has like maybe one, maybe two users, right?
You, maybe your partner, maybe a kid, maybe three users, it doesn't really need to serve that many people at one time.
So you can usually manage to turn anything into a server at your home because Max traffic is going to be, you know, three or four or six, whatever, depending on what you're trying to run.
And that's probably not really going to put that much strain on that computer device. But in the real world where you have lots of people doing things in maybe sort of an office setting or, or, or you have a bunch of processes happening, like, you know, you've got accounting software, you've got a database, you've got records that are being taken, like, well, I guess that would be database, wouldn't it?
You know, you've got file sharing and firewalls and all these other things running in the background, that sort of thing does actually put a strain on a computer.
And if you just pull any old computer out of the closet and start relying on it as the thing that drives your business or at least the thing that keeps your daily operations going, it's very dangerous.
And I found that out sort of the hard way as well. I was working at a place that, that just surprise, surprise, wouldn't spend money on the IT department. They just wouldn't do it.
They knew that they had to, they knew that they should, and they just kept not doing it, but they kept asking for services, right? They kept, they kept saying, well, we need, we need this, we need that.
But we don't, we're not going to spend any money on it, so set that up then.
You know, and I was pulling old computers from closets and hooking them up together and putting, you know, software on them and just kind of hoping that they would survive.
And what ended up happening was that they would survive for like two, three months, and then eventually they would just kind of fall apart.
They would just start crashing all the time because the, the, it was getting used too much or it would hang, you know, because it couldn't process all the requests.
And yeah, it just, it, it was not good.
So if you are in that situation, if you're entry level IT or whatever, people are trying to tell you that they need more, but they don't want to spend any more money on it.
Don't go online and read sites that try to convince you that you can just do everything with a Mac Raspberry Pi.
It's magical. It can do all kinds of things. It's a real option. They don't really mean that. They don't know what they're talking about or they're just trying to impress upon you how exciting technology is.
But they don't literally mean that you can just grab a Raspberry Pi or an old desktop and set it up in a building full of 100 people and expect that thing to survive the day.
So what you should be using is a server. A server is a computer, as we've said, but you want something that's sort of classified as a server.
You want something that someone has said, yep, this is going to be a workhorse. So we are going to put a lot of RAM in it.
We are going to make sure that it has a healthy CPU. We are going to put a big disk drive in it and we're going to have multiple drives so that you can do a ray at a ray and actually have instantaneous backups.
We're going to give it more than one network port because that would be good.
We're going to make sure that the network port that the network card that it does have, the network cards that it has, are 100 gigabits or more a fiber channel maybe.
We really expect the thing out because if you try to repurpose with completely commodity, just kind of off the shelf things that were kind of good enough five years ago, you're going to be sorry.
So servers that are consciously purposed to be a server come in two different shapes really. There's servers that look like dust tops and they just kind of sit maybe on the floor or somewhere and that's just kind of your server because it's big beefy and like I say got lots of stuff in it.
Or possibly it's a rack mountable server and they come in these sort of pizza box looking things that you can mount in a rack on top of each other because a lot of times people with one server want you know four or eight or a hundred servers and so they just rack them up in a rack and let them run.
So that's what you're really looking for in spite of what you may see on articles online by people who are certainly telling the truth they're just maybe not representing how the real world works all that accurately.
And I don't think they're doing it maliciously I just think that a lot of people writing about this stuff are very frequently there if they're writers they're not actually people really well versed in in using the technology so they can they can understand it so that they can write about it but they don't necessarily actually you know they haven't gone into the trenches and tried to actually throw a hundred people at a pie and just kind of hope that things work out.
Because if they did that then they would write the article a lot differently.
Okay so now what distribution what what operating system should you run on your server well look there's only one answer to this and it's Linux or BSD and you know there used to be another option in there but that's dead now but you should be running Linux or BSD on your server.
I say that confidently and emphatically there will be times when you look at something and you think well I know normally people would tell me to run Linux on this thing but but it's for this one little department and and they really have a very specific need.
And so I'm just going to go ahead and run windows on this on this box for now just just because I mean it really doesn't make any sense to do anything other than that.
And I'm telling you in this day and age it doesn't make sense to do that do not run windows on a server do not run OS 10 as a server run Linux as your server or BSD as your server.
And if you absolutely have to have another platform running on that box virtualize it.
I would not necessarily have said this two years ago three years ago like there were I think there were some cases back three years ago let's say where windows would have just made sense.
It would have you know if there was a like a financing department or something and there's stupid finance over engineered bloated finance package only runs on windows then that would be the obvious choice but in this day and age where we have virtualization down to an absolute science there's just no reason to be running windows on the on bare metal.
It doesn't make any sense it actually doesn't it makes much more sense to virtualize it and then you've got this you know you've got all the benefits of virtualization you've got the snapshotting and you've got the recovery options.
And you've got the added layer of security and you're running everything in sort of a little containerized sandbox do it that way it's much smarter at this point.
Default to Linux or BSD if you know that better whatever just virtualize your way out of any kind of platform incompatibility and you'll be fine okay.
So when I say Linux or BSD what what specifically am I saying there's a lot more flexibility there I would say but within Linux I would I would argue personally that you want to go with something.
With that that wonderfully mythical thing called support and it seems almost silly but I think that if you if you try it yourself you will come around or you can just listen to my advice either way I think we'll get to the same place in the end.
And so I'm just going to kick it off by saying you should be running rel or sent us since sent us is essentially rel sus or Ubuntu depending on what you know and feel most comfortable with or depending on what you're willing to learn.
And the reason I'm saying this is because there are focuses and I think these sort of grow organically themselves I mean there's a little bit of guidance from top down but I do feel like
like a lot of this is more or less organic. There's a focus in distributions of Linux and rel or sent us certainly is very focused on being a server distribution meaning that if you search for something on a rel or sent us documentation site.
The kind of answers and here here's a great example actually I remember that I used to get a lot of times I would do a search for for something like like I don't know in peg four let's say search for in peg four maybe I'm trying to stream it maybe I'm trying to convert it maybe I'm trying to play it back in a browser whatever if you search in P4 let's say on a rel site you are more likely to get information first on how to.
On how to stream it whereas if you search for in P4 on say I don't know pick anything else Linux Mint then you are more likely to get information on how to make sure that it plays back in your web browser.
So if you translate that kind of example into just everyday server tasks so if you if you search for how do I share files on rel then you're probably going to get results back that kind of are biased towards hey here's how to set up a service on your server to enable all of your users to share files amongst themselves whereas if you did that on I'll just pick on Linux Mint again because I know that it's very user centric.
If you do that search on a Linux Mint site then you are more likely to get hey here's how you mark a directory to be shared you know with other users in your local network and they'll tell you how to open up you're you're not a list window or whatever it's using kaya whatever and you right click on the folder and you choose you know sharing options or properties and then go into sharing I don't know I don't really use that one but
you get the idea so when you opt for a distribution that sort of advertises itself as as a server to the detriment almost of users then then you know that when you need support even if it's just self support like I'm I'm willing to learn this stuff I want to figure it out but I need to go to the internet to search for something then you get that benefit of like you're all talking the same language.
So that's why I would first default to rel in centos and it's there's the additional several other benefits to rel in centos and that is that rel you can learn easily for free by getting involved in either fedora or or or centos.
So you get like that sort of foot in the door of this big professional sort of server software and then if you know that your job opportunities I believe later on become pretty good because you're the person who knows rel.
And that's pretty popular in the market. Second to that I would say Zeus open Zeus they're kind of cool as well because they've got kind of that split between hey here's our enterprise product and then here's our community sort of user centric project that you know so it almost straddles the server you know am I a server distro or am I a desktop distro probably better than rel to be honest because they're support their support for their products are actually a lot longer I feel.
So the I guess disadvantage quote unquote to soos for me is that I don't know it as well so in other words there is no disadvantages just that that's I went down the fedora path instead of the soos path and ended up at rel.
So so so so this is pretty good pretty pretty solid or it's a solid distro but I mean a solid choice for your server in terms of what kind of search results you can get when you're looking for something.
And then Ubuntu I feel like the community at least at one point really really wanted it to be a desktop distribution it seems to me and I could be wrong but it seems to me like the message coming out of the company that sponsors Ubuntu is that they're very much a server distribution now.
So I'm not sure what you're going to get if you search for how to do stuff on Ubuntu I just happen to know that they've made inroads into the server market and so if you do put a put a put Ubuntu on a server it's not like you're going to be completely out in the cold when you search for you know how do I do food on a server or on Ubuntu server that people are doing that people have articles out on it there help their knowledge base articles about you know running Ubuntu as a server.
So you've got a pretty good foundation there and that's the goal here is to is to make it so that when you're learning how to sys admin or starting out your sys admin career the thing that you are fighting is not darned I want this distribution to be a server distribution you know what you're fighting is why doesn't this thing work for me but it's working for everyone else whereas if you're having to develop stuff which is what you want you don't want to be developing your own server distribution when you're just trying to get started.
So that's what I want to do is I want to do stuff set up at a job trust me okay let's talk really quickly about the BSD is there's a lot less to choose from here it's it's sort of like well you got free BSD open BSD not BSD and drag and fly BSD and there's probably some others that I that I've left out but you get the idea I would say that that you can pretty much take your pick the BSDs are a fairly unified bunch not not completely there there are some differences and look it's no secret I'm a Linux guy I don't run a whole lot of BSD I've run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm
not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop but I'm not going to run it on a laptop with a laptop but I'm not going to run it on a laptop so I'm not going to run it on a laptop but
are humans about four BSD is oh well it's less it's not as fractured as Linux so it's
much cleaner and blah blah blah and whether or not that's true doesn't matter point is pick
a BSD put on a server see what you think if you're not familiar with BSD then there's you know
then that would be a learning curve but then again if you're not if you're not familiar with either
Linux or BSD then then there's a learning curve so just choose your poison I guess I will say that
in terms of sort of the ease the ease of modern um populist server technology I would say
favor Linux because Linux is kind of on the cutting edge of some of the modern server stuff
that people are going to expect and I will I will explain what I mean momentarily about that
whereas BSD a little bit slower to move a little bit heftier they're not always interested
in the same things that Linux is interested in and a lot of people out there in the world are
interested whether they actually know it or not in what Linux has to offer whereas BSD I would
probably feel like there might be some roadblocks when people say oh I want this on my server
and you think oh dear I didn't think of that one is that a thing for BSD is that going to work
I mean a big obvious example here would be docker uh docker technically works on BSD but
it's still very experimental it's not really approved for production use can you virtualize
something and then put docker into the virtualized thing yes you could do that but right there
there's you know levels of working around and kind of sorting things out so
if you don't want to run into surprises like that I would just kind of think yeah maybe go more
mainstream and stick with Linux and this is the perfect segue into the difference between what you
and I if you're a Linux geek you and I might think about well this is a server versus what
everyone else thinks a server is and I don't mean I'm talking about the hardware anymore we've
already discussed the the term server is is fake and it's just another term for computer got that
hardware is sorted what what I want to talk about now is what people actually think a server
software platform should look like and it has changed a lot so here's the thing old servers
back in the good old days they were very distinctive things and I think a lot of people who are
getting into Linux and POSIX and Unix kind of think of that very fondly um as you know that's
that's what a server is and when you get a job as a sys admin that's what people are going to
expect and it's completely wrong nobody expects that anymore so what am I talking about talking
about the days when we had a big server in the closet somewhere couple servers maybe and they're
all running and they're all running net bsd2 and I don't know what version net bsd is on right now
so I'm making up a low number and and you would log into this server as a as a user in a terminal
and you would see a bunch of text and it would tell you you know some message of the day and it
would tell you how to check your email you know you would type in pine to check your email or you
would type in a pico to type a paper and then submit it to your professor and all this is done
over telling that you know like so I mean not really but but that's the that's the thing that we
all I think a lot of us think of when we think oh I'm going to set up a server and have lots of
users and that's it's a shell account essentially it's a free shell or it's a shell account that
you could find on for instance free shell.org or sdf.org or or there were several other shell
accounts out there and and that's kind of what we I think deep down want it to be you know we want
the user we want to live in a collective where people are all computer savvy and they know how to
log into machines and they're not afraid to have to type in commands and that kind of that sort
of mythical that's the 1950s of of being a Linux geek I think you know that's like when everything
was perfect and everyone was happy and there were TV shows on about families and that that was
that was the good old days and so to us a lot of us I think that's the good old days for the servers
it's it's beautiful it's wonderful everyone's using Unix and no one really cares and it's just
it's all working out really well and when I say it's the old days I mean it's like the early 2000s
like I'm not talking about the ancient old days necessarily it's within it's within our memories
as to when this was actually a real thing I remember as a kid logging into the New York public
library system via telnet I'm not kidding you like that's how you could if without going into
the library if you wanted to search for a book to check out and see if they had you know on site or
if it had been already checked out or if you wanted to renew a book that you had you you would log
into the New York public library system via telnet deep geek probably remembers this or any of you
who may live in New York that I don't know lives in New York I know deep geek lives in New York so
he might actually remember that quite well so yeah it's it's recent it's just not it's not what we
think it's not what we like if you get a job today and someone says we need somebody to set up
one of those server things they're not talking about that probably they're they're talking about
the new server so what's a new server well a new server I mean that's a developing thing right it's
a moving target it's a new thing that that that is developing as we speak but generally speaking
what what a lot of people think of when they think of a server there's two two things that people
think of I think so one is it's a kind of it's a folder on your computer I mean people know that
that's not the server but but that's they think that's how they get to the server is they go to a
folder on their computer and on their desktop and it's probably got some weird drive letter
associated with it like you know go to your Z drive go to your W drive something like that some
some really sort of way out their drive letter and and they go to that and they find their folder
for their department and they find all the documents for their department and that's all very nice
and frankly even that is becoming the old server like that that's moving into old server neighborhood
I think the other thing that people think of and this is becoming sort of like the very I think
very very much the norm is like it's it's something that exists in your web browser like you're
going into the server because you have to go adjust something in some kind of app and that's
that is the new server the new server is a cloud kind of environment uh both for the
user and the server like we you know it's it's kind of in the cloud it's it's on the net it's
accessible from just your web browser or whatever and um and and it's it's a collection of apps
that's that's the new server and if you don't like that um then then you're you're not
thinking you know you're definition of assist admin is not necessarily what the new definition
is unfortunately um and that's okay I mean there are other jobs in and around server maintenance
that do not involve cloud maintenance but that's that's the new that's the new thing that's
what's happening today as I record this people are you know they're setting up multiple servers
in in a rack and they're they're clustering them together so that they're acting essentially
as a super computer and within that super computer they're spinning up a bunch of virtual servers
little servers you know the type the type that run in something like virtual box although it's
not virtual box probably it's it's kvm qemu uh it's um what's the other one that I'm forgetting
zen xe and uh things like that they're running it little software things that think they're
computers and they get networked as if though they're computers and you're just wiring all
these virtual servers together and each virtual server is covering some kind of domain and by domain
I don't mean the official like domain I mean some kind of realm of of an area of expertise so or
area of of of requirement so maybe you need a web server well rather than putting a
rack units into your rack or you know grabbing a desktop type server and putting it in your
server closet rather than doing that and saying okay that's the web server what people are doing
now is they're they're just adding a web server to their to their cluster and they're saying okay
that software right there that that image that's our web server and that's going to be running the
web server and it will it will serve websites to people when they go to this specific address and
that is how it's going to work and that is how it works um and when people need some other
thing to happen on the server then a new app is installed you know you need you need file sharing
okay well we'll we'll spin up a new virtual server and we will enable whatever kind of file
serving with file sharing that we want to provide our users with and that'll be that
and and sometimes it's it's not even that so that's one that's one model where you have a cluster
of a cluster of physical computers running together to produce a bunch of virtual servers
you may have a cloud platform like open stack or something like that where
you you just literally literally an app like it's here's open stack okay well install this thing
and turn that option on and hey we're serving files now you know it's it's it's sort of
a big server app that you enable services in for people and you can develop on top of it
do all sorts of things on top of that as well but um that's what that's what people are looking at
and that's generally speaking what they expect when when when they're talking about servers these days
like if they're saying we need someone to set up a server that's largely what they're talking about
that's what they're looking for from assist admin so armed with all this knowledge your homework
is to grab a spare computer or if you've got a really good computer and can manage to just
virtualize it you know grab vert manager from the repository and create a new
virtual server that you can play around on again I'm going to suggest if you're really confused
at this point I'm going to suggest going with Fedora on your desktop and then grabbing like I say
vert manager from the repositories and then installing synthos 7 whatever the latest ones have
a nut 4 whatever their number is right now in a virtual machine and from there you can start
playing around with this stuff if you know better you want to try something else you can
but that's what I'm suggesting because it's a pretty well established means of getting involved
in this kind of stuff so next episode we're going to talk about um we're going to skip installing
because I'm assuming that that if you're listening to this and you're saying yeah I want to be
assisted in some day or I started playing around as this admin but I just kind of want to hear more
about it um then you probably know how to install you can probably figure out how to install
at least Fedora Linux and synthos in a virtual machine that's just something that I'm going to
take for granted that you can do that and if you can't then go find out how and that's part of
your homework as well because it's it's an important an important skill to be really comfortable
with your hardware and software interaction really comfortable so get comfortable with that
and then we will skip installing I'll assume that you can do that and we'll talk instead about
sort of the first steps of a server setup and the first steps in interest of security are going
to be post-installed it's going to be getting a firewall going understanding how that works
installing something to protect yourself from brute force attacks like fail to ban
and later um after that we'll talk about file sharing like NFS and Samba and other solutions
other more cloudy kinds of solutions so great we're off to a good start go to your homework
you've been listening to hecka public radio at hecka public radio dot org we are a community podcast
network that releases shows every weekday Monday through Friday today's show like all our shows
was contributed by an hbr listener like yourself if you ever thought of recording a podcast then click
on our contributing to find out how easy it really is hecka public radio was founded by the digital
dog pound and the infonomicon computer club and it's part of the binary revolution at binrev.com
if you have comments on today's show please email the host directly leave a comment on the website
or record a follow-up episode yourself unless otherwise status today's show is released on the
creative comments attribution share a live 3.0 license
