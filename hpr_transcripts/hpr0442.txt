Episode: 442
Title: HPR0442: Chris DiBona Speaks at SELF 2009
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0442/hpr0442.mp3
Transcribed: 2025-10-07 20:42:28

---

The following presentation was recorded by View Digital Media at the inaugural South East Linux
Fest in Clemson, South Carolina on June 13, 2009. For more information about the South East
Linux Fest, visit southeastlinicsfest.org.
All right. Hi. How are you? I'm Chris. I have a new laser. Can we kill the house lights up here?
Because it's violet. Green is very 2004, and blue is sort of 2007. Can you see it okay?
Is it making your eyes freak out because it's violet? Isn't that awesome? It takes like these two
CR2 batteries, and I'm sure it's melting them down because they have extra power requirements.
And if you look at it directly, I'm sure you'd be blind. So that's my new laser.
And that's my presentation. Thank you for coming.
Okay. So he mentioned this is what I do for a living. I'm not going to talk about the incredibly
glamorous world of open source license compliance for very much, but it's actually a very important
part of what I do. I've always thought that sort of the base behavior of a company in open
source was using software within the boundaries of the license. Because if you screw that up,
you can't do any of the really, really fun things in open source like Android and the rest.
So we've spent a lot of time on doing that at Google and making that easy. And a similar amount
of time making it very easy for Google is to really software. And so some of what you'll see
today is the result of that. See now you can see the laser even better to check it out.
All right. And then I can talk and show off lasers. Actually, I owned a laser 15 years ago that I
took out of a, you don't really care about this, but I do. I took it out of a laser printer and
powered it with this external power spine. It was like this big. And I actually took it to a conference
once. People were like, what the? Anyway, yeah. So I run compliance, released from the code from
the company, Summer of Code. And I've picked up more teams now. I just released a new project called
Ulfer Good, which matches up volunteering and volunteering opportunities. So if you want to
volunteer for anything ever, you can go to that. And we're doing about 10 queries per second right
now, which is about a million page views a day, which is pretty cool, or 100,000, whatever. It
doesn't matter. But that's all open source, too. So if you want to look into what that site looks
like, you can go see that. But yeah, let's continue. The agenda, it's very simple. It's me,
questions. And that's it. We know who this guy is. It's funny because I gave this exact talk, I think,
in Malaysia. And they're all like, and they all laugh, but it was like a different kind of laugh.
They're like, and you have to explain, well, this is a noted shister who shows up on late night
television. They all went. So I guess they have their own just speaking Malaysian or whatever.
So I wanted to start with sort of talking about where we've been for a few moments,
where we are right now, which is sort of the meat of the talk, and then what I think the future
will bring us. As part of my job, we do a lot of research into the nature of open source code.
And we've taken the Google code search product and used it as a corpus to do some interesting
studies about. So you'll see some of the results of that in that section. But let's talk about
the past. A lot of people forget about this part of open source, but it really goes to the heart
of why open source is cool and fun and interesting. So on the left, this is Ken Thompson and Dennis
Richie working on the first unix that ran on an early micro computer. That's a micro computer.
You can tell because of the the bigness of it. And they presented their new system unix
at a conference at Purdue University where a young Kirk McCusik was, see I'm using my laser
as an echo, where a young Kirk McCusik was attending. He was I think a graduate student at the time,
and he thought this unix stuff was pretty cool. And as he matriculated and went over to Berkeley,
he said, well, why don't we implement our own version of this? And over time,
he came out with the first of what we think of this BSD. But he really got hooked on unix at
the time. He thought, well, if we can share these ideas, this was a bear two years after I was born,
so that should give you an idea of how long ago this was. If we can share these ideas about how
we can take computer science, then we can move the whole science forward. And he wasn't thinking
about industry or career or the rest so much. He was thinking about where can we take computers
and why is that awesome. And so by 77, he had a good enough version. Everyone was using it. It was
the basis for the first sons and Apollo's and HP workstations and a spawn made derivatives that
we think was the BSD open source world today. And a lot of people don't talk about BSD, but it's
up until about 2002. It had pretty much parity from a deployment standpoint on the internet.
And only when multi-core and multi-CPU processors came out, the Linux really start to outperform BSD
in some situations. And it still has a remarkable amount of market share on the internet. And
people ignore it and don't talk about it and don't see how great it is. And it's always surprising
to me because it's the ethics behind BSD that we all identify with in open source.
Yes. Anyways, some time later, send mail, formerly called the liver, which was used to basically
move around host files among the early Linux machines at Berkeley. Turn into send mail and
it started evolving to send mail. E-mails we know it. That's Eric with his beer. Like I said,
it's the past. He drinks wine more now. And around 83, as you know, the Frisoper Foundation was
formed. And the GPL codified Richard's ideals behind his thinking around Frisoper. And we have
to realize is the ideals behind BSD and send mail. And the Frisoper Foundation is really what we're
talking about when we talk about open source. It's really what we're talking about when we talk
about licenses. And if you understand the ideals and the genesis of these people and these projects,
you have a really good feel for what they expect of you when you use them. So that's pretty
awesome. Like I said, a lot of you know all this stuff. So I know this is review. But especially
the guy with the Red Hat probably knows this. But you know, in 93, Red Hat started, you know,
Mark Ewing and Bob Young sort of got together. They flooded a couple of apartments with Donnie Barnes
and they launched Red Hat. And no, seriously, that's the story about the toilets overflowing.
And then they got kicked out of their apartment because they were running a business there.
Yeah, anyway. And at the same time, Fentrana, which became VA Linux, which became VA research,
which became whatever until source forage. And the first official release of BSD, as we think
about it today, free BSD came out then. And so there's a lot of exciting things going on.
But then the internet hit, right? So up until, you know, 94, a lot of people thought of the internet
as being this academic thing, a way of sharing gopher and archi and IRC and dystopi stuff. And people
had started to use it for email, but not strongly yet the way that we do now. And then the web came.
And the web was awesome, right? And NCSA sort of released the code in something called Shemballa,
which became Apache, which we all know now, and has about 65, 70% of all the websites in the world
running on it, right? And again, Apache also became a licensing philosophy, a lot like BSD.
Take the code, enjoy it, use it. You don't have to share back, but just let people know that you
use some Apache go, you know? Very simple sharing. And these ideals, they just keep on coming up and
up and up. And if you look at them, they're very, very simple. You have the people who want you to
share if you use their code. You have the people who don't really care if you share or not, so
long as, you know, let people know that you're using their code. And there's a little bit in between,
but this is sort of slumpy. And it's all key to distribution. So if you don't ship it out,
they don't really care what you do with their code. Any of these people. And that's where we are now.
So there's a lot of code on the internet. We counted it at all.
I had an intern do it. No. No, I had computers. Google has a lot of computers. You have like 15,
16 computers now. And so anyway, so we looked across all the code and we broke it down by license.
You know, this is literally billions of lines of code, right? And when you look at the licenses,
you see about 48, 49 percent GPL, about 23 percent LGPL, and then permissive licensing.
Pretty much encompasses the rest with some odd ducks here and there,
bringing in the MPLs in the rest over in that sort of call out over there.
I once gave a presentation where literally the projector stopped working at this point,
so I was describing a pie chart. It was kind of, it was pretty interesting.
The point of this slide is some people are afraid of the GPL and even the LGPL.
I've given this talk at defense contractors and others and they're like, well, we're very afraid
of blah, blah, blah. I'm like, well, then just stay over here. No one's going to be sad if you
stay over here and you won't be either because one of the things we found at Google, especially when
we were creating Android and our guiding philosophy around licenses in Android versus stick with the
patchy whenever possible and BSD whenever possible. If you found a library under the GPL and LGPL,
you could often find it or an equivalent in BSD and a patchy land. So if your politics goes more
towards the permissive licenses the way that ours does, you can usually find what you need.
And remember, this is sort of a funny slide because it's a pie chart, right? And so it de-emphasizes
the scale of things. You know, this is 500 million lines of code we figure, maybe even more.
And we'll have an exact number at OSCOM later in the year. But I mean, 500 million lines of code
is a staggering amount of development. You know, a really solid developer they say could create
you know, a thousand lines of code in say a week, right? And so if you're good at using this kind
of code, you're like 5,000 developers, right? Or, well, no, 5 million developers. So, you know,
for a given week, right? And that's a staggering and crazy and insane if you're,
because like a crappy developer is thought of as doing 100 lines of code, solid code a week, right?
So there's this incredible amount of functionality out there. So, you know, Google to give you an
idea, we have probably about 8,000 people who code every day, right? So, Poof, any one of you can be
bigger than the entire technical staff at Google, right? And now the reality is we're happy to use
this code to Google. So good luck with that. But seriously, you know, if you're thinking about
a software development organization, most of them are quite small, right? So if you can just
become good at using the code that's out there, you can bring an incredible amount of productivity
into your company, into your hobby, into your fun, right? And that's pretty awesome. And I'm stepping
on someone's laptop. Sorry about that. Who's over his power book is down there. I was like, wow,
that's giving a lot. I didn't break it. I don't think otherwise because I'm buying into the laptop
for somebody. And so at the same time right now, we're at about, actually, I don't know if that
top number is true. I really need to update it and recheck it. But right now about 30% of the
internet's running Linux, but similar amounts running BSD. There's probably a little more Linux now
than BSD by some amount. BSD is, and forgive the reference. BSD is loved by the porn business.
And no, no, seriously, I'm not, you know, it's just, it's a fact. And so you see a lot of
upper representation of BSD in that very popular segment of the internet.
And then Linux is deceptive, though, because people say, well, you know, we don't know what's
behind the firewall at Yahoo. Yeah, we do. It's Linux for the most part. And a bunch of BSD,
about half and half there. They say, well, we really don't know what's behind the firewall. Google,
it's like, yeah, we do. It's, it's Linux. Every single time you're using Google, you're using
Linux, everybody. Every single talk. So, you know, so, and like, you know, they had this noted
story where they're like, you know, there's less Apache because of Google. And I'm like, what are
you talking about? That's ridiculous. You know, first of all, we're not 5% of the internet,
so I don't see how you could justify taking 5% off the top for Apache. But anyway,
and we actually use Apache like crazy at YouTube. So anyway, so that's operating systems.
Other internet stuff, you see about 98% of all DNS and bind is still going through open source
software. You know, basically, it is logical to say that when you're using the internet,
you're using open source all the time for pretty much everything. Unless you hang out on
Microsoft Live a lot. But even that, you know, they recently bought power set which runs Linux.
Which, I don't know, might stick in their crawl a little bit, but I mean, it's just how it is,
right? So, it's pretty exciting. You know, it's a pretty exciting world for open source.
And it's not just internet serving. As you know, this is the stuff. I know you guys already know
this, but I'm going to say it anyway. You know, it's everything. It's content management systems,
it's PVXs as you heard from Mark Spencer earlier. It's games as you might have heard from Ryan.
I don't know, Ryan's in the room. I mean, it's everything. You know, if you can think of something,
there's somebody in the open source world who's enthusiastic about it. If you go back, you know,
10 years, he used to give these interviews and they're like, yeah, you know, maybe people like it
for the odd website, but they'll never use it for file servers. You know, like, well, you know,
Sam has used a lot and they're like, well, I'm really using it for file servers, but it's not real,
you know, computer science or anything. And you're like, well, what about the ZDA stuff? What about
this one for there? They're like, well, yeah, but they never use it for business applications.
And you're like, what about the CRM crap? And they're like, all right, just get out of my office.
And people would like plant these stories about how Linux wasn't serious, how it sucked, how it was
insecure. And it's like, you know, are you even paying attention? And the reality is, you know,
the war metaphor, the fight, people loved to write about the fight because it's exciting and
tries page views. But yeah, it's all out there. And it's all out there under a variety of licenses.
There's so much open source code that, you know, whatever your ideals around sharing are,
you can usually find something that works with you. And that's pretty awesome. So that's good.
So that's where we are right now. If you have an iPhone, if you have an iPod, if you have a
digital camera, if you have a Bluetooth headset, you know, as likely as not, everything in
there was written using GCC. You know, I went to, again, that defense contractor and they said,
well, you know, we don't use any open source. So we're cool. You know, we just want to learn
about it. And I'm like, okay. And then by the time I got there to give the speech, I was like,
hey, I want to congratulate you on your open source adoption. They're like, what are you talking
about? And I'm like, oh, you're using it here, here, and the following products couldn't
ship without it. They're like, really? And I'm like, yeah, really? You know, you don't think you
actually bought a new compiler for that, did you? And you're using GCC. And they're like, but,
but, but, it's like, yeah, you know? And they're like, but we don't use it as stuff for our website
or anything. And I'm like, well, yeah, you know, you're, you're someone web servers uses open
SSL. And they're like, really? I'm like, yeah, really? You know, I mean, it would be dumb not to,
you know? Why do you want to adopt something that you know is going to be insecure? I mean,
why don't you go with open SSL? Because we already know how it's been hacked, you know? And they're
like, oh, yeah, that makes sense. And that was a fun talk to give. Obviously, it's used everywhere
on the internet, right? This is the Andex, by the way. The first time I gave this was in,
was in Russia. So I threw in a Russian search engine to be all cool like that. And like, literally,
I had to like get this properly translated. They're like, oh, we're using this diacritical
mark wrong and I'm like, all right, you know? But yeah, this is Jan Dex, just if you were going to
Russia. I have my name in Russian too, somewhere, not on this talk, not that you care. So that's
where we are today. So here's where I talk about Google and how awesome we are. Now,
I won't bore you with that too much, but I will. So we use open source. Like I said, every time you
go to Google, you're using Linux every single time. Our software engineering desktops, you know,
about half of them are running Linux. We're running a, basically, a version of Ubuntu that
ties into our file servers and stuff. We like it a lot. All of our build tools,
like our compiler's debuggers, languages, and literally hundreds, probably actually,
realistically, thousands of libraries at this point. And then we used to not run a much Apache.
I think I just got a litricuted by my laser. It's a sample. You know, we used to not use much
in the way of Apache, but as we've been doing acquisitions as a company, especially large
ones like YouTube, with lots of installed base, we've learned to start using it well. Before we
would do is we would buy a company, we'd port them over to our infrastructure, because that
scale is very, very well and is very monitorable by us. But yeah, so use a fair amount of Apache
web servers now. That used to not be the case. And then we release a lot of software. We patch
into hundreds of projects every month. I'm very proud of this. We try to keep it very low touch
from an oversight perspective. So it's hard to give you an exact number for patches.
But yeah, we're all over the place. And it's good, you know, because if you look at, especially
hiring for teams like our kernel team, our compiler team, knowing that they can patch out is
very, very important to them. And it's important to me personally, but it's nice that we're able
as a company to do that. We released a number of small projects, about one a week right now,
about 300 of them. And that's not counting API examples, which would add another couple hundred.
And those are everything from small dev tools, whether it's like the first things we released
are memory allocation routines, our threading libraries and that kind of thing,
two full linkers. You know, it's very targeted at developers. So that's a good thing. You know,
we released our MySQL replication patches around 4x MySQL, which was very popular. And we were
very proud of that actually, because MySQL kind of didn't want them, because they were already
on the fives. And so they're like, yeah, we don't care. And we're like, okay, so we really see it
anyway. And it found this great community of users. And who then wanted to buy support from MySQL,
which was pretty funny. And they're like, you know, that doesn't seem like it's for version five.
And they're like, no, it's not. But we used for it. And they're like, okay, it was a bit of drama
that was pretty funny at the time. So yeah, so this is the day-to-day patching that is sort of like,
this is the fundamental. This is the infrastructure. This is the greasing of the wheels of the
open-source process that's actually really, really important. Because the problem with very large
companies that aren't like Red Hat that are open-source from the core up, you know, is that you get
really, sorry about the laptop again. I'm just going to move this, excuse me. There you go.
Harder to step on now. Oh, it's not a MacBook. It's like a Dell. I'm sure it'll be fine.
But it's silvery, you see. That's branding for you. So where was I? Yeah. So in large companies,
you know, we can become very inwardly focused. And unless you start a project with the idea,
it's going to be open-source from the get-go. It can be hard to open-source because it'll be
tied into a lot of systems that you haven't opened yet or maybe aren't well suited to opening,
depending on your perspective. And so having like constant release going on all the time has been
an important part of what we do. And so if you go to the open-source blog, just, you know,
every other post is, we release the little thing here. Go check it out. And we actually don't
blog much about the patching, but that's really, really important. Letting Google engineers feel
that they, you know, can just submit a bug, submit a patch after you're a trivial first review
that they're not insane is pretty great. So yeah. But then we have these big projects, right? And
the first really big project. And by big, I mean, usually generally larger than say 500,000
lines of code, you know, with a great strategic impact, and that kind of thing. So, you know,
one of the problems we had earlier on, how many of you program websites for a living?
You know, and so how many of you have wanted to kill yourself over that last edit for IE6?
Or Safari or Chrome or whatever, right? Often you'll find that there's like, you have to tweak it
just a little bit to make it work with that last browser. And we have that problem all the time
at Google, as you might imagine. You know, we try to go for these lively Ajaxi interfaces,
which means pain. And so, an enterprising group in Atlanta, another of your southern brethren,
decided that they wanted to attack this problem head on. And actually, via Java, which was interesting.
So we have three primary languages at Google, Java, C++ and Python. And so the idea that you could
basically use your regular clips, sort of IDEs, to develop web interfaces that didn't suck,
and didn't look like swing, was pretty cool, right? And so, you know, we released this,
released this, this was almost four years ago, now maybe three and a half. And it's one of those
things where I have to admit, when I heard about it, and we were working with them to maintain licenses,
I was like, is this really going to be used much? I mean, you know, it's Java, and, you know, it's Java,
you know? And so, and we've always been very consumer focused, and consumers, do they like Java?
You know, it's that kind of thing. And, and I was shocked, and how much people downloaded this.
And what we found was it wasn't the typical sort of from the hip hacker who was downloading it,
but, but it had this popularity behind the firewalls in large organizations that was shocking.
And probably shouldn't have been shocking if I could remember my days back when I was, you
know, living in the eighth sub basement of a law firm doing computer work there, right?
I'm not kidding, actually, I had to drive down seven floors and then go down a level to get to my
office. But like, yeah, that was painful. And there was carbon monoxide detectors everywhere.
Anyway, seriously, they didn't want to give us above ground offices because they were too expensive.
And so they converted to the bottom most floor of the parking garage. This is in Washington, DC.
So, we're also under the water table too, so it was awesome. Anyway, so yeah, I felt like,
you know, whenever I heard about Dick Cheney going to his secret and disclose location, I'm like,
he could use my old office, you know? Anyway, so I don't know where I was going with that, but,
but yeah, we had client server or things that were just appallingly terrible to work with. And
in a lot of ways, the web saved people from that, but they still didn't have the liveliness and the
desktop sort of metaphors that they could rely on. And so there's a lot of clicking of submit
buttons on forms and it's helped with that. And so I think it found like this natural home with
literally millions of people who were developing using it. It was very rewarding to release.
And I have to admit, you know, sometimes we release things and I think it's just terrible.
You know, I'm like, or it's not the kind of thing that I'd be excited by. And often I'm wrong,
and that's always really great to see. And it kind of goes back to, there's open source for
everything. It turns out people are driven by all kinds of problems that are really, really cool
once you get into them, right? And maybe it's something kind of thing that you personally would
think is cool, but it's actually an engaging technical problem. And so this is one of those things
where that happened. And then we're like, well, web browsers aren't fast enough. How can we make
them faster? We try a couple of ways of going about this with the established providers. And we finally
decided what we really need is a new JavaScript interpreter. And so a virtual machine. And so we were
we had some folks in very northern climbs in Scandinavia. And we also wanted to bring new features
that were being supported by HTML5 into modern browsers. So so so that we could give people those
desktop-like environments. And now we could have stopped there and said, you know, we don't need to
open source this. We can just keep it closed or whatever, which would have been stupid, by the way.
Especially considering, you know, the open nature of Firefox and folks like that. But we decided in
the end that, you know, what we wanted was to release this so that if other people decided that
what we had done was good, that they could have, you know, either adopted some of the VM technology we
use in V8, which is the JavaScript renderer. Or they could steal other components they might find
useful to make their web browsers better. But basically, Google depends on awesome web browsers
continuing. And frankly, being competitive with each other, right? Anyone browser dominating the
market is very, very bad for Google, right? And and IE, you know, give me an example, Microsoft turns
that they don't like us very much. And so so with Firefox doing so well. And we were very excited by
that. And Firefox is a terrific competitor against IE. And and and yet there's some places where
Firefox just doesn't exist. You know, there are parts of Asia and we're like, why is that? What's
going on? And and a lot of times it came down to speed and it came down to other factors that
probably Firefox wasn't prioritizing in our opinions. So we're like, well, maybe we can prioritize
that and see if we're right. And in some cases, we were, in most cases, we weren't. And you know,
but still we managed to get out this really high-performance browser that can do exciting things.
So that was really, really very rewarding. And this is, you know, this is out this open source,
mostly BSD, actually, along with the patent non assert. So the the reason why we usually use a
patchy, by the way, is it's got this really terrific patent language. It says to you, the developer,
the user, we say, listen, you know, you can have this code. But we're not just giving you the code,
we're giving you any patents we might own as well for your to use and for you to pass on to your
users. And so when we release things under BSD, which doesn't have those patent clauses, we add
them after the fact, we put them in the documentation, we say, listen, you're also getting a patent
non assert with these because we firmly believe in a defensive patent posture. We actually believe
we really need them because of the way patents work in the United States. But we want to make it
really clear to developers and to the people who use our products that we're not using them against
that, right? We're using them really for protective purposes. And that's why we mostly use a patchy.
And when you see other licenses, we have the patent non asserts there. So let's keep going.
And then we had Android. So Android, how many of you have ever had to develop for non-android
phones? Like Simeon or something? Yeah? It was done in Java, J2ME. So would you say it was fun?
Yeah. So sometimes I get this talk to a lot of like mobile developers and they're just like,
they're so overjoyed by how easy it is to develop both for the iPhone but also for the Android
that they're just like, wow, thank God, you know? And what's funny about it is, you know,
if you looked at cell phones three and a half years ago and we started the Android project,
well, it starts a strong word and I'll get to why. You know, Nokia Simeon had about 75% of the
market. When his mobile had about 20% and then there was everyone else, like little Chinese operating
systems that you'll find on FACO phones in Chenzhen. And by FACO I mean like they're
pretending their iPhones, they're pretending their, yeah. But there's also real cell phones as
well and there's, there's actually a lot of cell phone operating systems out there. You know,
there's like Sony Ericsson, Ferrer's one. I mean, yeah. There were a couple of Linux phones as
well in China but they never shipped out of China because of, well, I won't go there. And, and so
we thought, you know, what the world, we think what the world needs. When you consider the advance
of the ARM platforms out there, how performance oriented they are, how fast they are, how wonderful
they are and how much capacity they have is we need a really good smartphone operating system
that anyone can adopt whether they like us or not. And that means open source. And so we started
we started thinking about this, especially considering the competitive picture. We wanted
cell phones to be more like the internet where everyone can compete, everyone can compete against
each other, everyone can get to everybody. You know, you know, if you don't like Google,
which by the way I hope you do. But if you don't, you can go to Yahoo, you can go to Microsoft
Live, you can go to Balta Vista, I'm sure they're still in business, right? Now they probably are,
right? I mean, so if you want to do that, nothing we can do will change that. I mean,
besides the fact that we don't want to, there's nothing we can do to change that, right? And if
you think of what can keep people from that kind of competitiveness, you know, it's it's dominant
market dominance, right? This is why Firefox is so important. This is why multiple browsers are so
important. And this is why the desktop space is so crappy, right? You know, a lot of people feel
the internet wouldn't have grown if the desktop hadn't been so terrible. If it hadn't been locked
in by one company that was going to take everything from it. Anyway, so, so you see the cell phone
marking you think, you know what? What we see is two dominant commercial players who don't have a
good history of working with people, right? And so how can we fix that, right? Well, let's release
it open source. And let's release it under the Apache license for the most part. It has a GPL
Linux kernel, which is great. And the idea is that why don't we give somebody a new minimum bar,
right? You know, so even if you don't want to talk to us and make it like a Google experience phone,
you can still ship a pretty amazing phone, you know? And we just took, for those of you who care
about the money, we took eight to fifteen dollars to twenty dollars if you're on the high end of
some of the commercial operating systems off the bill of materials for these phones. And that's
quite significant for some of them. For actually most of the smartphones, it's a very significant
savings. And we've helped drive maybe an open source strategy for SIMP. All right, so that's
pretty exciting stuff. And it's a lot of open source code, you know? And it's all pretty good,
and it's all pretty tailored to the embedded and phone market, right? Because unfortunately,
one of the things that's kept open source from happening on phones is that it was made for large
memory environments. It was made for environments that had a lot of disk space in all the rest. And
where you could get away with certain things, like for instance, all of our internationalization is
in the framework layer. And so we couldn't really use G-lib C's mega-and-a-half of internationalization,
right? A mega-and-a-half of the space on here is significant, right? Especially when you think
of phones that are less expensive than the smartphones out there, right? So we wanted to create something
that could create that kind of environment. And also, we wanted to make it really fun to develop
for. And so we ended up going, instead of with pure Java, with a different kind of virtual
machine that allows for multiple applications to do cool things together, you can go learn more
about it later. And it was also awesome because we got to release about 10 million lines of code.
So that was pretty great. And then we think, okay, so that's where we are today. We've released a
lot of code, about 20 million lines of code across all the projects. And then what's coming up next?
So we announced Google Wave at Google I.O recently. It's our rethinking of communications.
And what we've released today has only been protocols. It hasn't been source code.
We are going to open source, which is cold comfort if you want to see the code now. But if you think
about it, what's the point in bringing out yet another communication system that only one company's
things work with, right? And so what we're trying to do is we're trying to create a really
cool way of communicating. And it's sort of like emerging and messaging, emailing, blogging,
and every other buzzword you might think of. But it's actually really neat and not lame. And
and it'll crash your browser. And that's that means all those buzzwords. And then we want to find
out a way of doing a fair kind of federation so that you know you could have Google Wave,
but you could have your favorite ISP wave, you could have your personal wave, whatever, right?
And have those interact with each other in a fair way. Well, I'll also try to prevent spam,
which is actually the hard part of terms, both federating and fighting abuses or orthogonal to
each other almost. And so when you have products like this, they're starting from scratch,
they're brand new, whether it's Chromium Android Wave, you can you can target open source
from the very beginning, and that's very appealing to me. And so now we go into the future.
This is about you, really. That last part was about me. This is about you.
So how much more code are we going to be looking at? So right now, we're just a little above
three billion lines of unique code, and about six and a half billion uses of those lines of code.
So every line of code on the internet is used about twice. It's sort of the long and short of it.
Some are used in a polling amount. Like for instance, right now the most used project that we can
detect is probably go script. There's like one file in there. I guess that every like open source
project wanted to use at some point. We're still trying to verify that, so don't quote me on that.
But you know, there's some appallingly popular projects, and then there's some that see no use at all.
But on average, every line of code on the internet is used at least twice. And those are considered
open source. We've classified them according to license. We think by 2015 there'll be about two
million self-identified open source developers. And these numbers were brought together in
sort of actually the red hat way. So you don't know this, but Bob Young and I sat in a bar once.
And we estimated how many people were using Linux, right? And we took the Linux counter and we
multiplied it by the number of downloads at red hat times, you know, the planks constant. And
how many beers we had that day, we divided by that. And we came up with that number that was used
early red hat, by the way. And it was largely accurate. We used a lot of real numbers to make a
kind of a fake number. But you know, I mean, that's really all you got sometimes, right? And so if
you look at open source right now, there's a couple of hard numbers, right? And that's the number
of projects like registered with source forage and at code.google.com. And we have about 250,000
projects registered, but aren't active, right? So then we think, well, what does active mean? So
if you look at the number of seven day active projects today, it's only about 70 or 80,000.
And we think in about five years, we could have three times as many. If you look at the number of
non-unique, you know, crossover projects. And this is sort of, I'm going off on a limb here, right?
And we think that of the registered developers on the two sites, you know, each one probably has
greater than a million users. But realistically, how many of them are actually human beings? How many of
them are not the same account? How many of them are not faded out accounts? Whatever, you know,
again, that seven day active problem. So I actually think the number of open source developers,
people who have literally written a line of code and released it by 2015 will probably be about
400,000. And that'll be actually probably more of an effect of some of the interfaces you're
seeing out there that just by virtue of using them, you create code. And with your help,
maybe even more. And it's funny because there's a lot of BS numbers in computer science. Like I
once heard, and this was like in 1998 that there were three million visual basic developers.
When it was clearly not the case. But I think that this is a pretty good number because it's
actually growing, right? And it's finally growing because there was a time between like 98 and 2003
where I wasn't seeing anyone new at conferences like this. Old hands and open source know this,
right? And we're finally seeing new people. And I wish I could take credit for it from the summer
of code. And maybe that's part of it. But, you know, were you a summer of code student?
Awesome. See, that's great. Good to meet you. So, you know, but it is finally growing and
that's really good. And there's, I have a lot of thoughts as to why that's so, but there's
really so much you want to hear me yammer about. So let's get to you. It's all about you.
It's about your code, your patches, your projects, and your work, whether it's documentation or
websites or whatever you can find to do for these projects that have really enriched us all.
And so all I ask is that you help. And so if you help, I promise I will too. And that's all I can
basically say. And I'm happy to take any questions until you're blue in the face. So, or until 10 minutes
from now. So. Yeah. Yeah. So, the first hunks of code. So what's funny about Google
Web Toolkit is it was 95% open source and there was a small hunk that wasn't released in the
beginning and then it was released six months later. And Android, we announced like eight months
ahead of time. And it always makes me nervous when we do that. But so the first real code is coming
out, I think in in July. If you go on the Wave Protocol discussion list, we've been talking about
it there. And the first piece of code is actually a syncing tool for syncing waves and particles
across service. So that'll give you something to start experimenting with. Because like, for
instance, Miguel de Causa and some other people have already started implementing the Wave Protocol
and different products, which is really shocking to us. We're like, oh my gosh, already?
Really? No. No. Wait. Stop. But those guys are used to working with draft specs. They know
that it's going to change. So, read the protocol documentation, get on the list, and you can either
wait for the synchro to come out or you can just go hop over to Miguel's project. I'm sure it'll be
in C sharp and go help out there. And see if that's appealing to you. That's what I would do.
Okay. So, because we're going to bring it out as soon as we can, but it may not be fast enough
to satisfy you. So, yes, back in the back there. The browser's announced the O.S. and the underlying
operating system. Does Google have a page that can weekly or monthly charge to show us the popularity?
Of what? Of browsers? Not really. You know, we have some numbers like that, but they're weird.
I mean, because if you think about it, it's sort of like when people use search trends to tell you
how popular something is. Well, no, that's just how people have searched for them. So, we have a very
search view of the world, right, which is how we derive our popularity numbers for things like browsers.
We actually don't track operating systems on incoming too much. Again, it's very web-focused.
And we don't share that that often because we don't want to, because we don't want to.
I will say most of the numbers that are out there in the public by the way are already very, very
accurate. So, those aren't hard to come across. So, browser penetration numbers, operating system
penetration numbers. So, really, we wouldn't be adding anything, except for down to maybe the local level,
right? You know, like in Clemson, how many people are using Firefox? And the problem is, you know,
when you start doing information at that level, which is really what you have a hard time getting at,
unless you have a really popular website, you actually start impacting personal privacy.
And it's something we're incredibly sensitive about. And so, often, we'll err on the
side of not releasing data like that. So, sorry. There. I'd point with my laser, but I'd blind you.
So, we have a developer version out now for Linux and Mac. They're pretty chunky. And by
chunky, I mean, they don't have, you know, bookmark management is not great if it's there at all.
I don't even think it's there at all in the Linux one. And plugins often will crash the browser.
You know, things like that happen. They're alpha code. I believe it used beta all the time.
But, yeah, you know, the nice thing about the developer samples that are going on now around
Linux and Mac is one you can get on the mailing list and the project and stay up with the
nightlies. I think a bunch of even ships are nightly. If you go to like our repo there.
But, it's really fast. So, it'll crash really quickly. No, no, seriously though, it's actually not
bad from reliability standpoint. Better than IE6, right? But, it'll, if you're expecting like super
stable and done, it's not done yet. We're thinking like probably another six months before
something that we can reasonably call a good product or at least usable for more than 15 minutes
at a time or whatever. But, it's certainly fun to play with now. So, if you're into that kind of
thing, the payment you'll pay is just a little bit of crashing. And it's a real pay in the
bunch of bookmark things. So, how good is that, right? So, I think there's somebody over there.
Yeah. Sorry, you're kind of blinded there.
I have no idea. I'll find out though. So, just email me or get on the mailing list.
I think it's one of those things where I don't know if they're doing it from Firefox here,
it can corroborate this. Plugins really, really suck. And, having plugins that are 32-bit
working inside just for a bit environment can often suck more. And then we try to wrap the
individual tabs in their own process space, which it makes actually porting difficult.
And then makes 64 to 32-bit transitions even more difficult. So, I don't know the answer to that.
It's sort of long, short of it. Yeah.
You can do that now. You can go to T-Mobile. There's a T-Mobile up Tiger Boulevard here.
I'm sure they're happy to get one for you.
Yeah, well, I don't know. It's not been so bad. You know, I've been getting a couple.
Oh, well, now you can buy unlock phones now. So, you can store them from the site.
They're a little more. I mean, you traded freedom for $200 off.
And it's not that people haven't figured out how to unlock them either.
But yeah, T-Mobile is actually not a bad person to buy a phone from, even locked.
Because after you've been a customer there for 90 days, they're happy to give you the unlock code.
And then you can go to town with new Sims and the rest. I mean, you'll still have your
to your contract. But, you know, I mean, that's the price you pay for a cheaper phone.
But yeah, you can order developer phones, ADP-1 developer phones, which are the keyboard
side out ones. Directly from a slash bright star, which is our film and house for them.
And then we'll have Sapphire soon enough. That's the touch screen version. So, those will be
up in the store soon enough. Probably a little more expensive. But yeah. So, if you really want
to go unlock, that's the way to go. You don't have to maintain yourself. You won't get over the
air updates from T-Mobile, you know. But, you know, you're all hackers here. So, that's easy, you know.
Yes. I'm starting to see in my server, it's Python, but I think that a lot more.
Yeah. Have you seen the same thing, Google? Like, globally, or in Google itself?
I haven't really categorized it by language, those lines of code.
I know what we see internally. And the problem is, using Google as a replacement for the whole
world is problematic. So, Google is a funny place, right? We use a ton of Java, and then when things
go slow because of the Javaness, which still happens, although rarely, we move it over to C++, right?
There are some people who love Python, though. Like, we use Python like crazy in the code.google.com
team. It's used by the groups team and a couple other teams. So, Python's still a first-class
language, but it's kind of a second-first class, right? And so, I think Python is growing in
popularity, and part of that has to do with Perl failing to advance. But, you know, but I might
be wrong, you know. I'll have differential numbers in about two weeks, and that'll chart the
last six months at least, of growth just on the internet, of languages. But, then we're all really
only measuring that code, which has been released on the internet, right? So, what does your gut say?
How do you feel about it? I'm seeing you pick up, you know, with the mic on these specifically.
Where do you work? What's that? Where do you work? Okay. Okay.
You haven't gone all ruby? Okay. That's probably a good thing.
But, I've seen a dramatic shift from, you know, things like PHP to Python.
Yeah, I think, you know, I have this gut feeling about PHP, but I don't know if it's real, you know.
I just feel like Perl is falling down because they're not advancing. PHP is falling down because it
is advancing weirdly, you know. So, but, you know, they're all fine. But I do think that Python
has been measured in how it changes, and that's appealing to people. So, and at the same time,
Ruby has gone crazy, but crazily, right? So, yeah. I only have a couple of questions left, yeah.
I think over time, as you look at what's in user bin, I think you're going to see the Python
row, and that's probably, yeah. I think that's true. That's probably true. Yeah. There was a, oh, Ryan.
Hi, Ryan. So, I'm curious with relationship between WebKit and Chromium, because the goal of
eventually supersede WebKit is to back into it or? No. Well, you know, WebKit is sort of, you know,
so WebKit's the HTML renderer, V8's JavaScript renderer. And, no, I mean, we don't want to go
away from WebKit. We want to, we want the mainline of WebKit to be advancing, you know, well,
and, and this is actually a problem with WebKit, in my opinion. I think that WebKit isn't been
advancing as well as it should have been, but I don't see us working or anything crazy like that.
So, yeah. But, there you go. I, you know, I wish the WebKit was moving a little faster, you know. So,
do we have time for one more? Hi. Awesome. My question is about Google Maps. Okay.
There is a talk against this, which is open street map, which is who you would like to talk to
with. We could work out this problem. My problem is I do not know if it's legal for me to take a
screenshot of Google Maps with a crop to my desire, and we use it however I please. So, what I've
been doing is doing it with open street map. Okay. What country are you in? Nice day. Okay,
because if you were in England, it would be illegal to do any of those things. There's a bunch of
violins off of Africa where it's also illegal. The queen owns all the maps in England.
I actually, I'm not familiar with the terms of service of Google Maps. We try to encourage people
to use the embedding API because it's nicer. And I think there's a static image sort of service
where you can grab the image you want from Google Maps. Open street maps is great, though. So,
I mean, if it's working for you, more power to you. I honestly don't know what the terms of
service for Google Maps says about pulling static images because we actually want to
move people away from that. The static images are the way of death in our mind because they don't
update new things show up. You can't search nearby for hotels. They're fine for books, sure. Yeah.
Books, those things with paper. Are you taking like ebooks? Like a kindle or something?
Yeah, no. You can email me and I can find out. The problem with Maps in general is often the
imagery is owned by the people giving it to you. It's actually very rare. It's actually impossible
to give a global map and have all the imagery owned by one company to give you the right to do
that sometimes. Also, it might be the kind of thing where we can give you a static map for
parts of Cobblestone, Lucas, much of the United States, some parts of Canada, but not Texas,
in Austin, on the right side of the street. I mean, there's a lot of situations like that and it
sounds ridiculous because it is, but it's just the way of intellectual property in the United States
and the world. So, what do you do? I'm sorry? Dick Cheney's house. Dick Cheney's house, yeah.
Barbara Streisand's house, yeah, whatever. Yeah, it's kind of a funny world and it's like,
was Dick Cheney any safer because we had his house be slightly blurrier? And what's funny
about it is it wasn't us blurring it, right? Because since we buy satellite data from Digital Globe
and others, Digital Globe has to clear their imagery strategy with the National Oceanic and
Atmospheric Administration, who clears with NASA in some cases and FCC with others. It's a
very complicated picture of satellite imagery, right? And if you have it lower than one pixel per
six inches, then these organizations are going to want to have a saying or image pipeline. I mean,
it's incredibly complex. So, the answer is often as complex. Well, where is that static image?
Well, it's outside of Clemson on this one street. Oh, okay. Well, in that case, we're going to be
using, you know, nav tech tiles that were derived from an original Nutella Atlas database, which
came from the Queen of England. And it's like, what? You know, and in that case, the answer would
be no. But in the case where we ourselves drew it or we had a street view car tracing something
line, well, then okay. You know? So, it's kind of ridiculous and I wish it wasn't. So,
but sometimes they're not ours to give. And I think that's it. He's like, you know,
I have a laser. So, thank you for having me and thank you for running the show.
This work was recorded by View Digital Media and is licensed under a Creative Commons
Activision, share it like version 3.0. For more information about the Southeast Linux Fest,
visit southeastlinicsfest.org.
