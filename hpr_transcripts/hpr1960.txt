Episode: 1960
Title: HPR1960: FOSDEM 2016 AW Building and more
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1960/hpr1960.mp3
Transcribed: 2025-10-18 12:08:19

---

This is HBR Episode 1960 entitled, Fostom 2016 AW building, and more.
It is hosted by Ken Forden and is about 116 minutes long.
The summer is.
FreeBSD Matrix brand new e-over-to-life pilot Ikoribut open embedded B-co T-C-B-B-T-X-Dist
on a card pro.
This episode of HBR is brought to you by AnanasThost.com.
At 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at AnanasThost.com.
Hi, I'm Ed Mast, I'm a developer on the FreeBSD Foundation.
Okay, for those of us who just don't know what the FreeBSD Foundation is, what is the FreeBSD?
What is FreeBSD to start off with?
FreeBSD is an open source operating system that's been around for decades and is a widely used,
permissively licensed operating system that's used for embedded appliances.
It's used as an operating system on people's laptops and desktops and its components of
FreeBSD are used for people building other products and in all kinds of different ways.
So it's really truly come, it's a Unix first start and it comes back from the whole AT&T
Berkeley thing. The B is the Berkeley thing?
B is Berkeley and yes, it dates back to the original, has a lineage through to original Berkeley Unix.
Okay, so most people I guess here on this are familiar with the whole, while we've had the GPL
licensing interview, which people on listening to this will not have heard yet, but it'll be in the feed.
So can you tell us from a licensing perspective what the differences between, say, Linux and the BSDs?
So broadly speaking, the well-known GPL license says that if you make a derivative of the software,
then you have to make those changes available in the source code as well.
The BSD license and similar permissively licensed, similar permissive licenses state that you can
basically use the source code in different ways. You can make changes to it and produce a binary
only derivative of that source code if you like, or you can make changes to it and release the source code as well.
Okay, and that would be the, that would be what's allowed Apple to take a BSD kernel and
basically ship that with those, handing it back to the community, I guess.
So it's true that someone like Apple is able to take components of free BSD and use them in Mac OS,
but that doesn't affect free BSD itself, right? Free BSD still exists and free BSD continues to be a free
free operating system. And people like Apple contribute lots of money and developer time into
projects like LLVM and Clang, the tool chain that we're using in free BSD now. So there's a lot of
work that still happens in permissively licensed components across the spectrum, regardless of
whether it's Apple or someone else doing that kind of work. Okay, but the whole fact that you're
developing your own compiler and getting away from the GCC, is that not like just simply a duplication
duplication of effort in order to get around a, you know, the fact that you don't like the GPL
as a license? I wouldn't say that's the case. I mean, we, in the free BSD community,
we like Clang and LLVM for a lot of different reasons. It may well be that Apple was strongly
motivated to do that because of their preference for non-GPL software. But from our perspective,
I think it's very much the case that the GCC had stagnated a lot. The error messages
specifically in GCC were in very, very poor shape. GCC's error handling was very difficult to make
sense as a user what it was trying to tell you. And Clang, when Clang came along, it really kind of
invigorated the open source compiler world again. And Clang was producing much better error messages
and a lot of developers started using Clang because it was much easier for them to understand
what the compiler was trying to tell them. GCC has improved immensely since this happened.
But I think it's important not to have sort of a monoculture of software, whether it's
the Linux kernel and free BSD or GCC and Clang to encourage innovation to keep happening,
and so that people can try out different things and go in different ways. And at this point,
Clang and GCC are pretty much neck and neck for performance and for error messages and things
like that. So really, there's just some different aspects that one is better in or the other is
better in. And a lot of what we're really interested in in free BSD, a lot of research areas,
Clang really shines there. Clang, what's GCC is like the compiler? What's Clang then in this chain?
So Clang slash LLVM is the compiler in that family. Okay, yeah, I had to ask that question.
And obviously, we saw in the browser wars when IE1, it was just stagnation until Firefox came
along. So can you explain to me for people not familiar what the different variants of BSD are?
I think a lot of our contributors will be familiar with like you got Debbie and you got Fedora.
Can you just give us a, I know distributions, this in the right words, with variants of BSD.
And why free BSD is the best, obviously. So there are three main well-known BSD distributions,
free BSD, open BSD, and net BSD. And then there's another set of ones that are a little bit
less popular, perhaps, or newer, so they haven't had as much time to develop. This is things like
Dragonfly BSD, which split off from the free BSD project. And there's this sort of meme that
dates from the early days of the BSD community that open BSD was focused on security, net BSD was
focused on portability and free BSD was focused on performance. And I mean, I think, you know,
that's, there's a grain of truth to that. You know, these sorts of memes don't start for no reason,
but all of the projects now are focused or are put effort into all of the areas, of course.
And so it's not fair to say that no other BSD cares about security or no other BSD cares about
portability. So free BSD, we've been doing lots of interesting security research in ways that
will show up in the future. And we've been looking at expanding to target different platforms as
well. So we've brought up 64-bit ARM in free BSD recently, and we've just completed the
kernel support now for our risk 5 port. And so we're really interested in looking at other
architectures as well now. Free BSD is by far, I think, the largest in terms of, I mean, if you
want to call it market share. But all of the BSDs have unique attributes and a set of really
loyal followers who are focused on each of them. So it's not like there's any sort of rivalry
between us. We're all sort of in the same family and just have slightly different approach to
some things. Okay. Could I, for instance, take three BSD, pop it on my laptop and expect to be
able to do my daily grind? Yeah, I think it's broadly speaking, that's the case. There's a derivative
of free BSD called PCBSD, which is designed for, for exactly that, is designed to be an end-user
focused. When you say derivative, do you mean that it's a separate project or is it under the umbrella
of free BSD? It is, it's not part of the free BSD project per se, but PCBSD really is
it's free BSD under the hood. Really what, the way I think about it is, I kind of think about it
as opinionated free BSD. So in other words, it is, it's free BSD, but instead of saying you can use
this or this or this window manager or you can use this or this or this, it's sort of, all the choices
have been made and it's set up and ready to go. You don't need to look through all kinds of
configuration options and try and figure things out. It's, it's ready to, to use out of the box.
Okay, fantastic. We just came out of a presentation by Leonard Pottering and with his
system D and stuff. Do you have any opinions on that? So I'd like to thank Leonard for,
for System D because it has certainly brought a lot of focus to the BSD community now.
We've been picking up a lot of interest from people who are perhaps upset about the way the
Linux world has developed with System D. I think there are actually a lot of really good ideas
in something like System D and I think we've, you know, we've been looking at,
when I say we, I mean the free BSD project, people in the free BSD project have been looking at
different kinds of, of equivalent startup technologies. So things like LaunchD,
someone has tried a port of, of that for free BSD and there's a few other projects with
exploring similar ideas. I think it's fair to say that there's a lot of value in something like
that in a end user focused desktop or, or laptop type operating system. I think it's,
it's a bit of a challenge for us in the free BSD world because a lot of system D related
components are becoming critical required pieces of the free software desktop story now. And so
we're going to have to follow suit in some of those, with some of those things just to have a
working desktop remaining on free BSD. But that said, I think, you know, there's, there's a lot of,
a lot of good ideas and some more questionable ones. And I think the, as is the case with,
with the BSDs, we'll take a perhaps slightly conservative and careful view of the way this is
developing and see what is the best long-term approach for our user base.
Okay, very, very politically tactfully said, if I may say so, before I get on to talking about
the foundation, you did mention there about the free desktop projects. And I, I don't know,
I get the sense that in the last few years that doesn't seem to be as important, not only to
the distors, but to the various different people seem to be doing their own thing and going off,
pursuing their own goals. Is that something that you, as a project, would, would like to focus
more on that, you know, consolidating the start menus that, you know, the file menus is
tattoo, who's been one of our hosts here in HBR has been long lamenting the fact that
you go to difference on the same system, you have 20 different file dialogues, should they not
all be the same? Yeah, I think that is certainly that is something that free software desktop,
the free software desktop community could do a much better job of consolidating those kinds of
things. For BSD, we're very much the small fish in that community. And I think we're not really
in a position to try and drive those sorts of changes significantly right now. For the longest
time, there's been this impression that no one even used a desktop environment on free BSD,
it was, you know, we started recently trying to talk to some of these other communities and
reopen those lines of communication because free BSD had long been, or the BSDs in general,
had sort of, generally speaking, been keeping to themselves going to BSD conferences,
rather than broader free software and open source conferences. And we've made a conscious effort,
a concerted effort now to try and come to these sorts of things. That's why I'm at Faust M here,
is to try and make contacts with people and have those, open up those sorts of discussions again.
So you're from the free BSD foundation, can you tell us a bit about that, what they, you know,
how it's organized, is the elected position and stuff. So the free BSD foundation is a US 501c3
nonprofit. It's entirely funded by donations. And so that's corporate donations and donations
from individuals. Typically, our budgets hover around a million dollars a year now. And that's
a fairly recent thing. We had a much smaller budget until the last couple of years. And we received
a very generous donation from Yankeum, the founder of WhatsApp. And so we've been able to
expand what we do with the money that we raise. The foundation spends money on supporting BSD
conferences, sending BSD developers to conferences like this one outside of the original BSD sort of
communities. The foundation spends money on legal support for the free BSD project.
And we've ramped up some funded project development over the last couple of years as well.
Very good. And what are you hoping to achieve here at the conference?
So I really want to try and make some contacts with other people in the free software world that
have goals and projects that align with the sorts of things that we want to do in the free BSD
project. And so one of the really interesting ones for me at the moment is the effort on
reproducible builds. And so the Debian, a couple of Debian people have been driving this project
recently. And it's something that we've had an interest in in free BSD for quite a while as well.
But being able to have those conversations face to face, it's much, much more effective to
figure out that, hey, we have a lot of commonality here. We want the same things. And we can
decide to work together on achieving the goals there.
Let's say Debian and free BSD are not a million miles away from each other when it comes to
stability and openness, I guess.
Yeah. I've had a few meetings with some Debian people. And there's a lot of commonality and a lot
of shared goals between us. And I hadn't realized actually that how much that was the case.
Yeah, they were trying to run a BSD kernel for a while. I'm not sure. Last year I was talking
and they were having some trouble finding developers to help out with that.
Yeah, I'm actually familiar with that project. It's the Debian GNU Slash K3 PSD project.
And it's actually, I find it very, very interesting. I'm not 100% convinced that there are a large
number of practical applications for it. But I think it's a, it's really interesting to me to
sort of combine aspects of free BSD, the free BSD kernel with the entire GNU Linux-y kind of
user land. And for anyone who's coming from the Debian world and is used to opt and all the
that sort of environment, I think it's really interesting that you can just bring up that same
environment on a free BSD kernel. And free BSD has a container technology that's been around for
for a long time called Jails. And what's really interesting is that I can run a Debian installation
in a Jail on my free BSD laptop. Well, cool. Listen, I won't hog more of your time as
anything else that we should have covered. I think that's probably it. But I would definitely
encourage people to give PC, BSD, or free BSD a try and take it for a spin. I think you might
find that you are surprised by what free BSD can do. Excellent.
Hi everybody, this is Ken. I'm at the metric standard I'm talking to.
What value of us?
Hi, so what is metrics other than movie?
Well, it's a open standard describing a communication protocol. I mean, all we're doing is basically
sending JSON objects over HTTP. It's pretty easy. But what we want to create is an ecosystem where
any app can talk to any or app. So we have a decentralized network of many servers, all of which
can talk to the tutors. So basically, if you have your own server, which you can download a
code and run yourself and join the federated network, and everyone is connected to that server,
you know, you did the states on that server, but once you have more people from other servers in a
group chat room, we then federate that data around and share it. So it's completely decentralized.
In our main room, for example, there's about 300 servers that have joined about 2,000 users over
those. So whenever you send a message that message gets stored on 300 different servers,
you add it on a single server. And when you say message, we're talking voice, text, data,
video. Yeah, I mean, all we're sending is JSON objects. So you can send whatever you want.
We're kind of focusing on messaging and voice and video because one, it's a very fragmented space,
like every single application is a silo, and they don't talk to each other. But also, it is a
nice example to talk about. I mean, you can use Matrix for something like IoT, data,
or whatever data you want to send. If you have a program that needs to send some commands,
or some data, you can use Matrix for that. I mean, it doesn't have to be a chat platform,
but it limits itself well for that domain as well. So do you have like any out of the box
replacements for something like Skype or? Yeah, I mean, you can literally take our code on GitHub,
and go to Matrix.org and just download it from there. It runs as a sort of replacement for RSC,
if you like, or something like Slack. It does, you know, group chat, private rooms, public rooms.
We do web and video call over WebRTC. We have, we're using free switch for conferencing,
so you can have, you know, we have your team syncs over our own room. We support end-to-end
encryption, so you can literally have your own server and encrypt all the data you're sending,
which is, you know, you can make sure you read our server code to make sure you trust it,
or you can write your own server, and you start. So it's completely open, it's free software,
and yeah, all we want is for more people to use it. Okay, are you a company or a foundation,
or how are you making money, or how are you supporting the project? So Matrix.org is set up as
a non-profit organization, and we are working on this full-time and responsible by our parent
company, who I guess is looking at this as a R&D project, and you know, once it's successful,
we can start having a hosted solution, and we can charge for that with the support and the
red hat model. Yeah, so it's completely free. All the software is aperture two licensed,
so you can literally take it and use it in any way you want. And who is your parent company?
Let's give them a shout. Yeah, it's Amdox, a big multi-international company. They do different
things for us than what we do, but it's really cool that they've decided to sponsor us for doing
this project. Awesome. So could I, how easy is this to install? Say I'm able to install a server?
How do I get the server? So yeah, this should be really a nice to use instructions. The server
is going to be written in Python. If it's not easy to install, please let us know because it needs
to be as easy as possible. There is a Debian image, you know, there's a post-driven. Yeah, it should
really be just be going to Amdox.org on GitHub following the readme and, you know, to take about
five minutes maximum. Okay, and my daughter was typing me last night. She's fairly technical,
but would she be able to install an client by herself? Yeah, she definitely should. I mean, a client
is released, it's literally just a JavaScript client, or you know, you can have a command line
in fact, there's many clients you can use, but the one we've been working on is called Vector,
it's on Vector.Iam and it's just a React JavaScript. So you can use the one we have on Vector.Iam,
we can install you on and connect to any of your Yarn server or create a user on the Matrix.org
server. Yeah, it should be really easy to use. And it has, you know, you can literally do a set of
the call like you would do in Skype by clicking a button and it would, you know, reach out to any
other Matrix-enabled client. So you can take the call on your phone or on your browser or,
even in, you know, other service that we have bridged into. And we want to bridge into everything
that has an API basically. So currently we have a bridge to RC, so you can talk to RC users,
we have a bridge to Slack, we have a bridge to XMPP. We basically just want everyone to be able to
talk to everyone else without having to worry about which app they're on. And how do you handle all
the security implications of all that? So all the security is done over at TLS from this service
to server, but obviously as I mentioned, we have our own implementation, an entwined encryption
implementation called ON, which is based on, or it's similar to the actual little algorithm written
by the tech security guys. So you can initially take, use that and encrypt all the data you're
sending. And because you can run your own server, you can completely trust that the data will,
you know, be encrypted all the way. How can somebody get involved in the project, or is it
limited to your own team? Yeah, that's a good question. We are an open source project. I mean,
we're a few of your eyes being paid to work on it, but obviously we welcome contributions massively.
We have tons of things to do if you want to help. The first thing you can do, and the best
thing you can do is just to use it, like use our vector that I am client or any other client,
write your own client, come and talk to us, run your own server, basically anything, you know,
using matrix is amazing. We just want more people's feedback and experiences, and then you learn
from them what they want, and hopefully we can add that to it. But we already had lots of contributions,
we have people adding like usability fixes, adding their own off packages, so you can use
something like LDAF instead of having, so it's really good to see the support from the open source
community. We do a monthly show where, you know, we go on to mumble and we record this session,
is that something that I could replace? Not mumble as open source, obviously, but we've had
some issues with the client who might be nicer just to go, here's a URL if you ever want to join.
Yeah, I guess you could do that. I mean, we, you could set up a room and everyone, I mean,
it's kind of like a pop-up subscription. So you have a room, so you post stuff into that room,
and everyone in who are interested in that data, you know, just have joined that room. So,
yeah, you could use it for something like that. And then I can record the conversations.
You would probably have to write a small bot or something that would do that for you,
but it's definitely something that should be easy to add. We already have something similar
with the VUC group, I don't know if you're familiar with it, but basically we've already bridged
into that. It's a sort of Friday chat show, every Friday at 7, I think, and yeah, so you can,
you can join that, which is usually on RSA, but you can join that via Matrix as well.
Very good. So anything you coming up this year?
Yeah, we have a lot of things to, that we're working on. We just sort of finished guest access,
which means you can actually use going to a Matrix room without signing up. You obviously don't
get the full features, but it's really nice, so you can try it before you sign up and all that stuff.
We are, so I mentioned in Zen encryption, the work is done, but we still haven't pushed
into all our clients, and that's sort of next thing, and I think we'll be a really big value ad,
literally your own encrypted encryption system.
Sad that we needed, but there you go. So it's sad that we needed, but there you go.
That's true. I mean, all the things we're working on is to make our, the client we're working on.
I mean, there's tons of clients, but the client we're working on, which is called Victor,
make it really nice and easy, because I mean, it's nice to have lots of functionality, but it also
needs to be really usable and, you know, to use it, and hopefully we're getting there. It's a lot,
we've done a lot of CSS and JavaScript work in the last few months. So yeah, I mean, any feedback
you guys have would be really good. We, you know, we get a bit blind when we're working on a project
for so long. So, you know, it's really good to have fresh impressions from new, new users.
Okay, hopefully I'll do that this year. Thank you very much, and enjoy the rest of the show.
I'm at the Brain Dwinel table, and your name is? My name is Willie Doren, and what is Brain Dwinel?
Brain Dwinel is a project where you have a shield for the Arduino Uno, also for the Arduino Pro Mini
that you can use to record brainwave activity and bring it to a computer, to have a mirror to your
mind. Actually, most of the minutes I read up about this, and you have like a, do you call them
hats or not hats? It's basically just a very comfortable way of attaching the
electronics to the surface of your head. So right now you're wearing a headband. What does that
feel like? So it's actually very, like I said, it's actually comfortable. It's just
it has to lay on the surface of your skin, and it's like silver chloride electrodes, so they work
dry. Usually if you do a EEG electrode and so forth, graphically recording, you need a gel or
something to have a good skin contact condition. But the way this is used in the amplification,
the amplifier setup from the hardware is very special in this case, different than other people do it,
but so this works pretty well with dry electrodes also. So you can just put it on and sit, and
it's like a, it's a, I don't know what that rubber is. Ah, yeah. So like this is the old version
we're using it, but now we, this one, it's like, on this head, I'm just taking it off. Well,
in Berlin she made this for us, and so like this is very comfortable to wear, it's like
cush me and it has also felt, and so one, two, three, four, five different. You could imagine
them as buttons. Yeah, it's a soft comfortable metal button. And it's actually the same principle also,
like actually I didn't notice that. I thought that was just a hair band. Oh, okay. So like, yeah, it's
the same principle, like like buttons maybe from a jacket or something. Yeah, those, you know,
clip-on buttons that you have on the military type of uniforms or the clip-in, with the two wires
that you push the, as sort of metal pin in on to it. So that's how they're attached, right?
So you can take those off and wash it, I guess. Yeah, this is, yeah, right. This is the thing,
that's why we developed this. So you can, after time, you use it for a couple of times and then
you can just hang it out, actually, and because like a natural material, it stays actually very clean
for a long time. Okay. And yeah, but this like, let's say a second generation and the third generation
is we have one to integrate this one, actually. This is a lot of a lot more beta, I think. Yeah,
it looks like very hacky, but we actually had it running also. We have the right, over there,
it's also a different device, like this. So, but here we have active electrodes. It means
there's very short wire. And so you don't, because like a cable or something, it's like an antenna.
Yeah, so you would wear this like a headband on your head and then just a cable running down.
Yeah, so what you do now is bring in the electronics into the headband.
Bringing, making everything just in the headband here.
And slightly heavier on your engine.
Yes, so, but that's the thing right now. So we're working on it.
I'll take photos of this and put them into the show notes, yeah.
There's also the other one. So we want to make this even smaller, like smaller components,
but this, of course, has to be going to a manufacturer for this. And so that's why we're planning
to make a Kickstarter in roughly two months. And so we can make it smaller, make it more affordable,
because right now Mazahiro, he's been developing this over 30 years.
And now he's opened the technology. But he has to do a lot of soldering and a lot of people
ask him to do this. But of course, you can imagine it takes a lot of time.
And so that's why we want to make, yeah, like just produce maybe a thousand devices. So like,
then he doesn't have to solder so much.
And yeah, but basically it's, so with the sensors, then you get what?
What with the sensors?
It's actually measuring.
So it's really, so like depending on where you put the electrodes, it's really the principle
is called electroencephalography. And it has been done. It's a brain imaging. It has been done
since the 20s. And so there's a good understanding of our certain brain functions. And so what we can do,
for instance, is to learn, to optimize, or to become aware of my own brainwave activity.
And by doing that, so I can make it training to maybe calm down my mind or to focus,
to learn how to focus better. This is like a replacement for a lot of children. They get
Gitaline. This is chemical. And so they found out you can have the same effects, actually,
with neurofeedback training, if you stay on it. And so, yeah, this really inspires me to work
on this project. And also, you can do, you can, for instance, control a robot or something,
if you imagine left hand right hand movement. This works with a very high accuracy, actually.
Then you have to place the electrodes, of course, to the motor cortex. So not in the here,
in the frontal lobe, but a little bit more higher. But you can also, like, this is a flexible setup,
so you can, like, this is the one we're shipping that you can either have us with a mainboard.
So we're looking at a board that will fit over in our unit, was it?
So, yeah. So you can connect with the Arduino Pro Mini, or, you know, this, yeah. And then,
so this is a mainboard. So, like, if you want to... It's about the size of a pie, I guess.
Yeah. If you wanted to use it in a box with a cable, you can do that. All you say you want to make
a headband with all the electronics around. And so, yeah. So the customer, the people who want to
have it, they can choose by themselves what they want to do, actually. Okay, you take this,
you take the signals, and you process them using what?
The processing? Okay, it's a digital signal processing. So, the way we do it right now is,
so we have, like, waves. And how many times does a wave go up and down per second?
It's the frequency. And then also, how big is this wave? It's the amplitude. And so, what we can do
is we can unmix the signal and make it useful for us. So, like, we can also make a statement,
how awake are you? Are you drinking a lot of coffee, or did you do sport? Are you almost falling
asleep? You know, this is very easy, or very simplistic statement, but it can be very complex,
depending how we unmix the signal. We can also unmix this spatially. So, like,
load more to context, essentially cortex. So, see, looking at the presentation, which we'll link to
in the show notes. Sorry? Is your presentation available on the internet? Yeah, I'll get a link and
put it into the show notes after. Yeah, sure. Okay. So, this is just saying, I guess, just an example,
how we can process this and make it useful for us. And so, as I said, like, you can think about
moving your limbs, and we can detect that, or you have, like, some sort of, like, the P300 means,
you show some pictures, maybe, something that is relevant for you, or you can make, like, a
spare computer. Let's say, you think about the letter D, and it goes A, B, C, and then D, R,
and you can detect, you were thinking of this letter. So, this is also for people who have, like,
this locked-in syndrome, you cannot move, and then you have this, this, this brain computer interface,
something you can use the brain arena, actually, and then you can communicate with the outside world.
So, like, for hacking accessibility issues, I guess, I see a lot of, you mentioned,
replacement for brain issues, but also for people who have mobility issues, and, yeah.
And also, like, I think there will be, like, a new generation of computer games, actually, because,
so, like, this will not ultimately, maybe depending on the game design, you can,
either still have a game controller, but then, you can make the experience of the game even
more deeper or more customized, actually, the way you feel, you know, change things in the game
environment, depending on your mood, which is very interesting, I think. Like, imagine,
you do, like, the perfect horror game. So, every time you relax too much. No. I don't want too much.
Okay, come on. But, no, it could be also the opposite, you know, like, if it's time you fear,
in a safe place. Yeah, then you have, like, little bunnies hopping around or something,
you can trigger this, maybe, with the, with the headset, actually.
So, it's basically allowing you to start using this, the electrical signals in our brains,
to do cool stuff, basically, go hacking. Now, how you're going to be doing the kickstarter to
get this off the ground, can you give me more info on that? Are costs and stuff?
Yeah, I'm just going to be. Yeah, so, because, yeah, we have to do a lot of processing and a lot
of organization right now. So, yeah, we plan to do this at least, yeah, well, let's say in two
months, runs this time, or maybe three months, but definitely still this year, and, I mean,
still the first half. So, the thing is, yeah, we're still in the process. So, now we have a
manufacturer, and now we also have to think about, because the nicest thing is, if we order some,
you order this brand-new unit, you can just start from the box. You can just plug it in and then
start. So, that's why we have to think about a casing. It's still, we're processing right now.
And, yeah, so, and then, hopefully, yeah, we have also some nice, like, we have advice from
Mitch Altman, like the founder of the Hacker Space in San Francisco, a nice bridge. So, he is
helping us, because he also did, like, a lot of open-source hardware projects. And, yeah, we're
very confident. It was very nice. He's a good lecturer and advisor. There's one thing that
concerns me a little, or that you may have an issue with, and that's a FDA approval, or
because you're mosing into the coming very close to medical device here.
Right. And that's also the bold claim that we make, that we actually are on the medical
grade, but of course, it needs to certificate. And, yeah, for that sense, I mean, it is an open-source
project, but for that sense, we also founded a company, so, like, we can at least provide the
service to make, to make, get certificates. And, but, so, you would think of trying to get
an FDA approved? Yes. So, I mean, in the beginning, of course, right now, it's this more focus
on, for the Hacker scene. It's for the Hacker scene. And so, like, of course, and then,
so, like, maybe it could be a stretch goal, but for now, it's just, we showed that we will
bring this device, and you can do things at home, but, of course, we don't make the medical claim.
Officially, yeah. You shouldn't do other questions, get sued for that.
Yeah. You need to come up with a new word. Can you show me a bit background of the project,
the licensing, who's involved, who's funding it, that sort of thing?
Yeah. So, right now, actually, we are four people, that is me. So, I'm like a computer scientist,
and I've also been a research and neuroscientific field, dealing with EEG classification.
Then, we have Robert. He's right now doing the processing and talking to the manufacturers,
and, yeah, we're trying to get it also, like, a European funding a little bit, just to,
yeah, because right now, we're living out of the own pockets the whole time.
And then, yeah, I'm a hero, like, he's really a central hardware part, because, like,
this is all the research, all the development he's been doing for 30 years now.
So, he keeps testing also new amplifier setup, and, yeah, then there's also server,
right there, then he's helping Masahiro out with a hardware, and, yeah, and also,
we want to make a connect the hardware with the software the best it can get, actually.
Yeah, then this is, yeah, and so, like the software?
And the hardware, do you have the, is the hardware open source?
Yes, so, sorry, about the licensing. So, yeah, it's, so, this is the brand-new ENO,
this is all open source, and right now it's the MIT license, but, yeah, we're not sure,
maybe we're going to do a GPL, but we haven't decided yet, but, like, for now it's MIT.
So, you can download the schematics, and so, for the software, right now, I still have to do
some cleanup, but I will soon put this on the GitHub also. So, it's going to be also open source,
and, oh, and it's going to be, I'm sorry, I didn't decide yet what could be the best for,
it's going to be a free software, yes, that's my, yeah, was the answer I was looking for?
Okay, anything else that I missed, or, no, yeah, very, we are very, we're looking for
a car for participation, because yeah, it's an open source project, and we still need, like,
people want to do, like, game development, or, you know, like, neuro-gaming, like,
the gamification of training your brainwaves. So, like, we need, we need still content, like,
this is really some things we missed, and so, we're looking for hackers, or designers, people would
like to, yeah, make some content, and yeah, there's, I think there's a lot of different aspects
with it, because you got the hardware, you got the fashion, even, sorry to it, you've got the,
the real hardcore electronics, and you've got the software program, plus you got the medical aspect,
so I'm sure there's something for everybody on this project. Yeah, really, it's so much work to do,
so that's where I really, we reach out to the people, that's where we came to post them,
and yeah, because we think it's already a great tool, but, of course, yeah, that's work to be done,
yeah. Do you know how much it's going to cost, or do we have any ideas? Yeah, so, right now,
yeah, so, if you order the parts right now, it's something like maybe $150, but yeah, if you make
it assembled and everything, we hope to, yeah, of course, with casing, everything, maybe it's
going to be something around 200, a little bit more, but which is, I think, which is fair, also,
like, compared to the few consumer devices out there right now, yeah, this is, believe me, if
we worked on a medical field, this is peanuts, yeah. Oh, yeah, of course, maybe the medical
certificate is a whole different thing, but, no, right now, we focus on making just a heck of product,
yeah. Okay, cool. Thank you very much, and enjoy the rest of the show.
I'm standing in front of the Butterknife project, and I'm talking to you. Hi, I'm Lowry, and
we're hosting a Butterknife booth here at FOSTAM, and basically, I've been working for the past
year or even more on the migration project in Tallinn. So Tallinn is the capital of Estonia, and
the Tallinn education board decided to try out links on the school computers, and the 4,000
computers that were shipped in September, they are now dual booths, so there's windows, and we want
to 14.4 installed on them, and my task was to prepare a Ubuntu image for those machines, and as
part of the whole migration project, I developed this tool called Butterknife, you can check it out
that Butterknife.rocks, so it's the website. Butterknife.rocks. Awesome, so these are then these
new hipster top level domains, and what basically we're doing is that I'm preparing the template
of the operating system on a server inside the Linux container, and then I basically use Butterknife
snapshots capability to take a snapshot of the container, and after that it becomes available on
the network using the Butterknife server. On the target machines, I boot up the Butterknife
provisioning image, and the provisioning image basically downloads the template on the target
computer, and of course sets up a partition table file systems, etc, and then downloads this
battery-FS snapshot there. Afterwards, the boot loader is set up, and within 15 minutes your
computer is basically ready to be used. And as a cherry on the top, we also provide multi-casting
capability, so the basic idea of the Butterknife was that it kind of couldn't make any assumptions about
the local infrastructure, so as a fallback, you can basically use a memory stick to boot up 30
computers, you can use a single memory stick to do that, and you can have one computer which is
downloading the snapshot from the server, and broadcasting it onto the local network segment
using multi-casts. I personally am a big fan of multi-casts, that's awesome, but can you explain
to people what multi-cast is just as a? So multi-casts basically avoids the overhead of downloading
the snapshot into each individual computer, and by using multi-casts, the same packet is essentially
transferred to all of those computers in a classroom, so essentially you could deploy let's say
10 gigabyte image on a gigabit LAN within like two minutes, it's ultra-fast. Yeah, excellent,
so it's also a way for just provisioning, mass provisioning of systems, so universities or
companies that have got new machines and they can just blast the, blast the test tops. Exactly,
so it's mainly targeted for desktops, for servers you already have a bunch of different tools
that can achieve that, but for desktops I couldn't find anything that would make my life
significantly easier. We also provide scripts to join the machine into Active Directory domain,
so after deployment you don't even have to create any local user accounts, just in the menu
you select join domain, enter the credentials and boom it's joined to a domain, and of course if
you have a puppet infrastructure in place you can use that, I have the template is connected to
the puppet server, so it's regularly updated, and after the deployment the machines also pop up
in the puppet master, so I can continue managing them from there. And this was developed entirely
by yourself? It's actually a really tiny project, it looks awesome. That's the beauty of it, it's
like simple ideas put together that help you to cut down the deployment time significantly,
quite a lot of our guys work in the education sector, so this is probably on the edge of the
C, and that's actually where I'd like to ask that, if you have a big computer park somewhere,
next number I'm targeting would be well 40,000, if you have a big computer park just send me an
email and maybe we can have some kind of business agreement and we could do cooperate and do
something together. Excellent stuff, anything else coming up this year that I need to know about?
The cool feature that we will be adding to the butter knife is an online incremental upgrade
so basically you have the computer running, the new snapshot will be downloaded in the background
and we are doing incremental upgrade which means if you have this image it's like 10 gigabytes,
we will only download the differences, apply to the file system, rearrange the boot loader,
and then the icon pop subsets, your software has been updated, please reboot into the new snapshot.
And what happens to user files or are they as old stored on the network?
Exactly a good question, so for the home folder is in a separate subvolume which is persistent
and same goes for the Samba and Kerberos credentials, they are stored in a persistent subvolume,
everything else gets wiped out and if you have user accounts in an active directory compatible
domain that could be also Samba domain then you don't have to worry about user accounts.
But everything will stay as it is, you can even migrate from 32 to 64 bits
and do all sorts of funky stuff that otherwise would not be possible.
Excellent stuff, just before I go I'll have you enter in some details of the project
on to show notes and so people can contact you there. Thank you very much.
And I'm talking to Elizabeth Flanagan.
Hi Elizabeth, what are you here showing off?
I am showing off a semi-working, herty-gurty or a velarou or there's a few different names for it,
it's an 11th century music instrument but this is a modern day takeoff of that.
Can you describe what a traditional one would be? There's a wheel or a crank at one end and then?
So a traditional herty-gurty is essentially a continuously bowed keyed violin.
It has a wooden wheel that is cranked, there's rosin on the wheel, the wheel touches a set of strings,
there's melody strings, drone strings, and a set of strings called trumpets which can be used
to create a tempo. And the melody strings go through a key box and are threaded with these
things called tangents that basically push up against the string to shorten the string length.
This works substantially differently.
Which brings us to where you're at first, Emma, I guess.
Yes, it brings us so this has a middleboard max in it, it is...
Well, first start, let me describe what this is, it's like shaped like a little bolt about
the size of your arm, it's got the traditional crank at the end and then it's all transparent
plastic and really nice designs at the top. So, for home there.
Sure, so on the crank end we have a DC permanent magnet motor that is a crank is connected to
the output shaft, so when you crank a DC motor what happens it produces electricity.
This can produce as far as I can tell by cranking it as fast as I can go, something around 42 volts.
It runs into a voltage divider and a protection diode that drops that down to about five volts.
That's this device here?
Well, no, no, no, that is right here, right on the back of the motor.
And that goes into an analog input and that essentially controls the volume.
So, when you think about how you play a violin, if you bow very lightly or very slowly you have
very low volume to it. If you bow very quick, it's a lot more.
Yeah, it's a lot louder. So, then what this brings us to is the key box here, which
she's lifting up the cover. There are about 24 keys here and instead of having 24 separate inputs
there is a two flexible resistors that basically the backs of the keys bang up into and change
the resistance of this and this goes into one analog input.
Okay, hold on because I need to describe this. So, we're looking at essentially a plastic box.
With, when you're talking about keys, you're talking about musical instrument keys that would slide
in and out. So, think of like the letter T and you push that in and it's got pins that go in and
out on the inside and there are metal screws on that. Yep, and the screws are there just there to
keep these from falling out. Where does it generate the resistance then if it's a plastic
bubble? On the back end, if you can see right back here, are two flexible resistors.
Ah, I see them at the back end. And those are end up getting mucks together creating resistance
and depending on which key you press depends on what the resistance is.
So, the key goes back onto these little metal strips at the back and then the resistance changes.
Well, can you play two of them at the same time, will that double the resistance or?
No, they won't because the way I have them wired it up, it basically acts as one big resistor.
So, it basically knows where in the resistor thing it is.
Are they always pillars the lower key. So, it always plays the key with the lowest resistance.
Yes, you can press two keys because it will recognize that, okay, two keys are hitting
like one end on the other end. Like, close to use these for position detection and etc.
But because it's a stringed instrument, think about a guitar. I can fret the same string
choice, but it only picks the lower fret.
Yes, of course.
Of course. Thank you, duh.
Okay, so the way, thank you for walking me through this.
I'm not the sharpest, two of them.
No, no, no, that's fine.
So, essentially, that's what's going on here. Now, we're still in the process of getting some
stuff working on this. So, free, so we've got the resistance. Where does that go, though?
This goes right into an analog input, right here.
On the board.
On the board.
Yes.
On what's the board?
The board is a middleboard max with a columnar, a lower.
There we go.
And it runs a distribution that I work for, I work for Intel, and I work full-time on
the Octo Project and Open Embedded on the release engineer for Open Embedded and the Octo Project.
I'm the first strategic musician. I'm an artist at the same time.
I'm a musician, a maintainer of the Octo Auto-Builder, and like the reason this all came about
is I used to play an instrument called a bow dulcimer, which is an Appalachia Mountain
Dulcimer. It's like, think of a mini cello. And my other hobby is motorcycles.
Those don't necessarily always match up and I got in a really serious motorcycle accident
and broke my hand. So, I can no longer hold a bow right.
Well, but I can crank. I can crank. So, when I started looking around at like what instruments
I can play, I realized, okay, here's an instrument that I can play with a broken hand.
And I started calling around in all the luthiers that I was talking to.
They were telling me four to six months for a dulcimer for a herty-gritty. And I was like,
that's great. I'm not waiting that long. So, I said, okay, you guys do this and I'm going to work
on this and we'll see which one gets done first. And then I got busy and five months later,
I hadn't started this yet. And I said, hmm, I better start this. So, I started it.
Got it ready. I presented this at Linuxcon, embedded Linux conference and doubling this year.
And literally, like three days later, my other herty-gritty came in. So, I beat a luthier,
but not by much. Can you play both, either? No, poorly. Very, very poorly.
Well, it is, I must say, very beautiful to look at, but then we got an I'm an engineer,
but no, I think it is a work of art. It works on so many levels. It's absolutely awesome.
Photos of this will be in the show notes. How did you do the physical manufacturing of it?
So, I sat there with Inkscape and I said, I know what I want this to look like.
There was some online site that does- I think you got distracted with the top case for sure.
No, actually, that was easy. There was a- I'm pointing at a very elaborately beautifully designed
floral motif with flowers, and it's a bird and some flowers. There was a- on Google Images,
someone had a design that was open and I just borrowed that and stretched it out to fit on that.
Yeah, yeah, and threw it in Inkscape. The major problem was I initially designed this
when I was living in the States for quarter millimeter, or quarter inch.
Yeah, do you see the problem there? Quarter inch plexiglass, but the quarter inch acrylic,
but the thing is, is that quarter inch and six millimeter are close enough
that they kind of overlap. So, you can use six millimeter or quarter inch and works fine.
Yes, you just increased your tolerance. That was obvious by design.
Excellent. So, yeah, it was the design flaw that worked to my paper.
Okay, thank you very much.
We're at the core booth. Flash, was it flash from booth, and we're talking to?
I'm Karl Daniel Haithinger, I'm doing a bit of community outreach right now.
Yes, quite a lot actually today. It's very hard to get hold of you. We spoke to you in detail
last year. We did an excellent interview. So, there'll be a link to that interview here.
Very quickly, what is core booth, what is flash from, and a bit of pitch.
Okay, the management elevator pitch is that core booth is a replacement for your bias and EFI.
It's a free firmware found on X86, R MIPS and others. It's chip by default on every Chromebook
out there. So, if you have a Chromebook laptop, you're using core booth. Excellent.
And flash ROM is essentially just a tool to write the firmware you want, to the
flash chip you want. So, for example, if you want to update your bias, you can do so under
pretty much any operating system with flash ROM. You can also use flash ROM to refresh something
externally, use all the various flashing hardware. You can even abuse Raspberry Pi for that.
So, you can even recover brick laptops with the help of Raspberry Pi and flash ROM.
This is a new thing this year, is it? We could always, well, we can do this since a few years,
but we never advertised it really. How does that work, actually?
The Raspberry Pi has an SBI bus present and flash ROM can address that SBI bus and just talk
to the flash chip over the SBI bus, just connect the right pins of your Raspberry Pi
to the flash chip of the target device, which has a bright bias update or whatever,
can read out the old contents right in new contents since all over in a few minutes.
Oh, there are people out there listening to this content. Thank you. Thank you.
Okay, you have a list. Talk to me. So, yeah, you wanted to know about the cool stuff.
Corbucci has done in the past year and I'm afraid the list is a bit too long to actually
list it. So, what we did is we got quite a lot of new processes and chips that supported on
X86 and on ARM. And on ARM, a few new vendors have showed up. For example, Rock chip and NVIDIA
have showed up and as far as I know, they wrote Corbucci support themselves. For them, NVIDIA?
Yes. And I see you're looking at me wandering if I'm still
rock-free, but yeah, the biggest point is that vendors notice that if they use Corbucci on their
hardware, and then they can combine Corbucci with Linux kernel and they don't have to write
all the drivers twice, as usually they would do with other firmware. So, we usually would
implement a driver for their hardware in Linux kernel and then re-implement that driver for
the firmware they care about. And given that Corbucci doesn't need all those drivers and can
reuse a few MTD drivers if you do that for nandflash access, you can just run Corbucci directly
and have it execute a Linux kernel and that saves vendors a lot of trouble and effort,
porting and supporting their hardware. Some vendors claim it reduced the amount of work they
have to spend on a new platform in half. And that's a real benefit and the other benefit which also
the arm vendors are claiming is that their old firmware support packages they created,
they needed to support that themselves. Now, Corbucci has some pretty good documentation,
so if a large process vendor wants to sell small designs, they don't have to support users with
like prototypes of prototype runs of 100 devices themselves, they just can say, oh well,
the source code is there, do what you want. And if they get a design win and the production scales,
they don't need to support us people again, so it's a win-win for them. Yeah, and so they are
really happy about that. And then there's also some additional chipset or processor architectures
supported. We are now moving in the MIPS direction. Yes, and also the experimental CPU architecture
risk 5, which is essentially a free instruction set architecture. We do have Corbucci support for that
as well. Even if there's not that much real hardware out there and mostly of it is implemented
in FPJs, still it exists and it's going forward. Then from a more general user perspective,
we have lots more thinkpets supported. We have a few MacBooks supported nowadays. So people who always
say, well, thinkpets are ugly. We love MacBooks. Well, now those people can be made happy as well.
So you can turn a MacBook into a free 100% free device? Yes, of course. Oh, the irony of that.
Well, yeah, especially considering that this is not really something you expect from MacBook.
And then there's also lots of more Chromebooks, which were released and given that all Chromebooks
run Corbucci, well, it's a natural design win. Then from a not directly board support point of
view, we have a better code structure. We reorganized some of the code. And now we have an
infrastructure to test every commit in our repository with all the hardware we support. So we have
we have now an open source testing software, which is where you can hook up targets to the
Raspberry Pi and they will test each new commit and will publish reports where there's something failed.
So we know immediately if something breaks. And who it was. And that's actually very much needed
because usually people say, hey, Corbucci runs on a machine that's great. No need to ever
refresh it because it works. And people that just don't track whether it still works in your versions.
That continuous testing infrastructure really helps us a lot. Ensure continued trust in actually
running code. Is that on physical hardware? Well, we have we also test every proposed patch on
virtual hardware, but on physical hardware, just we don't have enough machines right now in the
labs and the various labs where before it goes live. Then it's yeah. So really notifications
after fact to not hold up the commits, but still I think it's pretty valuable. So at most you have
a delay of something like two hours after a commit where the failure or seconds reports show up.
So that's pretty okay. Also, we are now doing more community gatherings. We had official
corporate conference in October 2015. Great thing was that quite a few vendors showed up as well.
And we will have some more Corbucci developer meetings and conferences. One of them is scheduled
for Embedded Linux Conference Europe in Berlin in fall 2016. We have something which we are
aware. But just you were saying that at that event, there will be a table where you can bring
your laptop on the will. Yes, we only have to differentiate. We tried to have some sort of
time couple between the Corbucci conference in fall and the Embedded Linux Conference. So people
don't have to travel across the point twice. And we are also present now at pretty much every
hacker event or hacker conference, software conference, where he had fostering people to
reflash their laptops of Corbucci with success guarantee. We have a present at Case Communication
Congress, Case Communication Camp, pretty much every conference in Europe which is something to do
with hacking or with software we have present. We have started user groups, Corbucci user groups
to support people, quite a few hackerspaces, offer reflashing services. I was going to bring my
completely dead laptop because I thought, no, I'm not going to bug you when you're doing foster.
Well, if the laptop is supported by Corbucci, you can just bring your laptop and ask us,
well, can I leave the laptop here? I'll return an hour later and you have a laptop with Corbucci.
Excellent stuff. That's our sort of, and we have, that's our way also of improving community
outreach because some people are just too afraid to attempt that for themselves. And we have the
experience to reflash that stuff and we know what you do when something goes wrong. So we can
guarantee you that you believe without a brick, but rather with either the origin factor bias
restored, if you dislike Corbucci for some reason or a working Corbucci installation on your hardware.
Excellent. And there is some more thing. We have the first Android device running Corbucci.
Excellent. The Google Chromebook Pixel C and the firmware was written by the Chrome
Chromebook firmware team, which means they also have upstream pretty much all of their
kernel changes. So you can run the recent Linux kernel upstream with it and you have Corbucci
below. So it's also something we're really happy and we were very, we would like the industry moving.
Then there's also something from a security perspective. We have reproducible builds now. So
regardless on which platform you rebuild a Corbucci image, even if you do it under windows,
the result will binary, it will be binary identical to build somebody else did on something
completely different machine. So you can really verify that the source code matches the
binary, which is generated at the end. So you can check the shell keys or the... Yeah, we
not really check the signatures, we just rebuilt from sources and if the result is completely
identical, we know it wasn't tempered with. So that's easier than doing all the signature checking.
We also have something which is interesting for people who don't have time to follow the
mailing list. We have regular blog posts which are essentially this week in Corbucci, all the
interesting developments of the past week or the past month. Also it's more outreach and yeah,
that's pretty much... Oh yeah, and we got to release more versions. We had Corbucci version 4.0
since pretty much a long time and now we had version 4.1 for 0.2 and we are doing regular releases
and with all the quality assurance we are now doing. I think Corbucci is in a quite better state
than when you're going. It wasn't bad back then but I'm not really, really happy.
You can tell actually by the amount of buzz at the hall and how difficult it has been for me to
get hold of you for the last two days. So finally we're nearly at the end of first step. Okay, cool.
And so the other thing, well given that Corbucci and Fleshroom are really linked in the sense
that you need Fleshroom to put Corbucci to the hardware. The Fleshroom project has a bit slower
on development. It's a bit slower on development but there's not that much to do anymore because
Fleshroom in itself works. We now have a sprint to match some new features and we're doing some
more infrastructure work when we are also working on automatic testing for Fleshroom because
Fleshroom everybody cares about reliability like with Corbucci. People do not care if you are five
seconds faster but they care very much that what ends up in the firmware image in the firmware
Flesh is exactly the stuff you wanted to have there and we are currently building a testing rig
for Fleshroom which would do the same as what the Corbucci testing rig does. So not that much
news on the Fleshroom front but it's also coming along nicely and people are generally happy that
it's still very reliable. Excellent stuff. Thank you very much for the update and people of the good
work. Thank you very much and I would be happy to welcome people launching their laptops
Flesh that the next to be conference is just in fire whether we are there. Can I
on our website will be lists of that? Is that something that people can expect?
We have on our website we have a list of yes we have a list of upcoming conferences where we are
present and usually presents are the conference means we also offer reflashing services.
So okay so don't be embarrassed to bring your laptop and get it flat. Probably it would be a good
idea to tell us in advance how many of you are planning to come because we can't be there with
like 50 people reflashing 500 laptops at the same time but yes that's a service which we
officially offer. One more point? Yeah we also are now trying to improve community organization
not only and we are trying to start a non-profit here in Europe. So people can actually then donate
to the Corbucci project that was impossible in the past and we're trying to have this non-profit
also as a sort of point of contact if somebody wants to have us as a conference or something like
that. Oh very good. Yeah good idea. Anything else? No that is a thank you. No problem.
Hi this is Ken. I'm at the Open and Better project and I'm talking to
Fry and Boa from Open and Better project and well we are making a build system for building
various software for different devices. So we are showing different devices running the same
software stack here and one of the devices is based on an ARM CPU one is based on x86 CPU and
we have the same software made from the same software descriptions which are part of Open and Better.
Major share of Open and Better the exact same code. Sorry the exact same code.
It's the same code but it is built for different machine architectures and this is something
Open and Better software. Open and Better mostly contains a lot of descriptions where to find software
how to configure it how to cross compile it how to package it in an efficient way and this is
used to build complete firmware images for all sorts of target devices and in this way since
we build everything from source you can have the same software stack running on different machines.
Of course on top of the generic software descriptions we have some to adapt to make your own
hardware descriptions maybe add some board support like customized Linux kernels or a boot loaders
but everything from the software description till the finished firmware image is
solved by Open and Better and it's done mostly automatically.
Very good. Do you have some demonstrations here on the table? I think they're from other
projects but I wonder could you bring me through them? Yes we have. Well the one demo we have is
showing software-defined radio device. We have one based of a quite generic
Intel X86 hardware and it's a middle board running a software image with a software-defined radio
dongle attached to USB and running graphical user interface for controlling this software
different radio receiver dongle and the second part of the demo is commercial software-defined
radio device running the same software with the same user interface but on this completely
different software platform. Another showing I think we are currently showing is a demo of
Toaster which is a kind of web front end for for open embedded which is used for configuring
scheduling and controlling software bills. Software bills are quite tank-consuming and
harder control thing because compiling millions of lines of codes there's a lot of things that can
go wrong and the front end assets you are controlling this good process monitoring what is
actually going on and showing and checking the actual results, checking reports of quality
assurance tools, checking the results of size check because many devices are quite restricted
amount of storage space for your high systems and things like this. What's that problem called?
It's Toaster. Toaster. And that's part of where can I find out information about that?
It's developed under the umbrella of the Yachter project and you can find information
all the easiest way to find information is to take a look at the Yachter project website.
So how would you recommend people get involved in the various different projects?
That's pretty easy. That's one of the really nice things that open embedded is you don't even have
to be developer to get involved with this project.
Major share of the work in open embedded is getting descriptions for software for the
for the bits done and these are made in a pretty easy human and machinery that will form and so
almost everyone who is able to at least use a compiler or build to like auto-threads is
able to get involved into the project and to contribute additional stuff.
We have a website, we have lots of documentation and information on how do we get started with a project in general.
So the target audience is all its hearts off. Mostly Linux running embedded devices or mobile devices.
So by now the target audience for the share of people put the interest in working
without embedded doing custom software images, building custom software for the devices is pretty high.
Hi everybody, this is Ken. We're at Pico TCP and we're talking to
Don't be a this. I'm from our intelligent systems, Saltron and standing here with
because CPM falls down yet again for another edition. Now we spoke last year or I spoke to the project.
Can you tell us what Pico TCP is in very very short? In very short?
Well, take as long as you like, actually it's like a public radio, maybe four hours, I don't really care.
That's also short, okay. So Pico TCP is really at CPIP stack for the small embedded devices.
You have Pico TCP in Linux. We want to put Pico TCP in everything. Also the places where Linux doesn't fit.
And it should allow you to create devices that you can easily attach to the internet of things
and get going. So like what we're talking about here is the full TCP IP stack. So IPv6 as well,
I'm imagining. Even IPv6, yeah. If we implement something, we go all the way. So that's full
RFC compliance and it means also fully RFC tested. So we do our own tests on that side.
So IPv6 is one thing and sometimes there are some even more exotic ones.
Now we're working on six-lope and two. So really going towards the internet of things and that's
yeah, then you need good IPv6 implementation for sure. But yeah, for those who are just looking
for IPv4, we have all the standard stuff, the TCP, the UDP, everything you want.
The HTTP, we need dynamic IPs. So let me find. I guess the reason you did this are the devices
are smaller, smaller memory components. You've got different architecture, so you're going to have
to support as well. And we already do quite support quite a lot of them. So we have a nice overview
on that little list over there. And the audience cannot see that, but we really start all the way
at the bottom with 8 bit devices. And one of our guys was feeling adventurous and he tried to
port it to a mega 128. So flush size, okay, but as soon as you start doing TCP, you need a lot of
RAM too. And that's where the bottleneck is with these devices. So you just had to add an external
memory device. He could use his RAM because otherwise it didn't work. But so it fits, it works
than 16 bitters. Also part of the market is also in there. You know, the microchip, the TI,
all of those. And then the 32 bits, and those are the most popular for us to develop on.
Also, certain customers coming to us, mainly with 32 bit R microcontrollers.
Now we go even further. So mainly our development is done in Linux itself. We're using
ton and top devices to just connect it to your regular networking environment in Linux.
That's a tunnel. Yeah, a ton is on layer two and top is on layer one. Then you also have VDE
where you can do crazy stuff with switches and everything. But that's a lot of fun.
Okay, back to where we came from, the platforms. So Linux, we developed on that too, which means
actually that we also work on the 64 bit devices. And yeah, we can just keep on going.
And do you need the Linux stack in order to run this? I think that was a project that was
done this year. It's like, okay, how far can we go? So you take the standard Linux kernel,
which contains a TCP IP stack. You cut off the TCP IP stack and you put picket cp in place.
And what does that give you is that actually your standard Linux kernel becomes a lot smaller.
And the TCP IP stack is a significant part of this size in the Linux stack.
So by using picket cp instead of the standard stack in the Linux kernel,
you could actually even put Linux on smaller devices that would be possible by default.
If you can run picket TCP in Linux, why not just run picket TCP in like Debian?
Let's say that's a fun project, but there is not really a need. If you have it on your regular server,
saving like 100k or 200k, if you have a couple of terabytes of storage, people don't really care.
So it could be a fun project, but on the other hand, we're targeting the small devices.
How did you just end up? Like, did you wake up on day as a kid?
God, I really need to get into TCP IP, you don't know.
It was one of our colleagues. Actually, one of the organizers is here at Phosdom,
who was at a customer and he really felt a need a bit for like, there is something lacking in this
market. So either you have a full stack that contains everything, but is like one solid block and
you take it or you leave it, or yeah, you were left in the dark with maybe some commercial
stacks that you'd have no idea about what they offer. So we were looking for, or we found that little
gap where we thought, yeah, we need something modular that we can easily port, that everybody can
start to use. And that's where he then just start with the projects.
Okay, on your field thing going across here, I see open source and proprietary.
What does that mean? Is it like open core or is it the same code bit?
Well, what's the license better? The license is GPLV2.
So is it a tough choice to choose the license, but that's what we went for, and so far we're still
happy with it. This means that the entire PCO2CP core with all the modules is totally open source
released under that. What do I get if I go for the proprietary option?
You can compile your stuff, so we have a getting started guide. You can do all of that with
what is publicly available, which means you can compile your setup. You can start running ping,
TCP, DHCP, everything you want. And on top of that we have a separate repository with code that is
we don't feel quite comfortable yet to put it entirely in the code base. And there you'll find
DHCP, MQTT, integrations with other ones. Also those ones we release under GPLV2.
So you can pretty much get everything out on the internet.
Aside from supporting the project and doing the right thing, is there anything in the
proprietary license that isn't in there? The proprietary license allows people who are not
compatible with GPLV2 to actually use our stack. Okay, get it. Okay, good answer, Patman, well done.
So anything else here that you want to show me or that I missed? Do you feel like playing snake?
Probably not going to work for, oh look, I'm winning, I've just lost. No, no, no, I am.
Anyway, it's one of the things we've been working on on this here also.
What is the capacity we'll pick on TCP? Well, actually with the controllers, we've
turned into picket cp notes. So they're now network enabled controllers and you can be sitting
in another room and still play picket cp. Yeah, then a webcam could be useful, but
smudging overkill. Yeah, so this is actually the end result of a workshop that we've been giving
around picket cp. We've been doing this mainly internally for a couple of times also towards
students who are very interested in working with it. And we would like to spread this workshop
even further into the world and see who else is interested. So I have the thinking suspicion
beer was involved in this workflow. But we'd like to call them pizza and beer sessions at time.
So, of course, beer was involved. But it's really a lot of fun what comes out of these.
And what's that? Have you had to add anything to the controllers to get them to work?
Well, picket cp or other than us. There is not much, I mean, have you had to make any hardware
modifications to get them to work? No, these are, we love our friends at Seats Studio,
that's a Chinese company, they make great hardware. And it's really cool that these boards
are like entirely containing everything is on there. So you have the full Ethernet
hardware available on top of your ARM Cortex. Something, I don't know which number exactly.
Well, we have an LPC inside. So it's a really neat development platform. We would love to see
them even cheaper so we can really hand them out much of it. These are 40 or 50 euros still.
Yeah, I mean, now we think, you know, with the pie, you're thinking, oh God, that's really expensive now.
Yes, whereas like two years ago, it's under 200 euros, wow, that's great.
Or certain Wi-Fi platforms that you can buy these little boards for like two euros or something.
But Wi-Fi is always a bit more difficult to develop on. So we like to have wires,
it costs a bit more, but then we can really do everything. Anything else, cool, do you want to show them?
What's the light? The lights? Well, there's instructions. There's a connection.
There's actually a Wi-Fi chip inside. Yeah, and running Picochip, this is actually the chip I was
talking about. This looks like a regular old thing that you get to the hammer. Yeah, so it's
okay, it's an external life. Oh, yeah, and that's the case. Oh, I'm going to take a photo of this.
Yeah, this is classic. So it's a regular old outside light with the LED type thing, I guess,
will put my finger in there. A bit of hardware modification allows it to control it via Wi-Fi,
so you can log in and then you get a web UI and you can change the colors and everything.
Yeah, that always works. LEDs, we love them.
That's it. This is one of the tiny Wi-Fi devices. Here we're bumping into some problems with
licensing, because it's actually an aspersive ESP8266 device. That's that's incredibly cheap,
so one and a half euros or a bit bigger development board for euros, you have it,
but they're proprietary binary for doing all the wireless stuff. That's closed source,
which means Picochip is in fact not compatible with it, or they are not compatible with us.
Let's call it like that. We're on false them. Which means we cannot release these codes.
That sucks. That's really annoying, because it's super cool. We've been trying to talk to these guys
if there's a way out, but I suppose if some of our community members just started emailing these guys
and asking, well, maybe Picochipip guys would like, I'd love to buy a quarter, four million of these
things. We already have a couple of guys who have been asking for this, but we always have to
disappoint them. So is there anything else coming up this year that I need to know about?
I think we're really going to focus more on community building. We feel this product or this
stack is really mature. We have the quality. We can assure that everything stays green. That's
what we do internally. What we are looking for is people who want to integrate Picochipip in
their own products, who want to do products with it, who want to develop some crazy protocol that
can go somewhere in between one of the layers or on top off. I reinvent the wheel. Sorry,
I reinvent the wheel if you can take your code. Yeah, so we want people to use it. Excellent stuff.
Thank you very much for taking the time and enjoy the rest of the show. Thanks.
The project is called PDX Test. And you are? Alexander Arring. And what is PTX Test?
Yeah, that's a build system tool which helps you to cross-compile unnecessary stuff for your
specialized platform like the Raspberry Pi. So if you want to make a Linux system,
you need to care about the bootloader, the root file system and user space software. And finally,
also the Linux kernel and PDX Test sets all environment variables. And for cross-compiling,
all necessary stuff. And finally, it blocks out a file system image and you can flash it on
your SD card and then put it in your Raspberry Pi. And finally, Linux will boot and everything
but you can also add more software interfacing for auto tools. So you can easily add your own
cross-comp software to PDX Test bot to bot package and then it finally adds your software to the
final image root file system. So on the HPR network, there's people underwriting their own
software for operating system for the Raspberry Pi. So this will be a way of speeding up the
compilation process to get it over to the Pi, I guess. But so when you're doing the compilation,
you're using something like a Ubuntu or Fedora or something like that. And then you cross-compile
over to the Pi. Yes, exactly. Is there any hardware involved or not? Do you need any special
hardware or do you put the SD card into your own PC? We have some free-based bot support package
which is open source and there is also a platform for CoEmo and with CoEmo platform, you can
one CoEmo on it and it boots your PDX this image. You don't need special hardware
for testing but then you can switch maybe to Raspberry Pi and then your software once also
on the Raspberry Pi. Okay, so what do I need to do to get PDX this install? Is that a Linux
system on itself or is that an application I download from? It's an application, you can download
it on PDX this.org and install it on your Linux machine and then you need the free BSB.
We name it Distrokit and it supports several platforms, the Bigelbone, the Raspberry Pi 1,
the Raspberry Pi 2 and finally the CoEmo. What is that piece of software? Is that software or
hardware? What? You have the PDX just when you have something else. What's the something else?
That's the bot support package but this requires PDX this which has all the
rules, the receipts for cross-compiling, the necessary software and this is required to build
your bot support package for your platform. Okay, at the end of this today there's a software file
on my laptop which I put on the USB stick or USB stick. Yeah, or a SD card, a flash with a DD like
common on other USB sticks. Yes. Why does somebody make their own distribution for the Raspberry Pi?
Says he, yeah. Yeah, I mean it's an embedded system and you have a finite one use case maybe
for it to one maybe a VPN demon or something else and then with PDX this you can do your
your special use case running for your USB, a Raspberry Pi. And is it only Raspberry Pi or the
around the other devices? Yeah, we support in the bot support package the Raspberry Pi 2 also
and the Bigelbone and and yeah finally the CoEmo doesn't where you don't need any hardware.
And have you got your hands on the Raspberry Pi one yet or not? Or the zero? Yeah, the zero.
No, but I know the CPU is the same like the one and it should work.
Why did you start this project? So my company is a ping-a-tronix, it starts the project and
because customers want to run Linux and makes them for their final embedded use case to optimize
and let's put it on an open source project. Everybody can join and all other companies
also can look into the code. What sort of a license is it released under?
It's under TPL V2, okay. We also have some good loader
and what is that? That's an incremental fancy boot loader because it looks like Linux if you
want it but have not many process management or something else. It has also internally the device
interface like the Linux kernel so introducing new devices in mostly copy-pasting the Linux
drivers and into the pairbox system. So it's like a is it a cut-down grub or a placement for grub?
Or okay we don't have grub but the boot loader itself, it boot the operating system in itself
or is it just to lower the loader? Yeah that's a difficult question because some people
want to make our operation system list it but currently it's only a boot loader
but it has not interrupt handling yet so also copy-pasting Linux drivers you need to
care about the iakoo handling. Do some motivating mechanism instead of weakwares iakoo
and such stuff and it also has a file system layer and you can over Ethernet connect your
network file system, NFS and inside the boot loader and how big is that? What size
what sort of resources would you need to be running? It depends what you enable and also use
kconfig like the Linux kernel you can enable and disable much stuff of them
like is it Linux or is it not the drive from Linux? It's it's the same license which need to be and
and yeah I think you need to need to make your own experience
yeah but is it is do you take the Linux kernel and then strip it out or is this a separate project
that uses bits from the Linux? It was boss based on you boot but then we
grabbed some Linux headers to have the identical interfaces for the drivers and
and that's why it looks like the feeling and of Linux. Okay cool. What sort of devices have you
here on the table? What are you demoing? My demo demo is more about six low-pan this is for
IP for six over low-power wireless personal earnet products. It's something like
Bluetooth low energy and there exists another low-power wireless standard like which is named
8254. It's not common. No catching name. And what you want is our IP for six on
connection on such networks to connect them into the internet of things so you can put some
transceiver at your light pump or heater for enable and disable your light or
temperature sensor ring of your heater and over the Bluetooth connection which is low-power and
then you need only to replace the battery for around three years. Okay so that I'll take some
photos of that in the channel. I'm not staying device on the end. At the end there's
barebox. No and barebox is you have some AT-6 based Azure. Yeah.
With AFEE and that's some new stuff because we want to add AFEE support into the barebox
bootloader. So it was mostly for embedded systems like ARM and PowerPC and something else but
we want to support also AFEE on the for barebox to booting Linux. Why would you do that?
Because we want to replace a group. And you want you a file? No because I don't want it but
companies boot. Okay thank you very much. There's nothing else that I missed that I should have asked
because I have a few. I'm too distracted by the cool lights here. Anything that you want to tell us
or that's coming up in the next year that you're going to be releasing or that you want help with.
My part is more about six low pan stuff. I'm the Linux kernel maintainer after stuff and maybe
somebody wants to help and there exists a mailing list on the folder dot kernel dot org on the regular
mailing list and our project is the Linux WPAN. Thank you very much for the interview.
We're at the Java card, the Java card pro booth. And your name is? Hello my name is Martin Balak.
And what is Java card pro? So Java card pro is basically an umbrella project of different
software utilities to you. Make Java card specifically smart card programming more
accessible to new developers. By smart card do you mean something with the same chip like
the old traditional? Yes. We have in the Netherlands where you can pay with chip and pen?
Right so a smart card basically it's either with a chip with a contact interface or
these days Java cards also have an NFC interface so they can use the mobile phones
or for example emulate an NFC tag. It's all possible with the Java cards. So the main
main difference what I've been showing here today to people and yesterday to people has been
showing well made on obviously seed right now. Take a photo and put it in the show.
Okay what's the difference between a small static NFC tag where you can write like an URL
or phone number or some text onto and a programmable smart card. So when the information coming
from an NFC tag is static the same URL which right there the information coming from a programmable
tag is well programmable which means you can generate content on the fly for example you can
add OTP tokens to the URL to generate or you can give like a random Chinese fortune cookie
whenever you touch the phone touch the card of the phone or you know I mean the possibilities are
endless and but you can't do that with the end of seedless. No no that's not possible because
it's just static you can store a few hundred bytes of information to an NFC tag but from a card I
mean the limits are much much higher. So why why it's a good question I mean it is an open source
developer's conference right so why here as I said my goal is to attract more developers to
this market world. If developers to this day take smart cards as a static piece of hardware with
a fixed firmware where you cannot you know do anything then actually there's a whole world of
you know tiny applications yet to be discovered by many developers. It's fun
as far as I can see the most of the developer for smart card stuff is in the fraud space.
Is it in the fraud space? Oh yeah well yes of course and you can also you can you program
the cards are also handy when you're doing like pen testing or just for security research. There
are its uses some are some are malicious some are a baby a bit gray but anyway it's like with any other
development thing you can use it and you can abuse it so you can use it for good things. So when
you say it's programmable what what exact what can I do with this card that I'm holding up?
Well you can first of all you don't have to actually program anything yourself it's like open
source there is a bunch of existing applications available from G2 for example applications
you have like Java card applications stuff you can actually install inside the chip of the smart
card and that will run when the reader gives the power. Yeah that's correct what sort of things. So
people have been like like which is very commonly asked for is is hey I know that smart cards
they use for cryptography I can store my private keys on it like for SSH and PGP but that is
that is not all you can do like like like I said you can generate NFC tags you can program them to
for example give you access tokens for your Wi-Fi for example no think about it it's a you're a
coffee shop and you have an open Wi-Fi everybody can connect but they can't really get anywhere unless
they go inside physically to the coffee shop there's a sign on the wall saying touch here with
the phone for internet access and it's actually physically bound to the card if you you know if
you give a password if the lady at the counter gives you a password you're gonna give the password to
someone else but that is physically quarantined that you have to be physically there to touch the
access token which gives you let's say access for one hour yeah but that's for NFC but those are
not programmable you just put a piece of text I mean that's that's the idea that if you have a
programmable NFC tag you can generate the access tokens programmatically yeah but then
everybody has to have a reader in their computers in their mobile phones but I mean these days I
guess all the newer mobile phones do you have NFC by default so what you're saying on this card
this programmable card you have can communicate with the doorbell NFC yeah sure ah right now I
understand okay so that's this NFC tag that you go down to stickers that's just dumb it's got a
number on it but yes I can change yeah I mean you can change all of the the
NFC stickers you'll write it yeah but here I can look for your particular MAC address and then give
you a particular call yeah well you actually need to combine it to the backend service but
basically yes you can do this type of stuff because I mean it's dynamically generated based on your
program you can do like like OTP tokens basically you know physical authentication and what to do
with this information in the backend is totally up to you which this is just one example that you
can use it for Wi-Fi so you'd have these maybe three of these readers on the walls around the
coffee shop and you go up and you tap on that and you're done and this is just an example on
the other cool how big are the program programs that you can book on there how complex do the
guys how do you measure complexity so from as a programmer's point of view that's awesome okay from
programmers point of view the application size is usually let's say a few hundred to a few thousand
not let's say not more than three four thousand lines which actually the application size is
you know 10 15 20 25 kilobytes well yeah this there are cars with varying e-prom sizes starting
from like 32 kilobytes up to 150 and even 320 so the different different cars available from
different vendors have different capabilities like different you know e-prom sizes so you can
actually choose your your target platform based on your actual requirements so you could like
have a home access system like it's unstorey it's for yourself well if that's your goal then yes
I mean my my my idea is to facilitate developers I don't really care what they do with it so
okay cool so what do I need to I need some hardware to start how what do I need where do I get it
right so this is where you introduce your company no no that I'm software guys so
what you do need is a standard smart card reader if you have one like here in Belgium people
have an ID card which is also basically smart card so they very often already have a smart card reader
or like an NFC reader which tends to be more expensive and well obviously it doesn't work with
cars that do not have NFC capabilities and you need a Java card so there are plenty of Java
cards available these days from different vendors of the internet so you can order cards starting
ranging from five euros of cheap Chinese ones up to let's say 30 euros or so for a very advanced
latest technology let's say Western Java cards with high cryptographic capabilities so like
Olympic curves and you know huge key sizes and so on and you need the open source software
that's available from Java card.pro how much license do you release that under it varies depending
on basically it's a mix of GPL LGPL and MIT so usually it's so that the software that goes
that's provided by the project that goes into the card is license mid license because that's
the only sensible license for such an application but the host side software is either GPL or LGPL
if it has roots in some projects that are LGPL but most of my code which I write myself is MIT.
Thank you very much and enjoy the rest of the show.
I'm done here talking to Shivon and Shivon you you're missing so we just had a quick conversation
there and I thought okay let's let's just record some stuff here you were telling me that there's
a niche in group here in FastDem. They're on ravery.com which has a number of sub communities
no one has groups there is a FastDem niche or is group so I can see from here at least one other
person who is knitting. Somebody showed me a picture of a t-shirt today which said knitting
coding since the 11th century it's what it is we have knitting pearl you have
digital has has has one and zero everything is made up from two elements and if that sends
from anybody who is a geek then it probably should. If you're interested in anything
to do with knitting crochet spinning dying get to ravery.com if you're interested in knitting tutorials
online which are little videos that you can watch over and over again that's nishinghelp.com
and all of this is free and there's there's a huge crossover between
between hacking and knitting there's knitted wearables netflix in the last month or so
revealed knitting revealed patterns for socks which you can customize for your favorite shows
which have embedded in them electronics which will turn off the program when you go to sleep.
You're binge-watching walking dead you fall asleep your socks pause the show that pattern's
available free excellent so there is a huge that's the first time we're probably able to. There's a
huge crossover and get in touch get in touch with the through-average and happy knitting.
As we were talking there you were knitting are you counting as you've gone along how do you
do is your brain capable I don't know if my brain is capable. I've done this I've done this
movement in my lifetime several million times and you know this because I learned to crochet
when I was four by then I could already knit so I've been knitting all my life I knit
there a day would rarely go by when I didn't pick up needles so I have extremely refined
muscle memory for this sort of thing I can carry on a conversation easily I can watch television
easily the more complicated stuff I need needs a bit more concentration but that's the same
with any activity. Most people can write their signature without looking at the patient because
they don't do that you can do this if you try it. You can learn to do this. Awesome stuff thank you very
much.
You'll be free hackers, you'll be free
If you want to be free from the dirt in the middle of the night, come to our side
You won't believe what you see, we got everything you need for your reputation
Take it from me with no manipulation
Time now, no point, now no, enjoy it
It's just the same, we're coming to rule the play
You'll get this as well, you'll be free hackers, you'll be free hackers
Come and join us now away, share the software
You'll be free hackers, you'll be free
If you want to be free from the dirt in the middle of the night, come to our side
You won't believe what you see, we got everything you need for your reputation
Take it from me with no manipulation
Time now, no point, now no, enjoy it
It's just the same, we're coming to rule the play
You'll get this as well, you'll be free hackers, you'll be free hackers, you'll be free hackers
Come and join us now away, share the software
You'll be free hackers, you'll be free
Come and join us now away, share the software
You'll be free hackers, you'll be free
Come and join us now away, share the software
You'll be free hackers, you'll be free
Come and join us now away, share the software
You'll be free hackers, you'll be free
Join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now, we share the software, you'll be free, I guess, you'll be free, join us now
we share the software, you'll be free, I guess, you'll be free, you'll be free
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
HECCA Public Radio was founded by the digital dog pound and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly.
Leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the create of comments,
attribution, share a like, 3.0 license.
