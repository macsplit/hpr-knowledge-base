Episode: 2556
Title: HPR2556: Building trust
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2556/hpr2556.mp3
Transcribed: 2025-10-19 05:31:33

---

This is an HBR episode 2,556 entitled Building Trust and is part of the series Privacy and Security.
It is hosted by Klaatu and is about 42 minutes long and carrying a clean flag.
The summary is when I feel asophical using about how trust is built both online and in real life.
This episode of HPR is brought to you by archive.org.
Support universal access to all knowledge by heading over to archive.org forward slash donate.
Music
Hi everyone, this is Klaatu, you're listening to Hacker Pub with Radio as we've seen the music,
kind of probably suggested to you.
In this episode, I'm going to talk about Building Trust.
This is an interesting topic to me because it's something that crosses over from real life to online life,
which I guess there's actually quite a lot that crosses over, but I mean this one has implications for both.
And the reason I kind of thought about this was because I was observing myself as it were within in social situations in real life.
And online life really, but when I find myself in social situations, I frequently, I would argue more often than not.
In fact, I have no idea how to integrate with any group of people that starts to congregate,
whether it's just for the natural flow of things or whether it's a planned event or whatever.
I find myself not really sure how to get into that inner or even outer circle sometimes.
I tend to sort of gravitate towards the sidelines as it were, which is an amusingly appropriate sports knowledge,
actually, because if I was to try to play sports, that is exactly where I would say on the sidelines or the outfield or whatever those terms are.
Anyway, I don't know how to do that.
And this episode, unfortunately, is not going to answer that quandary.
It is not going to solve this issue.
I mean, I don't want to say it's a problem because I don't really know that it is a problem,
but this is not going to be about that.
But that is what made me think about this issue.
And the issue, again, is trust, building trust.
How do you trust people, especially online, where everyone famously could just be anybody else?
You have no idea who you're talking to.
So, I mean, there are certain policies in place to solve that specific issue.
But before we get to that, and you probably know the couple, you probably know more of them than I do.
I know like one.
But let's talk about what trust is and what it means to you as someone who may be trying to get involved with something,
whether it's open source or a podcast community or anything, a gaming community,
whatever people do online.
So the question of trust is something that matters to people,
because there are those people who have some degree of ownership over something,
whether like I say it's a community or just a software project or whatever.
There are people who own that thing.
And a lot of times we hear about ownership of a project as a bad thing,
or ownership of a community or ownership of any space as sort of a bad thing,
because those are the people who are holding on to traditions
and scorning outsiders from coming in and that sort of thing.
So there is a negative connotation there, but there's also a positive way to see it,
which I think gets seen quite a bit as well.
And that is just that someone has to be a caretaker for something in order for that thing to continue to persist.
And I think that's kind of the thing about trust.
So if you go to it, let's say a software project and you think,
I've got several ways I could make this software project better.
And I'm going to step in and attempt to enlighten this project with my brilliance.
That's a, you know, that infuri, that's a great, it's a great and terrible idea,
because whether you're, you know, certifiably brilliant or not doesn't matter,
the point is that you have ideas and you have contributions you want to make.
They may or may not be misguided.
They might, they may or may not fit with the thing that you're trying to change.
Who knows? Point being, you've got ideas.
You've got contributions that you want to make.
And it might be the most brilliant thing in the world,
but if there is no trust there, then it's an idea that is that is dangerous.
Because what could happen is that you would,
but let's say, let's say there was no such thing as mistrust.
Everyone is trusted.
So you would present your ideas to, to a project.
They would adopt them immediately without question.
And that's the, that would be the, the, the cycle of contribution.
And I think in a lot of people's minds, that is the cycle of contribution.
Like to, to, to newcomers, that is often when they say,
oh, this is an open source or an open culture project or community.
I guess I'll just submit all of my ideas and have them,
and they'll, they'll be implemented.
And that's, that's great.
And then I'll, I'll, I'll be within the upper tier of management within no time.
Now, the problem with that, of course, is that,
and I imagine some projects have, have structured themselves like that.
The problem becomes that if, if someone makes all of these wonderful contributions,
injects a project with their brilliance,
and then wanders off aimlessly board with whatever or got busy with real life
or whatever might happen to make someone wander off,
then the rest of the project, those who own the project at, at whatever level,
are left to sort of clean up the mess after the person has wandered off.
It might not be a mess, but it might be just something that they now have to maintain,
whereas they thought that this brilliant person who would come in
and, and dumps this idea onto them was going to then maintain that idea
and, and, and help it grow and continue it.
And that can be, from any level, it can be just, well, that was your little side project,
and I don't really care about it, so I don't want to maintain it now that you're gone.
Or it could be, well, this was really integral to the idea, to the project,
but you're the only person who understands this idea.
And I think that happens a lot in software.
You know, someone comes in and they say, yes, I have all the skills that are required
for this thing to, to suddenly grow.
I'm going to take it from, from just barren soil to, to a sprout.
There's going to be life here, and, and here's everything.
And they, they, they hack on, on some code.
It all happens in this frenzy of, of excitement that they get to work on a new project
and then they kind of wander off.
And everyone who was there, maybe before, or maybe just concurrently with them,
are now left with like this wonderful invention that has been created
and no one knows what any part of it does.
So that's, that's a big issue, and it happens not just in software.
I mean, you, you hear about that sort of thing happening all over the place,
whether it's just, you know, within a, within a business structure,
just like the processes and procedures, that sort of thing.
Okay, we've defined all of these things, and now I'm going to walk away.
Well, wait a minute.
You're the only one per, you're the only person who knew all those processes
and, and procedures.
Or you knew why they, it needed to be structured this way.
Or again, maybe you're just the only one who cared.
Like that, that fit your workflow.
You were in charge, but now you're gone.
So who cares?
Throw it out.
I think that's, that's the, that's, I personally, I think that's the fundamental reason
that trust is required.
Now there are some, there are other reasons, you know, there, there's potential sabotage, for instance.
I mean, that's, again, could happen in business, could happen in software.
You come in, you say, hey, I've got these great ideas.
Watch me go, and maybe you've got some ulterior motives.
Maybe you're trying to hook something into a proprietary solution
that is going to give you kickbacks because it's growing in usage now.
Maybe, I don't know, maybe it's a super, grimdark world, and you are a corporate spy
and you're going into a software project and sabotaging it.
Literally sabotaging it so that it stops to, it stops working.
Or, or you've installed a back door with all your brilliant, like weird code that nobody understands
because no one reads really, really low level assembly that you insisted was really important
to make this component work faster or whatever.
I don't know.
So, there are reasons like that that people need to trust you as well.
It just kind of all depends on the spectrum, I guess, and your level of conspiracy theory.
And believe me, I'm fine with conspiracy theory.
So, that's why trust is needed because there's this longevity and a healthy longevity.
You know, you want your project or your community or your business or your church or your game group, whatever it is.
You want it to last until nobody wants it to last anymore.
You know, all the owners of that thing are tired of it or whatever.
And during that life cycle, you want it to be healthy, you don't want it to be a problem.
And that's why it's important, I think, that for open source and open culture and open everything
that ownership is refreshed and renewed frequently.
I mean, if that's what is needed, because if that didn't happen, then when something really great came along,
it would only last as long as that original group of quote-unquote owners.
And then it would die and fade away and people would probably have to reinvent things or whatever.
Whereas now, if something exists and it's established and it works for everyone
and everyone's really happy with it until they're not, they wander away.
But by the time they've gotten bored or distracted or whatever, they wander away.
And a new, a fresh new group comes in to populate the space.
I mean, heck, hacker public radio itself is kind of an example of that.
A lot of the original owners, quote-unquote owners of hacker public radio, are only involved on the periphery at best.
But it continues to thrive because new owners, quote-unquote owners, have kind of come into the space and continued it on its way.
So trust, trust is important.
So how do you establish trust?
What's the key there that gets you trusted?
Well, I think personally, and this is kind of what got me thinking about this with the whole social situation.
I think that there's a back door into trust.
There's a secret hidden hook that some people have access to.
Other people don't. And it is entirely charisma-based.
It's that personal charm. It's the smile. It's the good looks. It's whatever.
Or whatever is valued within that community. I mean, sometimes it is just charm.
And that's pretty cross. That crosses a lot of domain.
But it might just be, well, I'm really good at what I do.
So you want me. You need me. Or it might be, again, yeah, I'm charming. I know how to shake hands.
I'll make you feel like a special person. And you will love to have me around, because I make you feel good about yourself.
Whatever it might be. Or you know what? I'm well-funded. I've got a lot of money. I can make your projects.
Little problems. Money-related problems. Go away quickly, because I've got, I can just, I can call you a cab.
I can bring in catering occasionally, whatever, things like that.
And while that's really cool, it is really dangerous as well, because that is, it's a really swift way past the trust gateway,
because everybody just likes you. And you're a good guy. And hey, it's you. We like you. We trust you.
You bring us coffee in the morning. You never, there's no reason to doubt your motives at all.
Now, some of us don't have that kind of, that sort of charm and charisma.
And so we don't have access to the side portal through the trust gateway.
We have to get through the trust gateway. And I have thought about what that trust gateway is.
A couple of, for a little while now. And I think I've got a couple of ideas.
So one is reliability. Reliability is not the same as punctuality, first of all.
Reliability is basically that you show up. You show up to whatever, whatever you need to show up.
Whether it's, whether it's, well, we're a software project and we kind of expect, just because that's how software projects work.
We kind of expect there to be a certain number of commits.
You know, like we want to see activity from you. You reliably contribute.
You reliably make commits. Maybe those commits are spelling error, spelling fixes.
Maybe they're really complex code. Maybe it's drudgery code that nobody else wants to work on.
But you reliably contribute to those, to those little areas in the application that need just a little bit of spit and polish.
Whatever you're doing, repetition breeds familiarity.
If you keep doing it reliably, then the project or the group starts to feel an affinity towards you.
There is, there's trust built because you are someone who is in it for the long haul by some definition of a long haul.
So you're not someone who comes in, proposes a bunch of wild and crazy ideas and expects a bunch of special treatment.
And then walks away never to be heard from again. You're there. You're, you're reliable. You can be counted on.
That's a big deal for really any, any, any group. I mean any group that relies on personal interaction, that's a big part of it is just reliability.
Like literally showing up and, and, and showing up, of course, might mean something different within different contexts.
I mean, sometimes literally just showing up is, is all that it takes.
There are situations where as long as you show up, you can stand around on the sidelines all you want.
But at the end of the meeting or whatever, you help put away chairs, then you're good. You are in.
And you do that reliably and you're, you're trusted. You get the badge, you get the award.
Other times the, the showing up, of course, like I say, is actually that, that means it translates into, hey, here's some code.
Or here's a, here's an article through your blogs, your, your, your site or whatever.
Now punctuality, as I say, is not the same thing. So don't mistake reliability for punctuality because you can be reliably late and people don't,
you know, it might annoy people, you know, if there's a deadline, says, okay, everything needs to,
they're feature-freeze in two weeks, everything needs to be in by then. And you reliably miss that deadline every single, every single cycle.
It might annoy people, it might bug them, whatever, it, it'll force them eventually to, to do that little thing where everyone says, well, you know,
clad to, he's always a, a week, a week late on the commits. And then everyone sort of like smiles and shrugs, you know, and look, that's just clad to,
and that's annoying. And there's a lot of philosophical reasons on why that's a horrible thing to do to people and blah, blah, blah.
But point being, I mean, if you do that, if you, if you're still there, you're still reliable, they, they, it does still build trust.
Again, it might annoy people personally, but, but in terms of, is this person getting the trust badge at the end of the year?
Yes, probably you are, because you, you might have been, you might be really bad at what you're, at, at, at meeting certain expectations, but you still show up.
So again, not, not really recommending lack of functionality. I'm just saying reliability is really just about repetition. It's not functionality.
Quality is another, is another measure of trust, I believe. And, and again, quality is very, is, is something that can be defined in lots of different ways and lots of different contexts.
So for instance, if you're getting together, weekly for, you know, a volunteer-based game night, or some, no, not this, maybe some kind of meeting, like, I don't really know what people meet about, like maybe politics or something, or, or cleaning up the neighborhood.
You know, maybe you're, you're on a thing that goes around and clicks litter around the neighborhood. You show up every week, that's great.
You've got the reliability check, check in the box, within the block box, you've ticked the check box for reliability, that's fantastic.
Another part of that is the quality of your contributions. So yes, you show up, that's good. You are, you are trusted.
How good are your contributions though? How, how, how serious are you, how, how invested are you in the success of this project?
And that, I think that comes through a lot of times in, in quality. So if you're showing up to your little litter pickup, your rubbish pickup club, and you show up, and you have a cup of coffee, and you eat a doughnut, and bite, and then everyone goes out to go collect rubbish or whatever.
And you kind of wander around the park for a while, and watch the squirrels, and you come back with like a soda can that you found, compared to the three trash bags of, of litter that other people have found.
Then you may start to be seen as almost a liability, sort of, you're costing more than you are contributing. And while you are reliable in that, so they certainly have some degree of trust for you, they, they may start to trust you less, because you are not contributing in the same, to the same degree that others are contributing.
And I don't know, like are you, are you on the city council, are you, are you keeping an eye on them, and you're just here to, you're here to make sure that they're not violating any, any city codes while they pick up the rubbish, or what's going on with you.
Or are you just a lazy person who just, you just found out that they meet every week and, or every month, whatever, and, and you heard that they had free coffee and doughnuts, so you show up for the coffee and doughnuts.
Or are you just really unfocused, or are you just a really, maybe you mean really well, but you're just really unfocused.
So, I mean, whatever the explanation, whatever, wherever on that spectrum of, of complete and utter conspiracy theory to, to charming, charming, roused about, you, you land on, the, the quality is not, is not on par with the other people.
So, that starts to erode the trust. However, if you contribute quite a bit, then, then trust starts to build. And, and frankly, even like, thing with this, thing with this example of a litter crew, the neighborhood cleanliness meeting, the, the, the contribution does not always have to be exactly the same as, as everyone else.
So, if everyone else is going out and picking up three bags of trash, and you picked up one soda can, but you were the one who brought this coffee and the doughnuts, and you set up the table where the food would be served.
And at the end of the day, you clean up all the dishes, and you put that table away, and you take out the, the local trash, like the trash that's been generated by the catering.
And, you know, all the, all that sort of thing, then that's great. That's, that's your contribution, and now you, you have quality of your contribution is greater.
Or maybe, maybe you're the one who does all the online stuff, you, you manage the website, you, you, you manage the mailing list, you keep the calendar sorted and, and broadcast any kind of changes to schedule and stuff like that.
So, the, the quality of your contribution does not have to be equal to everything else there. I think in most healthy organizations, there's a recognition that this thing is, that, that, that this thing is a bigger project than just, you know, that there are different components to every project.
That's what I'm trying to say. So, that's, um, quality. So, reliability, quality. And then I think the third thing from my experience has been longevity.
Longevity is, is as malleable as everything else. All the other things on this list, you can just find it in different ways because different projects have sort of a different expectation.
But if you are both reliable and you have some amount of quality, then if you stick around for a long time, then you become very well trusted because it's, it's, it's just kind of how human nature is.
You're, if you become part of the foundation, you're just, you're that person. And you, you, you've always taken care of this thing. And, and that's just what you do. You've always, you've always been here.
I mean, the, the original founder has, has come and, and had, had to move away and gone. So, there's a new person and they've come and gone.
And then there are a bunch of other people who've come in. And it's just always been you. Like your, you've always been there. There are probably people on the team now who think that you started, that, that the project, because you've been around for so long.
You've been around longer than anyone else here. So, there's, there's an inherent level of trust with, with just duration.
Just keep doing the same thing for a long time and people will, will give you trust for that.
If you, if you go into a project and contribute, contribute, contribute, and then you're out, that there's maybe, I mean, if, let's go back to coding, like maybe people audit your code, they're happy with it.
They're certainly grateful for your contribution. It's really cool. That's really high on quality, not a whole lot on reliability or, or longevity.
But it's, it's high on quality. They, they feel pretty good about it. And you might think, well, that's probably enough. That, that probably earned me a lot of trust.
But actually, I would have to argue that it, that it may not earn you a whole lot of trust, not, not in and as of itself.
Because, yes, you can dump a bunch of great code on, on a project. And, and they may look at it with scrutiny and, and really analyze it.
But that doesn't mean that the next time you, you happen to wander on by again and say, oh, here's another big chunk of code for you, that they're just going to integrate it automatically.
Because, well, your first contribution was really solid. I mean, that's kind of almost, I think, sort of toddler level expectation.
You know, it's kind of like, well, I did this one thing well. So you must trust me now forever. I mean, certainly you could imagine someone who wanted to infiltrate a project to make a really solid contribution once.
And in the next one, they sneak in their little backdoor or something like that. I mean, you could, you could imagine that. That's not super advanced James Bond villain type of, of plotting.
Or actually, maybe it is exactly James Bond villain style plotting. But either way, I don't think that one sort of big quality chunk of code earns you that much trust.
Unless they look out at your, you know, your online identity and they see, okay, well, this is that person. And, and I see that they've, they've contributed to several projects and so on.
But see that, that kind of, that adds to the mix. I think a little bit of reliability and maybe longevity, if you've just been around forever.
I guess there's probably, I guess what I'm saying, and I didn't really mean to, but it's kind of, it's looking like I'm doing this anyway. I guess I'm saying that it's that classic. What is it? Like, you can have, you know, money, you can have time, and you can have quality.
You can have two of those things, but not all three or something like that. Or, you know, cost, time, and quality. You can have, yeah, two of those things, but not, not all three.
I guess maybe that's what I'm saying with this. So you can have, you can have longevity, you can have quality contribution, you can have reliability.
Two of those things builds pretty good trust. I don't know why you wouldn't be able to have all three of them actually.
I guess, yeah, I guess it's different, but the point is that I have three things on my list and that must mean something. So that's building trust in their, in, in a community.
Whether it's online or real life, that's building some trust. Now, whether that looks like what you want it to look like or not is a completely different story.
For instance, going back to my original thought of social situations in, mostly in real life, why aren't, you know, why, why don't we go to a group of some kind of meeting or something?
Why aren't we the, the, the, the inner circle, the excited people who really love the project and get really excited about it and, and do weird things on social media and, and, and,
and garner all kinds of support and excitement about things, you know, like what makes a person sort of that charismatic sort of beacon within a project?
I don't know, and I think that's the different. I mean, I think I do know. I think that's like that is, that's it. That's it. That's it's charisma. It's like that. It's extrovert charisma type of thing.
And probably the right mix of sort of, you know, charm and time and, and relationships with other people and stuff like that.
So trust may not be that, you know, that, that might, you still may feel out on the sideline, in other words, but you will be a trusted wallflower rather than a creepy wallflower.
And that's something. Now, the online thing brings with it that other, that other level of trust, which is identity. Now, in real life, that, that tends to be more or less resolved pretty quickly.
You show up to a space, a physical space, and you introduce yourself as clatu. And that's it. I mean, you are clatu. Your face, your, the sound of your voice, and how you have identified yourself, creates your identity.
Now, you may lie about your identity. You may say, yes, I'm the same, I'm a CEO of a major corporation, and they might think, okay, well, that's pretty neat. That sounds cool.
As long as you're not hinging any level of, of contribution on, on what you have just lied about, it, it doesn't really matter to people in real life, generally speaking.
I mean, you could, you could say, yes, I'm, I'm a super hero, and, and by night, I fight crime. It took to, it, it doesn't really matter.
Like, the point is that you are who you are, and whatever level of trust that needs to be placed in you is now being placed into that sort of vessel that, that is in front of them right now.
You can say, you can say and, and claim to have a girlfriend in Canada, or, or, or a flashy sports car. None of that really matters in, in most contexts.
I mean, it does, if you're meeting, if you're at a group, and the purpose of the group is, we are people who ride in each other's flashy sports cars on the weekend, and you show up, and you say that you have a flashy sports car, and then when it comes around to your, to being your turn to, to let everyone drive your car, you turns out you don't have one, that starts to, you road trust.
But I'm assuming that none of this, you know, like, if, if you're just picking up rubbish at your, at your neighborhood meetup, and that's what you do, you can claim whatever you want to. It doesn't matter. The, the, the person who needs to show up and contribute is that person, and there's, there's not a whole lot of doubt.
I mean, it would probably, it will personally freak people out, if they go to the CEO, to the company that you claimed that you were the CEO of, and, and they said, oh, we're here to meet Clat 2, he said that he was the CEO of this place, and they were like, no, that's not true.
James Whitehurst is the CEO of this corporation, you have been deceived. That would erode personal trust. But they would still trust that when they see your face in real life, and they call out your name, and you respond to it, they still trust that that is physically you.
Online, such is not the case. You can lie to people. You can make up things. It doesn't really, again, it doesn't really matter most of the times. You could say, you could claim to be a werewolf, and that you turn into a wolf on the full moon.
It doesn't, if that, unless it is a group of people who turn into wolves at the full moon, it doesn't, it will not affect anything.
So I'm not saying to lie to people. I'm just saying that in terms of the trustworthiness in context of that specific group, that there are things that are irrelevant.
So, but online, the very, your very existence is something that people cannot necessarily trust, because you could be a bot, or you could be several different people.
And that starts to concern people, because now the question of longevity and reliability are completely thrown into question.
If you are not the one person who you have claimed to be, then how do we know that the next time we talk to you, you are going to be literally the same entity.
So how can we trust that you are going to be reliable if you are not yourself? How can we trust that you are going to be here for a long time if you're not?
So, and that's why things like PGP or OpenGPG are really important online, because there needs to be the comforting fact that as we assess the reliability and longevity of your contribution, we want to make sure that we are attributing points to the same entity.
Now, I'm sure there's an argument to be made in here, although I don't have never heard of really this being an argument, but I'm sure there's an argument to be made here that in theory, there could be an entity that is reliable and is considered to have longevity and possibly even quality, even though it is not an individual.
Actually, now that I'm saying it and I'm all these obvious examples are coming to mind. Something like, for instance, the Fedora project, you cannot point to an entity, well, you can't point to an entity that is the Fedora project.
And I guess that's what I mean. The individuals within that project do not necessarily have to be the same.
It's that project. That project has been around for a long time, but the quote-unquote owners of that project have changed as it has grown. Probably even a better example would be Debian. The owners of Debian has drastically changed, and yet people still know that Debian has been around for a very long time.
We'll certainly be around for a long time. We can expect a certain level of quality from Debian, their package manager notwithstanding, and we can expect that they are going to be reliable, because Debian has been quite reliable.
And to hit even closer to home, Hacker Public Radio. As I've already said, the owners, the physical owners of Hacker Public Radio has shifted, but, or has arguably shifted.
I mean, there may still be. You could probably still argue that someone has ownership of the idea of Hacker Public Radio, but anyway, we're all in this together. So let's just say that the owners of Hacker Public Radio has shifted, but that I would argue that if people were looking in and saying, we need content from some reliable entity, I think we would score pretty high.
But you can't really point to any individual and say, well, that person is Hacker Public Radio, because it's Hacker Public Radio's a lot of people.
So online systems for managing identities is important. Now, don't get that confused, though, with building trust, because you can assure people that you are the same person, with, for instance, a GPGK, or simply by saying, hey, let's do a video call this week.
And just reliably seeing someone's face and hearing their voices, probably going to sort of establish a certain amount of identity trust, but that's not what OpenGPG is for.
It's simply for the assurance, so that when they receive something from you, that they know that it was from you, from your physical form, and that they can trust that you are the person who sent that thing.
It has nothing to do with the other half of trust, the side where they actually trust what you do. It's simply, it is simply OpenSSL for meatware.
And those aren't the same things. Trusting something and trusting something are not the same thing, so I'm not saying that online trust can be built quickly with OpenGPG, or PGP, or whatever, because that's not the same kind of trust.
That is identity confirmation. There's some implication here that with all of this trust being thrown around, and with analyzing how it is gained, that the flip side of all of this is, well, now that I understand how trust is acquired, I could also exploit it.
And while I don't think that any listener of this episode would be thinking along those lines, because I don't think that people thinking along those lines need to analyze it quite as in depth as I'm analyzing it here, I think that's more of a natural thing.
Like you kind of grow into that by some misguided method or life experience, but I do think that there are people out there who do actively seek to exploit the people's trust.
I don't personally think generally that they're the people wandering into your software project, or the people wandering into your community groups.
Now I mean there are exceptions, and I'm sure that there are bad people out there, and mean people out there, people who want to destroy other things, whatever.
But I think more often than not, there are big groups competing projects, and so on, that do attempt to erode trust.
I mean let's just take a random company, let me just flip through my book of random company names.
Here's one micro soft, okay, let's just take micro soft, it's a software company, and they've been around a long time.
I mean to a lot of people, they have longevity, and they have reliability.
And I'm sure in other people why they have quality, I mean there's a certain level of quality to the product that they produce, because it powers a very large portion of businesses out there.
Whether powering a business is reason to earn certainly my trust, or other people's trust is irrelevant.
Point being is that it happens, and some people ascribe great trust because of that.
Now there are groups that do not care about those things, so trust is not given to this to Microsoft.
For instance, a group of open source software programmers, or enthusiasts, and or users, may not ascribe trust to micro soft, because micro soft has not contributed in any way to their activities.
In fact, according to my research, micro soft, whatever this company has actually worked against open source historically.
They've done a lot of things that have actually like really quite literally sought to destroy open source.
So there's some degree of, there's a negative amount of trust in this particular case, and this is a randomly chosen case, this is not biased in any way.
So what is Microsoft got to do to earn the trust of this one community?
Well, they've certainly, as of late, they've certainly done a lot to attempt to gain the trust of open source, of the wider open source community.
For instance, they've launched a pretty major campaign to embrace really open source.
And even to extend open source, because they've not only declared publicly that they love, I think, either open source or something very big in open source.
I forget the literal, I think it might have been just Linux in general, which is not all of open source, but sort of like this is sort of public declaration that enemies know more.
And that's great. And they've sought to contribute to the open source landscape, which they've done before.
They've had source code sites before that have been sort of popular, and people who know Microsoft and who sort of follow it, I'm sure can cite lots of different cases where Microsoft has actually contributed in some meaningful way to open source as it is.
And they probably have had, I don't know, I'm making this up, but they probably have had those examples for a long time.
It could probably point to things for a long time, and just even when it seemed everything was at its worst, there were probably very valid points where you could cite and say, well, what about that? That's not harming open source.
And there's the whole thing. Well, Microsoft is a big company. There are lots of different things going on in Microsoft, so on.
Point being, lately, they have been, they've embraced open source, and they have sought to extend open source by contributing to it in a very direct way.
I mean, they have open source technology. They've got like a visual code studio or something like that that, yeah, I think it's like an IDE pretty much, that they have open sourced either parts of or wholly.
They have established a subsystem for windows that will run Linux within the Windows subsystem or within a subsystem within Linux.
So they're doing these things, and they've got stickers that you can get, which if you go to a technical conference, they'll give you a sticker that has their name on it.
And it will be a clever sticker, and they've got a really slick marketing campaign. Now, the problem with all of this is, there may be a heavy dose of quality here.
They might be, they may have dumped a lot of code into the open source sort of domain, and it may be very high quality code. I don't know, I haven't looked at it, but I mean, I imagine that this visual code thing is probably very good.
I mean, it's been around, I think, for a long time. So I imagine that there are aspects to this thing. I think, I mean, isn't it like a whole, the whole of .NET now, right? Isn't that correct? I don't know. I'm just making wild accusations.
But I think that there's a lot that they've kind of dumped into the open source domain, and that's a big deal. And I'm sure it's very high quality.
The problem I feel with a lot of people looking at open source from, you know, the owners, let's say, the owners of open source looking at Microsoft and owners being in the same kind of air quotes that owners have been during this whole episode.
They look at Microsoft, and they're kind of like, well, they're certainly quality here, maybe, I don't know. And you've certainly been around a long time, but are you going to be in this game for a long time?
So in other words, the fact that Microsoft is 80 years old versus an 18 year old kid just out of uni doesn't matter. It's longevity and reliability within this space.
And so they've come to this space open source, and they said, hey, we're on board now. We want to contribute. We want to change things. We want to shake things up. It's exciting. We're here. Except us. Love us.
And people are a little bit hesitant for good reason. I mean, it's funny to me when people act like it's silly for people to be at all suspect of Microsoft for coming in and trying to shake things up and contribute and stuff and so on.
It's a little bit funny that some people seem to think that questioning motives in this case is just in poor form. I think it's actually quite natural for people to be a little bit suspect about the motive here because they have not built up that reputation. They haven't gotten the trust points yet.
They've certainly got trust points elsewhere in another domain, but that doesn't carry over. And I think the same thing goes for all of us.
You can be any kind of person that you might be. If you go into a space and you say, hey, I'm here, look at all my credentials, so on and so on, you have to build trust up within that domain.
I think that the potential for exploiting that is also quite high. I think that companies can exploit that. I think a company could, if they wanted to, move into a domain, broadcast that they're really excited about being there, that they want nothing more than to contribute and to add to the strength of this project.
And people would be correct to be hesitant to accept everything that that company says because there are certainly ways that a very large corporation, as I said, with normal people who are high in charisma can exploit people or can charm people.
There's potential for exploitation there. You can go and if you are this methodical and many businesses are, it's what sometimes is considered the mark of a good business to be this methodical.
But if you are very methodical, you could say, well, what I'll do is I'll dedicate five years of authentic sincere honest to gosh work towards this project. I'm going to be reliable.
I'm going to prove that I'm in for a long term. Five years is a pretty long term. And I'm going to contribute quality, quality stuff, whatever that stuff is. And thereby, you earn the trust points, the magical trust points.
But maybe you're playing the long game. And on the 1,824th day, you suddenly switch into your evil alter ego and exploit everyone's trust and do horrible things.
You could do that. A company could do that. We're also susceptible to what it's real life. And I think that's the very real reason that we have any concept of security or hierarchy or permission within a project.
That trust can only take us so far and that there needs to be safeguards in play such that if trust is abused at any point, damage is minimized.
So trust is important, establishing trust, establishing identity, all of that's important, but a sensible infrastructure to guard a project against any kind of exploitation is obviously really important as well.
The human side of trusting someone enough to let them into a group, into an inner circle of a group, whatever, you have to build it up. And as I say, it might not look like the thing that you want it to look like, which I think early on, that took me by surprise.
I thought, well, if I do this and that then I'm going to transform into this person who's really friendly and really good in social situations and all that.
And it just doesn't happen that way. Like the inner circle or whatever of a group, it acts a certain way because of the people within it.
And just because you are a trusted and valued member of the team, you may even be the core center of the team. It just doesn't matter. It just doesn't mean that the same kind of relationships are going to form just because you have gained a certain level of trust.
That's a separate issue that's social interaction stuff that certainly, the likes of me, will never understand.
But the trust part being able to contribute to something in meaningful ways, I think that we can work on that, I think that something that we can build up, we can create, we can structure and form, and eventually you'll get there.
Like wherever you're trying to get to, you'll get there. It just takes reliability, quality and or longevity.
So I hope this has blown the lid off of some misconceptions about how to move into an open community and revolutionize things and shake things up and all those other things that we all kind of think that we can do at any given time.
I think the important thing is that you stick with it, hang in there, be realistic, don't expect too much too soon, keep plugging away.
Your contribution matters, it's important and it will eventually be accepted and recognized.
And if you've found a community that does not accept or recognize your contribution, sometimes it's the community that's the problem.
And you can move on, you're allowed to move on, find a different group, find a different hobby, find a different something, project, and start building trust there and hope that you've found a healthier, a saner community.
Anyway, I hope that helps. Thanks for listening and talking next time.
You've been listening to Heccropublic Radio at HeccropublicRadio.org.
We are a community podcast network that we release to shows every weekday, Monday to Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contribute link to find out how easy it really is.
Heccropublic Radio was founded by the Digital Dove Found and the Infonomicom Computer Club.
And it's part of the binary resolution at Binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released under Creative Commons,
Attribution, ShareLight, 3.0 Lightroom.
