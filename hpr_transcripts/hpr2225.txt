Episode: 2225
Title: HPR2225: FOSDEM 2017 K (level 2 Stands 10 to 19)
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2225/hpr2225.mp3
Transcribed: 2025-10-18 16:08:45

---

This is HPR episode 2,225 entitled, Boston 2017 K-Level 2010-19, and is part of the series,
Internews.
It is hosted by Ken Fallon and is about 59 minutes long, and Carrimanek's visit flag.
The summer is.
Can Internews the project send a K-Building Level 2 at 2010-19?
This episode of HBR is brought to you by an honest host.com.
At 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at An Honesthost.com.
Hi everybody, I'm at the Open Smart Grid platform and I'm talking to you.
Someday answer.
Hi, how are you doing?
I'm fine, are you?
You're a new project here to foster them this year.
Can you tell us, give me an idea of what Open Smart Grid is and what you're trying to
do with it?
Open Smart Grid is essentially an IoT gateway to control a lot of devices, and we use it
for our own operation within Aliander, a Dutch grid utility company.
So you're the people who maintain the wires and the pylons and bring power into our home.
Okay, yeah.
The power distribution part, so we don't do production, we do power distribution, and
to do that we need a lot of control, a lot of devices, like grid automation, smart
meters, but also public lighting for municipalities.
And that's where the project started, municipalities wanted to have more control over their street
lights, switching schedules.
So we're going to replace ripple control technology with the Open Smart Grid platform and a lot
of devices in the field, which give municipalities more control over their own switching scheme.
What was the ripple control?
The ripple control is basically a technology where pylons are sent over the grid, over
the 50 hertz grid, and then a lot of devices in the grid pick up that signal, and then they
know I have to switch or I have to set a different tariff, etc.
Pretty old school technology, and it's pretty one way, and not so sophisticated.
So everything is just listening to the power grid fluctuations and then do something based
on that.
What's the difference between that and the Open Smart Grid platform?
How does presumably it's two-way communication?
Yeah, with the Open Smart Grid platform, we're going to build in modems into the devices,
and that modem and that device is connected to the Open Smart Grid platform, and the Open
Smart Grid platform acts as a gateway between the applications and those devices.
So, how does it physically do the communication back also over the grid?
It's TCP-IP over a separate telecom network, and so now, but that's going to give you an overhead
like every streetlight, it's going to need to have some sort of communication device.
Well, the idea is to switch a whole bunch of streetlights at once, so you're not going
down to streetlight level, you're going to street level, for example.
Yeah, that's what we're offering when it's abilities nowadays as well, but now it's
built on the ripple control technology.
So, what's the benefit for you, you're like a power distribution, what's the benefit
for you in doing this?
Well, we want to make it open source, so other ways others can join the development,
because I think there are a lot of organizations who have to manage a lot of devices, and I
think the Open Smart Grid platform can help with them.
And by making it open source, we also try to stimulate innovation and work together with
others.
Are you coming up with your own technology, or are you using any of the standards that
you've had before?
Yeah, in the protocol terms, if we use the standards used in our Smart Grid field, so
most of them are IEC standards, but we try to use other standards as well in the more
technology sphere.
So, it's not an invented here thing, if there's a standard already available, you'll incorporate
that.
Yeah, because then it gives us more market choice to select more, we have more choice in
selecting devices.
Yeah.
Okay, well, as we were talking earlier, I was bringing up the fact that everybody in Europe
is going to have to have a smart meter put into their homes.
Want to continue me, what's the idea behind the reasoning of that, and will they also be
controlled by Open Smart Grid?
Yeah, last year we added the smart metering domain, so if people listening with millions
of smart meters, they can use this Open Smart Grid platform to control them all.
Okay.
So, is there anything else that you want to talk to me about, or anything, how can, what
are you hoping to achieve here by coming to FASTA?
Yeah, well, we hope to get more spread the world, spread the world around the Open Smart
Grid platform, and especially the organizations with a lot of devices who have struggling with
managing them all, and that kind of stuff, yeah, I hope that they join the Open Smart Grid
platform development.
This would be also useful for somebody who, you know, a large factory, or things like that,
or that if you buy components that are Open Smart Grid compatible, that you could also
use that in a smaller scale, rather than, like, nationwide, like you have.
I'm guessing.
Yeah, you could use it for a smaller scale, but that's maybe it's a little bit overkill,
because we're, like I said, security is really a thing since we're utility, so we're
lucked up almost everything, so it takes you quite some time to develop stuff and make
it work.
So for a smaller scale, like factories, I think it could be some overkill, but if you're
talking about a large scale, then it could be very interesting to make that investment.
Okay.
When I was doing the research for this here, I was a bit surprised to see that a big,
but I would call a traditional Dutch company, it would be involved in Open Source.
Can you tell me, how did that happen?
You know, who was able to influence the organization, was it a hard sell, was it an easy sell,
was it, maybe you can't say too much about it, but no, no, it was me.
I was already a big fan of Open Source before I joined Alienner, so then I was certain
point I thought, well, let's start to do some evangelism, so I gave presentations to
a lot of guys, and then I came across the Open Smart Grid platform, so I said to the
colleagues, hey, I can find it on GitHub, so how open is open, and then they said to me,
oh, somebody, you need to help us.
What is Open Source?
How does it work?
Yeah, and then we went to Oskam, and then they thought, well, this is it, Open Source
is the way to go.
So yeah, I'm pushing, because we're also a utility company owned by the public, by
the government, so I think this is also a way to give back to the societies, to our investment,
but it takes a lot of talking, and not every utility is very into Open Source right now,
but it's getting there.
But if you'd like to get more in contact with this, feel free to email us or fire or get
the issue.
Cool.
Thank you very much.
Thanks for taking me time.
Hello everybody, I'm here at the Pearl Booth meeting with Mark Keating.
Wendy Fondake.
Curtis Poe.
This is like Deja Vu, it's just like, over a year I was welcome past the booth, and we're
talking to all of you guys.
So what has happened in the last year in the Pearl Booth community?
Chertice is such an amazing game out, Pearl Six gets better and better, what else can
do?
We have Camelia, but the fly stuff twice, it's completely new and they're awesome.
For us, it's just mostly been putting our head down and picking up contracts, doing
more Pearl development for folks, and it's just amazing some of the stuff we're doing,
having a blast with it.
And how is the migration to Pearl Six, do you think that's affecting the Pearl Five
at all?
Well, just to clarify, it's not a migration, a lot of people think because Six is in
the name that it's a version number, and Pearl Five and Pearl Six are actually separate
languages, the way C Sharp and Java are separate languages even though they're very related.
I think Pearl Six has actually been doing a good job of bringing attention back to Pearl
in general, and it's been very positive, everyone who's been looking at Pearl Six when
I give talks about it, they're really excited.
I mean, they love the sorts of things which are in there.
And unlike a lot of other languages, where there's this one thing that you want, everyone
seems to have something different in Pearl Six if they really want, and it's been a lot
of fun, and it's really been helping to bring some of the excitement back, I love it.
Excellent stuff.
So what can I look forward to this year, what's the lots of Pearl Six books?
This is the year of the Pearl Six books, we really have one in print, and there's another
one in print coming next month, and both of them, one of them at O'Reilly, one of them
is self-published, there will be at least three more at O'Reilly, and one other publisher
will also do at least one book.
So this year we'll see six different Pearl Six books, it's appropriate, six, six, nice.
And so, is there going to be any talks here at Fastam being given?
There's a whole room tomorrow of Pearl Talks, so it's back-to-back talks all day in the
Pearl Devroom.
On Sunday, we will have 13 talks in a row.
All those will be available on the Fastam website, which you're going to have to search
for yourself, because you can't possibly put links to every different project, but...
And our company, we're looking at releasing an MMORPG, a universe actually, written in
Pearl, Pearl Five specifically, and we've been having a lot of fun, we'll be giving
a talk about that tomorrow, in fact, that they requested the organizers.
I have just been giving a flyer about that, which is, looks amazingly cool.
Are all these graphics done within Pearl Six?
No, the game itself is written in Pearl Five.
Most of the graphics, I believe, are lender, I think.
Well, that depends.
That's the person who's doing the 3D art, our graphic designer, I actually don't know
what tools he's using.
Well, congratulations, and have a good show this year.
Thank you, you too.
Hi, I'm at the Koala booth, and I'm talking to...
...Lasserschumann, and I'm also talking to...
Sebastian Lattertsch.
Okay, guys, remind everybody again what Koala.io is.
So Koala is a tool for a linting and fixing code in all programming languages.
That means I can take code in any programming language, more or less, and I can apply
Koala to, and I get information about what could be potentially wrong with my source code
without having to worry about 5,000 different tools for all those languages for different
aspects of my source code.
And how are you going to maintain that for all the different languages that they go on?
So the code analysis from Koala at the moment mainly consists out of rappers around existing
tools.
So one of the main tasks that Koala does is it organizes a fleet of, I think, over a hundred
tools to work for you without you having to worry about all of them.
And secondly, Koala has native algorithms, and we designed them to work on any programming
language.
So you would essentially provide a small definition for a programming language, and that
algorithm would, with that information, work on that language, because for some, especially
the simpler things, there is absolutely no need to rewrite that analysis for every language
again and again, especially spacing like that's totally easy.
Is this something that can be integrated into a continuous workflow or an agile programming
development workflow?
And I think that's what you want to talk about.
Yes, that is.
And yeah, that's how we started our future project, it's called GitMate.
So we've GitMate our general idea is to improve the Git workflow, simplify the Git
workflow of developers, and the idea originated from Koala.
The first approach was to take Koala and integrate it seamlessly into a Git workflow, like
having the comments right where a human reviewer would comment as well.
And from there on we started thinking about other stuff, how you can improve the Git
workflow as well, like for example, with general repository management, also with finding
bugs in an early stage.
So we're currently working on that, and we're also used for us to communicate with other
developers of the first time, trying to find out what they like most and how we can help
them simplify the Git workflow.
So as you check into Git, it would kick off Koala, and then you get a report back on
the quality of your code.
So as soon as you do the pull request, it would check in Koala, but it won't be labeled
as Koala, but as GitMate though, but it will use the Koala engine to do the analysis.
Okay, and completely transparent of what programming language.
Yeah, the same as Koala, yeah.
Excellent.
Excellent.
And are there going to be any talks here, or are you going to be stuck in the booth?
We're going to be stuck in the booth, possibly there will be a talk.
We don't know of, there have been in the past.
You're just booth minions.
Yeah, yeah.
Very good.
Thank you.
I'll let you go back to it.
Thank you very much for taking the time.
Cool.
Thanks a lot.
Hi, I'm at the Linux from Scratchbook and our booth, and I'm talking to Julian Leplier.
Hi.
Can you tell us what Linux from Scratch is?
Linux from Scratch is a book to learn how to build a Linux system from nothing.
So you have the actual source code.
You build the source code.
That's how it is.
Yes, you download the source code of all the programs you need and you compile everything.
And once you finish all the book, you have a running Linux system.
You're up to the bash command, basically.
Yes.
Actually, there are two books.
The first book is only to build the first Linux system that is very minimal.
The most advanced program you will have is Viime.
And then there's a second book called Bingion Linux from Scratch that will teach you everything
there's to know to have a real Linux system with Xorg and any program you will need.
So you're physically selling books here on the booth and they're not that thick.
Is it possible, would you recommend people physically type in from the book or copy and
paste in from a terminal?
It's still better to copy paste because some comments are very long and you can easily
make mistakes that don't show up immediately.
So sometimes if you make a mistake at the beginning, you only find them at the end of the book.
So you should still copy paste the comment from the internet.
Okay.
So what's new in the book this year?
So every version, there are new versions of programs.
I see your system D is in, so you will be compiling system D, I guess, the stuff.
Yes, but it was still the time, it was the case last year too.
So it's not really new.
So there's a system D and a CSV in it version.
Since last year they have merged both in the same repository for better maintenance.
But apart from that, there's nothing value in you.
Okay, you just keep not put the latest and greatest.
All the software is always up to date.
And now that's an interesting point because you two are now running two laptops with Linux
from scratch, I presume.
Oh, the shame, the shame, they are running because this is radio.
Nobody will be able to tell.
Yes, they're running two laptops with Linux from scratch.
How do you keep up to date with your Linux from scratch version or is that not the intention?
So there's nothing really that helps you having, usually when you build your Linux from scratch system,
it's one-shot process and you can't really update anything.
Especially the base system is very hard to update, but there are some tips to build package managers
or to have your own package managers so you can actually, you can still update your packages.
Okay, very good.
Why did you get involved in the project?
So first I wanted to learn more about how Linux is done and I wanted to build my own system.
I wanted to have a system that is exactly what I wanted, but it takes a lot of time and it was very enjoyable to have my own system that reacts exactly as I wanted it to.
But now I don't have that much time, so I don't have an NFS system anymore.
To me it's a bit like traveling around the world, it's something you want to do once, it takes a lot of time, but you've lied you've done it.
Yes, I've actually been updating my NFS system for two years, so it's doable, but at some point you have to accept that.
You won't have all that time, it takes a lot of time and you will want to do something as at some point.
Okay, excellent. Thank you very much for taking the time and good luck with the rest of the show.
Hi, I'm at the Google booth and I'm talking to Joshua Simmons with the Google open source programs office.
So you have two sides of the table here, can you tell me what they're about?
Absolutely, so we have two sides of the table, one is Google Summer of Code, the other is Google Coden.
Google Summer of Code is our program to get university students involved with open source software.
Google Coden is targeted at students age 13 to 17.
So Google Summer of Code works this way, there are about 178 projects that participated last year.
And some of those projects are like the Python software foundation, who are an umbrella for lots of other projects.
What they do is they list project ideas and students then apply to work on those project ideas.
The students who get accepted to the program then spend three months under the, with the help of a mentor, and they work on those projects.
And we pay them a stipend so that they can focus on that work rather than having to take a summer job.
So Google Coden is a little different because it's for a younger age.
It's much smaller, we had about 17 organizations who participated this last year.
And it's a contest, so there's no money, but we do give students a swag and the ones who are picked at the end of the contest.
Two students per project are chosen as grand prize winners and we give them a trip to San Francisco and Mountain View.
Exactly, all expenses paid and we show them a good time and they get to meet Google engineers and learn more about it.
Basically promoting software.
So how did you get involved in this project? Did you volunteer further?
So I came in through the side door.
I'm a web developer myself and I worked as a community manager in a past life.
So I joined the open source programs office in the last year.
And so I help as part of the five person outreach team running Google Code and Google Summer of Code.
And my task in particular is to run the Google open source blog.
Okay, so that's you.
That's me, yes.
That's me too.
Yeah, pleasure.
So why come to Foster?
Boston is the, I believe it's the largest boss event that we attend every year.
And it's the fact that it's a free to the public events means that we get to talk to a lot more students than we might find at other events.
A lot of open source events are more expensive, frankly.
And so we find the people who we really need to talk to, not just the students, but also a lot of project maintainers are here.
And it's really critical for us to talk to both of those groups because we want the project maintainers to apply to be a part of the programs.
We want the students to apply to work for those projects.
So, I mean, you and so when does this start happening?
When do we need to apply if I was a project or if I'm a student?
So we just concluded Google Code and Google Code ended January 16th, I believe.
We announced our grand prize winners a week ago.
So, Google Code and we'll start again in about November of next year, usually after the American Thanksgiving holiday, about that time.
Google Summer of Code is ramping up right now.
So, applications for organizations and projects that want to apply are open till Thursday, February 9th.
So, anyone who's interested should look at that and apply now.
Students should look to apply. Well, they should start watching now because we're going to be announcing the organizations and projects that will be a part of that in the coming weeks.
And I don't have the specific dates available to me in the moment, but that generally runs from students begin usually applying around April.
And then it runs through May, June, July and August.
Do you have anything you could learn for the Southern Hemisphere?
We don't. We're a small team and the challenge that we have is that the organizations that apply to this, they need to have a point of contact to run the program from their side.
And they also need mentors for each of the students, two mentors per student.
So, we try not to burn them out because it's a bit of a commitment for them.
So, in an ideal world, we would run it, you know, a summer and winter of code to that both hemispheres could participate equally.
But that's especially not where we're at right now.
That's a winter of code, I guess.
Okay, thank you very much for dilemmas handling.
Okay, do you happen to know some background about the winners especially the Google, the two winners, the projects that won?
So, I don't have that in front of me, but I know that they came from a number of different countries around the world.
And that's one of the things that's really exciting about these programs is they're entirely global.
So, you know, some of these, often when we bring them to the States, it's often their first time in the US.
And sometimes it's their first time in a big city, so they get to see San Francisco and you can just see the stars in their eyes.
Awesome, well done. Thank you very much.
Links to all this will be in the show notes and enjoy the rest of the show.
Hi, I'm at the Ultimaezer booth and I'm talking to.
My name is Rodney Becker.
Hi, and can you tell me what Ultimaecker is?
Ultimaecker is a 3D printing manufacturer based in Helen Malsen in the Netherlands.
We're originally an Albusource company, folks on building an accessible 3D printer.
Made for the foreign market and for the part used.
And when you say open source, how much is open source?
We started off as an open source company because of the fact that the founders didn't have really the intention to start up a company.
So they made it open source to make it accessible for a large community.
And that's the whole reason that we made it open source and also to get some feedback from the outside world as it may.
So I can go to your website, I can download the technical drones.
Yeah, the technical drones, everything technical and software wise you can find online.
So where is the business model?
The business model is based in the whole package because we make software.
We have a slicer called Kyra. We came up with Kyra and the slicer in combination with the printer.
It provides the whole experience of the ultimate 3D printing experience, doesn't it?
And the slicer is the explain to people what a slicer is.
A slicer is a program that generates G-code that makes it understandable for the printer.
So you have a design made in AutoCAD or SolidWorks and something like that.
And you can transform that off to load that into Kyra, our slicer.
And it makes it understandable for the printer in what layers, the layer thickness, the speed and the type of material you would like to print.
Okay, can you basically describe what sort of products you have available?
We have a wide variety of different printers. So Kyra, but it's free software.
And we provide every service on all of your service level that you might need to get the best results you need.
So on the thing here, you say professional 3D printing.
So I'm guessing you're not aiming at the $150 Chinese knockoff market.
Yeah, well, with all due respect to the Chinese market, we make a printer that can be used professionally.
And our slogan is professional 3D printing make accessible. So it says it all.
The knockoff versions of 3D printers are also the knockoff ultimakers.
They don't provide the much needed quality that you might need within your 3D printing process.
Do you also provide them a third-party support and maintenance engineers to go round to factories or hospitals that will be using this technology?
We have a department focusing on that. So the usability of 3D printing in general, firstly.
Secondly, also looking at partnerships to provide the necessary input for, for instance, the automotive or the aerospace sector.
And really shifting away from the round-to-house use as it may towards a more industrializing process.
It's becoming a lot more, a lot more accepted in industry now to have 3D printing process as part of your.
Can you take me to some of the stuff that's on your table that you've used to print out?
You mean the prints itself or?
And some of the stuff you've printed.
Okay, well, we have some examples of the things you can print with the printer.
But also our new printer, that's the Ultimaker 3. It has a possibility to have two accesses for different materials.
So do access.
And software-wise and technical-wise, it's a much improved printer in comparison with the old ones.
But also the old ones, we made some upgrades for that to make it more out-to-standard in the use that you might need as either a home printer
or a industrial printer.
It seems quite fast.
It is, but we're still looking into getting things done faster.
But we experienced that our customers find that quality is the main drive for to buy a printer and to buy an Ultimaker.
So that's why we always focus on quality.
So getting the print you're looking for in order to make it faster.
Do you also work with businesses that are new to 3D printing in order to help them?
Do you provide courses and stuff like that to help them get up to speed with how to use it in their environments?
Well, the fun thing is that we get user cases from the industry itself.
We, as a company, sometimes get surprised by a company who already uses 3D printing in their production process.
And we always enjoy hearing those kind of stories because it for us is motivating to stay innovative and to make a process that is
and to deliver a product that is up to standard and what it's a public issue.
What's the new stuff that's coming up this year?
Well, of course we are looking for a printer who is an upgrade from the 3D printing.
We just released a 3D printing.
And still looking into ways to get a better fit towards the industry branch.
So maybe looking into more access for the materials.
But also thinking about improving the spaces within the printer or to make it more like a industrial setup.
Yeah, very good.
Okay, well, was there anything I missed?
That we are still trying to provide the necessary quality products for the people.
That's the whole meaning and reason that we do this.
It's awesome.
I was just saying it's the company I most want to work for.
Okay.
This is no secret.
Well, you have my business card.
Okay, so thank you very much.
Thank you.
Enjoy the rest of the show.
Thank you.
Hi, I'm at the sofa booth and I'm talking to you.
My name is Hugo Talbo.
And can you tell me what sofa is and what you're doing?
Yes, sofa is actually a library library focusing on physics simulation.
And we use for, it's existing for about 10 years.
And we are especially using physics simulation for medical applications.
And when you say physics, you're not talking in the real world you're talking about computer animation.
Yeah.
So we are talking about, when I say physics, it's more about, you know, how does the human body behaves?
What are the physical phenomena taking place there?
And for example, that's how does an organ deforms?
How does, you know, the temperature in the human body evolve?
That kind of physics that we are simulating.
Okay, and why are you here?
So I'm here because, I mean, we discovered for them, I discovered for them the last year, I would say, something like that.
And sofa is open source.
And we thought, okay, we are open source, we need to be in the open source places.
And that's actually a quite amazing place for, you know, meeting people.
There is a huge interest of people just with a huge curiosity.
So that's a very good discovery and a very good meeting for us.
So it's a library.
So you're writing an application for something then you can call this.
What's a written in and what do I need to get it running?
So yeah, anyone can actually start writing his own application.
So if the open source code is really a core that allows you then to do anything you want to.
If you want to start your own application, you will maybe develop your own plugin, your own module.
You can set the license you want to this code.
It can be proprietary or open.
And the idea is, what do you need to do?
Either you can code a little bit of C++ in it and create new models, new physical though and so on.
Or you can also directly use what is already existing.
For example, by using XML or Python scripts and describe your simulation and run it straight away.
So can you describe on a typical use case that might be on the screen here?
Yeah, so a typical example can be so here we have the simulation of the top battery revolution in the human body.
That's here for curing some kind of two mores.
There is two mores in an organ and we want to curate but to know how exactly to do that.
We are taking the patient data.
We are analyzing the data and then we are running different kind of simulations to know what would be the best strategy
to treat this specific patient.
So we can for example with simulation design new tools to help you know the surgeon to make the right choice for the right patient for the surgery.
So that's the kind of example that you can do with simulation.
Can you use this for training purposes?
Yeah, exactly.
So that has been actually the main and the first purpose of the simulation.
It was for training just like for you know in ironotic simulation.
A lot of pilots are training virtually.
So just like in medicine here, medical doctors, medical students could also train on virtual simulation.
And that's one of the, I would say, two or three main purposes of simulation in the field.
And how did you start?
So if I started actually a long time ago it's a project from researchers, from several different research centers.
Mainly in Ria, which is a French national research institute in computer science.
And yeah, it was the original idea was to have a common base of code, you know, to share between researchers with an open source license.
And yeah, yeah, that's a, we can see sometimes some, some, yeah, some organs, some live demo of...
Here I'm seeing what looks like a video and then over that there's like a computer mesh.
Yeah, yeah.
So that's actually the video of intra-operative video that's really for a specific patient.
Yeah.
That's his liver.
And on top of that we are adding information that comes from the simulation.
And we are doing actually augmented reality with that kind of, with that kind of tool.
So we are helping the surgeon during the operation.
Okay.
We mentioned training.
We mentioned help to plan the operation, that's the third one actually, that's guidance.
You know, during the operation, guide the surgeon to reach his goal.
Yeah, in this instance, taking a 2D image and then as it rotates around, you can see it like a...
I presume it's a growth or something that they're trying to remove in three dimensions.
So that really helps give you an idea where it is.
Exactly, we are extracting information from this video, which is 2D.
We are extracting as much information as we can so that we then give information to our 3D physical model,
which is here a mechanical model.
And from this mechanical model, then we give back information, for example,
where the tumor is located or where the blood vessels are located,
so that the surgeon can drink the operation, take the right decision.
Absolutely awesome stuff.
But presumably, you wouldn't be limited to medical applications.
This could be used somewhere else.
Yeah, it could be widgets and widget fractures.
Yeah, exactly.
That's a question of history.
From the very beginning, we apply that to the medical field,
because a lot of research projects were around medical applications.
But finally, it could be applied to any kind of simulation.
It could be simulation for automotive, automobile or stuff like that.
It could be for building, eat transferring or something.
There is definitely a lot of applications.
And for example, one of the recent applications we discovered is a German startup
that was using SOFA, and we didn't know that.
We knew that when we created a consortium one year ago,
and we discovered that there was a German startup using SOFA for industrial robotics.
So something not related at all with any kind of application in medicine.
So that's the kind of example that we discovered in your community.
Yeah, excellent.
Anything else that's coming up this year that you want to tell us about?
So yeah, this year, we are from the last year and the year that's going to come.
So 2017, sorry, that's going to be really the start of this consortium
that we are building around the software.
The idea is to really gather as many people interested in this project
to get new achievements from researchers, from companies, from startups
that are working around SOFA.
So we hope to gather as many partners as possible around the platform.
And it's so far, Dash Framework.org link will be in the show notes.
Okay, thank you. Do we have a minute or something?
No, no, perfect.
Thank you very much.
Thanks for taking the time.
A good look at the rest of the show.
Hi, I'm at the Muse score booth and I'm talking to you.
You're talking to Nicolas Frommand.
And did I mispronounce the name of the project?
The name of the project is Muse score?
I think you were right.
Okay, well done. Well done me.
So can you tell me what it is and what it does?
So Muse score is a free software to create sheet music, music notation.
It's a easy week software, meaning you see exactly what you are doing.
And when you have print the sheet, it will be exactly what you see on the screen.
You can enter the notes with the keyboard, the mouse or MIDI keyboard
that is plugged to the computer.
People use it in many different ways.
People compose with it.
I wrench scores.
They use it for orchestra, but they use it for console bands, for choir,
or only for single instrument and to learn the piano, for example, those type of things.
And is it open source?
It is entirely in port source.
It's in the GPL-D2 and it's made on C++ and CUTS.
And it's available on Github, Github.com slash Muse score and you can get the source and contribute there.
So it's an application that you run on your system locally?
Exactly. It's a desktop application for Linux, any kind of Linux for freeBSD as well
and for Mac and Windows.
It's very good.
And I think that pretty much explains it.
Exactly.
So you can enter notes and you can play the notes as well and then you can print them.
There is two things that I could add is that on top of that, a lot of all users.
So it's a very popular project.
We have 5,000 people downloading the software on Mac and Windows every day.
So that's quite a lot of people.
And these people they like to share the score on our website.
So we have a big database of scores made by the community.
And these scores are in an editable format, which is something pretty unique.
Meaning if someone made it for piano and you want to play it with a trumpet,
you can get the score, open it in Muse score and then edit it to sound like a trumpet and be more sweetable for you.
Or you can make it easier for you.
Your students, for example, to play a certain song they really want to play.
Is that creative common stuff then?
Most of the thing is composition and people can choose how they put the license.
So we support public domain, creative common zero, several creative common flavor and also all right reserved.
So there is all kind of content on there.
Regarding this particularly, in particular since you asked me about public domain and creative commons,
we are working on a project to digitize and I mean really digitize scores,
which are currently only in PDF.
There is a big website called eimslp.org, which contains I think six million pages of scores of music,
but only in PDF.
And with the PDF, well you can't listen to it, you can't loop it, you can't learn it,
you can't click on the note and see which note it is.
So we want to digitize this with the help of our community.
So we will launch a campaign in order to digitize scores.
We call this project open score and there will be a talk here about this.
Okay, so you are going to have a talk, are you launching this? Is that site already available?
No, it's not yet available, it will be available in probably in April.
I guess you will learn about it.
We will try to make a lot of noise about it of course, so.
Badoomch.
Anything else that happened last year and coming up this year?
One thing and the reason is that we were part of Google SmoothCode last year.
I feel it's a cool project, I know it's by Google, but I like it a lot.
We are very small community of developers.
We are four core developers and then a couple of tens of people trying to help us.
And the Google SmoothCode project has also bring a lot of students that help the development.
So yeah, it's a cool stuff.
What we come next is the version 2.1 of Musco.
And we are working on a big release, Musco 3, but that will be for next year somewhere, hopefully, or in two years.
But it will have a lot more nice features.
And one of the, that is, that people expect a lot is anti-collision.
What's that?
Anti-collision is the fact that when you enter a particular marking on the score, it doesn't collide with other elements.
Okay, very good.
Thank you very much for taking the time to get the code to recover.
No, I'm fine, thank you.
It was great to be interviewed by you, so thank you very much.
No problem.
Hi, I'm at the Matrix booth and I'm talking to.
Matthew Hodson, I'm the tech co-founder of Matrix.
So tell us what is Matrix?
So Matrix is an open-standard for interoperable, decentralized communication.
So the idea is to try to provide a neutral fabric for communication on the web, which links together all of the different silos out there today, which can't talk to one another.
So that's making WhatsApp, talk to Skype, talk to Facebook, talk to IRC, talk to XMPP, talk to the PSTN and everything in between.
And Matrix does this?
It does most of it.
So we've got bridges today through to IRC on free node, Missilla Network and a whole bunch of others.
Plus you can run your own IRC bridges too.
We have Slack, Getter, Telegram, the community of contributed, iMessage and Facebook Messenger.
So the dream is really coming true.
So I could use any of these clients to communicate with the other ones.
There's got to be a star next to that.
Yeah, there's a little catch.
The moment a lot of the bridges are focused on group chats and rooms.
So the idea is that if you have a community which has ended up split between IRC and Slack and Getter, which is a combination we're seeing way too often, unfortunately at the moment, then on the Matrix side you can create a Matrix room and bridge that into the other three ones.
So the people on IRC will be able to see and talk to the people, et cetera, and link it all together.
And for a one-to-one conversation, that is also supported, for instance, for IRC private messages going through to Matrix and direct messages.
And in theory, you should be able to go all the way through from a private message on say IRC to a private message on Telegram.
And we're just getting to the point of worrying that in now.
But it's still, honestly, in development. Patches are very welcome.
Oh, cool. And so I come up with a new service like WhatsApp or something.
How would you go about integrating that?
So there are basically three components in the Matrix ecosystem.
You have servers, or home servers, which store all of your conversation history, and they're kind of like a mail server.
And the cool thing about those, by the way, is that if you're running your own server, and I'm running my own one, the conversation is completely replicated over both.
So no single entity can own or controls that conversation.
It's kind of like get rather than subversional CVS or whatever.
And basically none of the other chat systems do that.
And it's cool because it subversively, aggressively decentralizes everything.
I cannot talk to you without decentralizing ownership of that conversation.
So those are the servers. Then you have clients, which are pretty boring.
Well, not boring, but they're sort of all the typical chat clients. They look like Slack.
They could be a command line thing like WeChat, or they could be a desktop client, like Caternion or Nature.
And then finally, to actually answer your question, you have bridges, which are the application services that link the existing services, like WhatsApp or Skype or whatever, into the rest of Matrix.
And these are basically clients, but on steroids, and that they can impersonate an entire network.
So if you just created a new chat system, like, I don't know why, for instance.
And you wanted to link that into Matrix, then the bridge is actually quite simple, because it just needs to talk to wire, obviously, on one side.
And then it's basically a big cluster of Matrix clients on the other side.
And the Slack bridge, for instance, is 100 lines of code.
And it really is 100 lines of JavaScript for better or worse, built on top of Matrix app service bridge library.
And it's designed to make it really, really easy for people to take their favorite protocol and bridge it into the rest of Matrix.
So I'm been forced to use lots of applications that I don't necessarily want to use.
And I want to use something that comes with a free and open source desktop.
Can I then use Matrix to plug in the gaps?
Absolutely. So that's really the classic use case on the bridge inside of things.
Matrix itself is a protocol, and it's a software foundation that looks after the protocol.
Then there are lots of different apps built on top of it.
Riot is the name of the kind of flagship client at the moment.
And that's available completely open source, completely Apache licensed on desktop, as an electron app on the web, on iOS, as a native iOS app, and on Android, as a native Android app.
Plus it's available on F-Troid, as well as the Google app store, Google Play Store, I should say.
And that's kind of the classic way which many people choose to use Matrix of going and firing up that app, bridging the rooms into Slack or ILC or whatever.
And basically using it as a huge decentralized bouncer, but not just for ILC, but all of your conversations.
So they're liberated, we say, into Matrix, and you can then use the Matrix APIs against your own home server, or someone else's, or you can use the Matrix.org one.
And you basically get control of your conversations again in an open standard set of APIs.
And are we able to log all those and search them?
Yeah, I have my history of that.
You have the history, you have full-text search, and we use Postgres and SQLite as the databases by default on it.
And you can basically regain control at last, and we bust open the walls of the wall gardens, like what's happening, it's going.
So what do I need to run this on?
So the typical server that people use if they're running their own server is Synapse, which is written in Python and Twisted.
And it runs anywhere, really, that you can run Python and Twisted.
And there are Debian deb files published in our repository.
People may RPMs, it's in parts of the BSD ports, processor, ports system, and there are really lots of different packaging and packages of Synapse.
On the client side, it's dead easy, because Riot as a web app is just static HTML and JavaScript, so you just get a toggle, expand it and run it.
And on iOS and Android, it's just in the stores.
So the easiest way to get up and running is probably to use the default matrix.org server to try it out.
And then if you like it, run your own server and have all of your clients connect to that instead.
What did run on a Raspberry Pi?
It does run on a Raspberry Pi 2 and 3.
Well, there you go. I think I'm going to terminate this conversation and go try it now.
No, I want more interviews to do.
But what has been the cool stuff last year and what's the cool stuff next year?
Almost all of last year was putting an end to end encryption, which I haven't mentioned at all yet, actually.
But it's one of the most important things that we have here.
That because the conversation history is replicated over all of those different servers, if it's not encrypted, that's quite a big attack service.
You're trusting a lot of random servers and systems and everybody who participates in the room basically will have a copy of it.
So if you want any privacy, you have to have end to end encryption.
And what we did was to implement a new system called ALM, which is an implementation of the Axelotl, now called the Double Ratchet,
that was invented by OpenWisp Assistance for use of Signal.
And we went and wrote an Apache licensed version of it, NC++11, with MC Rappers on it.
And we got it audited by NCC Group, and we actually paid, well, in part funded by the OpenTech Fund for a public order to prove that,
even though we'd written our own crypto, it didn't suck.
And indeed, they gave us a very good audit.
And that was back in September of last year.
And we started the beta in November.
And since then, we've been gradually rolling it out across, starting with the official matrix client SDKs and Riot, which is built on top of them.
And we're in late beta now.
We just launched a new version this morning for Fosden, especially Riot 0.9.7.
And it was just hard, which includes the latest fixes to the ALM Ratchet there.
And we also created another Ratchet called Megom, which is the Group Conversation One.
So the way it works is that you have every, you encrypt her device, rather than per user, which is pretty cool.
So if you want a black list, a particular device, from receiving all messages you can.
And you set up one-to-one channels to those devices via the classic Axolotl ALM Ratchet.
And then over those channels, you share the Group Encryption session data for the Group Conversations.
So basically, if you have 1,000 people in a room, which would be support for the encrypted chat, then you only need to have one-to-one conversations between all of those 1,000 people to set up the Group Ratchet than everybody respectively shares.
Which is a big, obviously.
So that's a Group Ratchet.
So a Group Ratchet is one where I basically have a Ratchet, which encrypts the series...
Sorry, what's a Ratchet?
Oh, okay. That's a easy one.
Okay, so a Ratchet is an algorithm that generates the series of keys.
And just like a mechanical Ratchet, it can only go forwards.
So it's kind of useful.
So you can't revert if you get a key later on in the sequence.
You can't use it to attack the previous conversation you didn't have access to.
And a Group Ratchet is one of those accepts its one, which is doing one-to-many rather than one-to-one.
So basically, everybody in the room has one of these Ratchet, and they go and use it to generate the keys for the messages they send.
And they send the message once, and everybody else in the room needs to have a copy of that Ratchet in order to decrypt it.
So the question is, how do you get them a copy of that Ratchet?
Well, that's how you use the normal signal style one-to-one stuff.
So basically, we tried to solve the holy grail of Group asynchronous encrypted one-to-one communications in a manner best of signal or WhatsApp or wire or any of the other systems out there.
And hopefully it works.
There are still a couple of bugs in the beta right now.
Sometimes you can't decrypt messages about 2% of the time, but we're working on it, and it's generally pretty good.
Excellent stuff to gosh, that's a lot.
Sorry.
No, I'm sorry.
There is no way you can do this in your spare time.
Yeah, correct.
It's a huge initiative because we're creating a whole ecosystem of interoperable communication.
Our history is originally that we were doing proprietary commercial messaging apps for telecoms companies, and we did that for about 10 years.
And honestly, it got a bit depressing because why is an end user would you install another messaging app that's a silo from a your phone operator of all people.
So we basically had a choice to either quit or try to do something crazy like Matrix, and we went to our corporate overlords and said, hey, crazy idea.
Why did we go open source, nonprofit and build Matrix?
And they said, well, okay then, that was two years ago.
So we're basically being paid as an existing team of about 16 people to go completely off-message, create Matrix, try to terraform a whole new industry.
And if it exists and it works, it's kind of like the web.
No, the actual standard is open and completely flexible for anybody.
And it still means that big companies can go and provide hosted services and they can provide carrier grade deployments or whatever.
And it kind of works both for the end user and for the big companies.
And hopefully everybody wins.
Who is the big corporate overlord then?
Corporate overlord is a company called Amdox, who do billing solutions for telcos primarily.
And they're 35 years old as of last week.
And this is the first time they've done open source.
But so far it's been a cautiously positive success.
Oh, fair, fucks to them really.
Oh, well done.
So yeah, I mean, that's basically why Matrix is out in the coming year.
We're getting to the point where we're starting to see spam on the networks.
Then you know you're becoming popular.
Oh, yes, yeah, indeed.
We welcomed our first spam in a couple of weeks ago in a variant.
We didn't welcome them particularly with open arms.
But it really becomes shows how relevant it is that we need to solve the decentralized reputation problem for spam.
And that is basically the same as solving spam for SMTP.
But the good news is that we're making up our own protocols.
So we can hopefully engineer it in a much better way than email ever could.
But that's going to be a huge focus in the coming year.
That and threading because we don't yet have threaded conversations.
And that's really important for bridging to email into message boards and to forums.
You can bridge to email as well.
We can, but it sucks.
Because without threading you just get this big long.
So we really have to get threading in there.
Whatever things are on the horizon.
There's so much stuff going on at the moment.
Whole new server implementation.
So we're moving away from Python to go along.
So we're just putting the first touches to the first build of dendrite,
which is the name of the go-line server.
And this is a highly scalable horizontally scalable server that uses a pen-donny log-up based architecture.
So you have lots of different components for different rooms and different presents and all the other different sync receiving messages federating.
They're all split off into their own separate servers.
And they're all glued together by a big decentralized message bus internally.
So they can cluster as much as you like, which is very different to synapse,
which is a single monolithic blob of Python basically.
So that's going to be fun.
Well, you're going to be busy.
Oh, yeah.
This year is going to be kind of a make-all break for us.
If we can fix the spam problem and the scalability stuff.
And there's no reason why I can't just explode and replace the phone network,
which is basically what we were aiming for.
Okay, awesome.
Listen, thank you very much for taking the time.
And I really hope you wish a good luck with the fast-term and the coming year.
Thank you very much.
It's been great to share.
No problem.
You've been listening to Hecopublic Radio at HecopublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hecopublic Radio was founded by the digital dog pound and the infonomicon computer club.
And it's part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly.
Leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released under Creative Commons,
Attribution, share a like, 3.0 license.
