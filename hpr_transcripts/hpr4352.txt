Episode: 4352
Title: HPR4352: Why grandma, what large language models you have.
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr4352/hpr4352.mp3
Transcribed: 2025-10-25 23:29:58

---

This is Hacker Public Radio Episode 4352, for Tuesday 8 April 2025.
Today's show is entitled, Why Grandma, What Large Language Models You Have.
It is hosted by some guy on the internet, and is about 10 minutes long.
It carries an explicit flag.
This summary is Eskody Talks about Large Language Models and Digitification.
Welcome everybody, let's talk about the large language model.
Now these are just my opinions.
I'm not trying to influence anybody to think as I do a subscribe to my way of thinking.
However, I think this may be of interest to hackers.
So I've been seeing a lot of discussion lately about language models and
more specifically the use of language models in development.
So very influential podcasters and some writers are discussing the use of language models
and how they can, and I hesitate to say this part, but turn it.
Even you want into a software developer.
I know you've heard it.
People that we all would recognize the name of, you know, some individuals who created
distributions and things out there have discussed using language models and hear them
mention things, they're, oh yeah, I don't know much about that language.
And I used them LLM to just create some apps in that language, but the dirty little secret
that they're kind of what I want to say to the dirty little secret, but like the hidden
F statement is if you are not a senior software developer with multiple languages and concepts
underneath your belt, that is you're not going to have the same competency with this stuff.
So sure, you might generate something and it may compile, but in no way does this make you
a software developer, you know, you're not, you're not going to be putting your resume
rust developer because you manage to use a language model or whatever to gin up some
single purpose app, right?
And matter of fact, since I use rust, you know, the language that's always being bandied about
is being safe, right? You know, they just throw that around as though the language itself is safe
by default, right? Like it's just safe.
The reality is you can take any tool and use it in a positive way or a negative way.
The language itself is not just safe, just, you know, just because, you know, how people like to flex
about it on the internet, but whatever, we're not going to go that direction. So you're going to have
a bunch of normies, you know, random folks out in the office who, you know, they can't even tell you
what browser you're using half the time, right? They'll call anything chrome and to be honest,
what you're most of it is, right? Is it some fork of chrome?
Yet you'll equip them with the tool that leads them to believing that they're developing software.
And now from these influential individuals that I was kind of listening to earlier today that drove
me here, they were talking about things like creating single purpose apps to, I don't know, scratch
your own it, right? One of the examples were they wanted to download some things off of the internet.
So rather than trying to go through it manually, this individual loaded up a language model,
told it what he wanted to do, and it created a single person's single purpose piece of software
to pull down the packages for. Jobs are good, right? Well, here's where I have the problem,
because we're not encouraging people to not do terrible things, right? The internet is already
suffering from something called inshitification. Not my term, by the way, episode will be marked
explicit because of that, but rather than influence better behaviors, you know, because I mean,
the thing that this individual was talking about, there were multiple episodes, but there was
like no, I want you to imagine seasons of a podcast, right? There are four seasons of this podcast.
This individual just discovered the podcast, they're on the fourth season, and they want to go back
and download, like say the first two seasons, so that they can go through it and enjoy it from the
beginning. Well, there is no download season one button, which would solve a lot of the problem,
right? So instead of just having downloads season one or season two or previous seasons, whatever,
you know, big old tarball or get the, what do we call the thing? Tour, magnet, any of that? No.
You use inshitification to make it just this process, where someone has to feel like, oh, okay,
now I'm just going to have to go out here, clear a rain forest. We're going to have to ship some
GPUs from one country to another, then across that country to the location, hook them all up,
you know, Yadia, you know the carbon footprint deal, right? You know, wrap that foot,
print up through the roof, just so you can use this general purpose language model to reverse
engineer shitification. Now tell me, where in the world does any of that make sense? It makes
no sense at all. You're not making anything better. You're not equipping anyone with any tools.
This, this reminds me of that same situation you get, where the, you'll have your project manager
coming there, right? And they'll tell you, hey, we got a great idea. And we, we need you to develop
them to just come up with some proof of concept, right? But you know how that is, don't you? They got
hidden if statement in that as well, right? The hidden if statement is if it works, it's production.
So you go ahead and whip up this quick and dirty example that they want, you know,
something that'll just show them that, oh, okay, that was my chair, by the way, my chair's
to grow. You whip up this quick and dirty thing here. And they go, great, this is master or main,
you know, whatever. This is main because I like four letters versus six. You now go ahead and
start working on a future. And no, we don't have time to clean it up. You just need to go ahead and
get these other features we have in mind cooked up. You know, yeah, go ahead and start building on
this trash you gave us. So we don't, we don't devote any energy to doing things appropriately
from the beginning, right? Could we know how users want to use the product, the internet, right?
We want to share the information, right? We don't try to improve that. No, we'll make that the
worst experience you could possibly have. Then turn around and tell you that the LLM is the solution.
And that's that's only one of the gripes that I have. Now check me if I'm wrong, by the way.
If I'm wrong, enlighten me, film me in. But I also see this other issue where we're going to stick
with software development for a little bit here. And you know what, I'm not even going to stick with
it too long because I'll rant forever. But you have a language, pick one. And that language
is built so that you can issue arguments to the computer. And then the computer renders a
result of some of some kind. And it's built for accuracy. You the human being skill up by learning
the language and improving your use of it to take advantage of the accuracy built into the language
to get what you need out of the computer. Well, what they've decided to do is take the English
language. Something is super general and bastardized to just no end. I mean, depending, depending on
what needs, we're just going to use the United States just to be easy here. From coast to coast,
all the slang and all the different backgrounds, because you have to remember, the United States is a
mixing bowl of all sorts of backgrounds. So you have all of this blended into the language.
The language today is nowhere, well, I can't say that. But it's just not the same as what it used to
be. So many words have mutated because of how it's used. So the definitions of those words have
changed. That means it's, it's mutable. And now you take that and use it as your language to speak
to the computer, because that's what the prompt is. That's what the prompt is. You're now trying to
take this mutable, flexible, gooey language. And it's like silly putty. You're trying to just like
use your index finger and thumb and push it into a straw. And you're hoping to get some kind of
accuracy at the other end. Again, correct me if I'm wrong. Does this not seem like we're going
in a wrong direction? And all the energy spent to do this. I'm not going to go on a preaching
tirade about that. But efficiency wise, we could do better. So we're not asking the people to
level up at all. But we don't want you to be a better human when using the tools. No, no,
we're just going, we're going to, we're going to spend all this energy and trying to just
the insuredification of the internet has just been brought into the tools. Like it is just terrible.
And that, ladies and gentlemen, is why I'm in the internet's HR department waiting on my pink slip.
So I'll catch you guys at the next episode. I'm going to leave it alone before it gets any worse.
You have been listening to Hacker Public Radio at Hacker Public Radio does work. Today's show was
contributed by a HBR listener like yourself. If you ever thought of recording podcasts,
you click on our contribute link to find out how easy it really is. Hosting for HBR has been
kindly provided by an honesthost.com, the internet archive and our syncs.net. On the Sadois
stages, today's show is released under Creative Commons Attribution 4.0 International License.
