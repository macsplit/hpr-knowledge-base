Episode: 462
Title: HPR0462: Talk Geek to me Ep 4
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0462/hpr0462.mp3
Transcribed: 2025-10-07 21:07:13

---

.
.
.
Welcome to episode 03 of Talk Geek to Me, the fourth episode of Talk Geek to Me.
Today on Talk Geek to Me, the feature presentation, the feature segment will be a
software review of Lex, a document editing system, not a word processor, mind you,
but a document production system.
Revisiting Latin American software news with just one feature article,
listener feedback, and of course, closing so long.
So thanks for tuning in to this internet radio.
I haven't called it into that radio in a while, and I hope you enjoy.
.
Let's talk about Lex.
Lex is a document preparation system.
It is not a word processor, although it gives you all the features you expect from a word processor,
without the problems of a word processor.
You see, most word processors are based on emulating typewriters,
but there's a fine approach for people of my generation who started on typewriters,
but allows you approach for people who were born after the typewriter disappeared.
Why are people learning to make documents as if they were using a typewriter
when the typewriter has been used in about two decades?
I speculate force of habit, but the whole idea of the computer is that the computer does the
grant work for you, and you do this stuff people are good at, which is creating.
The reason the typewriter paradigm is flawed is because when you work as if you were
using a typewriter, you are forced to concern yourself with the appearance of the material
on the piece of paper, how things are spaced, the size of the letters,
tab stops, all of that stuff distracts you from writing the document.
For any example, if you start with a typewriter mode,
you start by making a choice of fonts, tab points, font sizes, etc.
With Lex, you use the modern approach, you write, and you tag the things with what they are.
Then choose what it is, and Lex does the grant work for you.
So let's say you were going to write a report, you would stop by writing an introduction,
and then you would choose section to tell Lex you are starting a new section,
they would type introduction, and begin typing paragraphs.
In other words, Lex is not a what you see is what you get system.
Lex is a what you see is what you mean system.
Now you may say that modern word processes can be moved to this style of work,
but the difference is that word processes are based on that old way of doing things,
and what you see is what you mean is a recent addition to them,
whereas Lex is based on a type settings system called latex,
which has been around for 20 years and is proving to work.
Latex, WTF.
Okay, we all know that in the world of Unix and Linux,
that you have a bunch of specialized programs.
Note that this does not mean that there is no latex for MS Windows.
There is, but it's the same thing here, specialized programs.
So text is a type setting program.
Actually one that originally was too much for early PCs of the 80s,
but works fine on them now.
Latex is an extension to text that breaks text out of being a thing for type setters.
It allows things like macro creation and definitions of what different kinds of documents
are worked on in a uniform manner.
So Lex is a front end for latex, that acts to give you a good user interface,
and latex gives direction to text, which is a type setting engine.
Latex then produces PDF files, you know, portable document files,
and its related device independent form, the DVI file.
These can be converted to post script formats for printing.
Of course, the fun doesn't end there.
Since Lex is already programmed to call other programs,
it can call a variety of programs to create a variety of formats.
By installing programs with it, you extend the functionality.
You can use programs to import and export HTML webpages,
create Linux documents, stuff like manpages, etc.
Use RCS, which is revision control system,
dark book format, as well as the WV suite for converting Microsoft formats.
If you add one of these programs after installation,
you select the reconfigure item from the tools menu,
and Lex automatically detects the software,
and sets itself up to use it.
Of course, this is all in addition to being able to add classes of documents to it.
Some moderated journals have their own class for electronic submission,
as well as some universities having their own class for thesis submission.
They may ask, you know, what is using Lex like?
Well, using Lex is a breeze.
It has dropped down menus like any modern program,
so you start typing, only you tell it what things are as you go along.
So I typically use the article document class.
There's also the book, the report, and the letter classes,
and you can import more if you need more.
So I would sort like anything else.
I would go to the file menu and choose new.
Then I would choose Save As with the blank document.
But that's me.
I like to click the Save icon later, and no words going to go.
Then I begin typing.
If I type a title, I use a pull down menu and choose title.
If something is a section start, I use a pull down menu
and lock something as section.
Lex does the work rest.
Numbering the sections, using uniform fonts and headers,
consistent styles for everything else.
When I want, I click the PDF icon, and it launches KPDF,
which is the KDE PDF viewer, and shows me what it would look like.
When I'm ready to wrap up, I go through a typical click the spell checking icon
and go over the spelling.
It is, of course, multi-tabbed.
And there are other functions I barely use.
But I know they will work when needed.
The only other things you need to know about Lex for the purpose of this review
is that it's available in all major repositories,
as well as having installs for Windows, Mac, and OS2.
It's a GPL program that's also available in the source.
It operates in 26 languages.
The Windows page has specific set up instructions for 10 languages.
Full support for languages that operate right to left.
Web page URL will be in the notes,
as well as one for a Wikipedia article.
But the URL for the Lex project is easy enough to spell out for the podcast.
It's www.lyx.org slash capital H home, H-O-M-B.
Okay, continuing our experimental segment,
Open Source News from Latin America.
Now, this is like my third retake of this,
but there's one that's really long,
and I want to make sure I read this one to you,
because I think it's interesting.
You might think it's like an anti-American,
but it's really about money.
It's really about financial involvement and public education.
Of course, I'm reading this stuff from a news website called
news.northxsouth.com,
which is great if you want to see the other stories there.
There's plenty of interesting content,
but this one is really good.
All right, April 30th, 2009.
Open Source Index reveals more than just usage stats,
the sad case of technology education in the United States,
filed under Brazil,
digital rights, and free software.
The Open Source Index is a collection of rankings
based on research at Georgia Tech.
Recently, Red Hat made the findings available via an online web application.
It might be obvious that Spain and France
rank higher than Brazil, rank number three,
and government adoption of free software,
but the rankings show that large governments
who could be doing amazing programs,
likely United States, which ranks 28,
are being beaten out by developing nations like Venezuela,
Peru, South Africa, Indonesia, Vietnam,
and even Costa Rica, whose population is only 4 million.
A lot have blogged about this web app from Red Hat,
but perhaps the OSI data could be used
as a technology policy corruption index,
when combined with lobbying data for companies like Microsoft.
After all, when was the last time an impoverished kid
who would benefit from free software,
wine, and dined a US senator?
The real world impact of technology policy failures
in the US using an example from a public education system
to illustrate what it means to be left in Brazil's dust
on technology education policy.
You can go to Adam's Memorial Middle School's
computer lab homepage, graciously hosted by tripod,
and you'll get a pop-up ad when you click to enter the site.
We got a scantily clad woman slung a weight-law scam.
What will you get?
Venturing further inside, there were three amusing Google AdWords ads,
online high school, home schooling, and strat-foot private school.
Meanwhile, their technology strategy includes
upgrading word processing programs to Microsoft's Word,
sometime in fiscal year 2008,
and standardizing on district-wide word processing
to two tiers of Office 2007.
When one takes a look at their technology plant financial worksheet,
one can see that an astounding $50,000 is allocated
to this standardizing on district-wide word processing
to two tiers of Office 2007 task.
How can upgrading a word processing program take so much money away
from this school's technology budget?
Meanwhile, the Brazilian government supports
the Brazilian version of open office,
and has already installed 40,000 copies at 2,000 schools
in the state of Parana for nothing in software fees.
Nationally, Brazil is building 53,000 computer labs
that will serve 52 million students using entirely free software.
According to the World Bank, the U.S. is the fourth richest country
in the world compared to Brazil's ranking of 66.
Now, we don't mean to pick on the Adam's Chessiah
Regional School District in Massachusetts.
They honestly were just the first public school
to come up in a Google search, and we don't really know anything
outside of what we've learned via online searches.
They seem to be relatively better off than many parts of the country,
but that's kind of the point.
One can take any public school in the U.S.
and see what the policy of proprietary knowledge
and close technology has wrought.
That said, there is a glimmer of hope,
in one of the line items of their technology strategy document,
is investigate new software that would actually be used
to enrich, extend, supplement the curriculum.
We would argue this school district
and all the public school systems
who are finding the well-known bell to provide quality education
to U.S. students to investigate new software
that could provide a more coherent, cutting edge,
technology education at lower costs,
with the help of free software movement.
For more information on the impact of technology policy
on U.S. education policy,
you can also see it refers to another public website.
I only wanted to feature that one item
from Latin American software news,
because I thought it was so explosive.
Well, a software view alone
is a scant material for a talk geek to me episode.
I thought it would be a good time to interject
a few updates to prior podcasts I've done
for Hacka Public Radio.
I've noticed by looking at my statistics pages
that a lot of people just listen
and don't read the accompanying scripts or articles
that I put up on the web pages,
which is absolutely fine,
but in order to have a sense of completeness,
it behooves me to give short updates
so I can explain what I found out since.
And one thing that I want to talk about is
I did an episode called Hacka Public Radio No. 71,
Baal Wolf Cluster Introduction,
where I talked about the Baal Wolf Cluster.
Put one together,
and if you recall,
the Baal Wolf Cluster is a simple architecture
where you take a couple of machines and boxes
and you put them to work for a main computer.
They have their own network
to pass the work along that,
so you don't get interference
from your regular network on the head node.
You know, Dan, another HPR podcaster,
as well as having his own show,
Linux Linux link tech show,
and very good show, by the way.
Email me, you know,
how did you set this up?
Without, you know,
it's on the standard message-passing interface.
These things are normally used
for people who have big computational needs.
I mean, computational needs that go beyond multi-core work
to give you a concept,
millions and millions of calculations.
Let's say you were doing something heavy, like,
mathematically simulating a nuclear bomb blast.
You would have to create three-dimensional grid of areas
and update them for like every tenth of a second
as to what the pressure changes
and heat changes were
from the original blast
and update all these grid items.
These calculations can run for hours,
more than hours sometimes.
And another thing that,
that real heavy-duty,
bailable users uses for us is meteorology,
where each section,
each area is a cell,
and the weather in that area depends
on what the other cells are doing.
So you have always complicated calculations
that feed into each other,
and so you have this standard suite of programs
called MPI that,
that give messages back and forth
from the processes across different nodes.
The way I got around this was that I chose a ridiculously
serializable task of taking multiple
animals and converting them from the AVI format
to the Fiora format.
So there's no need for the processes
to communicate with each other whatsoever.
And it was a good thing to have.
I got that task done over a whole series
and a third of the time was great.
But it's not something I used every day.
There was a maintenance requirement
to keep the software updated
and so forth and so on.
It stopped working at one point and never fixed it.
Some things to note is that
what we're talking about with a bailable cluster
is we're talking about performance computing.
Technology changes so fast
that a computer purchased
a year or so,
or maybe two years down the road,
may be faster than a small cluster.
So if you really want to be on top of the gain
in having your own cluster,
the thing to do would be to have like three cases
and buy a close-up motherboard every year
and be constantly rotating
the motherboard and the oldest one
and updating your system that way.
Because in three years,
your hardware can be replaced
by a multiple process
that just has more cores,
faster CPU cycles, whatever.
So that's a lot of work
to do something just for geek cred,
as they say.
The other thing is,
and some people,
and I thought I was like this,
and actually I received a message
that I could take old computers
and just string them together
and make one big computing cluster.
The thing with that is that
because of the advances in speed and technology,
it's that every generation of processor
gets more cycles,
more compute cycles,
for less wattage.
In other words,
this is not a green project.
You know, you're throwing electric down the tubes
when a new board can do
what a couple of your old nodes did.
Also, you know,
please note that
my rental situation is
utilities included.
I don't have to pay for my own electric,
so I don't even know
what it was paying for electric
when I had three nodes going.
I'm grateful for that situation
that I'm spared that expense.
I had to bring it up today
on the mail with cluster situation.
Now, the other one was
become one of the most popular web pages
and podcasts I've done in the past
has been a running Linux on compact flash.
If you want a quick synopsis
that I took a compact flash card
bought a reader
experienced a three-time speed increase
on loading software
than using disk drives.
Some things came about
as a result of this
that I know with interest.
And one is that all of a sudden
yeah, I got my software into memory faster.
Now, what about the data?
You know, because all of a sudden
you're ripping an MP3
or you're making awgs out of a CD that you have.
Hitting the disk drive
was like hitting a brick wall.
It was horrible.
You know, not of that,
but on my window manager
I have the CPU status monitor
and the weight cycles
I have set to come in white.
It was minuscule.
You know, minuscule
is just one big white block of weight cycles.
It's ugly.
So I eventually had to get
RAID splitting the work
of the disk storage
is in between two devices
just to keep up
with the speed of the CPU.
One to do three disk drives for RAID
found out that my case only supports two disk drives.
Well, that was a surprise.
You know, that's something about these projects
it's important to note is
when you get geek here and geek here
and do weirder and weirder
and more non-standard things
you're going to find out
these little surprises down the road.
Found out that I needed to do RAID
and RAID is a good system.
I probably should do an episode
just on RAID.
But basically what you're doing is
splitting disk storage between two disk drives.
So each of the disk drives
gets half the rights
at one half the speed
and because RAM is like
an order of magnitude faster
or maybe even two orders of magnitude faster,
then the disk drive
you just get a doubles
and everything just goes twice as fast.
And with the RAID array of two disks
I'm very, very happy.
And I'll down the road
I'll do a RAID episode.
So, but that's it, you know,
I had computers working fast.
I had a speed up
loading the software
and then I ended up having to do something about this speed.
So that's one thing.
The other thing is
that I had the home directory
on the compact flash drive.
And I was surprised to find out
exactly how many programs
expect to be able
to use your home directory
for temporary files.
You know, I was expected everything
should go to the
slash temp hierarchy.
So I found like Firefox
had 2K,
and I took two profiles
of Firefox running.
So I had all these images
from every web page
being written there
until I would overflow
my compact flash drive.
So I eventually solved this problem
by using soft links
and pointing to my regular radar array.
So I would have to go in there
and find out what link,
what directory Firefox
would be expecting to dump all this stuff in.
Make a soft link
to something in my real home
directory on the disk drives.
My small compact flash drive
would fill up
with random images.
Also,
quick shows,
but with the K, K, D,
and a slideshow program
likes to put its
lead files
on the home directory too.
Had to move that also.
So you have a small drive,
you have this overflowing problem.
And also, eventually,
I had exhausted
my searches for
lightweight alternatives
and I found the really heavy
clunk of programs
with full features
that I want to use
in addition to my
array of lightweight applications.
So then my software
program expanded
until I began using
the squash file system
to compress it down
to fit on the compact flash drive.
Now, the squash file system
is a compressed file system.
I got another speed boost
just for using that.
It was actually faster
to pull a compressed block
or a compressed directory
off the compact flash drive,
the user hierarchy
therein,
and decompress it
rather than have all the
small files on that drive.
That really surprised me.
But that also leads me to think
that since
RAM is an order of
is a one or two orders of magnitude
which is 10 to 100 times faster than
disk style devices
that may be the solution
to my speed demon desires
might be to create a
pressed file system
with my user directory.
And just copying that
into a blown out,
you know,
exploring out the memory
on my motherboard
and copying that into
a RAM disk
and accessing all my software
there.
That might be the next step.
But so you're going to have
surprises, I want you to know
you're going to have
as if you emulate that experiment
that you're going to have overflows
beyond the lookout for it.
And that concludes these updates
to prior, prior
HPR episodes.
Hey, it looks like it's time to wrap things up
for episode 03 for talk geek to me.
I neglected to give my
contact information closing out
the last show.
So, email. You can always email me
any kind of feedback you want.
Love getting listener email.
It's really encouraging.
Help keep me going.
My email address is DG
at deepgeek.us
that's DeltaGolf
at DeltaEcoEcoPapa.
GolfEcoEcoKilo.uniformCR.
I also maintain a
small email list of people who would
like to get notified of new episodes
by email.
Drop me an email, let me know you want to be on it.
I'll be glad to put you on it.
And I always love getting email.
So, please feel free.
The website, of course, is talkgeektoMe.us
and my personal website
where you'll find my
all my personal episodes
of the other show I'm a part of
Hacker Public Radio.
Mirrored is deepgeek.us
and today's closing music
will be a piece by a group called
Sevesh called Consciousness.
And it is of course
from those wonderful guys at
Potsafe Audio, letting us promote
all these independent artists.
So, enjoy.
And thanks again for listening.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you for listening to Hacker Public Radio.
HPR is sponsored by
caro.net.
So, head on over to
C-A-R-O.N-E-T for all of those meetings.
Thank you.
