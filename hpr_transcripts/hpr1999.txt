Episode: 1999
Title: HPR1999: How I record a full band under Linux
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1999/hpr1999.mp3
Transcribed: 2025-10-18 13:04:30

---

This is HPR Episode 1999 entitled, How I Record a Full Band under Linux.
It is hosted by first-time post-no place like Sashthom and is about 20 minutes long.
The summary is, How are you harder, like audio, and a persona center face to record an entire
band practice?
This episode of HPR is brought to you by an honesthost.com.
At 15% discount on all shared hosting with the offer code, HPR15, that's HPR15.
Better web hosting that's honest and fair at An Honesthost.com.
Hi, I'm Nathan.
This is my first ever broadcast here on Hacker Public Radio.
I found you guys a couple of weeks ago and I found something really special, I think.
Something very open-source in nature.
I've been a Linux user for maybe four, almost five years and almost exclusively non-windows.
I want to talk to you guys about how I've been recording and mixing my entire band under
Linux.
We were using a Mac previously, but now we're running Arch.
It's a little bit about myself.
Like I said, I've been a Linux user for a long time.
I like to make stuff as most hackers do, experienced with some Arduino, some more basic electronics.
Just the good old hacker stuff, you know?
Other than that, I'm a musician, so that's why you get this talk.
I discovered Linux, good while back, when I was given a Pentium 4 machine with Windows
XP and got bored of it, I needed to find something else to do, so that's what happened.
Discovered Linux and haven't looked back.
Today's show isn't really about me, it's about what I'm doing.
So my band is a six-piece band and we have bass, keyboard, drums, guitar and one vocalist
and one background vocalist, which is me.
I came a little late into the picture, so they already had a Mac already set up with the
recording environment, but it was also being used for the keyboard player to manage
your sounds.
So we ended up looking at using the recording system with my laptop.
Only my laptop isn't a Windows laptop or a Mac laptop, so Linux laptop.
So we had to find out how to best we can undertake this project.
So what ended up happening was I ended up doing a couple of weeks worth of research on
how I can do this and I will report my findings in this talk.
First things first, we have to find a way to get the audio into the laptop.
And really what we need for that is some type of an audio interface, basically an external
sound card.
Fortunately, we already had one in the form of a Presona Studio Live 16.4.2, which is
a mixer and a audio interface.
16 inputs, so we can have 16 microphones or whatever kind of audio we want.
And it's FireWire.
My laptop doesn't have FireWire, so I ended up going to Amazon and purchasing a compatible
express card to be able to plug it in.
And surprise, it worked on the first try.
You have to install the FF Auto FireWire audio drivers, but that's just one command
and you're done.
As far as the gear we use the Presonus for pretty much everything, it is our recording
interface, but also provides our monitor mixes, which our speakers pointed towards the musicians
so that they can hear themselves in the other musicians as far as to be able to play together.
We also run the keyboard through there because she does not have any kind of an amplifier
or anything.
As far as the drums go, they're really the trickiest instrument to mic up, just because
they have so many elements.
We have an ODEX branded microphone kit, which comes with seven microphones, two a pair
of overhead microphones, which are stereo, and then one microphone for the bass drum,
one for the snare drum, three for the Tom microphones, and all the required mounting
hardware.
As far as the vocals, we use Sennheiser E935s, which are dynamic handheld microphones,
and just really good rugged microphones for the human voice.
As far as bass and keyboard, they are plugged directly in.
The bass player does have a amplifier in the room, but for recording purposes, we plug
him directly into our interface.
The guitar, until a couple of weeks ago, was not miced up, but plugged directly in.
However, now we have a, sure, SM57 microphone to capture his sounds.
And all this is going straight into my Linux rig.
We have somewhat of an interesting situation, just because we're not really recording
this to be released, we're recording it to judge the quality of our music and just
have something to show our friends and to judge how far we're coming along in our practice.
So we didn't want to do a typical recording studio environment.
You would maybe start with the drums and build up all the other pieces one by one, so
that you have isolation, and so that each player can have a perfect take.
We wanted more of a live thing going on, so we chose to play all at the same time, which
is why we need 16 inputs to capture everything.
Our room is not that big, however.
It's maybe 16 feet by 16 feet, maybe even smaller, but we have the drums sort of boxed
off behind a plastic cage to keep the sound down, which is really a big problem with
a full rock band in a small room.
As far as the recording side goes into my, once it hits the mixer, it's straight into
the laptop, all 16 channels of audio.
And just sort of as a side note, my machine is a sort of an older Dell latitude for gig
of RAM with NNI-5, and it's running Arch Linux kernel 4.4 64 bit.
It's not the most amazing machine ever, but it can handle all this stuff from recording
to mixing and editing.
And when you're dealing with Linux, generally you see two different audio systems, pulse
and ALSA, which is the advanced Linux sound architecture.
But most of those are for simpler audio cases where you just want to plug in and listen
to your YouTube or whatever your hacker public radio.
And they're not really built to handle all these sounds coming in.
So the system that you use is called Jack, Jack Connection Kit, and it's based around
ALSA and uses ALSA, but it's professional grade routing.
And the beauty about the open source environment is that it is a standard, and all the different
applications can speak to each other through it as opposed to on the Mac or on the windows
side of things.
None of the applications can talk to each other because they're all pieces of proprietary
software.
So this is actually a really big advantage that one of the things I'm going to talk about
later is virtual guitar sounds.
And those can be fed directly back into your recording software or out to your headphones
or to a set of speakers.
And so yes, this is called Jack Audio, and it's available in pretty much every repo for
any distro.
It, however, is just a command line tool basically.
And so you need to install a few other packages to really make it easy to deal with.
QJack, C-T-L, and Pathage.
The QJack, C-T-L, is for configuring your devices and you're setting up your sound card
in your sample rate and all those kind of things, all the different settings.
Pathage is for controlling your signal routing.
It is a little interface that shows all your open applications that use Jack Audio.
You can just drag connections between the two applications so that your, and then audio
just, it just works.
Amazing.
As far as the software we use to record live, we are using Arter, which is pretty much the
only piece of software available under Linux that does this.
It is open source, and they recommend a donation, but it's in most distros repositories, and
we're on version 4.7.
We just arm the tracks and hit record, record our pieces, and then we mix them down later.
We do all the mixing in Arter as well.
It is a pretty simple environment, but it has all the big features that you would see
in a Pro Tools or Appal-Logic or any of those big name dolls.
It's really an amazing piece of free open source software, and it's really one of my favorite
pieces of software on my whole Linux box.
However, one of the things about it on a default installation, you don't have a whole lot
of options for signal processing.
By default, pretty much all you can do is change the volume levels of your tracks and pan
them left or right.
There is some automation of any control, which basically means you can change the volume
level or really any setting during the course of the song.
But other than that, it doesn't come with a whole lot of features.
Most dolls come with plugins, they're called, to edit the sounds and make them sound different
or better.
These have to be installed separately, and I'm going to talk to you guys about a few
of my favorite ones.
The ones that get up the most use in my studio are the Calf Studio Gears plugins.
They are a complete set free software plugin bundle, and they're based on the LV2 API,
which means that they have a nice, pretty user interface, and they just work.
They're in the arch repositories, and there may be 35 different plugins ranging from compressors,
equalizers, reverbs, and I'll talk a little bit more about what all those things do in
a little bit.
The Calf Studio Gear is my favorite, but there's also the Envada plugins, RDFX, and those
get a lot of use in my studio too.
As far as the actual processing I do, my two most important tools are a compressor and
an equalizer.
A compressor basically limits the volume, so you set a ratio, and for every, you pick
a ratio like 2 to 1 or 3 to 1, and for every 3 decibels a sound gets above a given threshold,
it is only increased by one decibel, for example, in a 3 to 1 compression ratio, so you
can actually push the level of the sound harder and reduce the dynamics of it, so that you
can actually get a louder sound out of a sound source or more predictability, and I use
that on just about everything, as well as an equalizer, which lets you adjust the frequencies
of various, of any audio, it lets you cut out the bass or reduce the treble or whatever
sounds the best to your ears.
Another piece of software that I would really recommend to anybody who plays around with
the guitar is GuitarX.
Also another piece of open source software, it is a virtual guitar amplifier with speaker
emulation, tube emulation, various plugins to allow you to sculpt your guitar tone, and
this is what I was using until we purchased a microphone for the guitar amplifier.
It's really fun to play with, even though I don't play with guitar.
I am pretty much just a singer, but it's still fun to play with and easy to get a cool
tone.
The last thing I do when I dispense my recordings out to the rest of the band members is to
edit and encode.
Just until now, in the process, I've been recording in 24 bit wave files, which are huge.
After a whole session, I might have 12 or 15 gigs of audio, so I chop that down to a high
quality MP3 using Audacity, which I'm sure most of you podcasters are familiar with.
I also use Audacity to cut out anything that is not part of the song that made it into
the recording, such as talking before starting the song or anything that made it into the
recording that just needs to be cut out.
And then I send out the MP3s over email, and it's been a really fun process.
I've actually learned a lot about both about Linux and Linux audio, as well as music.
So I think it's a good thing for a musician to learn how to record themselves versus paying
a whole lot of money to go to a professional studio.
That's pretty much all I have to say on the topic, but it's just a really good hobby
to begin, unless you don't want to spend a lot of money.
But my studio, however, is a little more humble, because we've been practicing in the bass
guitar players in his garage, which is actually built into a full studio.
I only have a two channel interface and a couple of different microphones, a USB microphone,
which is probably what I'll end up doing most of the podcasting under.
However, today I am in a different recording space.
I am at the university, and I am currently speaking to you through a road NT1 microphone
plugged into, unfortunately, a Mac.
I was prepared to use my own microphones and just use this nice soundproof room, but
I realized that my battery was dead once I got to school.
So I'm stuck here on the Mac.
I really enjoy what you guys are doing over at HPR, Acro Public Radio, and I really hope
that I can contribute a bunch of shows, and I've really wanted to get into podcasting,
and I just discovered you guys one day, and it seemed like a perfect fit.
I really enjoyed listening to the past couple of weeks' catalog of shows, and they are
amazing that you can take a group of people from anywhere in the world, and just say, make
a show, and most of them are amazing.
Some of them don't have the best audio quality or the best speaking.
Like mine, I'm working on it, but I'm not the best podcaster yet, and I just think it's
a really cool idea, and I really appreciate the people who founded this.
I think that's all I have to say on the topic, goodbye.
You've been listening to HECK Public Radio at HECK Public Radio dot org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out
how easy it really is.
HECK Public Radio was founded by the digital dog pound and the Infonomicon Computer Club,
and is part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on
the website, or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the creative commons, attribution,
share a like, free dot org license.
