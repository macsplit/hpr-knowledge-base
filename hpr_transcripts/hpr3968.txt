Episode: 3968
Title: HPR3968: About USBimager - part 1/2
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3968/hpr3968.mp3
Transcribed: 2025-10-25 18:06:18

---

This is Hacker Public Radio Episode 3968 for Wednesday the 18th of October 2023.
Today's show is entitled, About USB Immigra Part 1 of 2.
It is hosted by Ray Toe and is about 11 minutes long.
It carries a clean flag.
The summary is, Why You Should Be Using USB Immigra 2 and Introduction.
You are listening to a show from the Reserve Q.
We are airing it now because we had free slots that were not filled.
This is a community project that needs listeners to contribute shows in order to survive.
Please consider recording a show for Hacker Public Radio.
Hi, this is your host, Ray Toe, and this is a show about USB Immigra recorded on 27th of July 23.
The headings I will talk about today, short introduction of image writing software,
other similar software than USB Imature, how I learned about USB Imature, usage of USB Imature.
So, let's get started.
My short introduction of image writing software is really short.
Well, if you have a Raspberry, or Range, or a Rock Pi, a friendly Alec, an OliMix, HardColonel, or Pine64 device,
you will have to flash an SD card sooner or later.
Another scenario, like write the backup of your Raspberry Pi image on a SD card,
an image of your favorite Linux distribution, or true NOS on your memory stick.
Just to name a few, where you may want to need an image writing software.
There are known software like DD, like Delta Delta, but as I will explain in the next section,
there is an important difference between a pure writing software, which may be very helpful in some scenarios,
but in others not.
But before I tell you the difference between DD and the image writing software,
I want to tell you first about other similar software than USB Imature.
Now, depending on your operating system, whether it is Linux, Mac, or Windows,
you have a variety of image writing software to choose from.
I will now bring you some examples for Windows, just for Windows.
There is Rufus.
You find the links in the show notes for this software.
This is a Windows only one, and the link will be for a GitHub.
Rufus is quite well known, and another one is called USB Image Tool.
Again, Windows only.
This is on a German web page, olexpage.de, also the link is in the show note.
And Windows only last update 2017.
Doesn't mean that the software has a problem just because it is 2017.
Maybe there was just nothing to do.
This one you find on Source Forge, I will also put the link in the show notes.
So, these were just for Windows.
Now, about a software that is for multiple operating systems.
Baleena etcher, for example.
It is a large electron program.
Well, all electron programs are basically large, as they bring a browser with them.
I stopped using Baleena etcher a long time ago, which I will explain again in the next section.
And then there is another one I would like to mention that is now Linux only.
And this is a special one.
W-O-E-U-S-P as the ranger among the flashing tools.
It is a bash script, a big bash script.
It is 65 kilobytes in size.
To flash the Windows operating system with Linux on a memory stick.
Not many write image writing software is capable on Linux to flash Windows on a memory stick.
You maybe help somebody from a family or a friend and you have to have Windows on a memory stick.
And then, so W-O-E-U-S-B may be handy in that situation.
That's the reason why I mention it here.
And now we are in the section where I bring the answer to the things I started before.
This is how I learned about USB Imager.
This was around 2020, if I remember correctly, on the OMBN GitHub.
Discussion was started about Baleena etcher, its size and data privacy.
In the begin Baleena etcher, I am helped to solve a lot of problems.
I think I started using it somewhere around 2017, somewhere there.
And one of the reason why is Baleena etcher was one of the only software that does a writing verification.
This is very important because back in the days on OMBN, a lot of or many of the problems in the forum were because of bad written SD cards.
So this is why I mentioned before DD or others.
They would just write an image on it, but they would not have by default writing verification.
So check if every byte that should be there is there and on the right place.
And with the beginning of Baleena etcher, we could reduce a lot of problems with SD card, which brought less requests in the forum.
But then as this discussion started, we opened the thread on the OMBN forum and discussed about other solutions than Baleena etcher.
What is available?
And at that time, people brought in different possibilities.
And one was a USB Imature.
And USB Imature offered the writing and verification of what it was written.
But you would have to set the tick by yourself to make the verification.
Now this was a no-go, it was a must have for OMBN to have the tick set at the beginning.
The standard user should not even think about whether he should set the tick or not, it should be already there.
So one of the guys wrote to the developer of USB Imature if he could make this as a default setting, that the writing verification is activated.
And he did.
And with his next release, which was couple days later, which was brilliant.
And so we started to do some testing.
So just as an idea about how to USB Imature in the description from the main page is written,
USB Imature is a really, really simple GUI application that writes compressed disk images to USB drives and creates backups.
Its interface is as simple as it gets totally bloated free.
There is a more text there, but I think this brings it very well to the point.
It is along with the UNIX philosophy, make each program do one thing well.
So as I said, it has this writing verification activated.
And if you have an USB 3 memory stick, be aware not every USB 3 is fast.
You have to be very careful, which USB 3 you buy, USB 3 can be as slow as USB 2.
But to give you a number, I wrote that at that time, the Ubuntu 20.04, this was 2.3 gigabyte within one minute.
And this included writing verification.
So this meant it wrote pretty fast.
It took about, well, it wrote 38 megabytes per second.
If you have a faster memory stick, maybe even faster.
It's really pretty fast.
Aside from being fast, you have zero load on the CPU.
The program is really nice.
If you go on the GitLab page, you see that the developer has written a PDF manual.
So for those users who read manuals and are interested how to set it up correctly,
or how to use it on a Mac, how to use it on Windows, how to use it on Linux.
And what can I do on the command line?
So you can have a PDF, but you can also just go along with the main page, for example,
which is also very well documented.
So this was then the switch to USB image for me.
It is now also the favorite one for Armbian.
I try to introduce it to DietPie as well.
But, well, this was maybe one and a half years ago.
They were not so keen to go for it because there was something on a Mac.
But I don't have a Mac, so I cannot test it.
So, this was the first part of my introduction of USB image.
In the next part, I will talk about the usage of USB image.
I will share the download as well.
If you like, leave a comment or send me a message.
Have a nice one.
You have been listening to Hacker Public Radio at HackerPublicRadio.org.
Today's show was contributed by a HPR listener like yourself.
If you ever thought of recording podcasts, you click on our contribute link
to find out how easy it really is.
Hosting for HPR has been kindly provided by an honesthost.com,
the internet archive and our sync.net.
On the Sadois status, today's show is released under Creative Commons,
Attribution 4.0 International License.
