Episode: 2305
Title: HPR2305: Configuring an HP Laptop for Dual Boot Linux and Windows 10
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2305/hpr2305.mp3
Transcribed: 2025-10-19 01:03:51

---

This is HBR episode 2,305 entitled,
configuring an HP laptop for dual boot Linux and Windows 10.
It is hosted by first time,
postmongo and is about 11 minutes long
and carrying a clean flag.
The summer is installing Linux Ubuntu
known to dual boot with Windows 10 on an HP laptop.
This episode of HBR is brought to you by AnanasThost.com.
Get 15% discount on all shared hosting
with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at AnanasThost.com.
Hello, this is Mongo.
Today I'm going over how I set up an HP Windows 10 laptop
to dual boot with Ubuntu.
I've been working on switching to the GNU Linux
for most of my computer needs,
but have taken a while to pick a distro.
I first installed distros that sound interesting
into a virtual machine on my Windows desktop.
Top candidates are then installed for real
on an older desktop to give them more of a workout.
I have finally settled on Ubuntu GNOME
as my distro for the foreseeable future
and have been using it for a while on the desktop.
I also had a copy in a virtual machine on my laptop.
Once I was sure about which Linux that I would be using,
I wanted to install it to dual boot with Windows on the laptop.
I went with the 16.04 LTS release.
That way I don't have to mess with it for a couple of years
unless something really cool comes along.
To ensure compatibility before installing it
to the laptops SSD,
I connected a hard drive via USB-3 and installed it there.
I wanted to make sure that Ubuntu GNOME
like my hardware.
I especially wanted to make sure that the Wi-Fi worked
and that it scaled well with the Quad HD high-DPI display.
Everything checked out fine,
so I was ready to take the plunge.
My computer is an HP Spectre X360 13
with Intel Core i7 6500U processor,
a Gigabytes of RAM, a 256 Gigabyte SSD,
and a 13 inch 1440p display.
It is less than two years old,
so it uses UEFI and secure boot
for the installed Windows 10 home operating system.
This affects how you set the computer
to dual boot Windows and Linux.
What I am going to describe worked for me
and should work for most UEFI systems running Windows
but may not work for all systems.
If you are starting with a clean system
or an older computer that uses a legacy BIOS configuration,
the procedure will be different.
The process goes like this.
Backup Windows,
recover some space from the Windows partition for Linux.
Turn off fast startup, turn off secure boot,
and get an image of the SSD just in case.
Install Ubuntu,
restart and see if it works.
First, I wanted to get a good backup.
I logged in as administrator
and did a normal Windows 7 top backup
to a USB connected hard drive.
The backup included a system image.
I already had a rescue USB drive.
Then I opened computer management, selected this management,
and right-click the main Windows partition.
I selected shrink volume and squeezed out 53 gigabytes
of unallocated space for installing Linux.
I had previously cleaned up Windows to make room,
including deleting the VMware image of Ubuntu
that I won't be needing with a dual boot system.
How big you make your Linux drive will depend on
how much space is available
and also your requirements for both Windows and Linux.
Next, turn off fast startup in Windows.
Fast startup is a form of hibernation
that saves the system state after closing all applications
and logging off users
and is owned by default in Windows 10.
It needs to be turned off while configuring the system
for dual boot,
as Linux can't mount the hibernated Windows drive.
This feature was called fast boot in Windows 8.
There are several ways to turn it off in Windows 10.
You can quickly disable all hibernation
with power config from the command line.
To do this, open the command window as administrator
and at the prompt type powercfg.exe
space slash hibernate space OFF and press enter.
Later you can reverse this if you want to
by repeating the command using own instead of off.
If you prefer using the GUI, open the control panel,
select hardware and sound, then power options.
On the left, click choose what the power buttons do.
On the next screen, a few lines down from the top,
click change settings that are currently unavailable.
Next, under shutdown settings, uncheck the box
for turn on fast startup.
You can also turn off the hibernate option here.
If the fast startup option does not appear,
then hibernation is disabled
and so fast startup is already off.
I have read that it is okay to turn fast startup back on
after installing Linux
and I've also read that it's a bad idea,
but I don't know why.
I left it off afterward.
With the SSD, it moves very fast either way.
Also, if you leave it off, you can access
the Windows volume from Linux.
That way you can save files that you need
in both systems in a Windows folder.
You won't be able to get to the Linux folders from Windows.
The system won't boot from a USB drive
with secure boot turned on, so next,
I reboot the PC and go into the BIOS settings.
On the HP, you hit the escape key a few times
right after power turning on the power.
Other systems may use the delete key,
F2 or something else.
In the BIOS, under boot options,
disabled secure boot,
but do not change the system to legacy boot.
It has to stay in UEFI mode
so that Linux will install correctly to boot with Windows.
I was installing from a USB drive,
so I made sure that the USB drive was the first boot option.
If you have an optical drive, you can install from a disk.
I then hit F10 to save the change and restart the machine.
At this point, instead of booting into Ubuntu Live USB drive,
I booted to a clonezilla USB drive
and made an image of the SSD
on the same USB hard drive that received the Windows backup.
A clonezilla is not backup software
that lets you restore individual files,
but it's great for taking a quick snapshot of a drive
or partition just before you do something
that could break your computer.
I have also used it to upgrade a laptop
to a larger M.2 SSD
that I couldn't mount through USB
and use the software that came with the new drive.
With that done, I shut down and switched
the clonezilla drive for the Ubuntu 16.04 Live USB drive.
Next, I powered it on and at the Linux menu selected install,
which you can go to the live version
and install from there, if you like.
You will probably have installed your favorite distro
several times before committing to making a dual boot PC.
Other Linux distros may be a little different
than what I described.
A trial installation to another system
or USB drive will give you a heads up on what to expect.
I am not going over the general installation steps
for the distro that I used.
Just answer the questions normally
as it starts the installation.
When the Ubuntu GNOME installation gets to the page
for installation type, the last option is something else.
I selected that in order to show it where to put Linux.
Here, it displays a table of petitions
similar to G-Parted.
Select the unallocated space stolen from Windows
and click the plus sign below to create a partition.
At this point, if you have definite ideas
about how to partition the drive for Linux,
you can do what you want.
I'm pretty new to Linux, so I went to easy route.
The available space for me was 53 gigabytes.
From the options presented, I made a 50 gigabyte primary
extended for partition with mount point at root.
That's the slash on the drop down menu.
That left three gigabytes unallocated
that I used to create a swap space partition.
I don't know that a swap partition is really necessary
with eight gigabytes of RAM on a laptop
that will never see any major workload,
but I decided to make a small one.
With the partitions created, it now knows
where to put Ubuntu.
Click the button at the bottom of the page to continue.
From here, it is again a normal installation.
When it's done, it says to reboot.
I forgot to pull out the USB stick in time
and ended up killing it with the power button
when it came back to the Linux Live menu.
When I powered it back on,
it came up to the GNU Grub menu in about five seconds.
The options were Ubuntu, advanced options for Ubuntu,
Windows Boot Manager, and System Startup.
I sat and looked at it for a bit,
and after 10 seconds, it automatically booted
into Ubuntu GNOME.
I thought perfect.
On the next boot, I selected Windows.
Nothing had changed here,
except that there was a little less space available.
On the Grub menu, System Setup takes you to the BIOS menu,
so I no longer have to scramble to click Escape in time.
Later on, when I was sure that I was done,
I turned Secure Boot back on.
It doesn't affect the boot process,
except that you can't boot from a USB drive.
I quickly went through setting up Ubuntu GNOME,
mostly like I have my desktop installation,
but I am taking my time deciding which applications
will actually be used on the laptop.
Also, I'm trying out some GNOME extensions
that I haven't used before that look promising.
Now, when I run Ubuntu on the laptop,
it is noticeably faster than when running in a virtual machine.
That's because it is using the entire CPU
with direct access to the graphics processor,
and 8GB of RAM instead of 3.
And I can still boot Windows when I need it.
The switch takes about 30 seconds.
I enjoy listening to Hacker Public Radio,
where I'll often learn something new and interesting,
and sometimes just hear a great story.
Thank you to HPR and its many contributors.
You've been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows,
was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast,
then click on our contribute link to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dove Pound
and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show,
please email the host directly,
leave a comment on the website
or record a follow-up episode yourself.
Unless otherwise status,
today's show is released on the Creative Commons
Attribution ShareLight 3.0 license.
