Episode: 1540
Title: HPR1540: The Journaling File System
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1540/hpr1540.mp3
Transcribed: 2025-10-18 04:47:51

---

You
Okay guys, hey welcome and I hope all are having a great day.
I am continuing my thing on file systems, different ones that I've used, ones that I've found
and things that are going on.
Work we've been having a lot of talk about different file systems and what's going on
and I do a lot of ERP stuff and so much, much talk about BTFRS and XFS and different things
and I just thought I'd do a little research and maybe share some of that research with you.
So we covered XT, the original thing that came in Linux kernel 9.6 and we talked about XT2
and that you know it had originally two terabytes and then was upgraded to 32 terabytes
and that it had lots of things and so the way that you fixed most of the errors in here,
particularly the in node error that XT2 had that was so wrong but that I never had a problem with
but if you read online that there's lots of people that had lots of problems with it.
So the way to get rid of that is with something called a journaling file system.
And journaling file systems provide a new level of safety to the system
instead of writing directly to the storage device when updating the in node table,
journaling file systems write file changes to a temporary file called the journal first.
And after the data is successfully written to the storage device, in node table, the journal entry is deleted.
If the system should crash or suffer a power added before the data can be written to the storage device,
the journaling file system just needs to read through the journal file and process any uncommended data leftover.
There are three different methods of journaling commonly used each with different levels of protection.
The first is a thing called data mode and in data mode both the in node and the file data are journaled.
This offers a low risk of losing data but very poor performance.
And then they have something called the ordered mode.
Only the in node data is written to the journal but not removed until after the file is successfully written.
It's a good compromise between performance and safety.
Then there's something called the write back mode.
Only in node data is written to the journal.
The control over when the file data is written.
It's a higher risk of losing data but is still better than not using journaling.
The limitation, the data mode journaling method by is by far the safest for protecting data but is also the slowest.
All of the data written to the storage device must be written twice, once to the journal and then again to the actual storage device.
This can cause poor performance especially for systems that do a lot of writing.
Over the years a few different journaling file systems have appeared and we'll talk about a lot of those later.
Okay, I hope that you've enjoyed this installment of the different file systems.
If you want to contact me at JWP5 at hotmail.com, thank you very much.
You have been listening to Hacker Public Radio where Hacker Public Radio does our.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR listener like yourself.
If you ever consider recording a podcast, then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the infonomicum computer globe.
HBR is funded by the binary revolution at binref.com.
All binref projects are proudly sponsored by LUNAR pages.
From shared hosting to custom private clouds, go to LUNAR pages.com for all your hosting needs.
Unless otherwise stasis, today's show is released under a creative comments, attribution, share a life, free those own license.
Hacker Public Radio is funded by the digital dog pound and the infonomicum computer globe.
