Episode: 1069
Title: HPR1069: Eric S. Raymond speaks at the Central Phila. LUG
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1069/hpr1069.mp3
Transcribed: 2025-10-17 18:23:58

---

Hello, this is Russ Winder from the Techie Geek Podcast.
Last evening, September 5, 2012, Eric S. Raymond gave a 90-minute talk at the Central Philadelphia
Linux user group.
I'm happy to present that recording to you now.
Enjoy.
It's a nice speaker, Eric Raymond talking about Linux.
Hello, everybody.
Thanks for inviting me on the email list to set a couple hours ago.
They asked me, what's the topic for today Eric?
And my reply was, what's the topic?
Do you show all the days the good things in my disconnected radars?
That's what you're in for.
I don't really, I don't really ever talk with that subject.
I prefer to kind of jam with my audience.
I take questions at any time.
And I may start with something to sort of see the discussion and then just see where the audience wants to take that.
There are a couple of things I thought you might be interested in hearing about that.
One is, before I watch it for this one, I should find out, how many of you read my blog?
Okay, only three people on the audience, so this won't be applicable for too many of you.
One thing I've been thinking about recently is, I was having an IRC discussion with a friend of mine last year.
She was talking about fixing and changing some practices and developing shops you wanted to work.
They were doing custom work where things like hearing aids and other system devices, their special needs to work.
She was interviewing her and she said, she was appalled by the exactly sloppy but rather dated within official practices of the software shop.
She was asking me for advice on how you deal with situations where a vendor is giving you a piece of software and you're expected to write controls up.
They give you a piece of hardware like hearing aids and you're expected to write control software for it.
But the documentation is the kind of documentation that you usually get from vendors, which is to say,
standing in the US and standing to stop exactly where it can get interesting.
She said, what do you do about that situation, other than we'll sort of throw inputs at it and see how it responds.
I said, well, you have to do that, but the important thing you have to do in that situation is to tangle the process of reverse engineering,
the device up, the writing, the production software. If you try to do both things that wants bad things will happen.
There's a specific bad thing that will happen. You'll end up halfway to three corners of the way reverse engineering is placed.
But the fix that you work from it will get the body to encode in your application.
And forever afterwards, be terrified of changing because you won't know when changing it will break some undocumented assumption.
This is not a recipe for happiness. In fact, it's a recipe for brittle body software.
And the way you fix that is by writing down your assumptions about the hardware before you write the code,
as an example of something I would have went back.
A lot of you probably know that I read a project called GPSD, which is all about managing navigation assessors.
One of the kinds of things that we manage are mainly AIS really, especially specialized packet radios that they have on ships that broadcast.
We're not going how fast I'm going there, whether conditions, things like that.
And the standards for AIS are to be the same in these old age.
They're scattered across six different documents written, independent of the standard disease.
And it is known that receivers and transmitters in the field don't be exact when writing the standards.
So before trying to write a script for this thing, I decided on what I was going to do.
What were all the information on that?
About how AIS is supposed to be, and how it actually is.
And I ended up writing a document that you can find on the web code, AIDM, AIDD, a vertical utility,
which is all about what really happens in the real world when you listen to an AIS device.
And I pointed her at this, and I described it as a specification.
But then I realized there's a problem with calling, I think, like this specification.
The problem is if you say specification to a programmer, often they're going to go from that to kind of,
they're going to see me talking about the kind of stupid specification you get in the waterfall model jobs that's completely out of contact with reality.
Whereas the point of a document like this is to be in contact with reality.
So I came up with a better term for it, and this is what I was doing.
I called it a ground-to-truth document.
The difference between a ground-to-truth document and a speculation.
And a specification is that ground-to-truth documents only describe what is.
They talk about the present.
They don't have plants in them.
They don't have wishes in them.
They don't have hopes.
They don't have, this is what may be implemented next week or next year.
They just describe what is worth at all.
This is an invaluable technique when you are a reverse engineer in hardware.
The first thing to do is write a ground-to-truth document.
Once you have that, then you start coding your actual control or monitoring interface.
And of course, you're going to find out more things as you refine the interface.
But the point is you should have a good idea of what that thing is doing that is well separated for many specifications.
Any flow streams or plants before you start writing production code.
Later I find out that there's a term for this in the construction industry.
They talk about the difference between plants and as built documents,
which describe what was actually built.
Not quite the same concept, but close.
There's also a fairly close concept home engineer's notebook,
which if you are a certified engineer in the bottom, you're actually required.
So there's a record in your thoughts and calculations.
That's not like the same either because that's a record of an individual person's thought.
Whereas a ground-to-truth document is about a particular thing that people are analyzing.
And they have multiple produced things.
And late stage is enough and doesn't.
So the first thing I want to say is this is a good practice for you to do,
if you've not already done it.
I'd several people respond on my blog and I'd move with us.
But wow, finally, I have a name for something that I have done before and that was a good idea.
Now under the second level of the instruction, which is culture hacking.
By putting out the term on the concept of a ground-to-truth document
and a different specification,
I gave it programmers a slightly different way to think about their practice.
And I gave it a way to advocate doing the kind of clean practice that is clear
that they couldn't really describe before.
This is culture hacking.
And this is in the small, the sort of thing that you have a source movement in the world.
So one of the things I wanted to put out there for you is that if you guys want to learn how to do that sort of thing,
if any of your aspiring culture hackers start small, find a practice that's good
that is valuable for some people and doesn't have a name and give it one.
So that's my first jumping one point for you tonight.
Anybody have any questions or comments about that?
You talked about specifications.
Specifications in, to a certain extent, a number of standards are marketing concepts.
That's partly a mess in many ways.
Sometimes they're kind of different.
You know, they're just different in a committee for different people,
that different wishes are in a committee.
And you are having a typical programmer's reaction to the term specification,
which is why I didn't want to call this the specification.
That's exactly why the term ground-to-truth document was valuable.
You know, a good example, I think, of a project that's taking place to solve it.
I think they've done a lot of ground-to-truth.
Ground-to-truth document, a documentation of SFV.
Yes, that is excellent.
That's very excellent.
Of course, this is a very old practice.
My father, who was a military intelligence move or two,
was helping to disassemble the first captured commikas play,
a zero with a 500-pound bomb strapped to the bottom of it.
And he, as an engineer, was Kevin Lissian's expert,
had to, he went through a manual as he could reach out with ease.
And the demolitions expert then disassembled step-by-step to the bomb.
The assembly determined the ground-truth of the company cause assemblies.
What's different from what was in the manual?
There was a very awkward moment in the reading,
because formal Japanese uses the double negative in the opposite sense of informal Japanese.
Oh dear!
Don't turn, obviously it's a left.
It could be run one way or the other.
Oh dear.
When you're disassembling a bomb, I can see where that would be.
It should be guessing.
And the certain point, my father's area of responsibility was done.
And he still goes to the demolitions expert.
You know, if it's all the same to you,
I'd like to just retire behind that wall over there,
to achieve a more comprehensive view of your excellence.
And I'm here with the demolitions engineer and finish.
He said, you know this is extremely interesting,
when they put this together and so forth.
And they're just using GMT for the explosives which is quite risky.
And my father said, how do you know GMT?
I don't think I said by the taste where you're like spoonful.
All right.
So, was this formal or informal?
I don't remember which way it went though.
20 years ago I was brought.
I wouldn't be here.
That's a great story.
Anything else about it?
Something you can too may have to have in the culture.
Okay.
Second topic.
The parallels of over-engineering.
How many of you have used CIA,
the notification service?
I don't even know what it is.
Wow.
Because you do all of them here.
CIA is actually fairly an empty concept.
But what you do is you can have a hook here,
a version control system for a new project.
And whenever you do a commit to a hook,
ships an XMLRPC notification off to the CIA server.
And the CIA server then takes the commit letter data
and the message that makes a digest of it.
And echo extent digest in the IRC channel of your choice.
Why is this useful?
Well, nowadays, I mean,
emails so old school.
Many projects nowadays tell IRC channels
where the developers hang out and talk about the development process
in real time.
It's really useful if your project has IRC channel
to arrange that all the commit stream
of the project is part of the conversation.
So instead of somebody says,
oh, there's a problem in module food.
And I think this is the way it fits.
I can be on that channel and say,
I'm looking into it.
And then I go off and I fix it.
And I do the commit.
Instead of me having to say it's done,
he sees the commit.
The commit comment.
This is great.
That's wonderful.
I really like it.
I use it on all the projects that I need.
Recently, however,
I made the mistake of looking at how it's
actually implemented.
So the more student among you,
maybe wondering why this kind of service
goes through a central server at all.
We'll get back to that point.
I want to look at how it's implemented
because one of the things about CIA
is that this network is leafling.
It's probably outages.
It'll go down for a while,
and then we'll come back up.
And you get the flood of really old
that it should show up on your channel.
Nobody's ever quite sure.
Most people just live with it.
I looked into it.
It turns out that the implementation
of CIA is horrifying.
I need truly horrifying.
It is a mixture that was,
they started out coding it
in a custom web framework.
And then recoded most of it,
but not all of it, and twisted.
And then changed their minds
and recoded most,
but not all of that in Django.
Three different web frameworks.
Doing slightly different,
but somewhat overlapping tasks.
I'm told by people who have looked at the code
mostly, the individual subsystems
inside Django and twisted it
in the custom web framework.
Aren't too bad, actually,
but the interactions between them
are messy and weak-y.
On top of that,
the system is really complex.
Some of the robots,
I mean, are rhythmic,
but some of the robots
that actually do the posting
to the IRC service,
are written in our line.
Okay.
I mean,
not to say their line is necessarily
bad language,
but it is kind of obscure,
and probably overkill
from something like this.
And any time you get a mixture
of languages on the project,
there tend to be problems
that the interface is between.
And there certainly are here.
And I'm told by that,
the development practices
were just plain sloppy.
Like I found out,
the person who was kind of
a winner of the software,
casually dropped on the channel.
We used to get that
bothering to actually
send the live instance
back to the Google code
repository that is supposedly
over the code.
So you can't check out
the Google code or
the library,
and get a lot of instance.
And somebody else had been
wondering on the channel
about this,
what's going on here?
I checked out the Google code
instance that has syntax errors.
Well, now you know why.
There are fixes in the live interface.
It's never got proper use
in the fact of the repository.
Now, I,
when I found this out,
my error student
and the name,
more or less,
shamed the maintainer
into fixing this,
well,
or at least,
he claims he fixed
past performance,
doesn't give a lot of confidence
about this.
So, okay.
So it's a sample.
It's horrible.
The other fact, though,
there are highly questionable
things that don't do design.
I mean,
at least highly questionable
for my point of view.
One is the huge amount
of code that is
dedicated to making
pretty reports
that are listed on the web.
You're a message
relay service.
Why do you think
that the web wants to see
detailed timelines
of Pimits on every project?
That's what the
repositories are for.
And why do you think it wants
to see statistics on
density of commits by
particular authors?
What's the need for this?
What's the market
for this?
You're a message
relay service.
Where is all this
crime coming from?
Over-engineering is bad
because,
I mean,
the implementation
looks like code
that has collapsed
under its own weight.
It's basically
a rubble pile
that's gradually
shifting towards
completely non-functionality.
This is what happens
when you overburden
the project
with features that
don't really need.
So,
I started thinking,
and I was saying,
okay,
if I was starting
from an e-sheet,
how would I
implement what
CI is doing?
Oh,
and by the way,
what are the
problems with it?
Everything going through
one server?
Okay,
hands up,
and I'm going to use these
what the problem
with this is.
If you're sure
great.
Okay, yeah,
we can generalize this.
Single systems
that have simple
points of critical
failure,
bad
decentralization,
multiple pathways,
and robustness,
good
as internet engineers,
we are supposed
to know this.
But, I'm aware
we seem to
occasionally forget that.
So, I started thinking,
how would you do this
in a properly centralized
properly,
like way away,
and I started
setting up
and I started coding.
So,
anybody want
to guess
approximately how many
lines it took me to duplicate
these
CI is functionality
of
take the commit,
and really
to our
C-server.
300.
How many lines?
How many lines?
Oh, that's way too high.
300.
400.
Very good.
Very good.
So,
this is what I call
Herd Herd,
like locks in a
361 line
to play with.
Wow.
Okay.
This is
comparing to
uncounted
thousands of lines
and
psychomatic
points of new
maker
and explode
in CI.
Now,
I'm trying to call it
in my second.
What, what, what,
is that?
Should have called it
in my seventh.
I might do that,
but I'm not
thinking of it.
I was, I was,
mentally
convincing names of
right-all
spy organizations
that
are just
AGB.
No, no, no,
here's your
white one.
I'm not
doing my own
stuff.
Um, so,
no,
I mean,
it's obvious
why I call it
Herd Herd.
So,
I prove out
this story
and not to,
like, make some
like being a super wizard coder, because in fact, this was not a very difficult job.
Okay, once I knew what the program had to do, writing it and writing it to be that small
wasn't difficult.
The difficult part was adjusting my focus so that I don't know what was actually necessary
to do as opposed to all the cromey crap that CIA is surrounded with.
I merely went off course.
I merely fell off the wing because they made another point, which I really, one of the
accidentally puzzled me was, why, why, why XMLRPC, that's kind of heavyweight.
Why are there plans for this thing, shouldn't, should there be huge XMLRPC message to the
server, which is then digesting you to do the actual test, text that you should still
I have to see.
My, my first thought was, well, wait, why is the server doing the statistics gathering
at all?
There's a channel called Commits, where CIA helps every committed passes through it.
So you're effectively seeing its entire data stream.
So if you wanted to write something that does statistics gathering, my first thought was,
why haven't you in the transmission path at all?
Why isn't it just a bot that's watching the Commits channel?
I mean, duh, you've already aggregated the stream, still big, on the output side.
So you actually see reality, there's a thing good off the air.
So and then I realized, oh wait a second, there's a problem with that, IRC has a 510 character
message number, which means that you can't send all of the committed metadata to a single
IRC message like, instead, the, the, the, the, the, the, the, the, the, the, the, the
apps generators inside CIA are working on this, this full representation that they got
from the XMLRPC object, and they're just sort of digesting that and shipping that to
IRC.
And when I realized that, I said, well, maybe I, maybe XMLRPC means that's here after all.
And I started sketching design for another demon, I'm Zooler a demon, that would take the
XMLRPC objects, do stats gathering, and then, and then digest that, pass a request to my
first demon, which would do the actual IRC code system, better separation of functions
than the CIA has right now.
Is that it?
They're like, they're like, wow, I saw from the head and came to my senses.
Because if you actually look at commits, you'll see that at the stream as it goes by on
the commits channel, you'll see that most commit messages are very short and touch very few
files.
Most of them will, in fact, fit inside the 500 and, and so I started thinking instead
about reduction rules, that, that, that, that, what's that, is that why they have like
a web interface to it for messages that are greater than the, yeah, and that's also
a bit.
And that's also why when you see the CIA notification, it typically has a URL at the end where you
go to see the, the full, the meta, the full, the meta-message, but that's not myself,
but I realized, no, I'm following into the same trap as the CIA designers.
The truth is, from most cases, you can drop out the file names and, and nobody will get
heard.
And you can truncate the, the meta-message to 500 templates, and that's enough for a human
being, especially if they have a, a pointer to the original, and they're a repository.
And the point is, is by, by, by, by, by, the great, by deciding, there's a K, not to
get out of the 1% case, I reduced the complexity of the entire system by the factor of three
or four.
And that was probably a good triangle off of me, thinking about that for a long time.
Sometimes there are things you can do that should not.
So this is my cautionary tale about the perils of the over-engineering.
And?
Absolutely.
Cut corners proudly.
Cut corners proudly.
That's going to be a good one.
I don't remember.
I don't remember.
I don't remember.
We'll come back a minute.
Yeah.
And one in doubt is brute force.
It was a fundamental, even to write, it's got to, well, it's, I normally don't like
threads because, well, synchronization problems, but this was a situation that, like, cried
out for a producer at the same time, threads and thread safe cues and code of
reteaming, and it was kind of fun to write.
So perils of over-engineering, if you ever find yourself in a situation where you've got
custom prep whip framework and twisted and jango, and most of your code is pretty reports
for wind pages, something's gone badly wrong and you need to rethink.
I question whether that's really over-engineering, how did CIA start its life?
Was it a bunch of student projects taped together?
I don't actually know.
I don't get that in question.
Okay.
It seems to have been referenced to be about the language mix makes it sound like that.
Okay.
The language mix makes it sound like it.
Yeah, maybe.
It was there one developer or three, or?
I believe there was one initially.
This is here in 2007, apparently, having been overwhelmed by the, like, over-complexity
of what you've created.
I guess we're still not sure about this.
I mean, it's the point of CIA to send notifications to IRC channels or to have the pretty
reports.
Because all you want to do is send notifications to IRC channels and it's an, you know, what
can you put in your, you know, you can write your favorite, in your favorite language.
No, it isn't.
It's just codes, isn't it?
No, it isn't.
And here's one.
The reason it has to be a service demon with persistent state is because the things you
have to do to maintain state to an IRC session are not tremendously complex, but they're
non-trivial.
And if you open a session and send your message in a closes session to a server, it looks
like it's just joining the...
Yeah, you're going to run the channel with commits ban.
And server ops don't like that, the ban you're doing stuff like that.
So what the data is for is, and the way it works is there's a link by the one patient
works is there's a list of software.
I would try it for an IANA for it number.
There's a list of software.
And what's watching for is JSON objects.
I like JSON.
And one attribute is the IRC URL, and the other attribute is the message.
And internally what it's doing is it's saying, basically, have we seen this destination
server before?
If not, we'll start a new internal robot thread to handle communications with the server.
And at any given time, there are a bunch of parallel robot threads running, and their purpose
is to minimize the amount of actual joint and leave traffic to the set of channels that
you're setting yourself to.
That's why it has to be a persistent.
Yeah.
Any recommendations for X-A to the parent application that's been overly engineered and refactoring
is an option, how to approach it, and kind of move the over-engineer?
That depends entirely on the politics of your situation.
I mean, very little of, there's not much in place I can give you that would be a purely
technical nature.
It depends entirely on how many people are invested in that application and why, and generally,
it's pretty frightening.
I'm in a situation here where, at least, I can feel burger as an alternative to CIA.
And if, the way I expect to give you the point is that repository sites will start instances
running, and then they'll make that poor, privately available as a host for their mobile
employees.
So you may never actually see it, it's an error grid that's publicly accessible.
And in fact, maybe you shouldn't, because it would be a great way to spam my or C channel as well,
while I'm asking your idea to us.
But the point is that multiple instances of this can be deployed in sexualization,
yay, by different hosting sites, and each one of them will take a piece of the notification
job.
And that doesn't put me in direct political conflict with CIA people.
And if this, the prospect of competition, there is a salvage group that is trying to fix
the CIA companies, I'm giving them a little help.
I'll probably give them a bit more.
And this will have one or two outcomes.
Either it will light a fire under the salvage group, because they have competition,
and they'll actually fix the thing, in which case it's all good.
Or the code will complete its collapse into rubble, at which point burger will be
an available alternative that's fairly easy to use, and that's good to do.
Any other questions about this?
Yeah, what's stopping you from like, well, I guess nothing stopped you.
But you were talking earlier about how CIA has this over-complication with Webinar face,
and all these other goodies.
Why not?
Depending on other applications for that portion.
Like, for instance, track has a really nice hook into SVN and other versioning systems
where they provide that interface for you.
And so, with the commit message, you can just feed output of URL to the track Webinar face
while not even worrying about having to format anything.
So, essentially, you're just...
How does that get you notification on the project that I wasn't showing?
Well, no, I was saying for a more complete...
I mean, for a more complete commit message, I mean.
Oh, if you have to cut it off for the message line.
Well, that's what CIA already does that.
In fact, one of the things that you give it in your XMLRBC,
one of the things you're supposed to give it, when you generate a message,
is a... is a browserable URL pointing at your source code at something like...
Oh, so it's not actually generating the WebView?
No, it's just a pointer to where you can go with it.
Okay, I just did that.
But on the CIA site itself, it keeps all kinds of fairly useless statistics
about the traffic that's passed through it.
I think they're fairly useless anyway.
The developers must have thought they were useful, but I don't know why.
So that one or the less comes to the end of my prior pre-prepared grant for the evening.
There are a couple of other things I've been talking about.
I designed my first hardware.
That's basically the story.
But take questions.
Ask me anything.
You know, sorry, I was here for a little tornadoes, whatever.
I'm just...
I'm just...
I'll leave your comments on the state of Android.
Given there's been a lot of activity, like the Apple, Samsung, lawsuit, which...
Apple won.
But I read the other day that...
Android's getting 1.3 million activations per day.
Right.
And they said something like 70% of all humans on Earth will have an Android phone by the end of next year.
Oh, yeah.
The fundamentals of the situation are here.
They'll get too distracted by the losses.
Because Apple is in a very defensive position right now.
That's a difficult thing for a lot of people.
The process, given that they've got like the highest market cap company in the world.
But they've got a problem.
They are a single company that is trying to fund off competition that is coming out from all directions.
Because the Android lobby isn't one company and isn't tied to anyone's strategy,
Android vendors as a whole can place a lot more different bets.
They go about a lot more different design tries that Apple can.
And 95% of those design efforts fail.
But if even 5% of them serve Apple's market better than it does, Apple is...
So, that's why raw fear is a sexually defensive strategy.
But in the long run, you can't really get an Apple at anywhere.
What Apple needs to do in the longer term is the same kind of side wish shift
that took it out of computers and smartphones.
It needs to go into a market that nobody else is competing with.
And I don't know what that market is.
It needs to be done if you don't want to start it.
But don't cry for Amber because then it might be a bit of a loss.
The fundamentals are still strong in the industry.
And those fundamentals are reflected in the fact that Android's world-wide,
this market share relative to Apple continues to go up.
It has the...
That's it.
What are the implications of open source for hacking democracy?
Given that the election is obviously very much in the news right now,
I'm not sure I understand the question.
Well, there's a lot of political undercurrents to open source,
like at Boscom a couple of weeks ago.
There was some people demonstrating a wild, you know, a laptop,
a laptop communication system which can't be shut down by any Egyptian ministry.
So there's a lot of interesting political implications of open source in the open source.
You've been...
That's on the high, not my second death threat.
Yeah, so...
Like, there are various tools for looking at things like the voter ID,
the voter ID on so forth.
And there are a lot of implications of open source for politics.
And then, you know, so that was an open-ended...
You know, comment on this if you feel like a question.
Well, I've been in the trenches myself and waited on my second death threat.
And I thought of this when you mentioned that it was back in 2009,
I was working with a computer activist that was supplying them,
covered the communications channels through one tour and...
And it crippled what sort of communication...
To the indistinguishments that are on.
And I was the above-ground contact person.
I got a death threat from somebody who might have been an agent of the Irrigan government.
It felt like I was living in a cyberpunk level for a couple of weeks there.
A shadowy global conspiracy of tech and creative activists.
Threats from the fanatical assassins.
It was fun if rather nerve-wracking.
So, yeah, been there, I've done that.
I think...
The way I think about this is that one of the effects of open source is to...
The obvious and dumb thing to say would be democratize computing.
But actually, I want to put it more strongly than that and say, energize computing.
Like P2PDS?
Yeah, the difference between democratizing computing and energizing computing is when you democratize something.
You're employing collective mass action.
But the part of the beauty of open source is that it doesn't just empower the model for weak.
It empowers individuals to go out and do things they couldn't do for.
And it gives them information leverage that could formally only be wielded by corporations and governments.
And that is the hopeful bottom line for a lot of this stuff.
That because of the leverage we can get nowadays from technology and the internet.
The advantage of being gathered up in a log versus being an individual will lessen.
And that will be a good thing.
That reminds me of...
Maybe the application that they're basically coined as the open source competition to Facebook, where I was like...
Yeah, I asked for it.
That reminds me of diaspora.
And I'm wishing everybody what?
How are they doing that?
They're starting to open source them, so I think they've run out of funding.
They're just announced I think a week or two ago that they're going to be turning everything over to the community, including the codebase for the sites and everything, and also policy management.
It's going to be like a year long transition or something, but they're trying to put it pretty hands off in the future.
Which is a cool thing, but it might be related to the fact that they don't find it successful.
It's funny, isn't it?
Whatever.
I wonder if they could squeeze it.
That's how they made their money.
That's how they got it.
They had quadrupled with diaspora.
Probably the 50% fall in Facebook stock that led the investors to get a little nervous.
It's not going to work actually.
It gave us quite a bit of money to get that started.
It's really funny.
He said he was not.
Ouch.
Yeah, let's talk about Facebook stock.
So next.
So in the election, I guess it was one George Bush, George W. Bush went against.
Remember, there was a lot of discussion about electronic voting and hanging sheds and all that kind of stuff.
And there was a movement towards electronic voting, and I haven't really heard anything about it.
I think it was a totally bad idea.
Well, yes.
Expand upon it and what the state of it is and whether it's going anywhere.
Whether it's actually in use and we should be worried or whether it went nowhere and no one's using it.
The real reason that we have the electronic voting is in general a very bad idea.
It's because the data that it addresses is easy to want to trace what it uses.
Well, there are ways to engineer around this problem.
I've seen descriptions in the EVO system in Brazil where it works like this.
You vote one probably and the voting machine prints out two copies of a receipt with a cryptographic signature on it.
One of them is behind glass.
You can't touch it.
The other one drops it to your hand.
And the procedure is for you to check to make sure that the signatures on those receipts look identical.
And then you take one receipt home way.
And later on, if they want to audit the vote, they go back to people and say,
will you show us your receipts people?
And then they can cross-check the crypto codes on those against what's in the database.
So with a sufficiently carefully designed system like that,
we could do voting with decent verification.
But so far, the systems that are that low design are very few at far between
and the ones that are in production use are crackable to a degree that deeply frighten the C and everyone else who's looked at them.
So as they're implemented today, maybe that one exception in Brazil,
that idea don't go there.
I don't imagine that it's looking working.
First of all, no one would say that these people use those receipts.
And we people don't even want census takers coming to their house.
They want election monitors to come to their seats.
Yeah, I think that will work here.
The tradition of the secret ballot would foil that, however,
it's the fact that we were in the choices.
Yeah.
Right.
You just have to.
Yeah.
Right.
And also it could be voluntary to just say, hey, if you voted at precinct 123,
right, bring your receipts in, we're doing an audit.
And the thing is, if you don't, if you don't want to show up, you don't have to show up.
And the thing is you don't have to get a complete set of all receipts from a precinct.
In order to affect any opinion, a lot of certain density of retreats,
or any municipal show.
Okay.
Yeah.
That didn't mean that the same system would allow a voter at home to go to a white page and punch in there.
Oh, yeah.
I've verified it.
I've verified it.
There's both counted.
Oh.
Good point.
Wow.
I've done that.
But yes.
It's actually good.
Yeah.
So can't be done.
It's just, aside from that one example that I read about, hasn't been done.
There's a very deep objection to voting at home in that, for instance,
women might want to vote for how their husband, now who they voted for,
and they can't secure privacy from a home vote.
No, we're not talking about voting.
Right.
I understand.
And we're thinking about trying to vote in general, voting at home is very significant issue.
Well, and how do you know the receipt you're getting actually records what you voted?
How do you know that not everybody got exactly the same signature?
Well, that's an interesting question for one thing.
That's part of the assurance in the system is the fact that you can see a duplicate of the same receipt
that you get with being printed.
So you know that that information is part of what the other thing you can do is compare the hash out here
and receive against the person who left the polling station.
So you're seeing everybody roll.
And I think we should print any like the same hash for folks.
For every single person that votes, then they say 100% voter vote.
Right.
That would be as easy as that.
Well, that's true.
And probably the hash would have as one of its components the time of the vote.
So, yes.
Well, first time.
If you could have a new population, it was as special.
I can't say the total is low.
Yes.
But now we're talking about a different level of trouble.
And now I'm here for every discussion here.
Yes.
I'm going to throw out a very tight Persian question.
What do you think the current state of the free and open source movement is?
Where are we right now?
And where are we headed?
I hate that question.
No, I've always played the press.
You know, I don't think he's back to the old days of a cathedral that was hard.
And you know, people were doing things at home.
And they were trying to find stuff better than Microsoft.
And now things are getting so corporate.
And you got Google.
Stop.
Think about this.
The most widely deployed highest volume operating system.
Computer operating system on the planet is open source.
I'm thinking specifically in the Android area.
But is a fact of our current situation is an important fact with important invocations that the most widely deployed highest volume computer operating system in existence is open source.
Is a fact that matters.
And whenever you find yourself hiding for the old days, not to play the fact that the problems we have now are mostly the problems of success.
And the problems of success are infinitely preferable to the problems of failure.
What's fascinating is that all versions of open source are embedded that is fixed to control on the top of the open source that is available to download, use, and public life.
No problem.
The cell phone numbers have actually been fairly good about making their source trees available eventually.
There's typically a little delay a few months, but we do get them.
Okay, so that's all in the Android side of the zone.
Yeah.
So we're getting to the point now where we have people who are just users of open source and not hackers.
I'm actually kind of directing into that both myself makes me fearful sometimes.
And so other than the obvious support market growing, where is this maturity going to take us?
Your guess is as good as mine.
What do you think?
Well, one thing that I personally have never lost sight of is that open source is really not because of our idealism, but an important sense in spite of it.
We're going to have all the lofty goals and answers and plans in the world.
But if it's a truth about candid behavior that the economic fundamentals that I favor you, what you're trying to do generally won't be sustainable in the last.
And the most important question that I ask 15 years ago in my continued asking is, do economic fundamentals of software development favor really be source?
And 15 years ago, I concluded that the answer was yes.
And today, I still think the answer is yes.
And that's why despite occasional reverses, I continue because of what we're winning.
I'd like to comment real quick on.
Basically, with the extreme growth in the user base, you also have growth in the developer base.
So with more people.
Yeah, you may, as far as the ratio goes at users versus developers, developing open source, but since there's a wider array of people, there may be more numbers of developers.
And what was the previous one?
I think a lot of open source developers don't appreciate today is how thick and huge our culture has become.
Related to where it was in the memory of those of us who had been around for a while.
There was, I have been doing open source before it had been.
For long enough that I remember when most of the hackers in the United States were hit in this room.
Because in the 1970s, the culture was not small.
Think about the fact that that culture, in its modern manifestation of open source, the open source community, has grown itself since the 1970s quite easily for orders of magnitude.
And that's kind of encouraging.
I think this is great.
I consider it a lengthy city.
1970s.
Good.
Everybody there.
Which could you speak about?
Let's get back to it.
It was the invention that Atlantic City looked where it was still the apple first.
It was July, 1970s, 1970s.
Well, possible.
We're talking about different populations.
No, but they were, everybody was a hacker.
There was no way in doing computer without hacking.
There was no way.
Unless you were going to spend millions of dollars.
Hackers, but not open source.
No.
That's true.
Yes.
You can never talk about open source.
I was speaking of the hacker culture that was directly ancestral today to case open source.
Most of them.
The claim was in 1976, so everything was open source.
Hardware.
People were giving away software.
Well, one reason I believe the culture was that small back then was that it was perfect.
At that time, it was possible to be personally acquainted with pretty much everybody in that.
It isn't anymore.
This is a benefit that I was discussing with the same person that I was talking about.
She was bothered by the fact that a lot of the under hackers actually hackers were age 28.
She's bothered by the fact that the hackers she really respects are 15 years older than she is.
She's worried that the level of the hoodfulness among the under hackers is really terrible.
And I guess the person, I'd say, it's always been like that.
There's always a dull curve.
The reason you think hackers were brighter back now is because of the selection effect.
You are seeing the artifacts that survived.
You're not seeing all the false starts and ends up there.
This is one 19th century literature.
It's such a higher quality than 20th century literature.
Yes, the selection effect.
I think you have a point about the incorrect factoring of a design.
There's a wonderful example of trying to do too many things in one design or one or two again.
The flying tech.
There was one actually built and it flew very briefly.
The world was at the highest point of it coming from flying well.
And the flying part of it came from giving us an armor to be significant.
So I recommend to all of you if you can find it.
There's a hilarious book called My Tank Is Fight in Saint Superlevance of World War II.
And I put this together here.
He just trawled the archives from all the completely nuts-so weapons concepts.
Some of which were built, some of which were apt built, some of which never existed.
It's good though because they had all this money.
There was an emergency.
They were saying, try anything guys.
It's wide open.
Anything.
We'll look at anything.
We're deaf.
There were things like the design for a Super Tank, a German Super Tank called Mouse.
It was literally a bunch.
I'm able to go anywhere because it was so heavy it would crush the roads underneath.
Never got built because that kind of like rolling Super Fortress, just take it out with air power.
Or, well, it was a lot on the road.
Right.
Did they have the ship made out of ice in there?
The pirate ship?
Yes.
That was a great thing.
We were extraordinary about that.
I think it was a little before World War II with the search of her battleship.
Yes.
The Papa.
Yes.
Yes.
The Papa.
We could shoot equally badly in all directions.
We always were a little off center.
The battleship would be hit and spin around.
It was called the Papa because it was the brainchild of this crazed Russian Admiral named Papa.
You can't do much for anyone to stop it.
It was just absolutely.
Actually, the serious thing that I learned from that book that most interested me is that the Nazis actually had primitive but functional infrared vision equipment.
They used for night patrols.
Some of which was manpowering on some of which was mounted on tanks.
They even had specialized vehicles that were infrared spotlights that could paint targets for the designators on their tanks.
And the reason you all don't know about this is because that equipment was only deployed to the eastern front.
Nobody ever saw it at the time of the Olympics.
So, yeah.
The Nazis said that it's an IRF equipment.
Okay.
That was one.
But that's one.
One.
One.
That's one.
Would you be willing to say what your Linux distro of choices and your desktop manager?
Oh, that's a bit painful for me at the moment.
I have been a new button user for some years.
I like it.
I liked it because it then lost the amount of system administration I have to do and I hate system administration.
Unfortunately, I'm not kind of shopping for a new distro because of the horror from Beyond Space.
The abomination.
The gigantic gloom.
It's unity.
Can't you just replace it with your paper?
With a manager?
Yeah.
In fact, it's what I have done.
I want to see FCEO do a lot to it.
But there are various things about that where the integration is all that good.
And there are some features I miss.
Such as new media devices actually kind of not as a file on desktop.
Doesn't seem to work for a lot of land or else that's me.
So I want a distribution that is not using unity.
And it's better integrated than the two onto this.
Maybe the option is that problem.
But I can hear it from things about minutes.
I might just run out of that.
What was the name of that book you're talking about?
Tanks?
My tank is fight.
It's what?
My tank is fight.
F-I-G-H-T?
Yes.
Oh, yeah.
What was the first open source offer you to do that?
So we should have the pilot.
Well, that depends on some definitional questions.
But some people would make the claim that some very old IBM operating systems have that property.
That's right.
What was the original question?
Well, it was the first operating system where you could get your hands on the source and the pilot and the pilot.
Yeah.
Yeah.
What was the first one that somebody like us who didn't have a million dollar contract with an iron vendor?
It was the class.
It was the original Slackware distribution.
Yeah.
The original unit.
How about the SD?
The SD.
So why is this an interesting question?
Because the SD, they expect the 70 to the early 70s.
No, well, it's more complicated than that.
Yeah, I know.
So the early BSD tapes weren't actually run-able operating systems.
They were patches on top of proprietary stuff.
You couldn't actually run a BSD completely without any proprietary stuff until the top of release, which was the early 90s.
And their 94 was when I had an early early version of Linux running on my Amiga.
Wow.
I'm an Amiga.
That's impressive.
Okay.
Next.
94.
That's why I started using Linux too.
Twenty years.
You told us about your second death threat as your first death threat.
Interesting to tell.
Oh, not really.
So random.
Gehavi.
Yeah.
Is that so early?
I don't really take the first one very seriously.
The second one seemed a little more threatening.
In fact, I reported at the FBI and they took it seriously enough that the agent came out to interview me.
Said my kitchen table and asked me questions.
And it turned out mainly what they wanted.
They wanted to pump me for information about what was actually going on in Iraq because they didn't tell me anything.
I can't help you.
Sorry.
I can't help you.
As a matter of operational security, I am avoiding learning anything about the Iranian end of Iraq or our operation.
I don't want to know because what I don't know, I can't tell anyone.
That all people who want that information are as friendly as you are, Mr. FBI agent.
So.
Yeah.
Yeah.
I never thought it would be quite subtracting.
Yes.
Somebody on that same subject.
Somebody brought up a fast condom as a presentation on the mesh networking and ad hoc wires and things like that.
We were talking earlier about your desire to energize the internet.
Do you believe that wireless ad hoc mesh networking is something that has a viable future?
Do you believe that would be a reasonable way to energize the internet?
Yes, exactly.
There are various problems with it.
Well, it gets a lot more complicated and mesh potato in it.
And there's also a significant power distribution issue.
How do you keep all these nodes powered up all the time?
Yeah.
That's a good direction for us to build everything.
And there's a concept I'll edit to a couple of years back.
Which is just brilliant.
It's simplicity.
And I'm so sad that I didn't think of it when I started.
You know, mesh potatoes?
And you want to make them cheap?
What do you think cell phones are for?
Just buy up a bunch of used cell phones.
And because the electronics is all there, all you have to do is come up with the right software.
Brilliant.
I wish I had gone with it.
So that's...
Yeah.
Just your recommendations for further reading, podcasting, podcasting.
About what?
Hacking culture and keeping yourself in the game?
Actually, I read an interesting book on this topic recently.
In a week, I'm going to go up a, I think, called Culture Card in New York,
which is a conference on acting cultures.
It's organized by a kind of Daniel Messick, who is an agile coach.
At this occupation, I didn't actually know existed.
What he does is he does into corporations and teaches them how to implement agile development practices in journalism,
software development, and some of us.
And he's written a book called The Culture Game, which is about how to have corporate cultures,
so we're being able to do this stuff.
And he's organized a conference so that people can share ideas and techniques
from changing the internal cultures of other corporations.
And I might have made a speak there.
He invited me to speak.
He said, how do I think I'm an actor?
And he described it as foundational wisdom.
And it's going to be interesting for me to be there because what they're doing is
it's kind of looking like the open source, looking at the open source movement
and the funders here.
They're grappling with some of the same problems.
But they're doing it in a completely different political context.
And so one of the technical recommend is Daniel Messick's book, The Culture Game.
If you have any interest in agile development processes, go off and read that.
It's kind of interesting.
One of the tools that reinforces hierarchy and rigid cultural structures
is our educational system.
How can we hack that?
It's not clear that we're going to have that.
Because it's the process of collapsing everything.
But one of the bloggers I follow is, I need one house in K, that's the funding.
Some of you may have heard of it.
And one of them played the continually topics on his blog,
because what he calls the higher education poll.
And how it was bursting.
We have, and some of them, there are some of the same problems with K12 level.
What he points out is that...
Let's see, what's the one there in that version?
Higher education has been undergoing intense cost inflation.
For the same reason, health care has been undergoing intense cost inflation.
Government subsidies.
In the case of higher education, it's things like health management.
The effect has been to decouple costs as they're perceived by the consumers of the education,
the students and parents, from costs as they're received by the universities.
And many of the situation like that, the producers take advantage of that
in building their product and wildly inflating their cost based.
And what's happening now is this needs to increasingly...
Secondary education in the U.S. is increasingly available only to people
who are willing to take out loans that will cripple them financially for life.
And this is happening at the same time as the perceived value of a college
and education is actually dropping.
And Instapome has been pointing out for years that this is a classic picture of a bubble
and that it's now bursting.
So it's not clear that you have to have the education system.
It's in the process of...
As Karl Marx would have put it, the destroyed plants in the future.
But some alternative system needs to be built up before it collapses
or will not have an option to switch over to the other plants.
Well, why you are an optimist, aren't you?
I think it's university.
I think it's university.
In fact, that's what's developing now.
A few more places like Khan Academy and some of what the University of Phoenix is doing.
The more innovative for-profit universities are getting heavily into two things in particular.
One is, if you have maybe a distance learning.
And the other is re-organizing credit for courses around specific skill certs
that you can then show employers, rather than, you know, generalize,
I have a degree in English.
And that's a good thing because the skill certs are actually more reliable signals
than what employers want than a bachelor of emergency degrees these days.
Well, that just seems like the normal hand continuing professional education
that they've always had, you know, skill tracks or certificates.
And open courseware, you know, is just, you know, so the way I'm getting through.
One way that's, one way to describe what's going on is that the scheduling and the production
I know is a typical continually professional education is now increasingly encroaching on turf
that used to belong to the university school.
There's actually some regress of packing going on.
In summary, some of the universities I saw,
a law article about a Harvard professor who was depressed by the fact that his students
typically didn't remember anything from the scores three months later,
unless they're actually using it, you see a physics or something.
And he, a number of other people have done this, have inferred the usual learning model
to where he has a social part of learning happened in the classroom.
And the reading and exercise happening outside of it.
So you read lecture notes before you go to class,
and then you get into class you talk with your students, your fellow students,
and TA's and so forth, wander around helping you out.
Because normally you've had like a lecture at the center,
and then you talk to your friends outside of class,
now he's having a discussion at the center, and you do the reading and so forth outside.
It seems to me that would be very likely to work well for courses
in which he could combine the social aspect with an actual lab or practice.
Right. And this is not only a couple of professors,
but the motivation was precisely the fact that you've teaching physics,
I think it was. And unless you were a tracking physics,
unless you were actually a physics student, you didn't remember
which you took in physics for pilots.
And you wanted to get memory going with you the next year.
That's why he's now testing for that.
And actually this is test driven education, TVE,
where he's looking to work, how well do different teaching methodologies
lead to retention a year later?
Interesting.
Very different perspective.
We're putting metrics on education,
and that would be the core of a hack of education.
Because you can't optimize if you don't have a way to measure outcomes.
No. And for physics you do.
Yeah.
It would be more difficult for some others to digest what?
Of course, most of those other subjects aren't much less valuable.
Okay, next.
Am I exhausted everybody?
I love to see how I able to call my biggest food in America.
I actually don't know what they intend to stand for,
as I've never seen this much of that particular.
But this makes me think that we should tell them
a story about our new insight.
Yeah, okay, this is a good story,
but something that was sort of all over the country.
One of the things I've found with these days is a time,
I'm part of a group of engineers that's fighting a phone call
for what it was.
Maybe you're part of us just anybody.
Okay, thank you very much.
There is a solid little book summary.
There is a problem with the foundation of the Internet.
All those dropouts that you're seeing in your videos,
that's the crazy latency spikes that the inconsistent performance.
Everybody thinks, oh, the pipes aren't bad enough.
Probably not.
Some of this has been doing some analysis,
and we think that the actual problem is bad cueing strategies
and the routers, they are over-buffered.
And the effect of over-buffering is you have smooth traffic
coming in one side of the router,
and it gets turned into bursty traffic going on the other.
We'll multiply this by a couple of different stages.
And suddenly, your Internet is crazy AI
with various segments of its swing between zero utilization
and 100% on the real short-time scales.
This is not good.
So the thing that's required to fix this is,
basically, reducing the size of a lot of buffers
so congestion notification starts working again.
I know that sounds counterintuitive,
but that's how the analysis comes in.
And also, better management strategies for the buffers.
So that's just sort of background.
And I got recruited on this effort by Diane Tate-Tot,
who should be much better than he is.
He was called the designers.
The first wireless,
wireless wireless router.
He's got a lot of other cool stuff too.
And the specific problem he wanted me to solve for them
was this.
Right now, we don't actually have any way
to check for and monitor and test for the existence
of these buffered blowlights.
We can rely on that.
The reason we don't have any way to monitor for this
is that we don't have any reliable way to measure
the statistical distribution of packet propagation times
on the internet.
Some of you are probably thinking,
we don't.
Sure we do.
We've got routers and we've got clocks.
Whoa, stop right there.
That's the problem.
One of the effects of buffered blowlights,
these spikes,
it means, well,
swings between 100% and 0% utilization.
Is that it breaks the symmetry assumptions on which
NTP is based.
We can't rely on our clocks.
NTP is one of the services that's probably being screwed
with.
It means that in order to network monitoring that we'll
enable us to identify if we're after
having this kind of congestion.
And where we're at.
Which is the first step to fixing that.
We need to be able to do network
tomography with clock sources that are independent
of NTP.
Which basically means we do a bunch of
instrumented routers that's lit all over the world.
Each one of which has something like an atomic clock
hooked up to it.
Which all have a common time base.
So that we can actually measure packet delays and not have
a potentially screwed up NTP corrupting or figures.
And what Dave came to do because.
He knows that I do a lot of work with GPSs, which among
other things, he uses precision time sources.
And he thought maybe Eric can solve our problem.
And our problem is that the atomic clocks are really expensive.
Your least expensive greater atomic clock is a thing called a GPS
condition through video loss later.
Which is just as expensive as it sounds.
If you laboratory grade equipment and it's thousands of
dollars a month.
And when you're talking about deploying hundreds of
instrumented routers and instrumented in insecure locations.
And you can't do that.
It's too expensive.
So he said, OK, what can we do for a cheap time source?
And I mean GPS seem like the obvious answer.
But OK, now we're getting to some good news, bad news,
situations.
The thing is GPS is cheap.
That is cheap.
GPS is only give you precision time down to one second.
Which is a problem because the timescale of the
amounts we want to monitor is 10 microseconds.
That the typical resolution on NTP clock time.
The thing is is some GPSs can deliver time at 50 nanoseconds
precision because there's this thing called one
PPS pulse which is moved at the top of every GPS section of
the second, which is precise to 50 nanoseconds.
And that's more than good enough for doing network
to monitor if you want your typical feature size is
and microseconds.
The bad news is you can only get one PPS typically out of
a GPS with a serial interface.
That is RS-232.
They're just typically when you propagate that
somewhere else, but putting it on the ECU line.
And having the device driver on your host watching for
ECU calls.
And this is a problem because RS-232 interfaces are at this
point almost dead.
And it's very, very difficult to get your hands on a
serial GPS.
The does this that has one PPS coming out to that again.
So, and when I got to that point, I started thinking
these days, it's all USB-GTSs.
And those are the all ones that are cheap enough to plug
into a router and be disposed of all of that,
vibes and all of that.
So, can I find a USB-GTS that is somehow carrying out
the, this one PPS, where you can see?
I actually did find one that was made by a
PPS called the CTI in Brittany, in more places.
But I want to learn the North American Institute.
And they wanted 900 dollars, which,
besides being too expensive for our project,
it's just obscene because I know the parts that go into those
things.
I know what's in a stock USB-GTS and 30 bucks for
the parts.
And actually, so that was just ridiculous.
That one just started thinking.
Well, if I could help, what's actually going on here?
Let's actually look at that chip in the faces.
And see if there's anything we can do to get at this
pulse.
Does it have to be, oh, hey, I'm getting a hundred percent.
The ground truth here, as it were,
is that RNG and PPS chip in the world has outpins
that a couple of them are from the RS-232 interfaces,
delivering the sentences that you see
with the RNG.
And another one of the pins will be 1PPS.
But in your typical modern chip GPS design,
you know what that 1PPS pin is actually used for,
and only it is used for it.
You know that LED on your GPS,
the pulse is once per second.
That pulse was accurate to 15 nanoseconds.
Because it's been driven off the 1PPS pin.
In most GPSs, that's the only thing it's used for,
which is kind of like using, you know,
16 to deliver a newspaper.
So I started thinking, okay, we know 1PPS,
I mean, I always should.
Is there anything we can get at it for a USB interface?
And then I looked at the pin out on your typical USB
serial adapter, like a prolific logic 2303.
That's the most common single time.
I see that's not it. Some of you have double-feet.
And it turns out that the prolific 2303 chips,
like it, have DCD inputs.
The next day, wait, it has DCD inputs.
And what is it actually doing with this information?
And it turns out that what it's doing is
it's setting an indication that the USB interface
can see, uh-huh.
Now we're getting somewhere, because that's suggest.
But let's say your USB interface is polling.
Your USB club is polling.
You're USB-based at one-metre resistor.
That means that I get to see the device
and have it tell me if DCD has gone I,
um, once every another second.
Sorry, once every nine percent.
Once every nine percent.
Is that good enough?
Yes, that is good enough, actually.
So if we could get the, uh, if we could get our,
the precision of our clock down to the,
the typical polling, uh, uh, uh, interval,
many less, either way, that would be good enough.
So, let's see.
What would happen?
Let's look at the spec sheets and see what would happen
if we just, uh, they just took your box,
standard GPS device, which is a GPS chip
with a 1PPS pin on or pins hooked up to a USB serial interface,
uh, on a tiny little circuit board and, like,
carry it out to a connector.
What would happen if we just took those two pins
that are currently hanging out, they're doing nothing,
it's up lighting up at an LED.
What would happen if we took the 1PPS pin
and hooked it up to the USB pin on the check,
and I looked at the spec sheets and said,
you know, you know, that actually looks like,
that actually looks like it might work.
That actually looks like it might work.
So then, I went looking for a manufacturer,
and I found one in Shenzhen, China,
where there are all manner of OEM and OEM houses
who would be delighted to take the specification
of you give them for a manufacturer,
and then you factor it for you.
So I got in touch with these guys and said,
look, here's what I'm trying to do,
and I know that there's this, there's this, uh,
GPS you already made, uh,
and it's got a new block six chip in it,
and it's got a PL-2303 in it.
And if you, like, connected these two pins on those things,
good things would happen.
And they said, that sounds really interesting.
Let's try it.
And they tried it.
And it worked.
And it's shipping.
And, uh, the actual point of this story is that
until the prototype arrived from NAMLO in the mail
a couple months ago,
I had never touched any of the hardware
who's used to make this thing.
I managed, this is the world we live in today.
I actually managed to design a NAMLO product,
a NAMLO product by email,
with a bunch of guys in China
never haven't touched any physical hardware at all.
Does that mean we don't even learn Blender?
Is that cool?
Is this about it?
Yeah.
We're living in William Gibson's time,
right now.
It really is like that.
And the only thing you don't actually have
when you take one from the US,
you can buy them.
You want to be 100 for about 30 bucks each,
if you order them from China.
And, actually, this is a device with a lot of uses,
because before this,
you have cheap time sources that work very good,
you only have a second.
Or you have this expensive laboratory-grade things.
But now that we've got something that does,
that does this level of precision,
there are a lot of things you can do for it.
One application that I didn't realize until,
after I designed the thing,
was there are a lot of places like
oil refineries and military bases
that do not want to have any parts open
to the public at all.
And they're really,
they're really bothered by the fact that
they have to have their NTP port open,
because they're afraid that they might get
crammed through it sometime.
So one of the things you can do with these devices
is that you can sell these
to people who want oil refineries and say,
guess what?
You can close your NTP port
because you are now at tier one time source.
Charge them 1,500 bucks.
Charge them 1,500 bucks.
Charge them 1,500 bucks.
Charge them 1,500 bucks.
So that in its way was kind of a nifty
intangible culture.
I mean, whoever heard of designing hardware
without actually touching hardware,
well, I think it was kind of a software
you need on the outside.
Talk to the, to talk to the device.
Well, as it happens,
GPSD will do the device.
It will do the thing just fine.
What GPSD can do is it's capable of watching
for the DCDi and that.
And then it turns that into an event
which is, which it passes to NTPP
through shared memory.
So that 50 nanosecondagnosing pulse
gets directly translated into a queue
for your NTPP event,
which can then use that information locally
and also pass it on to our machines
and use E-Cloud.
So yeah, that part went actually
partly as a result of that.
The night who runs at NTP
has booted up a service organization
called the Network Time Foundation.
And then he's actually after the GPSD project
in China.
We're talking about that now.
I'm sure it's going to become more important
if you have to fish the most in the future.
So any questions?
Did you say,
I think you've also mentioned this story
at the Chaka.
I did.
Yeah.
I said, wasn't there something
about a national security
implication or something?
Oh, yeah.
There was a guy who said,
wait, you gave us design of the Chinese?
The NSA is going to put you in jail, dude.
And he actually claimed that
there are some people in the federal government
who are so jealous about do-use technologies
that could be military
that my one-wire patch
could lead me in jail.
Unfortunately, there have been no
good shot on my doorstep.
As yet.
I'm not sure whether I should be
more nervous about
that or the Iranian assassin.
I'm actually thinking about this on the
past, what you're going to learn.
And how much this problem
of buffered spikes coming out of devices
might be a router system problem.
If we have over 70%
or whatever it is,
you know, system devices
running and sending out this thing,
how much is this is just going to come down to
manufacturers issuing firmware patches?
Oh, that's their patch.
It's coming out.
Actually, the buffered load problem
that has been pushing several different lines
that have been involved with it
is some researchers affiliated
with the Fifth half of us
have come up with a much better buffered
management strategy
that could be called coddle.
And one of the stories
in the last several months is
we've actually succeeded in getting that
into deployment of this
as like system in general.
The big router manufacturers
actually have a clue about this.
The difficult politics is actually
in a different place.
Another blow is politically loaded
because the telehouse companies
have 40 years been getting all kinds
of regulatory references
out of the theory that
there isn't enough infrastructure.
There are enough pipes.
We have to get subsidies
and regulatory exceptions
and all kinds of preferential treatment
because there are enough pipes
and there isn't enough infrastructure
and the congestion out there is the proof.
And we are the guys
that are coming along saying,
no, no, actually,
the buildout is done.
All we have to do is fix
the frickin software.
This is very threatening
to a lot of telehouse people.
What's the line
never try to educate someone
who's income is dependent
on their occurrence?
Yes, exactly.
Where do you see video comments
you want?
Um,
what do I care?
Um,
I mean Google Hangouts
are kind of interesting
but they're more stuck
than you'd be else here.
It's been a while.
I'm one of the network
that's been told about pilot.
Yeah, I don't like
these things are a big problem
when you're trying to do video conference
and obviously,
but after we fix the bottom
of the problem,
I'm asking you.
I heard that there's
a red protocol
that are getting into the kernel.
Are they going to help her?
Um, red is the name for one
of the buffer management algorithms
that's been out there forever.
And it's actually a problem
about the solution.
The reason it's a problem
is that in a real work properly,
it has to be tuned.
And most system administrators
do not have the knowledge base
to tune it properly.
So they either just read it on
it's defaults or turns off
or just doing nothing.
Um,
the great virtue
of the game is that
it's completely self-tuned.
So you can actually
deploy it and then
forget about it.
Is that the blue?
Blue is the one that
I don't know.
Okay, I thought
it was one that didn't
require tuning that's coming out.
It's like a problem.
It sounds like it's hot.
Okay, maybe.
So yeah,
it's an interesting problem.
And my data is actually
coming to visit
in about a week.
And we're probably
going to spend a week
together working on
now what he calls the
cosmic background
buffer mode detected,
which is his
field.
A bunch of routers
all over the world,
each one of them
with a copy
of one of my
devices probably
doing the serial port.
And the whole thing will be
our real-time monitoring
that won't be watching
throughout packet latency
period.
And if we actually have
a serious buffer mode
problem,
which we think we
view,
then it's kind of
show up on that
network.
And we're going to be
able to make lots of
pretty graphs that we
can show people
actually at the
moment.
You know, the way
about the protocol
phone networks.
I don't understand
the way about the protocol
phone networks.
I don't understand the
way about the protocol
phone networks.
You know, one of the
networks is from the
primary variant
DLS.
You shouldn't have
problems with the
network.
You shouldn't have
problems with the
network.
Should be a lot of
things that we're
thinking about.
I don't understand what
you're going to do.
I don't understand what you're
going to do with that.
Well, when you go on a
primary variant network,
you can go on the
other networks.
If you're going to
get involved, you've
got to pass it from
more packets.
So they're going
along with a certain
buffers.
You're going to walk
first.
You're going to have to
pass it from that
point.
and those effects are generic to a lot of different physical transports.
They're going to happen anywhere that you have, no matter how good the plate is,
they're going to happen anywhere that you have over buffering and poor human resources.
So, the right answer is to say, on MPLS you won't have a video conference problem.
The responsive question is, on MPLS, on the buffer management strategies, any better?
And I don't want to get us through that question.
You're getting ready for pizza?
Is it time for pizza?
Oh my god!
I'm very sorry. Let's go have pizza.
I'm going to run.
Well, I hope you enjoyed that recording. I know I enjoyed being there.
Please be sure to check out the show notes. You can also find links over at thetechiegeek.com.
Again, thank you for listening and supporting HPR.
You have been listening to HackerPublic Radio at HackerPublic Radio.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HPR listener by yourself.
If you ever considered recording a podcast, then visit our website to find out how easy it really is.
HackerPublic Radio was founded by the digital dark pound and the economical and computer cloud.
HPR is funded by the binary revolution at binref.com, all binref projects are crowd-responsive by linear pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released under creative comments, attribution, share a line, read our license.
