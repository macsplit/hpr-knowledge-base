Episode: 352
Title: HPR0352: Open Source Business Models
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0352/hpr0352.mp3
Transcribed: 2025-10-07 17:05:34

---

.
Hello everybody and welcome to another episode.
Let's episode we're going to talk about open source business models.
I'm Mark Clark, I'm from South Africa where I work for open source solutions company
and we basically develop customer solutions for our various customers' needs and requirements.
I'm joined today by Darlene Parker from Canada.
Hi Darlene, how are you?
I'm very well, Mark thanks for having me today.
So I work for a company as well that works with Linux-based solutions
and here in Canada but we have a clientele around the globe.
And I found that this topic today was particularly interesting to me
because we straddle the fence on both sides of this topic.
And so yeah, let's see what we can share with our listeners today, Mark.
I think we should begin by first saying that, you know,
this is a podcast is on to get the bait going and to get people thinking about these kind of topics.
I don't know what the answer is off with and I've got some thoughts around it
and it's in a state of flux.
So when I get new information, it gets modified and changed because I think
how to make money out of open source or how to run a business that's based on open source
is something which a lot of people in the world are struggling with, you know,
from whether they're large commercial companies that are on a closed source model
and they're considering open source or whether you're a company like one
or work for Yarnst Africa, we already use open source and you basically
use selling services on top of that.
I think we should begin by defining what is what we mean by open source.
Okay, because you can have open source code but still have
a proprietary closed source model knowing can contribute back, you know,
kind of like the Microsoft shared source model.
So what we mean by open source is basically the definitions that's been defined
by the open source initiative.
You know, it's very similar to the definition and the new public license by Richard Stormman.
Essentially that means that the software's source code is fairly available.
People are free to use it, they're free to modify it.
Anybody modify it and distribute it, they must distribute the modified source code
along with it.
I know there's a bit of a philosophical difference between Richard Stormman
and open source initiative about open source because Richard Stormman has a social aspect,
you know, he's a social aspect which I can also identify with to open source software
in a sense of contributing to the development of technologies and economies
and basically, you know, making life in general better for humanity.
And whereas open source initiative, some people kind of describe it as more of a
software development model, rather than sort of a philosophical model with social aspects to it.
I don't know if you have anything to add to that definition or clarification points there, Dolly.
Well, I think that has been moved through the open source model.
So I figured this both Mark, like you talked about, you know,
being software production, producing a software product in the end that everybody can contribute to.
But on the other hand, as I work with countries around the world,
the adoption of open source has opened up the window or bridge that digital divide
for so many people that previously couldn't.
Even with the use of, you know, pirated Microsoft licensing and all of this,
it still was a barrier to entry for so many people.
So I believe that there is still social aspect to what we do in the open source community.
Yeah, 100%. That's what I think attracts most people to open source, open source hackers,
you know, get attracted by this whole idea of the contributing something bigger than yourselves.
And basically enabling the development and betterment of the whole economies in the world in general.
You know, one of the aspects of open source that this kind of addresses is very similar
to the YPCs or the PC industry developed.
Look at IBM, for example, when they produced the PC, they could have kept it closed.
But what they did was open the specifications.
And as a result, today we have a whole, you know, ecosystem around supporting PCs
and the open standards around PCs.
So you don't have a manufacturer somewhere in Taiwan saying,
look, I'm going to produce the motherboard with this new bus architecture
and only more, you know, peripheral devices around on this bus and no one else can use it.
You know, everybody gets together. They decide on a new standard for the bus architecture
and everybody's free to develop hardware peripherals or components to run on those buses.
And that's very similar kind of approach that open source takes.
And if you took a more closed source of approach to it,
you would be in a situation like the cellphone market is today
where it's just fragmented. There's so many different platforms.
There's no consistency between them all that they actually fail to realize
all the benefits that, you know, that the mobile cellphone market could actually have.
You know, you always keep on reading these predictions about how, you know,
if you had the killer app on the cellphone's heart would take over the world
and heart can change the lives of people in rural areas, etc. and that kind of stuff.
But the reality is, because it's so fragmented and it's not based on a kind of open standard
and a cooperative approach to it and it's very proprietary,
it just doesn't deliver those promised benefits.
And that's what I think is, you know, really as a social aspect for me around open source development.
And it's a very compelling argument, you know, just to consider the sort of,
so the philanthropic side of the whole thing, you know.
And then it's just how you build a business model on top of that.
Right. It's like, I know for me, I think the benefits,
the other benefits is with open source.
And like I said, I have a mixed approach to this topic today.
But is that whether I'm talking to someone who's trying to add an indigenous language in Bolivia
or trying to put together an educational program in Pakistan?
Because of course, the code is so open, they can modify it to their particular needs
and engage those young bright minds to help them come to a solution.
So I think that's the other side of open source that I particularly like.
Look, I've probably done a hatchage job on a definition of open source.
I'm sure there's a lot of advocates at the open source,
you'll probably be shouting into the headphones now.
But I think, you know, that's just a work in definition.
I don't claim to be an expert or lawyer in terms of defining it.
That's how I understand it.
And I think to a large degree, you know, what I'm saying,
most people will kind of follow along with that kind of definition around open source.
Would you agree with that, Dalino?
No, I agree with your, you know, that's just an overview.
And like you said earlier, that's just our point of view.
And yes, people can have different interpretations.
And we can go a lot deeper into the layers.
But I think in general, when you mention open source to someone,
the definition that you provided, Mark, is a pretty well understood one.
And that's what I say. Look, I mean, in this podcast,
we're not trying to argue that open source is not a good way of developing things.
We definitely feel it's a much better development model than the close source of proprietary
while developing software.
I mean, definitely open source results in better quality software, you know,
because much more user interaction and user involvement in the whole development process.
And it results in sort of quicker development of your product and a better software.
So just to sort of let people know that, you know,
we're not trying to, if you say something which stands negatively,
it's within the context of trying to better further understanding open source
and how to use it in the business context,
rather than sort of trying to compare it to a close source model,
which we just dismiss on our hand.
Right. The basic question is, how do you make money on an open source product?
Because here in North America, you know, we have a very profit driven philosophies here.
And, you know, when I discuss this with people who maybe aren't even in open source,
like totally removed, just business people in general,
you know, the question and answers basically,
if I gave you a free product, then what, then how do I compensate myself for my development time?
How do I compensate myself for the, how do I get the product out there?
I have to put it on a website somewhere.
Who pays for the website? Who pays for the services? Who pays?
How do I get it started?
And then I think today we're going to talk about, you know,
maybe the stuff that comes around that product, you know,
what do you think of that, Mark?
Yeah, I look like I agree with you.
Unfortunately, the current system in which we live,
the only motive is a profit motive.
And that's how things are, you know, that's the rules of the game that we play.
And I do agree there are other aspects that people should probably consider
and be part of the whole plan, the whole goals of a business.
But, you know, that's another debate.
But I'm not giving up the current sort of game plan.
You know, it is a problem if you, you know,
how do you actually make money out of an open source product?
Okay.
And I think this is the core of the topic that you want to discuss, as you said.
You know, and I think there's a couple of models out there.
And the most typical motive that people bring up when you mention open source,
you know, open source is, oh well, the open source of the product
and then you start changing consulting and also port on top of that.
Okay.
And that seems like a very, you know, a lot of guys get excited.
You know, that makes a whole lot of sense.
If you're a small company sitting somewhere, you know,
at least say you guys in Alberta, Ken, Canada,
you release a product, you want to get a big market share
and you want to start selling service on top of it.
One easy way to do it is to open source it.
And then a lot of people around the world will start using it
and trading it up in their product.
And obviously one of the benefits from that is that people then start looking for support
when they hit issues which they can't solve themselves or training.
And I think most people sort of stop and leave that business model at that point.
You know, but our goal is to say there's very few companies that just use that approach
to making money out of open source and open source development model.
Well, I think Mark that they also, I think they have a staggered approach,
like a dual approach to it where they give us a free open source product
that we can get used to and work with.
And then also we say, hey, you know, that's a good product.
But I'm going to bring it into a bigger enterprise.
And then you'll look at the enterprise version of their product
and perhaps pay for that because they've already got us liking it.
They've got our mind share on the product.
It was like virtual box or I don't know,
I'm not sure if Astrix has a higher level that you can buy as well.
But you know, I started working with virtual box and I really like it.
And I know they have different levels of, you know,
I can buy a full version per se.
You know, the different approaches to open source in your business
is how you use it.
So some companies, for example, use open source merely to sell
other products that they have.
So essentially it's like a, it's making it easier to sell the existing product.
And I think those are the most successful open source companies around today.
And if you look at them, they're all the big players.
And it's a bit of a prior to vendors that are using open source in some way.
So for example, Linux and RBM.
I'm not going to say it's an Oracle and RBM.
So Oracle for example, I've been there.
I'm interested in supporting Linux because it makes it easier for them to sell
their database products on top of it.
You're not going to find RBM or Oracle for example,
open sourcing their database products,
because that's where they make their money.
And I think that's quite an easy business model to understand.
If you had explained it to a business person,
they would get it and understand it.
I mean, just like, you know, people sort of sell,
they'll give the premise those away for free in the third world countries.
But then of course, the people that have the premises need to come in
by the gas or the paraphernalty run those those from you.
So, you know, you make it money out of selling,
out of selling the fuel to you run this.
So it's a very similar thing that a lot of these large cookments are doing.
You know, then another approach that one you're talking about is where,
basically the software that you open sourcing is called to your business.
It's where you really make your money.
Okay, a good example of that.
Or like, metrics that you mentioned.
MySQL or even Red Hat for example.
You know, and I think there that is where you start finding it.
There's a lot of different models around around how you make money out of open source.
So, metrics for example makes money from selling the hardware components on top of that.
And for example, other companies will make money by selling dual licenses.
So they have an open source license.
There's no difference between the open source and the closed source product.
But if you want to sort of use it in a commercial product,
you don't only have to release your commercial product as an open source project.
Then you will buy a license from the providers.
So I mean, I know I'm cute.
The guys from the widget set that's used in KDE.
They had a model like that until recently.
And I think that that works quite well because, you know,
what you're basically saying is you're lying.
All the people, all the developers throughout the world,
the usual product that gets screwed up in it,
which then provides its support for your product and commercial environments.
So they'll know there's a whole bunch of developers out there
that already know the user's product and that kind of thing.
And of course, the last one is this sort of large commercial version that you're talking about.
Personally, I don't like that model because it's sort of like a,
how can you call it almost like a bait and switch or, you know,
you hook the guy in and then sooner or later you're forced to,
to move up to the commercial version.
But I know it is quite wildly supported by a lot of open source projects such as Indian Firewall.
Yeah, and I can't remember some other products, but definitely Indian Firewall uses that approach to this product.
Right. And I personally believe that the value of the software lies in the value added services that go around it.
Let's go back to Astrix. So we talk about Astrix.
So some guy wants to download a free version of Astrix,
but he needs somebody to help him integrated into a system and get his phone lines all working in all his voice mails.
And that's where people like yourself come in who can do those kind of services for them
and then teach their staff how to, you know, add those extra extensions and so on afterwards.
But, you know, so when we were talking about, you know,
giving out that little bit of tantalizer at the beginning,
that's like a lost leader where you give away some open source product and then position them to come in and buy your co-sourced.
I know that my company does that in a indirect way and that we give away a free two-user license that you can use,
you know, to test it, you can use it at home, you can try it out.
But if you need any more than two stations of their product,
then you have to contact us to purchase the code.
If I look at the sort of ones where the software is called to the business,
there's very few open source companies that are successful in their field of art,
somehow restricting access to certain aspects of their product.
If you look at companies where the commercial version or not the supported version,
which is pure support on top of it,
and the version that people could download and use is exactly the same as the version that the enterprise would use,
for example, like mySQL.
You know, basically they couldn't make money out of it.
And mySQL eventually got bought by Sun.
You know, Sun also sort of appears to fail to make money out of open source,
because they got bought recently for Oracle.
So I think a lot of these companies that they're trying to have a pure open source,
although it's very admirable, you know, they're trying to have pure open source approach
with the entire code basis open, do end up with problems.
I mean, if you take Astricks, for example,
and this is one of the things I wanted to draw,
Astricks and the kind of business model that we're in,
it's great for us, because art can make money out of selling certain types of Astricks.
But how does Astricks or Digimon, the company that's responsible for Astricks,
make money out of it?
And that's a difficult part, because, you know, currently they're making out of hardware,
but I mean, the hardware is also sort of open,
so you find the whole of the guys in China,
or manufacturing hardware that's compatible with Astricks,
and they can use new Astricks boxes and stuff.
And that's going to eat into Astricks' revenue.
So those guys have, you know, have a hard time sort of making money out of it,
unless there's something behind it.
You know, one of the things that people tend to do,
they tend to set up this partnership or reseller programs,
because it's definitely the larger businesses do like, you know,
that they've got some corporate that they can hold responsible
if the application doesn't work properly.
And so you find a lot of these guys, for example,
that's what Red Hat model is based on, you know,
with our bar support from Red Hat, or from Astricks directly.
But, you know, all that requires is some bigger competitor,
or somebody that's also what is established in the business,
to come and also offer the same services.
And when we see that happen with Red Hat for example,
so now we've got all the Oracle offering support for Red Hat.
Yeah, and that object Red Hat a lot,
and the fact the matter is, is that there's not much Red Hat can do about it,
they might say no to your things about Oracle,
but one of the problems with the open source model,
if it's completely open source.
You know, and I think Red Hat, a lot of garlic,
says one of the most successful,
or one of the most successful open source vendors aren't there.
But they definitely have a, they don't provide the entire,
the entire stack as it were to an open source model.
So if I and Luck Fedora, I mean Fedora essentially
is the experimental version of that product.
So they're using open source community to get some value
to Red Hat by providing basically beta testers.
I know a lot of guys go and they deploy Fedora on their servers.
Why, do you not know because it's unstable.
But you know, I love people do that,
and they provide valuable feedback to Red Hat
to enhance the enterprise product.
And even within the enterprise product,
although you can use CentOS,
there are components which, you know,
like management components and tools and stuff,
which have which aren't open source.
I didn't tend to open source them over time,
but you know, they keep a lot back so that there's some value,
for example, corporate, going,
and bar services from Red Hat.
I think that that's what's key.
You know, if I look across the open source business
after the successor ones,
what is key to this except that something of value
has to be held there to make the customer come through
and bar support from you?
Because if you're just providing support that anybody
else can provide, you know,
there's a danger that it's very easy for competitively
come into your space instead of your lunch.
Right.
And back to what you said about, you know,
people trying Fedora and it's kind of that front leader
and then they'll upgrade from there.
I feel that once you start down the Linux path,
you tend to stay with one or two distors
that you really know well,
and then look at products that work around those.
Because you do, you kind of get a loyalty,
a little mind share happening there.
And like, you know,
and we talked briefly about Photoshop at one point.
You know, if they gave away Photoshop,
if they gave away all the code,
what value would Photoshop have?
Like for me, the tutorials and all the,
the brushes and stuff that come with Photoshop
isn't the value.
It's the core of the program.
But on the other hand,
in the industry, graphic design industry,
it's kind of the thought is, you know,
there's a lot of pirated versions of Adobe out there.
And Adobe's not been has strict,
say, windows to validate your licenses.
But then some people say, you know,
it's because people get trained up on,
on the Adobe Photoshop and stuff.
And then when they're students or when they're learning,
they go into their business environment.
What do you think they're going to encourage them to buy,
but the full suite of Adobe products?
Look, I mean, the thing is,
Photoshop is one of the classic cases we can use as to,
where open source models will not work,
you know, as far as I can tell.
Because everybody always, you know,
one of the big things that people say when you ask them about,
well, they're switching to Linux,
they're stops.
It'll be, oh, because you know,
Photoshop isn't open source.
And then people always say,
why doesn't Adobe open source Photoshop?
But as you say,
if an open source Photoshop is not compelling reason
for people to come through to,
to adopt and buy services,
sure, I understand what you're saying about it,
training up people, using the products
or when they get to the work environment,
they're really trained and it's a product that's awful.
But if Adobe took the project to say,
okay, it's completely open source in free.
I mean, basically, the revenue,
the revenue will just dry up over not.
Yeah, and then would they continue to develop new versions
and stuff if they had no revenue?
How would they pay for that?
Yeah, exactly.
And I started saying,
something has to be kept there.
And what they could potentially do
is kind of like a lot of version
or they wanted to release the experimental version,
something similar to what Red Hat is doing,
you know, and get sort of feedback and testing that way.
They might both make money out of it.
But the sort of way that, you know,
the first sort of like my SQL took
doesn't seem to work.
I mean, you know, the master of the,
for more understanding,
didn't really make enough money,
and that's why they got bought up a son.
All they could really do
was become an expensive lunch.
Yeah, I think in some respects,
open source work will find that way.
If your idea is,
okay, we're going to gain market share.
Yeah, we don't know how you're going to make money out of it.
We're trying to be able to gain a large market share
and either become like an expensive lunch
for an acquisition by a larger corporate
or, you know, trying to work out later,
hard to make money, you know,
sort of similar to the Facebook
and the Google approach.
But that doesn't, you know,
so there's no sort of,
really, to my mind,
a sustainable model behind that.
I think that's the key thing, you know.
Red Hat really has worked out
hard to,
hard to sort of make money out of open source.
Because before they bought it for Dora,
I think they were, you know,
they were struggling a bit.
And since they've done that approach
and having an experimental version,
they provide, rather than providing
the enterprise version three for download,
you know,
the really financial fortunes
have changed quite a bit.
And recently they bought JBoss.
You know, JBoss is another example
of an open source application
with a version that you could download.
It was exactly the same as the enterprise version
that they provided.
And they also never really
made a lot of money.
Eventually they just got bought off by Red Hat.
And now Red Hat is taking the same approach
with they're going to have
an experimental version available,
you know, freely on the project site.
But the commercial version,
you know, where you buy a subscription
or support subscription for it.
And that sort of bundles everything together
so the APRs
all work, all the different libraries work together.
You don't have to spend like hours or time
trying to,
I could almost job a programmer as well.
You know, you must be
in hours trying to sort out what's the version
of the job files you need,
and what works with what,
and all of that kind of stuff.
Yeah, so that's what they're going to be doing with that.
And I think that's the,
you know, the only open source model
I've seen so far
where it's caught your business
that actually seems to work.
But on the other side of it,
Mark, I also feel that
with an open source product,
if you open source your code,
you can actually
reduce your research and development costs
and speed up the, you know,
speed up the delivery of your new products.
Because you have a whole community people
helping you improve your product,
pay to test it, and so on.
If you keep it totally closed source,
and at my company,
we have chosen to do that.
We layer on top of a Linux distro,
but we have closed code.
So then we only have a limited bandwidth
in order to,
to bring the new features out
to the, and keep our software,
you know, on leading edge.
But we, like I say,
it all relies on the shoulders of two or three developers
instead of the whole community.
And like, you know,
even because our product is Linux-based,
we still have a flavor of that,
because when I put it out there, you know,
my partners are trying different things,
and doing different setups with their product.
So I think there is that side to it.
It is a kind of a paradox, but...
I would agree.
I think the key thing is, you know,
you want to get that sweet spot,
but we can release enough of it
that, you know, you can,
you can get people to use it
in a lot of small corporates and individuals,
you know, can use it without any restrictions
on the use of it.
But at the same time,
it's something which will sort of compel larger corporates
or people who have the money to actually come through to you
to get the support.
And also, you know,
you want to be able to be in a position
where they want to get that support from you.
And not necessarily from,
from somebody else, you know.
I think that's what's...
That's a key conundrum for all businesses
that are trying to figure out how to...
to use open-source.
And also using it in a way
which isn't like a mercenary way,
but which is true to the principles
and philosophy behind open-source as well,
which is what we discussed earlier.
Okay. Well, I think, you know,
because you mentioned there was
companies that had started out
with open-source,
but then they've clearly, you know,
they've used open-source technology
to become very successful.
People like Google, PayPal,
Amazon, you know,
even Yahoo Maps.
They were created by open-source developers.
They run on an open-source platform,
but they are very proprietary.
Their source code is not distributed.
And for them, the value is in their data
and not just in the code.
They're just using it to get, you know,
to get the numbers,
in terms of the large number of people
that go to their sites
and make money,
if you're having your advertising
and that kind of stuff, you know.
So, I mean, yeah, those guys,
there's another,
I suppose, another kind of business model.
We're actually just using open-source
as core to your business.
And then I can, you know,
I can understand.
I mean, we use tons of open-source products
and our company,
all of our products,
all of our server machines
and systems are based on open-source products.
You know, if we had to pay commercially
for those things,
we wouldn't be able to afford them.
But, you know,
because open-source we can.
And I think, you know,
that enables us to provide services to our customers.
So, open-source, I think,
definitely you can make money out of it.
If you're somebody that's using it,
like we are to sell services
and solutions on top of it.
But it's, you know,
hardy and sure that the company is actually,
because a lot of these open-source projects,
some of them have corporate sponsors
behind their message, you know,
the big successful ones.
And hard as a big sponsor
make money out of the project.
You know?
But I think we talked, though,
that these big corporate sponsors,
there's something in it for them in the end
to have that product or develop.
There's something for them in the end.
Like, they wouldn't go into that just
on a philanthropy approach, right?
It's something they can take that project
and bring it into their core suite
of whatever they're working on.
Okay.
One thing you were talking about,
Dolly,
is the benefits for around, you know,
using open-source.
And I definitely think,
if you're a company,
you can use it and you can get it right,
where you can sort of keep some commercial value
with the company.
I mean, definitely you can use the way to gain market share,
to train, to get a whole bunch of developers
and all users trained up
and how the product is used.
You know, and all kinds of stuff
is very important for adoption,
especially in the business world.
You know, they want to know
they're support available.
They want to know that their users
know how to use them,
familiar with this kind of product.
And so, I think it's,
definitely is a way that you can prepare
your business like,
if you take Astrix, for example.
Astrix has been a closed-source system.
It would never be as widely successful
as it is today.
And so, those guys used open-source cleverly
in their business model.
And actually, what I wanted to say, though,
Mark, was that,
even though we layer on top of an open-source product,
and we do have a closed-source code,
our employees contribute back
to the community at large.
For an example,
one of my co-workers,
he spends a lot of time developing printer drivers
for the CUP's project,
for a wide range of printers.
Because I know that our struggle is that, you know,
outside the HP printer line,
there's really limited printer support for Linux.
So, even though we are using,
but we're also contributing back
in different manners as well.
I think that's a common kind of model
of a lot of companies as well, you know,
with their contribute.
I think that's a big benefit of the social aspect
of open-source software.
You know, everybody contributes back to making
this product better,
which then benefits everybody else.
You know, so that's,
I think a lot of guys do it that way.
I mean, we do as well,
even if it's just as contributing in terms of bug reports,
small patches,
and bug fixes,
and that kind of stuff,
open-source projects.
And, you know,
just as this sort of says,
well, it's not like,
I mean, although we talk mainly about open-source projects
that big corporate backers behind them,
there are another model for open-source
is just a purely community-driven model,
such as Jumular or Drupal.
I mean, those projects,
basically,
driven by large communities of users behind them.
And essentially, the way those models work
is that the people contributing to the project
make money by selling services on top of that.
And that's probably one of the best sustainable models out there.
And because there's thousands of guys making money out of it,
there's a couple of hundred developers contributing back.
So you're not under threat of, you know,
let's say,
you had people softening your company
and like,
what up are Oracle
and you forced not to move out to the Oracle stack.
Or, you know,
if your company, like, let's say,
you know,
son's been born for Oracle now,
we all left wondering,
what's going to happen to Java?
You know,
what's going to happen to VirtualBox?
What's going to happen to MySQL?
Okay, I mean,
because open-source,
you can at least take that code base
and you can start a community project
around it,
which is one of the benefits of open-source.
But, you know,
you still left sort of with a lot of uncertainty
and data around those things.
So I think,
you know,
that is one model that does work as well.
All right, well,
I think that's about all.
I have to contribute today, Mark.
What's about you?
Yeah, I think, you know,
that's what I have.
Everyone's trying to sort of think
if I've got anything else else.
It was quite a broad topic.
You know,
there's a lot to discuss
and a lot to talk about.
It's one of those things,
which, you know,
you can sit with your mates at the bar
and chat about for hours.
You know,
and as you talk,
you sort of discover more things
to, you think about
and to consider
and how you can, you know,
use this in your business model.
But yeah,
I also, sorry, Mark.
I just also, you know,
I was just thinking about the fellows
at Canonical, you know,
because they're fair.
So, you know,
some of them are pretty hard core
in the open source community.
But yet, you know,
they provide an external sort,
you know, external revenue stream
for, for Ubuntu, right,
through Canonical.
And, you know,
I think that's a good example
of maybe how you can,
you know,
survive in an open source model.
Yeah, yeah.
Firstly, I'm not sure
whether Canonical is a great example,
because I think
they're struggling to make money.
You know,
it wasn't for the philanthropic endeavors
or more shuffle with,
I think there'd been a business a while ago.
And basically,
there's a classic,
it's a struggling to find a way
to make money
out of the open source model.
You know,
and eventually,
they're going to have to go the way
they've read it,
where they keep something behind.
Or maybe they'll come up
with the innovative, you know, solution
talking with the hardware vendors,
you know, around bundling,
bundling it with the laptops,
or the desktops that come out,
and all of that,
especially around these netbooks,
you know,
potentially they can be even
around that.
But yeah, this is, you know,
for me,
every time I hear about
Canonical's financial situation,
and they say they're breaking even,
you know, if you were
looking at a purely
from a business point of view,
I don't think it will be
worth the investment.
You know, if you're just going to,
let's say,
look at it from a
profit percentage point of view.
So yeah, let's,
Canonical be great to see how they evolve
and see if they can also help us
evolve our understanding
of open source business models.
Because I know they really,
they really promote the training
side of what they do as well,
because I was looking at some
certification on Ubuntu,
and yeah, they were very aggressive
in the marketing of the training
solutions that they provide.
Yeah, I think that's a
additional kind of approach
to get the training thing,
you know.
And Kia,
Kia, why don't think it's
Kia with all of this?
Okay, is that the,
the companies that sponsor
these projects build up
enough of a brand name and brand
image that people find
are worthwhile to buy services
from them,
rather than say,
coming to, you know,
to my company and say,
oh, look,
we don't want to go to red hats
and pay them a subscription
or rather use CentOS
and, you know,
phone you and every
there's a problem.
And due to the stability
of Linux,
you hardly ever get phone.
But, you know,
that's the sort of issue
that they have to deal with.
So yeah,
I think one of the key things
is that open source is also
build your brand
and build your,
you know, a brand recognition
around your product.
So if people come to you
rather than just going
anywhere else to get support
for that project
or product that they're using.
And I think, you know,
I know I talk about
Ubuntu lots,
but I did also discuss
Fedora,
but you can tell which flavor
that I've worked with
and I prefer.
But I know what the Ubuntu,
like just the way they make
it so much easier
for non-techy,
non-linux people
that aren't immersed
in open source
to install their product,
you know,
it's with a CD,
you don't have to compile
anything, it's, you know,
it does all the,
the partitioning
of your hard drive
for you and everything,
you know,
it's just a much easier way
to get introduced
to the product
and to start to learn it.
So again,
they're grabbing
mine share there, right?
And,
and they work
with third-party vendors,
you know, like our stuff
is in their repository
and makes it much easier
for us to promote it
as well.
Yeah, I think that, you know,
they're really quite smart
around using open source,
then, in terms of
getting the whole
Manshi, I mean,
I basically came from zero
to dominate the,
the whole Linux
distribution market,
you know,
it's in a short space of time,
providing all those things
you've mentioned.
But, you know,
I think in conclusion
for me, you know,
if you're going to
have a run of business
based on open source
and it's not just something
which is providing support
of third-party,
you know,
products and services.
And by that, I mean,
you know, you could be
people can provide support
from Microsoft Exchange,
they don't own Microsoft Exchange
any money or Microsoft
any money,
but Microsoft makes money
by selling Exchange.
So, you know,
talking about the companies
that will be behind
actual products themselves.
You have to have something
of value that you attain back.
And I think that's what
you need to always do
when you start a business.
It's time to open source
your core software product.
It's like,
what does it have value
that we have?
Whether it's your brand name,
your support network,
you know,
it might be something like
your ability to distribute
or handle calls,
you know,
support calls 24 hours a day
and provide, you know,
to response times
that are immediate
and all that kind of stuff.
You know, so,
you've got to build something cool
that you have.
And I suppose it's the same thing
with any business, really.
You know,
what is your competitive
advantage of others
in the marketplace?
You have to consider
when they open source
their products.
All right, Mark.
In conclusion,
I also have to agree with you
about holding back
a part of your core services
because, again,
from an North American point of view,
business is there to, you know,
break even.
You know, like,
I don't even know
with our tax,
you know, with revenue
Canada.
I see you only breaking even
or not making any profit
in five years.
And then they start to question
the validity of your business
approach.
So,
and, you know,
how long can you be
in philanthropy
versus business, right?
So, I agree that
with the open source,
there's many benefits.
I think the ring benefits
around that core product
can be realized
for the open source community.
And just, you know,
we are in a new age
of business development
these days with the
economic crunch,
and having to look at,
maybe the traditional
business model isn't all
that it's cracked up to be.
Now, I'd agree
until the rules
of the game change
and maybe, you know,
given the current
economic crisis,
they might change.
Yeah, but,
I'm told people consider
things other than just
the profit motive
and business.
You know, as you say,
you need to make money
to survive
and continue to actually
fund and produce
the project.
So, I mean, if you want
to build a development on it
and you want it to move ahead,
you actually need to make
money out of it.
So, yeah.
Oh, thanks, Tony.
Great.
For joining me,
I think that's a wrap.
I'm not quite sure that
next episode will be,
but I'm sure we'll think
of something.
And we'd love to thank
cooler listeners
for listening to another
episode.
Thanks very much.
Bye.
Thank you.
