Episode: 3902
Title: HPR3902: Introduction to a new series on FFMPEG
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3902/hpr3902.mp3
Transcribed: 2025-10-25 07:44:11

---

This is Hacker Public Radio Episode 3902 for Tuesday the 18th of July 2023.
Today's show is entitled, Introduction to a New Series on FFMPEG.
It is hosted by Mr. Young and is about eight minutes long.
It carries a clean flag.
The summary is, In this episode, I introduce FFMPEG media containers and codec.
Hello Hacker Public Radio fans, this is Mr. Young, the podcaster, formerly known as Be Easy.
Within another episode for Hacker Public Radio, in this episode I'm going to introduce a new series
I'm going to start about FFMPEG.
Now, for the last year or so, I've been working a lot with video and audio data in my primary job.
And I spend a lot of time on YouTube and on Stack Exchange looking up how to use FFMPEG to do what I want to do.
Because I know for the majority of what I want to do, FFMPEG is a tool to do it.
Now, as an introduction for those who might not be familiar, FFMPEG, as they say on their website,
is a complete cross-platform solution to record, convert, and stream audio video.
And I spend a lot of my time nowadays doing these exact things.
But as an introduction in this first episode, I want to give a brief background about some terminology that is important to understand
and talking about the use of a tool like FFMPEG for creating and recording and converting audio and video streams.
Now, first, I would like to begin with some terminology around how are these files created.
And the first term I want to discuss is Container.
I have found a pretty good resource on Adobe's website regarding containers.
And they describe, they give an anecdote about them where they say a container is like the bookshelf.
A multimedia container is like the bookshelf in that it can hold many tracks of audio and video just like a bookshelf can hold many books.
Common container formats include MOV, MXF, and AVI.
And I think they put MXF on there because of their own use.
But I think a lot of people would recognize things like MP4 on there as well as MKV and OGG.
Now, in terms of encoding or compression scheme, that is what they call the language of the book.
So inside of each audio and visual video track, there's information represented in the language of the compression scheme,
which includes things like ECU64, MP4, MP4, MP4 ProRes, etc.
And codec is a way to describe the author of the book.
A codec audio and codec is a piece of hardware or software that interprets audio or video signal and compresses it.
Each compression scheme is implemented in a different way and creates different and which creates different codecs for the same compression scheme.
So that's a brief introduction to some of the terms that we're going to be using.
In terms of codecs that you might be familiar with, I have some links here from Wikipedia for audio codecs you might be familiar with.
You might be familiar with things like FLAC, MP3, and WAVE.
Those are different types of formats.
In terms of, what else, I guess, Lane is Opus, like OgVorbus.
It's another one, AEC is one developed by Apple.
So those are some of the audio codecs for video.
You might be familiar with things like H264, H265, Theora, Apple ProRes, DV1.
I guess they can just call it DV.
And then there's other types of lossless, like clean HDMI.
But that's enough about that.
One other thing I would like to discuss is just the terms encoding and decoding.
And I found a really nice visual about encoding and decoding on a website called Learning Freedom Group.
And they have a set of courses and the image I use is a CC by Attribution.
So I'm a company attribution in my show notes here.
And basically, if you think about audio video stream as a message, they have a nice visual for this, where the message is the information itself.
And the sender will encode the message, whereas the receiver will decode the message.
And so when I am encoding it, I'm translating it from its raw format, or the format that I understand as the sender into a raw format.
And then for a decoder, you're doing the opposite.
You're taking that raw format and decoding it into something that the receiver can understand.
So if you think about that in terms of a message such as audio feed, you might encode the incoming video from your webcam, say, using into H264 video using that compression algorithm.
And then on the other side of the receiver sees that it's a M264 encoded message and then uses M264, H264, excuse me, 264 decoder to decode that message and play the video back for you.
Now, there are other terms that we're going to be introducing as we come along, such as frame size, frame rate, bit rate.
We'll talk about compression, some details of run compression algorithms as well.
We're going to not get to in the weeds with that stuff.
The majority of what I want to talk about is really around how to use the tool and when you might want to use the tool for certain situations.
I have an outline already prepared and the outline for the rest of the episodes will be as follows.
So we will be talking about trimming, cutting and combining files, including the ability to make to take large files and making smaller, smaller files, kind of combined together to make them bigger and creating animated animations from still images.
We'll talk about how to deal with different types of inputs, so how to input into a stream and how to output from a stream.
We'll talk about re-encoding, converting and re-muxing and we'll talk about those terms and what they mean.
And then, like I said, we'll talk a little bit about frame rates, image size and compression algorithms in the future too, which is important when you're especially when you are collecting your own image data.
So that's it for now.
Stay tuned for more exciting episodes on Hacker Public Radio.
You have been listening to Hacker Public Radio at Hacker Public Radio does work.
Today's show was contributed by a HPR listener like yourself.
If you ever thought of recording podcasts, click on our contribute link to find out how easy it really is.
Hosting for HPR has been kindly provided by an honesthost.com, the internet archive and our syncs.net.
On the Sadois status, today's show is released under Creative Commons, Attribution 4.0 International License.
