Episode: 3979
Title: HPR3979: FireStick and ad blocking
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3979/hpr3979.mp3
Transcribed: 2025-10-25 18:13:13

---

This is Hacker Public Radio Episode 3979 for Thursday 2 November 2023.
Today's show is entitled Fire Stick and Ed Blocking.
It is hosted by Operator and is about 25 minutes long.
It carries an explicit flag.
The summary is Operator Talks about recent apps for Fire Stick and blocking ads.
You are listening to a show from the Reserve Q.
We are airing it now because we had free slots that were not filled.
This is a community project that needs listeners to contribute shows in order to survive.
Please consider recording a show for Hacker Public Radio.
We have videos for Android on using Firefox Developer and enabling custom plugins.
You can do ad blocking with privacy badger and ad block or YouTube sponsor block.
You can have Firefox Developer on Android with privacy badger, ad blocker and sponsor block which will skip ad content on Android devices.
This is because I was kind of fed up with the interface of new pipe for TVs and stuff.
I use new pipes still on Android to download YouTube videos because it has multi-threaded support or spider swarm downloading.
You can download a video with like 4 threads at a time, but new pipe makes it pretty easy.
Other command line tools you can use is YouTube Downloader or YTDL.
YouTube DL is another one because YouTube Downloader of course kind of died for a second and then they rioted to get it back up on GitHub.
So anyways, I was using new pipe on my TV and started getting frustrated with the constant interface was just awful for it.
And realized that there might be some other options out there.
I had talked to someone, a coworker that said, yeah, I just set up all these fire sticks on my, or fire TVs on all my TVs in my house.
I said, oh yeah, I use new pipe. I'll send you the link to do that so you don't have to have ads for YouTube.
And then I want to send this guy, there's probably something better out there by now.
Prior to YouTube or new pipe, there was a few ones out there like YouTube Downloader which were kind of shady.
And then there was like two of them that were kind of shady that I use on Android to download videos or download YouTube videos.
But prior to new pipe, there wasn't really much for Android or TVs to pull that content down or even watch it outside of YouTube.
You can always of course use the browser and it was always kind of janky.
But before like that, you had, what was the other one that was the Brave browser?
Guys, the same people that the Brave browser, it was called like two veritube or V2 or two backs or something like that.
Anyways, it's since been sued out of existence because they, no, they tried to create some kind of,
their logo looks a lot like YouTube, YouTube's logo and they did something where they were like selling the crypto, you know, crypto logos or whatever they call that.
And somehow they got too out of existence for that.
So now there's no more.
Karma was called veritube or VIX2 or some kind of play on words.
And it was weird because you had to use like this local like called M, I think it was called M,
M Google or M something.
It was a local app store that it would, it would do its updates with.
It was kind of weird kind of odd.
Micro, micro, micro something or other for Android.
And I wish I knew the name of the app, but I think it's still around.
It disappeared for a while and it might be still around.
But for Android and touch devices, I still prefer new pipe with a sponsor block.
And so you have to make sure you get new pipe with sponsor block.
If you just get the regular new pipe, it's not going to be as fun for you.
And sponsor block usually has a lot of the stuff disabled that you want to have enabled as it disabled by default.
So you go in there and turn everything on.
And you pretty much get to go on touch devices, but not touch devices.
TVs, I realized that new pipe is an awful interface for that stuff.
And I did some googling around and searching around will not Google anymore.
I'm doing kajikai.com.
It's like $120 a year for unlimited.
But anyways, the new one I've suggested to my old co-worker is SmartTube Next.
To get a project interface is wonderful.
You can log in. I'm like new pipe.
I don't think you can even log in with new pipe.
I never even bothered to try it.
But the interface is a lot better for this SmartTube Next.
Has sponsor block or ad blocks built into it.
It also supports other things like Bandcamp and some other YouTube flow and Russia or something.
And one or two other types of video interfaces or media streaming media interfaces.
But it lets you log in, which is nice.
I can follow my people and get my sponsor search results and all that good stuff.
And it actually, I'm actually enjoying watching YouTube on the fire stick, actually.
Not on my phone so much.
Because I always have really another app running on my phone.
But with the TV, I'll get kind of bored of TV or I kind of want something.
But I don't really want to watch TV.
I'll watch YouTube with this thing.
I'll try to remember when I upload this to put the show notes for it.
But if you go, if you look on YouTube for a free load 101,
FRE-E-L-O-A-D-101,
you'll see two videos.
And the one that has less views is the one that actually goes into detail of how to get sponsor block, ad block, and privacy badger.
And working on Firefox developer.
It's a bit of a wonky jump-through hoops.
You have to set it up an account with the developer version of Firefox, like the Firefox login.
And then to sync all of that, you have to have another Firefox login, I think.
So you essentially have to have the two logins for Firefox to sync it all together.
The idea there is that once you sync it, it's like Chrome's thing where it syncs like your bookmarks.
So if and when you do lose your phone or whatever, you at least have your bookmarks back.
Or your bookmarks back.
And then I don't know if it syncs automatically if it syncs your plug-ins, but probably not.
It's not too much of a deal to watch that video again.
Outside of that,
you know, other options for the Firestick I did.
I swear I talked about this, but there's a way to skip.
Also, there's a way to skip the ads, essentially.
So when you, if you don't notice, if you're using a Firestick or whatever,
if you open a program, for example, I use Plex,
you open up the Plex app and walk away for two minutes, guess what?
The screen's gonna go black.
And when you wake it back up, where is it going to be?
On the home screen.
Well, what is the home screen?
A bunch of ads.
Great.
I'm glad I paid for a device.
And I paid for Amazon Prime.
And I'm still getting ads.
And I can't make it stop no matter how hard I want to.
So there is a few ways to get around there.
So there might be some easier projects out there.
Putting the show notes if you know of an easier way to do it.
But it's a little tricky to find the right news article.
But the order of operations is number one.
You go into the device settings for your FireTV Firestick.
And you enable developer mode that will allow you to remotely connect to it
and spawn a shell, essentially.
And Android shell, maybe a shell.
And it involves, it's kind of complicated.
It involves getting your IP address and connecting to it and turning on debug mode,
which is really hard to find.
So it's hard to find that.
Once you have that, then you have to get ADB.
And you have to figure out how to get ADB to work.
Download the ADB tools, the DevTools, or Google.
So once you have ADB working, then you can connect to your...
Figure out what your IP is for your Firestick.
And then you can connect to it.
And there's like three commands you type that will essentially tell it not to go to sleep.
Now, on the surface, it seems like, cool, I win.
You lose.
Ha ha, no, that's for me.
I can start the Flex app.
And I don't have to worry about getting ads anymore.
Well, something happens over time.
Either the TV is kind of glitch out or there's not enough power to them or something.
Or maybe when you switch video modes, it actually kills the power to the thing
or maybe the USB goes to sleep something.
But, of course, every time I turn my TV on now,
the one upstairs, at least, is when I use the Firestick upstairs a fair amount.
It will, of course, be back on the home screen.
And, you know, also, it gives you a bunch of notifications.
It's something that's been updated or this has been updated.
And it forces you to update apps that you don't even want to update.
So, you know, if you don't like that whole ecosystem, whatever,
there's not a whole lot you can do outside of like building your own little mini-client for Blacks or something.
And even then, the Flex app for Linux is pretty awful.
I had to say, but they're more focused on, you know, your FireTVs, your Firesticks, your Roku's, your Chromecast.
I threw away my Chromecast because it only supported the pure-based or the streaming protocol, whatever it's called.
And it was not, I wasn't able to fire while it off properly.
Even though I had certain, like, streaming broadcast protocols enabled or whatever.
So, I finally gave up through the trash. It was an old G1, you know.
I didn't want the Chromecast, and I got like a 4K.
Or, yeah, so 4K or a HD1, I guess it's a 1080p.
They're achieved. I mean, if you wait until like Christmas, you probably get a 4K for like $20 or $22 bucks or something stupid.
I bought mine for like 15 or something, just for a 1080.
I think it might be 4K also, maybe not.
Anyways, you know, you would, it still does work.
Like, if you have Plex up and you leave the TV on and then you leave and, you know, make lunch or whatever and come back,
it will still be on Plex.
But something happens for me in my use cases and what I wanted was to leave for days or weeks,
come back to the TV and hit Beyond Plex.
And I wouldn't have to see the stupid home screen with them pushing dumb shows that nobody watches only because they push them.
So, that's some of what can help you out.
Other things, other devices, like I said, new pipe for touchscreen devices, for a command line, YouTube downloader,
and you can use RSC2, which is a command line tool that will multi-thread for you.
I do have a script on my GitHub that, well, it's a bad script that I need to convert to PowerShell,
but I don't really feel like it, it will multi-thread download a list of videos from anywhere.
Any URL will scrape it and multi-thread the download.
So, it will consume any amount of bandwidth you send it.
So, for example, if you were to send it a list of 300 YouTube videos, it basically will download multi-swarm,
like up to four threads for each one, like four threads every 15 seconds.
So, it will consume anything and download anything faster than any other download you could possibly have
because it uses multi-threaded for each individual file in a list.
So, if you send a list traditionally with YouTube downloader supports file list, right?
The problem with YouTube downloader file list is there's no way to send it from what I understand, multi-threaded with all the files at the same time, or whatever.
So, you can only do, it'll do it only one at a time, which that's not what you want.
You want to download all of them all at the same time and consume all of your bandwidth.
So, the YouTube script I have on my GitHub will, it's for Windows, but you can take the same logic and apply it for PowerShell scripting.
I don't really download videos and maps like that anymore.
There's also another project that I did to solve, like movies to text, and it will attempt to download a video using YouTube downloader,
then it will transcribe it, it will convert it to audio, and then it will transcribe it, try to transcribe it for it using Yaki or Vosk.
And then Yaki will create keywords for it, or essentially tags, and key phrases for it, which is kind of an interesting project.
So, for command line stuff, YouTube downloader or YouTube VL, YT-DL, you always had to update it before you run it.
As far as other video rigging, ripping content and ideas, if you really want to get super hairy, you start getting into inspecting the traffic.
So, for example, Venmo or Vimeo Vimeo has paid and or authentication based video feeds that are not easy to download.
There are some smarter people out there that rip, if you ever see like pirated videos and stuff.
These are the guys that can rip DRM content and change the encoding and figure out how to do different types of encoding.
But for me, I don't really know how to do any of that stuff, and I only know how to recognize the different encoding types.
But for me, I can usually get the content using a video, it's called,
if you search for a turbo download manager, there's also one called like multi-get, or the same website.
It's like addons.net and it's spelled funny.
But there's multi-youtube downloader thing that will support multiple different things.
Anyways, let me focus on driving here for a second.
So, the final way, last and final way if you're still listening, you still can't rip the content with YouTube, maybe it requires authentication.
So, all of these other downloaders are required authentication.
There are some that will support H260 or HTS, HST.
There's a few plugins for Chrome that are actually legitimate that will let you download HST videos, but even those are still kind of buried within some kind of whatever.
So, they know that people will have HST downloaders and they'll put a little bit extra bits in there, maybe the header of the file or whatever to make it not show up in HST or scrape right.
So, that's one thing that's probably not going to work, which you can try.
Those are usually kind of shady. I don't really like any of those.
The final method I will use for downloading videos is basically the Burp Suite.
And you can use JAPAR E on my GitHub to easily launch Burp Suite, but all you need is Java and to download the jar file.
It comes with its own embedded Chrome.
So, Burp Suite is for inspecting traffic across the network, even encrypt the traffic between you and the internet.
Penetration testers use it to test web applications. You can use it for debugging web applications.
It gives you a cool full control over the response and the request that you send back.
So, what I do it using for is ripping videos. So, if I have authentication, I can pass those tokens off to FFNPEG, which can process streaming video also and HSTs, but you have to have those cookies.
So, you can use Burp Suite as a proxy. Burp Suite will handle all the cookies for you, and you just feed it in a URL and a lot of the times you can get a direct copy of whatever you're trying to pull down.
Usually, if it's a handful of videos, you can just say, you know, find out which file is the video and just right-click it and say, save this file.
Some other options are, you know, once you see the video come in, you can look at the Burp Suite traffic and kind of dissect how the video is coming in and maybe join it together.
I've had less success with that, usually. What I would like to do is, if you think about it, you have to support everything.
So, what you'll have is, at first, if you use a modern browser with DRM built into it, which Chrome does.
Chrome, you know, I don't know if that has DRM built into it, but Chrome most certainly does, and it's like signed DRM stuff that's built into the browser itself.
And when you download Chrome, you accept that you're like, whatever, all kinds of bad stuff that Chrome's evil for, or Google's evil for.
But anyways, with that said, you have like DRM content that can come in in weird forms. So, to get around this, you can actually pretend or change your, what can help or can happen sometimes as you can use Jamboree, which is also will give you a portable Android emulator that runs on Windows.
And along with haxium acceleration driver for Windows, or for Intel, you can basically use that to navigate to the same website. And you will be surprised.
Jamboree will help you with all the burpsweet stuff. It'll do the certificate, it'll push the certificate to the virtual images and whatever.
You'll be surprised that if you do emulate a older, older device, or you use an older device, or you use an actual device, you will notice that the interface is different.
You have the support backwards compatibility. And in that, sometimes you don't have the availability to have DRM or to serve up some weird encrypted video stream, HST or whatever they call it.
So, sometimes downgrading your viewer or your browser can help some of that. If they have a web app, or if they have a mobile application, you can look at the mobile application and see if you can pull down the videos through looking at the traffic with burpsweet.
Again, if you're into the whole ripping stuff from real legit DRM, things like Disney, or Paramount Pictures, or any of those streaming services, those guys are smart enough to do it, but I don't know how they do it.
But there is no, as far as I know, there is no master file downloader thing. When you start getting into these DRMs, they keep it very tight to the chest, because they obviously don't want people downloading them.
So, people figure out their own ways. I've seen a few snippets of code on GitHub around ripping content from these major streaming providers, but there will be four things for re-compiling a library for something.
And it requires you to know how to build your own encoders or decoders, so you have to take the existing decoder, make a patch for it, and then plug it into whatever player you're using, like VLC, and player or whatever they use on Linux to pull the content down somehow or whatever.
But that's beyond me, but I'd say about 80% of the time, I can go all the way to Burpsweet and find the old legacy URLs. A lot of times you can just look at the code, and it'll say like, you know, feed this crazy HSTS, and you're just like, I don't want to do any of that, and you look at the code, and you type basically the same file name, right? This is a little tricky.
You take whatever unique identifier that whatever it is, and you search for that unique file name across the whole thing in Burpsweet, and if you're lucky, you'll see like, you know, compatibility URL essentially, like a URL straight up impact.
Sometimes you'll get split, so you'll get audio and video, and you'll have to join them together, which is the total pain of the butt, so you can do that with the impact.
What else have I seen? It's pretty much it. I mean, I don't rip a whole lot of stuff anymore. There is one, there is a similar plugin, or a similar Java applet.
I don't remember what it's called, a coworker suggested to me. I try to use it, and it's pretty much garbage. It's not really even as good as, like, using Burpsweet with YouTube beyond downloader, or a fifth impact with proxy support, and then letting Burpsweet handle all the traffic.
But I don't remember what it's called. It's a Java based, and it looks gross. You put in the URL of the thing you want to download, and it's supposed to parse the URL and like, find the content for you, but I don't honestly think it's any better than YouTube.pl, or YouTube downloader, or a YTTL, so I wouldn't really suggest that one.
As far as Linux goes, I have no idea. You might actually have better to, like, with Linux, again, like, old, per-risk compatibility, where this co-efficient type of stuff. But anyways, hope somebody that helps somebody out. If you know any other way, easier way to just rip content, even without authentication, let me know. Like, when Disney Plus came out, I tried to download their mobile app, and I looked at their browser, and I tried to download, just like, see if I could rip.
They gave me, like, a free month, or whatever. I wanted to see if I could rip Mandalorian, and just dump it straight to an image file, but that's not something.
Oh, it's easily, like I said, you started getting into the DRM decoders, and there's a higher mathematical. Anyways, hope that helps somebody out. You all took it easy, and never going.
You have been listening to Hacker Public Radio, at HackerPublicRadio.org. Today's show was contributed by a HBO listener like yourself. If you ever thought of recording podcasts, you click on our contribute link to find out how easy it leads.
Hosting for HBR has been kindly provided by an honesthost.com, the internet archive, and rsync.net. On the Sadois status, today's show is released under Creative Commons, Attribution, 4.0 International License.
