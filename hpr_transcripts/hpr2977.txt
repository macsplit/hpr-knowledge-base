Episode: 2977
Title: HPR2977: World of Commodore 2019 Episode 3: Life after Commodore
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2977/hpr2977.mp3
Transcribed: 2025-10-24 14:09:36

---

This is Hacker Public Radio Episode 2977 for Tuesday 31 December 2019.
Today's show is entitled World of Commodore 2019 Episode 3, Life After Commodore.
And as part of the series' interviews, it is hosted by Paul Quirk
and is about 28 minutes long and carries a clean flag. The summer is
a presentation by Dr. Richard Imers, author of Inside Commodore Doss.
This episode of HBR is brought to you by Ananasthost.com.
Get 15% discount on all shared hosting with the offer code
HBR15, that's HBR15.
Better web hosting that's AnastomFair at Ananasthost.com.
.
.
.
Hello, good listeners of Hacker Public Radio.
This is Paul Quirk and I return this week with my third episode of my World of Commodore mini-series.
This episode features a presentation by Dr. Richard Imers,
who is the author of Inside Commodore Doss, among other accomplishments.
This was a groundbreaking reference book for Commodore Nerds back in the day,
so catching up with its author so many decades later and getting some inside information was pretty exciting.
This presentation included visuals that are not available in this audio podcast.
If you would like to see and hear this in other World of Commodore presentations,
I recommend you go to the Toronto Pet Users Group YouTube page.
That Toronto Pet Users Group spelt as one word without spaces,
and the word users is plural.
A link to this YouTube channel will be available in the show notes.
And so, without further ado, I present to you Life After Commodore by Dr. Richard Imers.
Hi, I'm Dick Imers, and I'm here today, a dear friend, Tim, contacted Goldman,
regarding some vintage Commodore equipment that I had.
And I'm in the process of moving.
I had all of this in the garage, so I brought it up.
I go a little bit off my hands.
Of course, the one box that I need to present is my 1531,
which is a disassembled on my breadboarding, my 64.
Everything that I use to author the book with,
I'm still looking for the fox.
But sometimes I wade through my garage,
I look around to see where it is, and I don't see it yet,
but when I get that, I will bring that in.
The book was published in 83,
right to the top of the charts,
at the same time that the computer book industry was collapsing.
I was not the first person that was approached to write that book.
The first person was Luke Hargail,
and he lived in Arkansas.
Apparently, he would go to his door once a year
and sign royalty checks and give the money to the schools,
and then he would close the door,
and they wouldn't see him for a year.
The contract, when he declined,
it went to an engineer at A.C. Delco.
He got the contract, but he had to decline.
He had a son who had been a swimmer,
was in a diving accident, became a quad.
So they were beginning to migrate and look at therapy for him in Colorado
to get motor function back for him.
So it came to me third hand.
I was newly entered PhD,
who had been teaching for probably a decade.
You're expected to publish. I had never published.
Academic world is very cutthroat,
and very competitive,
and it's like you're getting promotions,
but you have them published.
What's up with that? Well, that was a good feature.
And when the contract came to me, it was open-ended.
Do I, to do anything that I wanted,
on the Discoperting System,
which I had used Commodore Equipment when I was coming through graduate school,
and I was familiar with the internals of the drive,
but not the way that most people believed.
I first got my Commodore, I think, in 1978.
I had gone, and after I finished all my coursework,
to a place in Ann Arbor called Newman Computer Exchange.
And Newman was like a bone yard for boards and stuff
that were taken out of minis and mainframes,
and you could go on, you could take apart components.
And I'm in there, and there's a fellow standing in the room,
and I'm looking in an apple,
and there's a Commodore on display,
and he says, you want one of those.
And I got his name.
I put, I think, $800 down.
I waited a year for the machine.
It turned out that the fellow that I approached,
I had gotten a piece of software.
It was protected.
I broke out of the protection scene,
and I began to look at it, and I translated it by hand,
but I had no idea what these symbols were.
I was a portrait programmer.
That was what I passed my foreign language requirement,
and for my PhD, which was in the fine print,
and they told me never to do that again,
when I asked to take flying lessons,
as part of my curriculum.
So, I went to Jim,
not realizing that he was one of four people
that Bill Gates had given source code to,
for Microsoft Basic.
So, when you would ask Jim a question,
he would go back to a briefcase.
I had no idea at the time.
What was in it?
He'd look, and he'd say, yeah, that'll work,
and he'd close it.
Well, it turned out that Luke Cargo,
and Arkansas also had source code,
and Jim Butterfield had source code.
The fourth person I never found out who they were.
But I would work with Jim off and on.
He had a very interesting background.
He was studying to be a Jesuit priest,
and during the Vietnam War,
he took opposition to the Catholic Church's stance
on the Vietnam War,
and he dropped out a seminary.
He then enrolled at U of M as a philosophy student.
He went to his professors.
He asked to be flunked in all his classes
to challenge the draft board.
He was a member of the Students for Democratic Society,
which I was told to stay away from.
I ended up knowing these radicals by default.
But Jim went on to invent.
He was the lead designer on the Guru terminal
for Ann Arbor terminals.
He applied for a job as an assembler
that said specifically they wanted a woman to do it.
And he went in and he talked to the owner of the company,
and they began to talk philosophy.
He got hired.
He became their lead designer.
He then went on to work on the programmable thermostat.
And from then he began to today's retired.
He gets back to the archdiocese in Ann Arbor,
and does computer maintenance and networking
and that type of thing.
But when I'm working with Jim,
it's like there's nowhere that I can compete with these folks,
so I began to study the drive.
But I had assistance in that.
The book like that can't be done without source code.
I mean that is fairly obvious.
I was given source code by Keith Peterson,
who worked for Commodore in Chicago.
I had the source code and I sat on it,
and I didn't know what to do with it.
So I wrote Commodore.
I asked for their permission to use it in this form.
And in doing that, I never got a response back.
So when you look at the memory map in the back,
it is in a European format that's by design.
That was to Keith from getting sued
because Commodore didn't have the greatest reputation
with people back then.
And you have a liability when you publish.
I did not have permission to use it in writing,
but it was one of these wing type things on the side.
So building the book around that memory map,
I had a student in the class in Illinois
Dr. Newfeld who had not published either.
So it's like if you can transcript this
or transcribe this memory map for me,
you'll get a ticket punched in academia.
I'll get a ticket punched and we're good.
And so he had the, basically,
I won't say the lion's share,
but that was probably the hardest task.
It was translating that from normal standard assembly language
into a European format.
His wife did a lot of the proofreading of it.
And the memory map is probably the most valuable part of the book.
That's the reference area.
I began to demonstrate how you could basically write machine code,
preload a buffer, execute it,
and the buffer, that type of thing.
But that's how the book came about.
At the time, the industry was collapsing.
I think it retailed for like 20 bucks.
Royal T is for two bucks on it.
I would split it with Geary.
Except we weren't getting paid.
The first check bounced.
I think for $5,000.
And I talked to the publisher.
And of course, he fed X'd out another check which bounced.
I think all total, I probably got $10,000 for writing the book.
I didn't write it with the intent of making money.
No one does that.
It was just to get a ticket punch,
somewhere along the line.
And in doing that,
it was infuriating because he began,
when data most folded,
he took it into bankruptcy.
He was a former Hollywood accountant.
So he knew all the ways to screw authors,
musicians, all of that type of thing.
And he applied those same practices to the book industry.
I always used to wonder why you would see one great piece of work
from someone,
and then you never saw another thing.
And typically as a contract dispute.
Dave would get $2 a copy
to pick up the phone
and say you can print 20,000 copies.
It was sold to Brady, which was a medical book publisher.
I think they picked up two of the data most titles.
And then it went to Simon and Schuster.
Simon and Schuster wanted me to go on and do something else.
But it's the same old contract where, you know,
during discussions that would get down to this point,
do you own the copyright?
Nope.
Thank you very much.
And they hang up.
And that's typically the way it goes.
You could try and write a contract yourself for the second publication.
No one will ever accept that contract
because you've made certain modifications
that work in your favor and not the publisher's favor.
Well, the industry was collapsing.
And I moved out of academia in 85.
I went into industry.
I worked for a subsidiary of General Motors.
And they put me to work on digital equipment.
Hardware.
I think they spent about $100,000 retraining me
to work on basically a big metal at that point in time.
They allowed me to, I think, speak at one obligation
that I had in 85.
And then said you can't do that anymore.
You have to focus on, you know, what we're doing.
And I worked for that subsidiary for 12 years.
I went on and worked as a manufacturing engineer
for the parent company for another 20 years.
And I retired at the end of 2016.
So that's pretty much it.
I don't know.
I can open up questions.
Publishing was interesting.
The companies were fun to go through.
I spent, I think, total of two weeks with Jerry.
We worked together.
He was from Manitoba.
So I got to go up to the breweries
in the winter when it's 30 below.
And you decide whether you want to run out
and get a cup of coffee or not.
But it was an interesting experience.
To drop out per se.
I have still followed Commodore.
I had an amiga.
But I lost a daughter in 87.
And in doing that, I just put my amiga aside.
And I just began to focus on other things
at that point in time.
Computers were not important.
And there were like a two-year period
where I didn't focus on computers at all.
By then, Commodore was strict.
I mean, we would follow the news in the states.
You never knew what was real.
What was not real with them.
I admired the book, like on the edge,
which is the story of Commodore.
I think that's pretty accurate.
I had been out to their headquarters in Westchester.
I was underwhelmed.
But then working as an engineer,
I was overwhelmed with some of the stuff
that we were doing.
You would expect all of these fancy prototypes,
but you don't really see that on a day-to-day basis.
I still watched the documentaries.
I was surprised that you folks are still going
after all these years.
I would attend early on with some of the Flint user group.
We would hop in an old GMC motorcoach
and we'd come to Toronto
and we'd spend the day when it was a huge acquisition today.
It's not that large,
but you're still going strong,
and that's really kind of amazing to see.
So I'll just open up questions.
You talked about the back part of the book
with the commentary on the source code.
Just so I understand right what happened.
Somebody had a copy of the source code.
Keith Peterson did.
He was a Commodore employee.
I think he was like their Midwest salesman.
He gave me the copy of it.
With this Wink Wink,
you have permission to use it.
Well, I'm going to contact Commodore directly,
and I never got a response to my letter.
So at that point,
it's like I had to do something.
I had actual source,
which was in a different format than that.
During I spent some time looking at how we wanted to develop a format
that we thought was passable,
that if we got sued,
maybe the lawsuit wouldn't be as bad as it was.
But without permission,
with Commodore,
you never knew where it used to.
I won't say they were a difficult company to work with.
You just never knew where you stood.
But having that commentary is at least as easy as having the source code.
You end up looking at two of them side by side.
Yes.
I know a lot of people have commented over the years
that that's a strange way to do source code,
more as a commentary standpoint.
Well, I was forced to do that.
If you publish actual source code,
you're just running a listing,
and that doesn't quite cut it.
They come back and say,
look, you literally lifted this,
and put it in in this context.
I think I was only asked one time
for some young hacker,
did I have source code?
I told them,
you can't do a book like that.
You're looking at tables,
and look ups,
and mnemonics inside,
you can't do that without source code.
There's specific labels used in that commentary
that they come from.
Yes, they did.
They did, okay.
They did.
Those labels are common or its own labels.
I always wondered about that.
You've all done anything,
you're related today,
an open source,
or something like that?
No, I am.
I am, but it was from an industrial standpoint.
I began to work on programmable logic controllers.
I ended up a GM-sized engineering award.
I ended up with four patents.
I gravitated from personal computers
into large hardware.
Then back, I spent eight years on the shop floor
working as a manufacturing engineer
and then twelve years
at the General Motors Tech Center in Warren,
supporting 500 engineers.
They would basically lay out machinery or a cell.
In my application,
and then I would generate like 100,000 lines
of machine code for them to go out
and start up a cell on the floor.
I focused on other areas.
That was open source within the industry.
Very little with micro computers.
Although I have followed
like the Reborn 64
that's basically a joystick that's bundled.
I have a friend that has one.
I have the original one
that Jim Butterfield worked on.
There was a gallon Toronto
that basically put the 64 on a chip
inside that joystick.
Jim was very supportive of that.
The one that looks like the little 64
and the redoing it.
The junk man was my neighbor game on the 64.
When I was in grad school,
what I had was a deck.
I would upload my data
to the mainframe in Ann Arbor
and I would be playing
what was then called Jelly Monsters.
It was Pac-Man from Japan,
but it was the original Pac-Man.
I had an arcade panel that I converted into a joystick
and I would just mindlessly play.
That was probably my favorite game of all time.
But the appeal on the little joystick
or the new 64 is the junk man.
You said that you were both not knowing the Commodore would see.
Did you ever hear anything back?
I never heard a word from them.
And I thought, well, that's no word.
But by then, what had happened was
there had been one book written on Apple Doss.
I'm not sure who the author of that was.
There had been one written on IBM Doss by Peter Norton.
And the void that was there at the time was for Commodore.
I don't think anyone thought the 64 would take off like it did.
And it went like gangbusters.
I mean, it was the best someone computer in the world at one time.
From everything I've read, it was the Amiga that took Commodore down.
The schism inside.
I have worked with programmers over the years.
I spent 30 years as an industrial programmer.
I have always felt that the people that I've worked with
would benefit by going through an 8-bit computer game.
Because you have confines that these people are unaware of.
Job a script is like, we'll bring in this library.
I think my favorite joke at the time was that the next version of Microsoft Office
would be called Microsoft Office Park.
Because that's the way software goes.
It's just absolute bloatware.
And I would write code that would basically time cycles was as lean as it could be.
I think the last program that I wrote before I retired was three lines.
But it took 40 years to be able to write those three lines.
Of course, you have all these suggestions.
Do this, do this, do this.
Oh, we can do this.
And it's like, well, if you sit back, you can do it this way.
And of course, these young kids, they don't even know what they're looking at.
And it was, you know, as succinct as you could possibly get it.
I don't know if there are any other questions, I'll entertain anything.
I don't know that this era could exist today.
You know, the software's just gotten out of control.
The one piece that I use all the time now is Photoshop.
I focused on that.
It's like, well, bird processes are good.
Photoshop is great, and I'll focus.
So at work, because I would write an application that 500 engineers would use.
And I really wasn't trainable in my department because they went through my app to generate the logic to go to the floor.
I would ask them to take Photoshop classes.
And they would cringe, but they would send me.
So I was learning new terminology with wedding planners and photographers.
And, you know, it's like, it's kind of humbling to sit back in an area where you know nothing about, you know.
I was getting into multimedia on the Amiga, but that was a very complicated machine.
It was way ahead of its time.
You know, my preference has always been the 8-bit because it was pretty simple architecture.
I think my first application, I had to do work and quality control on the shop floor.
We were building 80 cars an hour.
We were sending 50 end to repair.
Eventually, we would hear an announcement over the loudspeaker.
We had two lanes in the plant, one was called I-75, the other I-94.
And it was like, I-75 is full, I-94 is full.
They shut the plant down, sent people home.
So I was tasked with working on quality control.
And I had written an application, but I needed plotting software.
I got that out of the University of Arizona.
The guy that sent it to me, sent it to me as open source.
And I believed in open source back then.
But he couldn't do printing with it.
So I pulled the character generator out of a pet.
Soft coder did it in my application, transferred it.
And they had pet ski when they would do the printouts, but at least they could see
that there was printing on the printouts in terms of the normative data on the XY axis.
And the categories and stuff like that.
To me, that was an easy task because I had disassembled the character generator at one time.
And it's like, I know what to do.
Of course, I'm down there with union people and repulling ships,
which we weren't supposed to do.
And it's like, I need to read this.
And they would just kind of look the other way.
But it did have application very early on for me.
And I then gave my enhanced source code back to the University of Arizona.
And got my hand slapped.
It's like, we don't do that in this screen.
It's like, wow.
So open source is one white.
You know.
It's a no.
So I did donate my cat.
I donated my 40-40 drive at an 80-23 printer.
I had a spinwriter that I used early on to print my doctoral thesis.
I drove a Chevette for two years to pay for that printer.
It was more expensive than my car.
One electronics I could find during my move.
I had a car full.
Now try to get that past customs without a permit.
I spent an hour while they drugswob my car.
What asked me about what operating system to system.app?
None that I knew of.
And they were, you know, they were just lost.
They did let me through.
But I realized probably the next time a letter from your group, for example.
In five minutes, yes.
No, you know what?
I had never published.
In graduate school, I wrote one term paper in my doctoral thesis.
I would do anything not to publish.
Now I have thought since I retired that I would like to write one called the accidental engineer.
And let people know what really goes on inside the auto industry.
I decided that I would need a law degree to defend myself against the autos.
And that's quite an endeavor.
Use a pseudonym.
They will find.
But no.
I had just done some utilities early on that someone looked at and said, you know, they were pretty good to use.
But no, I, you know, had not published before or since this volume.
Those that do, I admire, you know, when they stop publishing, I pretty much have a good idea why they stopped.
Okay, I guess that's it.
Thank you for coming.
I really hope you enjoyed Dick's presentation as much as we did.
And I hope you're enjoying this podcast series.
If you are, please leave a comment at my personal non-commercial blog at peakwork.com where you will find a picture of this presentation.
And please tune in next week to hear Randy Rossi's presentation entitled Bear Metal C64 Emulation on Raspberry Pi.
As a Raspberry Pi user myself, this presentation was a real gem.
Until then, please drive safe and make sure to have fun.
You've been listening to Heka Public Radio at HekaPublicRadio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Heka Public Radio was founded by the digital dog pound and the Infonomicon Computer Club and is part of the binary revolution at BingRef.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise status, today's show is released under Creative Commons, Attribution, ShareLight, 3.0 license.
