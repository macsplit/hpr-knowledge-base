Episode: 1120
Title: HPR1120: Jerome Leclanche from the razor-qt project
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1120/hpr1120.mp3
Transcribed: 2025-10-17 19:21:17

---

.
Hi everybody, my name is Kent Falom and you're listening to Hacker Public Radio.
Today I'm joined by Jerome Lattlance.
Is that correct?
Luke Lange.
And you're here and you're just going to talk to us about the Razor QT project.
So how are you doing today?
Hi, it's really nice to be here.
It's actually Razor QT.
It's a desktop environment based on QT, a bit like KD,
but much more lightweight oriented towards being light and modular,
a bit like LXD if you're familiar with it.
Yeah, before we go any further, could you give us an idea of what the difference between a desktop environment is and the window manager?
A window manager really just controls what windows you see on the screen,
how they're displayed and how you move them around the screen.
So window manager doesn't have that much effect on the way you control your desktop,
really just your windows.
A desktop environment is more the whole ecosystem of your applications kind of.
And where is this kind of obvious where the boundary is between the desktop environment and the window manager?
Say the drawing of the frames and the smoothed corners around your windows,
that sort of thing, which would take care of that?
That would be the window manager.
The window manager really just controls functionality while the desktop environment controls applications and ships applications
in this case.
At Razer, we ship the panel at the bottom or at the top.
When we ship the actual desktop, it's all optional.
And we also ship a control center and panel plugins, this sort of thing.
So we give you applications while the window manager would give you functionality with your windows.
Okay, that's fantastic.
And so your niche is Razer Qt, so it's obviously based on the Qt widget sets.
And that's the same as KDE uses.
So what can you kind of give us a difference between Razer Qt and KDE?
Well, the first main obvious difference is Razer Qt is a very new project.
We're still on 0.5 right now.
Well, KDE is a very, very long-standing project, has years behind it.
We are still getting established.
We're still developing new applications and new plugins for our desktop environment.
The main functional difference as it is right now is Razer Qt is oriented towards being purely based on the Qt framework.
While KDE provides additional functionality to Qt in what's called the KDE libraries.
Okay, so the downside of that is, I imagine that if you want to write a text,
instead of taking advantage of the KDE libraries, you need to socket all that stuff in as well.
From what I've heard, KDE is actually working on getting better at that with KDE frameworks 5.0.
However, yes, we, none of the applications, we recommend, depend on KDE.
Okay, so if you're coming to Razer as I did a few weeks ago,
I installed version 4 and the desktop, I must say, was a little bit rough.
You would definitely need to know how to move around the console in order to do some things.
However, in the last few days, there's been a release of version 5,
and I must say that has seriously improved their user experience.
Can you give us a little bit of a rundown of what's included in version 0.5?
0.5 has actually brought all the improvements since February of this year.
We've been working on it for quite a long time.
As far as new features go for people who were checking out 0.4 before,
we've added really popular panel plugins, such as volume control and CPU monitor.
We've added a lot of translations, had a lot of new translators joining us.
We also added a notification demon like Ubuntu has various settings,
various settings applications, configuration applications.
We also have a light DM greeter now for those who use light DM.
They can use that.
Overall, lots and lots of improvements, lots and lots of bug fixes.
Rough edges moved out.
0.4 was really targeted at enthusiasts, but now Razer, we are actually comfortable
with recommending it to people more oriented towards just having a working environment.
Yeah, I couldn't agree more.
It's a massive improvement, and I've just seen a lot of announcements on the mailing list
of some of the supported distros coming out with support for 0.5.
Can you tell me how could somebody go about getting it installed or trying it out?
Well, enthusiasts would just check out the GitHub repository, we're on GitHub,
at GitHub slash raise or dash cute.
Link in the show.
And for regular users, we have packages, we have packages, maintainers on Fedora,
on Debian, on GEN2, and some other distributions I cannot recall right now.
Citix, sorry.
Yes, a seduction.
But there's also live distros as well, if I'm not mistaken.
I believe so, I actually don't deal with that.
Okay, very good.
Links to all of this would be in the show notes, anyway.
Whereabouts are you from?
I'm actually French, but I live in the UK.
Most of the team is Russian, and we have people from really all around the world joining us.
It's a really nice community.
How did it start? What was the motivation?
It started a while ago.
I can't speak to the motivation as I was not on the team at the time,
but the main idea was to have a light, a light, a desktop environment based on cute.
We all, on the team, we all have a really deep love for the cute framework to develop applications.
However, as developers, if you want to develop a cute application, you're kind of stuck with KDE.
If you want to distribute it, you might recall some popular cute applications like Quasol VLC.
That look much better on KDE than they do on GDK interface.
So, as a cute developer, you face this challenge on Linux that you get into a spiral well.
You develop a KDE application, and you end up releasing it just for KDE.
Okay. Have you noticed that there's been a switch away from KDE support,
and that most of the distros seem to have gone down no road and are now kind of splintering off into various different directions?
I can't really speak much about that. I haven't felt it.
I know that Ubuntu has discontinued... Canonical, sorry, has discontinued its support on Ubuntu,
and Ubuntu is now a standalone project.
As far as I know, that's just because they want to focus on Ubuntu instead.
And do you find that that's... So, where else is QT used, actually?
QT is using a lot of places. It was originally developed by Nokia for their phones,
and it's a cross-platform framework, it's a cross-platform application framework, really.
It's used by some very popular applications. I mentioned Quasol VLC earlier.
It's also used by some companies. It's popular with game companies for their launches, game launches.
It's really in a lot of places. You can have more information on the QT website.
And how difficult is it to program in QT is it strictly limited to C++?
QT, the main project is in C++. It's extremely pleasant to work with. It's one of the best APIs.
Actually, it's the best API I've ever worked with. It is very consistent and extremely well documented.
It has bindings in tons and tons of languages, including the most popular ones in Ruby and Python.
It also has bindings in Lua, and other languages I haven't dealt with.
Do you then support Perl and stuff like that?
What does somebody need to be able to write in the order to contribute to the Razer QT project?
Currently, we only accept C++ applications.
However, on the long term, we haven't decided yet anything about languages.
For now, for simplicity sake, we only support C++. It's not defensive.
What is the, do you have any other rules or guidelines that you're implementing for one reason or another at the moment?
Like, restricting applications to C++. What about pulling in different libraries?
We're trying to stick to being extremely lightweight and anything that pulls in big libraries needs to be optional.
We're trying to stay extremely modular, meaning you can easily pull in parts of Razer QT
and just run parts of it instead of running the whole thing, which is something you cannot currently do, as far as I know in KDE.
But as I said, they were working on that.
We're also encouraging use of third-party applications for your actual environment, meaning we do not ship currently any file manager or document viewers or anything like that.
We have more popular desktop environments to do.
We have a list on the GitHub Wiki of applications.
We recommend you to check out.
As it stands, we do have plans to ship really the core applications, but they will be optional.
What we really encourage is usage of more acute applications, more development on them and so on.
Okay, the core applications that you'll be shipping are those ones marked recommended on the Wiki?
We have not decided yet, but we will be working on that soon.
And what's the project team made of? Like, when you say we have them decided who's the we?
We're really just a few developers. There's Peter on the team. There's Alexander.
Right now, we're just committing whatever we find.
We're getting help from new developers that joined us during the 0.4 to 0.5 timeline.
We have a couple of Nokia X Nokia developers who joined us and have been contributing a lot.
It's been really nice.
Fantastic. I must say the approach is very unlikely to find out.
I've been trying out a lot of light with distributions myself recently.
And I must say, I don't like the known widget, the GTK widget set myself.
I find it ugly. Don't know why it's personal preference, I guess.
I do like the cute widget set. Don't know why. It's just the way it is.
And I upgraded my wife's computer here from Ubuntu and I can't uninstall my SQL database is running 24.7.
And if I attempt to uninstall it, it'll want to uninstall the KDE desktop.
Do you ever visit a future where Razer Keith will have my SQL as a requirement on the backend?
Absolutely not. As I said, anything big, anything big stays optional.
So if we do end up with my SQL as a dependency, which is extremely unlikely,
would mean much more likely to use SQLite, we would keep it as an optional requirement.
The bit you're talking about is I believe Nipomuk is dependent on my SQL,
which is again, something they're fixing in KDE frameworks.
Yeah, okay. Well, that's fair enough.
But yes, I suppose it's a philosophy approach that allowed that to happen in the first place.
You know, that you don't really have a modular modular in the desktop.
But what it does, what it has done is it's revived a few laptops around here
and a desktop and work was blazingly fast.
So you're doing a great job. Keep up the good work, basically.
Well, thanks a lot. Yes, Razer is actually really appropriate for older computers.
It's really, we see it as an alternative to LXDE and computers that means lightweight.
Lightweight desktop environments, but want to stick to cute or just personal preferences, really.
Yeah, it's nice to have an option there for people who do like the look and feel of KDE,
but they're on slightly older machines.
And I mean, the choice of third party applications has been an absolute revelation to me.
And the site, KDE apps.org. Is that correct, KDE apps.org?
KDE dash apps.org. Yes, there's also a Qtaps.org.
Sorry, that's the one I met. Qtaps.org.
Yeah, you can lose a day quite easily there browsing through those.
I would warn you though, a lot, a lot of the downloads are actually outdated on there,
but it's been, it's been a really nice place to find potential projects,
which we're adding to the third party applications.
A couple of projects, including Easy Paint, which is kind of a MS Paint alternative, cute.
We found them on there and we recommend them now.
And is there much of, you know, if you run into a lot of library dependency issues
when you approach those maybe smaller projects when you're trying to pull them in?
It really, it really depends usually now.
Usually it's really lightweight applications.
The functionality that is given by the third party apps,
I know that's not strictly a razor issue here,
but I'd just like to comment that the third party apps that you have suggested
for the terminal, for instance, and for the KD editor are very much up to the task.
There's only one or two minor pieces of functionality that I'm missing,
but then again, that's personal preference.
So it's amazing how small these applications can actually get.
Yeah, we, I mean, it really depends on the application.
There's a couple of applications which really need some love,
but a lot of them, a lot of them are really up to the task.
I use my current desktop as fully cute,
so I don't actually have KD on it.
And I'm running without the issues with the text editor,
terminal, emulator, browser, everything really.
Everything you would expect from a desktop environment.
Exactly. There is one thing that I would probably say to new people
is that you would need to know a little bit more about what's going on in your window manager
and how to control that.
I, for instance, don't have a logout button, for instance.
And I know I can research it, but it's just prepared to have a little bit of,
a little bit of learning, which is an obviously good thing.
We actually, we're actually support most window managers.
If you like, if you come from KD and you like KWIN,
I know I love KWIN.
KWIN can be run without most of the KD libraries.
So you can just run that along, raise the same thing.
If you want to keep some KD apps like K or anything like that,
nothing is preventing you from doing.
So you're just going to need the libraries running.
And that's more the libraries that are going to consume disk resources
as opposed to the background services running in the background.
So where are the efficiencies?
In the end, it depends on your distribution.
No window has a lot of forced dependencies.
For example, if you're running arclinux, so if you're running GEN2,
you can pre-easily recompile.
Passive KDE without StrayG, without Nepomuk,
this sort of thing, which are the main issues.
As far as I know, I haven't actually worked on KDE,
but as far as I know, the main performance issues.
When we talk about low-powered hardware,
one machine jumps to mind and that's the Raspberry Pi.
Has anyone had any luck getting Razer running on that?
It's been discussed.
I know that very recently Q2 has announced support for Raspberry Pi.
So we should be able to get Razer running onto one.
I actually don't have a Raspberry Pi.
None of the developers, I believe, have one.
Am I just buy one and try and get it running?
Okay, well, I have a spare one here. I can ship to you if you want.
Thanks.
Actually, I think you're going to foster him, right?
I will be going to foster him in 2013, yes.
Okay, I plan to be there as well, sporting HDR.
And if you don't have a Raspberry Pi by then, I'll give you one.
And if you do, I'll give you a pint. How about that?
That sounds great, thanks.
I think I've pretty much covered everything that I wanted to say.
Is there anything else that you as a project need or are looking out for?
How can we help?
If you want to help on Razer, we actually need developers to give the overall project some love on translations, on applications, mostly on widgets.
But what you can also do as just the regular cute developers,
give current third party applications some love there.
I know, for example, Juffet, which is a text editor, is looking for a new maintainer.
So if you have experience with QCintelia, you can help there.
Or you can just help make the cute environment, how make the cute ecosystem a better place
by adding your applications to it, or helping current developers with it.
Okay, that's not good news, because that's a very good editor that Juffet.
I, on the wiki, you do have a how to make a widgets type thing.
What do you have in mind for those widgets?
We have two types of widgets. We have desktop widgets, and we have panel widgets, not completely sure which one you're referring to.
Either way, it works a lot like KDE's plasma.
As in, you write whatever widgets you like, really.
It can be a clock, it can be calendar, it can be a weather widget.
You publish it, you can either publish it on your own, or you can send it to raise a cute.
If it's good, we can integrate it into the mainline.
What we have in mind, eventually, is to make the process easier to have your widgets published without requiring intervention from our end, really.
Okay, how do you put the widgets on the desktop?
If you have raised a desktop running, you can right-click the desktop and click add a new desktop widget.
You'll get a small list. We have very few desktop widgets currently, but you'll get a small list of widgets you can add.
We have four developers. We have a hell of a widget, both on the desktop and on the panel, which you can copy of and use as a starting point to get your new widget running.
Where will I get information on the Qt, keep saying Qt, the Qs, APIs, and how to guide and, you know, intros and that sort of thing?
Qt is fully documented on doc.qt.nockia.com and on qt-project.org.
It's actually been in the process of moving to Qt-project.org.
It's extremely well documented, no matter what you run into, you can just Google it and find it in no time.
We have a mailing list for Razer, which you can join. It's on Google Groups. It doesn't require Google account though.
And you can just fire away ask your questions. We also have an ISC channel on 3Node. It's Razer-Qt on 3Node.net.
It's a big question there by the time.
A lot of mailing lists are getting quite busy these days, so that's pretty good.
Sorry, I'm veering off now into my own questions. Now that I've got you online, do you have a network widget?
A network widget is in a network monitor?
Yeah, exactly something like to attach to Wi-Fi networks or to see the status of whether you connect it or not.
We have a network status widget. We don't have a widget to attach to a network.
I know that network manager should run without the issues as it's just a system-tri application.
So, how does that work in practice? By the way, it's a safer example.
Skype when a run that comes down in the system panel, is that just making regular, what sort of calls is it making there?
The system-tri is a small place where special windows go.
Qt and pretty much all the application frameworks have functionality that let you put your app in the system-tri and add some functionality there.
And some applications are based off being on the system-tri like network manager.
Yeah, I've seen an improvement in the power manager actually.
You used to have to run it in the network tray and now it just runs on the background.
Yeah, we've had a lot of improvements in 0.5. I don't actually use the power manager of it. I know it's been improved a lot.
I must say that just on the documentation point, I wanted to put in a feature request, I think, for a UTC clock.
And in the process of debugging it, I ended up on the API page, the documentation page.
And I must say it was quite reasonable to read it even if you only had it very as I do very low level of understanding of that sort of thing.
So I think we can conquer about the quality of the documentation. That's excellent.
That's excellent news. We're always looking for feedback.
And if you have bug reports or feature requests, you can file them on GitHub or you can send them on the mailing list.
How closely related are you to the free desktop project and how do you get into that?
We've worked with them. I personally worked with them because Razer as a new desktop environment is testing really the free desktop project.
Parts of the free desktop project are really balanced to normal KDE, which can be a bit annoying.
So we just file bugs or we write new specs, we talk to the free desktop developers.
So we're not related to them, but we do improve the project in our own way.
You're definitely keeping the free desktop in mind.
Absolutely. The goal when writing a new desktop environment is not just to have own things, it's to let users have their own setup, have the things running the way they like, have bits of norm, bits of KDE, bits of Razer if they want to.
Yeah, I think I must say when I installed the desktop environment, I started getting a bit excited because I was starting to learn more about my desktop again, where I've been kind of shrouded in the comfort of a nice polished distro like a Kubuntu or something or KDE and Fedora.
A lot of the things are taken for granted and then after a while you start to notice the 10% of control that you're losing and then it starts getting frustrating again.
Absolutely. Getting to know your computer really, getting to know your distribution, getting to know your entire setup is, in my opinion, on the long term important as a Linux user.
Many people who switch from prebuilt distributions such as Fedora or Ubuntu or Debian get to know their desktop after switching to distributions like Octanex or Gento.
Yeah, there's nothing to stop you, of course, installing a network install of Fedora or Debian if you comfort level is there and then install Razer and build your system up yourself from that point of view, of course.
Absolutely. Pull up a virtual machine and try it out on there. It's really the easiest way and you can just wipe it out anytime you want.
And it's fast. Folks, you have no idea how fast it is. It is fast.
Yeah, it's really fast. When you got used to long login times, long log out times, waiting for applications to close and so on, you're not really used to seeing everything just appear or disappear.
Yeah, it's amazing. Now, I do have to ask you some more questions and probably this one is related to functionality supported in Qt.
And that is what's your plans for accessibility and support for text to speech and that sort of thing?
Well, we have plans to support it, of course. The only reason it's not been done yet is none of the developers have the current need.
But if someone wants to work on it, we more than welcome them. We have feature requests open for it.
We have feature requests for text to speech and left handed mouse, this sort of thing. And really we welcome any work, any work on it.
Okay. And how, excuse me, Jonathan Nadu is a friend of the show here and has the accessible Computing Foundation who tried to promote accessibility and computing, obviously, but also from an open source point of view.
And they are willing to assist projects with providing developers in order to help projects out.
So can you do you have any familiarity with what the support in Qt itself is for accessibility?
Qt has excellent accessibility, we are support. However, a lot of accessibility features come down to actual applications implementing them.
And things like the left handed mouse or this sort of thing also require settings, panels and testing and so on.
So it really comes down to time. None of the developers on, on razor, paid developers. So it's a project we're all doing out of free time.
So we're always looking for some help. Super. Okay. Well, that's pretty much it. What are the timeline and what are the goals for the project?
What if suddenly somebody in the morning decided to hire all you guys and put you on razor development full time? What would you do?
Well, if somebody did, I'm pretty sure they would have plans for us, but what would have in first is really would work on getting as much of the popular features done on GitHub.
We would work on getting third party applications, bring them up to par, have proposed a nice ecosystem to anyone who just jumps in.
Possibly have an installer that recommends applications or works with the distribution to recommend applications, recommend packages.
We do have leads with regards to translations still. And after that, it comes down to polishing, getting getting more features done and having more people suggest new features, suggest their experience, give their feedback.
Okay. Fantastic. Well, I hope after listening to this, some people will jump in and at least try out a razor.
Is a razor a razor cute? Which would you use?
Officially, it's razor cute. You can call it razor. We won't get offended.
Where did the name come from?
Oh, that's a great question when I can't answer.
Yes, maybe you'll be able to tell me that over a pint in over a nice Belgian beer.
Well, that works for me.
We can always make up one. Never let the treats stand on the way of a good story. That's what I will say.
Listen, thank you very much for taking the time. Is there anything that I haven't covered?
No, really. We're just really excited about all the attention razor has been getting lately.
At the project, we really do feel that we are kind of plugging hold here.
There's people out there looking for a lightweight, cute distribution.
So it feels really good to have all this attention pointed towards us. It gives us new developers and really better feedback.
Are there many people packaging for distributions? I saw Debian and Fedora on the list.
I think we already covered this.
Yes, we have Debian Fedora Ubuntu. I believe we have OpenSus as well.
I think there's a package.
There's a package on the Arclinix AUR as well.
Okay, cool. The only one that's missing is CrunchBang.
If only we knew the lead developer of CrunchBang, perhaps he could package it up for us.
So, okay, well, that's it. I have ran out of questions. I must say I'm extremely excited.
And I'm being spammed by the razor cute mail list, which has now got four new emails since we started this interview.
Very busy. So with that, I'll let you go back to fixing everybody's problems and I'll start editing the show.
Thanks a lot. I'll see you around and happy to do this in time.
Just remember that if you ever want to submit a show yourself, you can do that. That's easy, busy.
You can email admin at HackerPublicRadio.org. If you ever want to do any announcements or anything like that, just fire them in.
Or if you want to interview any of the people on the project yourself or if there's any updates, feel free to send them in to us as audio snippets and we'll put them in the queue for you.
Sorry, sounds cool.
And with that, I'll end the show on, like to remind everybody to tune in tomorrow for another exciting episode of HackerPublicRadio.
You have been listening to HackerPublicRadio at HackerPublicRadio.org. We are a community podcast network that releases shows every weekday on death week Friday.
Today's show, like all our shows, was contributed by a HPR listener by yourself. If you ever considered recording a podcast, then visit our website to find out how easy it really is.
HackerPublicRadio was founded by the digital dot-pound and new phenomenon computer cloud.
HPR is funded by the binary revolution at binref.com. All binref projects are crowd-responsive by lunar pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released on the creative commons, attribution, share alike, be those own license.
