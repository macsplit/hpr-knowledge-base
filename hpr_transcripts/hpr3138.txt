Episode: 3138
Title: HPR3138: Linux Inlaws S01E12: Reminiscing in FLOSS Weekly
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3138/hpr3138.mp3
Transcribed: 2025-10-24 17:43:14

---

This is Hacker Public Radio Episode 3138 for Wednesday 12 August 2020.
Today's show is entitled,
Linux in Laws Season 1 Episode 12, Reminiscing in Floss Weekly.
And as part of the series, Linux in Laws, it is hosted by Monochromec
and is about 94 minutes long
and carries an explicit flag. The summary is
an interview with Randall Schwartz of Floss Weekly fame.
This episode of HPR is brought to you by archive.org.
Support Universal Access to All Knowledge
by heading over to archive.org forward slash donate.
.
.
.
.
.
This is Linux in Laws.
A podcast on topics around free and open source software,
any associated contraband,
communism, the revolution in general, and whatever else,
fans is critical. Please note that this and other episodes
may contain strong language, offensive humor,
and other certainly not politically correct language.
You have been warned.
Our parents insisted on this disclaimer.
Happy mom?
That's the content is not suitable for consumption in the workplace,
especially when played back on a speaker in an open plan
office or similar environments.
Any miners under the age of 35,
or any pets including fluffy little killer bunnies,
you trusted guide dog unless on speed,
and Q2T rexes are other associated dinosaurs.
This is Linux in Laws, Season 1 Episode 12,
reminiscing on Floss Weekly.
Martin, how are things?
Things are great.
Perfect.
Working, no echoes, no automatic volume adjustment.
Finally!
What else?
Possibly go wrong.
Excellent.
Yes.
How are you?
Not too much work.
We look forward to today's interview with a guy called Renel Schwartz.
We have been working on this for quite some time,
as probably most of our listeners know.
Renel used to do a show called Floss Weekly.
For the last 10 years at least, I think.
But Renel will tell us more during the upcoming interview.
But before we get to that interview,
let's do some news.
Martin, what do you have in terms of news,
as in things that are not old and like us?
Oh, grumpy.
Yes, Martin, why don't you tell us about the new and upcoming podcasts?
The young and joyful coders.
These are the ones.
These are the ones, indeed.
Starring ourselves.
The news.
Yes, my biggest news, I think, was the Mac announcement.
Pigeonier, familiar with this one.
Which one?
Quite a few.
What did they probably are?
Being decided company,
but obviously they changed from Intel to ARM-based.
Making their own chips for Mac.
I thought we were recording this in July, not June.
But maybe I'm wrong.
We did an old news.
There we go.
I thought you missed four week old news.
Okay, okay.
I don't know if you heard this,
but we made an announcement last week.
We are recording this.
What is it?
What's it like, Martin?
25th?
27th?
Yes.
Google made an announcement last week,
actually, that they finally opened up user-level threads.
As avid listeners of the show will recall,
there wasn't an episode not too long ago,
where an unbeknownst call host, basically.
I can't remember what episode it was,
but I just recap.
There are current-level threads,
and there are user-level threads.
And the disadvantage of current-level threads
is that once you do a rescheduling of any thread,
you have to cross from user to kernel space,
do the rescheduling as in the context switch,
and go back to user space,
which normally is a very cost-intensive time operation
in terms of CPU cycles.
So the idea behind something called few-text,
as in fast user-space mutexuses,
to minimize the amount of boundary crossings
as in to the kernel and back,
so that the majority of the stuff can be done in user space.
There were additions to the kernel as early as,
I think, 2.5,
and Google made a presentation of an enhancement of this API
in 2013.
Essentially, it's a fine-grained optimization
to that user-space API
that allows simply a swapping of threads.
Imagine your ordinary message queue,
say there's one thread producing stuff,
then another thread is modifying this,
and then the producing thread
takes the result back again.
So, in essence, you would have,
from a kernel perspective,
three context switches,
one from thread one from thread one,
two, two, and then back to thread one.
So, needless to say,
with a few text, as they're called,
you can do this with also three operations,
but Google has proposed,
as early as 2013,
and you'll find the link in the show node,
a mechanism, basically,
to simply swap these threads,
combining operation one and three,
and you'll find the performance benchmarks
in that presentation that we're going to link to,
but, for this particular use case,
it's quite significant.
They have, according to the list kernel mailing list,
they have proposed this as of last week,
but when I did some research for this episode,
I came up about a FOXIA article
that is as old as last year, I think.
So, apparently, the FOXIA implementation
is ahead of the Linux kernel patches
that they've just submitted for 5.9.
Okay, so it's actually been submitted already.
It's coming up for 4.5.9, and I reckon,
this is only the first set of patches that they will do
for their full implementation
of a full-blown user space thread library,
with the ideas, of course,
to make this much more performant.
Apparently, they have been using this kernel
or these user-level threads,
actually, for the last couple of years,
inside Google,
but they're only slowly open-sourcing this,
and this is the first kind of patch sets,
or this is the first patch set,
rather, because it's only one,
that we're seeing right now.
Okay.
Looks like they are finally embracing...
Oh, they have been doing this from day one.
More or less.
What's happened to open-source sets is, of course,
the SQL source in terms of the search engine,
sorry, of the search engine algorithm,
but stuff like proto-buff
or something called GRPC,
built on top of proto-buff,
has always been open-source.
GoLang is open-source.
Carbonitas is just a name
of your contributions to the community.
I mean, no, Google...
I mean, in contrast to what I would say,
Google has always been a strong
proponent of open-source.
It's just the case that they do not open-source everything,
or the only selector component.
Like many companies.
Yes.
More or less.
Yeah, full disclosure,
if people haven't listened to the back episodes,
we still...
Sorry, if we have to cut this out,
we work for Ren's Labs.
Yes, an open-source company.
I will continue to work there,
whereas that's unfortunately
of the case with Martin anymore.
I can't spill the beans, right?
Yeah, it's filled the beans.
No, Martin is actually joining a company called Microsoft,
probably known for its close-source approach
for the last 30 or 40 years.
And I think he won't be joining the WSL team.
That's for sure.
No, he won't.
Sorry.
No, no, no, no.
That's not due, though.
So, what about your future employer?
It's still a complicate, right?
It's lab, that hasn't changed.
Okay.
Not the rest of the company.
No, no, no, no.
And I do not intend to start a rascal, we know.
Okay, maybe now it's time to bring on our special guest, yes?
Yes.
So, with no further ado,
let's get into the interview.
Brenda Schwartz, Mr. Rindel Schwartz,
I'm great to have you with us.
First of all, thank you very much for taking the time.
This is somewhat of a free flow format.
So, in contrast to Frost Weekly,
we don't have any script no questions, I'm joking.
We don't have any prepared list of questions.
So, what we would like to do, basically,
is to have more light on you as a person,
and of course,
Frost Weekly probably being the most important open source podcast on the planet.
Maybe you can tell us a little bit about the history of this.
And your contribution in this area,
which has been, of course, given the last 10 years,
be more than significant.
But let's start off with Rindel Schwartz as a private person,
having invented Pearl, but certainly having contributed a lot of knowledge to the community.
So, why don't you give us a little bit of a background about you,
and where you come from?
Okay, well, I've been doing open source for, I think, 20 years now.
Well, at least as long as Pearl's been around.
So, I guess about 30 years.
I'm trying to figure out, I'm going to do the math here, though.
Getting old, so math is tough.
You know, it's kind of crazy that way.
I got into Pearl because I had been contributing to the mailing list for Pearl.
But back before, there was actually a Usenit news group.
And at one point, Larry came out with Larry Wall, creator of Pearl.
He came out with a version, I think it was three.
And the man page had gone from 20 pages to 60 pages.
And people said, there's too much documentation.
Can you write up some sort of tutorial or something?
And I had been a technical writer for probably 15 years before that.
So, in fact, I have somewhere, actually it's in storage right now,
but somewhere I have a shelf full of books that I wrote.
But I ghost wrote it because, you know, I was working for various companies
and basically writing for them as a hired contractor.
And I think at that point, I was an employee at most places.
So, I've only been a contractor for, I don't know, it's been a while.
So, yeah, it's been a bit of, definitely been a while.
So, Larry said in response to that, where I said, there's too much documentation.
What they really wanted was tutorial stuff.
And I was really good at writing up that sort of thing.
And so, Larry said, well, if I get some spare time, I'll write something up.
And I knew that Larry had, you know, a wife and four kids.
And it was a church choir director and he had a day job and all this stuff.
So, I knew that him getting spare time was going to be a bit, a bit dicey.
Probably not going to happen anytime soon.
So, I volunteered.
I said, you know, if Larry wants to write something up, I'd be happy to help him with it.
And the Stis ad bin at a Riley, Amber, I think it was her name, said, well, if you're going to write something up, we might as well publish it.
So, I never pitched programming for, I never pitched it anywhere.
It just basically got solicited by a Riley.
And so, I immediately wrote Larry and I said, Larry, they want us to write a book.
I'll go in with you on it, which is an awkward proposition, a proposal.
I don't know if you remember the movie's anodium.
Maybe you didn't see that, but you're probably more sane for not having seen it.
It's one of the favorites, right?
But one of the things, one of the things they said in the movie, which I really like, which was, what's a partnership like?
And it's like marriage without the good parts.
And it's one of my favorite, one of my favorite lines.
So, I knew that if I was going to, you know, I knew that this book would take about, you know, 10 months to a year to write.
And we'd have to do it all by, and back then it was just email.
There was no IRC, there was no, we didn't really have FTP, you know, so it was all sending chapters back and forth by email.
And so, but I got involved by writing programming Pearl.
And then I started teaching classes in, in Silicon Valley.
And I had to prepare tutorial materials for that class, obviously, because, you know, the programming Pearl is not a tutorial book.
And about midway through the first week, somebody came up to me and said, you know, programming Pearl is a good book.
We like it.
But this, this set of materials you've got here is much better. It should be a book.
And so, I emailed Tim Morally, back then he made a lot of the decisions.
I think he still makes some decisions, but I don't know. I think he's probably mostly kind of out of the loop now.
But I said, here's the chapter titles.
You know, this, I think this would be a good book, because it would be a tutorial book that would be nice.
And the fastest response I ever got from him was 15 minutes later.
He wrote back and said immediately, let's do it. Let's do it.
Because programming Pearl was gold. It was amazing. You know, it set outpaced all the records.
They normally print enough copies on their first run to theoretically last year.
We sold that out in a month.
So it was an amazing like over the top for sales and stuff like that.
But learning Pearl became the basis of my income for the next six or seven years, because I had five instructors working for me.
I was traveling all over the U.S. teaching classes personally, but also having my other instructors teach classes at various places.
And it was, it just, it put me on the map. You know, I kind of missed those days because I was making money hand over fist, you know.
And now it's not so much. So I'm back to just, you know, being a contractor for higher.
So not quite the same. So my contributions to Pearl were primarily me contributing on the net, you know, talking to people.
And also these, these books. I wasn't involved after programming Pearl second edition.
Yeah, after that. So, but, you know, I still still get royalties from learning Pearl. So that's kind of nice.
And they're also intermediate Pearl. And I don't think I could get anything of mastering Pearl because it's not really my book.
It's that's Brian Foy's book. So, but that's kind of the back and forth. You know, I help people on the net.
And I wrote these wonderful books.
So I take it then from what you were saying about the kind of the your initially really busy and getting a nice income from this writing these books that in that in current days.
Pearl is less popular. Let's put it that way.
No, it's actually still more popular. It's a smaller piece of a big.
Yeah, that's the problem. It's a smaller piece of a bigger pie. But there's actually more Pearl coding being done today than it was during the dot combo.
Yeah, so it's still very popular. It's just it doesn't seem like it because again, it's a smaller piece of a bigger pie.
But you see this with daily rates because per program and and atments in that area, so in high demand, right?
No, yeah. Oh, yeah. In fact, the big problem, the big problem we have right now in the Pearl community is that managers want to hire Pearl people, but they can't find enough of them.
You know, people are going, I want to be on Python, I want to be on movie, I want to be on all these other things.
They're moving away from Pearl, but if they could make a ton of money, if they just, you know, and Pearl's not that hard to learn, you know, it's, it's still pretty easy.
But then you see even if these young hips has become involved with dark like a certain rental outsports.
Yeah.
Given the fact that you are some sort of ambassador for Google here.
Yes, I'm a, at least at the moment, you have something, right? Yeah.
GDE, at least at the, yeah, at least at the moment, it turns out I'm supposed to be recording all the things I'm doing for Flutter and Dart, and I haven't been.
And so they're probably going to cut me at the end of the year. So, okay, let's be sad.
But, you know, the problem is that their form doesn't allow for the things that I'm typically doing.
Typically what I'm doing is I'm on Gitter, I'm on Stack Overflow, I'm on IRC, you know, and those are things that can't get recorded.
They want actual, like, I did this presentation at this conference. Well, I'm not going to conferences.
I'm not doing that. So I'm probably, this probably my last year is a Flutter GDE, but I shouldn't say that out loud because it might give them ideas.
Okay.
Yeah.
But, no, with that, with that represents is that I got vetted two years ago, I guess two years ago.
And basically, I've got to ask a lot of questions from a lot of experts.
And what's funny is I went to a meeting for Google, for the Google GDEs, and some guys sat next to me and said,
thank you for everything you're doing in Gitter and Stack Overflow and all that stuff.
We really, really, really appreciate that, but that's, I don't think that's enough to actually carry me through the next vetting process.
So we'll see.
I don't know.
It's, it's okay.
Can you talk?
Yeah. Can you talk about this vetting process?
Or would that be under NDA?
It's the simplified version of it is that I got asked a bunch of questions.
And it was, well, well, here's the funny part.
Here's the funny part.
I did, I did a, I did a sort of an end run to begin with where I said, look,
I'm still learning Dart and Flutter, but I know how to Google.
And so, and so they went, well, then you don't need to.
And so what's funny is the entire technical interview.
It should be a technical interview.
I didn't get asked a single Dart or Flutter question.
Is there is?
Yes.
That was pretty funny.
But also because I carried in a reputation too.
I was, you know, I was well known, you know, floss weekly, things like that.
And so they wanted my energy and charisma.
And we're willing to sort of ignore the fact that I'm still learning Flutter and Dart.
Going back to Perna, what do you make of Perl 6 and Camille and all the rest of it?
Given the fact that this is quite a diversion from Perl 5 and the community as far as I perceive,
it's quite split up about the issue.
I don't see any reason for me to learn it because I don't think there's a business investment for me.
I have to focus on things that, you know, I'm going to get business out of.
And I'm going to get a lot more business out of Flutter and Dart than I am out of Perl 6.
For sure.
Do you think that this is, I mean, some people are not the impression that this is actually a stillborn.
I'm given the diversion from Perl 5 and hipster concepts like a virtual machine that is used for Perl 6.
And nevermind the incompatibility to the old code base.
There is a big Perl 6.
Well, Recudo now, whatever it's called now, it changed the name.
Yeah, I think it's either Camille or Recuda, something like this.
Yeah, but I know what you mean the VM.
Yes, the other like VM infrastructure.
I don't know why you keep seeing VM.
Well, it's, it's like multiple years.
Yeah, no, that all changed.
That all changed about two years ago.
How about us touch apparently please elaborate.
Yeah, so basically what happens is as, as Perl 6, as Recuda boots, it builds new layers all the way up.
And so, but those are all written, all pretty much written in Perl, but various kinds of Perl.
There's many Perl and medium Perl and all the names, but large Perl, right.
But yeah, so the lowest level is, is, is actually generated from Perl code.
So they have a Perl to machine code, well, not machine code, a Perl to see translator, the lowest level.
And so it's actually Perl all the way down now.
Okay, I see.
Which is really interesting.
Yeah.
So this is self hosted.
And how does the, how does the Perl to see their work?
Because I reckon you can't do it with on the fly population, right.
I don't know what you mean by.
But I mean, if you take Perl, take source code and translate this to see and then translate to machine code.
Every time you start up such as such an environment that will take a lot of time.
We know a lot of that's cashed.
So, okay.
So, yeah, there's sort of the lowest levels of boot and then those are cash so that they can be used again the next time.
This is my understanding.
I'm probably wrong.
And I'm probably going to get yelled at by my recruit of friends.
But, but like I said, I'm not, I'm not studying it.
I think, I think Dart and Flutter have better legs than Perl six does for any use.
Well, given the fact that we're looking at an established ecosystem available on most of the platforms, including desktop, yes.
Speaking of which, what do you make off of web as an and the rust community around this?
If you can speak about this or want to have a haven't been tracking that actually.
But you know what I'm talking about, right?
Oh, of course.
Yeah, of course.
I know about rust.
I know about web asm.
But and at some point, that may be targeted by the Flutter community.
I mean, not the Flutter community, but the Dart community, because that would make sense.
At some point, it might be targeted, but there's not enough motivation because they've got Dart to JS fast enough.
That it's almost the same as if you had web asm.
Okay.
Yeah.
I mean, given the fact that quite a few members of the community are actively working on a rust to web as a compiler, meaning that the LLVM backend.
Sorry.
The underlying compiler infrastructure behind rust can then generate web as an instructions that gives a whole new perspective about clients and for about client side web frameworks.
I reckon rust, I wouldn't say it's the most prominent one, but it certainly has a lot of exposure in this area.
And I don't see Dart quite there yet.
If Dart is targeting this at all, which is up in coming sector, by the way.
Dart is Dart.
Dart to JS is very mature.
And I mean, it's being used in huge projects at Google and other places now.
So there's the reason you don't hear about it is because people got, got upset when Dart wasn't going to be embedded in the browsers.
It was communicated wrongly.
It should have been communicated in the way that this will mean that we don't need to put it in all the browsers.
You know, we've got a very efficient Dart to JS.
And in fact, the current one is really great.
It's got incremental compilation, incremental load.
Nice debugging, all sorts of things that you would want out of any kind of native VM.
And part of the problem is that they were coming up with conflicts about who's on first, when you had both the Dart VM and the V8 VM, both fighting over who's got control.
Indeed, I mean, V8 is a pretty efficient implementation.
I mean, Google perfected this pretty much down to the notch.
Right.
Which means that once you have a good Dart to JS, you just spit it at the V8 and you're done.
I mean, but on the other side, I mean, if you're targeting a whole suite like like G Suite at the client, you probably need a very efficient JavaScript implementation.
Because otherwise, this commercial model will fold because the browser is simply not not fast enough to execute this properly.
So you need a good JavaScript implementation.
Right.
Changing changing.
Changing tech now.
Changing tech.
Sorry.
How did you get involved in the Dart Flutter?
Excellent question Martin.
Seeing this put it that way.
Well, I had heard about Dart.
And I ended up having a couple of Dart people on Floss Weekly.
And I got excited about that.
And then it turns out that, you know, when Flutter was first coming out, my buddy, Wim Wheeler, was, turns out he's a local Portlander.
So Portland Oregon, by the way, she don't know which Portland I'm talking about.
And it turns out that he was working for Google.
And he had come on.
Well, he invited me to come look at the Google offices in downtown Portland. And I said, sure.
So I came on.
And he said, I started talking about Flutter and all that stuff.
And I said, well, I want to write some code, some, you know, a Dart book.
And he goes, no, I don't think you want to write a Dart book.
I think you want to write a Flutter book.
And I said, why?
And he goes, well, here's what's interesting about Flutter.
And it's, you know, the hot reload.
Now the multi platform.
But, you know, being cross platform between iOS and Android wasn't really the,
the big selling point, he said.
In fact, when we have the, we did a presentation together.
And the last bullet.
Below all the other bullets was also works on both iOS and Android.
And it's because that's not the important thing.
If you were just doing iOS or just doing Android, you should still be using Flutter.
It's, it's, it's, it's so much easier to code.
And you don't have to know all the native APIs.
You don't have to deal with all that.
It's just, it's just a much, a much better ecosystem.
Yeah.
How did you rate the maturity of this now?
It's, it's supposed to been around for a few years, but.
Oh, there's, there's like thousands of applications in both stores already.
So yes, I think it's mature and the fact that it's now working.
Flutter on a web, Flutter on desktop.
You know, there's a few more platforms that are coming along,
but I can't say because I'm under an NDA.
But yeah, you know, that's, that's part of what I have to remember.
Is it under an NDA?
So I have to be careful about what I say in public.
Oh, sorry, Chris.
You mentioned.
There's a great demand for for pill developers.
What is that like for the Flutter and Dart kind of?
Well, most, most of the stuff is green starts.
So people are, people are, you know,
forking off of their own companies,
forking off their own companies, I should say,
and are building it themselves.
But you don't really need to be a Flutter expert.
If you have some mobile experience,
you can pick up Flutter really quick and.
And, and, and Dart is actually a pretty simple language to learn as well.
And it's, it's really strongly typed.
It was only like loosely typed before.
But Dart 2.0 is very strongly typed.
It's so much that I'm still trying to figure out how to do everything.
It's a little confusing for me, having him from the pearl world.
You know, so complicated stuff.
And changing.
Sorry, go ahead, Mark.
No, no.
Okay.
And you mentioned one important word there.
Flust Weekly.
Okay.
Full disclosure.
Flust Weekly probably was one of my most influential podcasts.
Yes.
That I've been listening to for the last almost 10 years.
Again, full disclosure.
It has shaped my view on open source to a big extent.
And also got me involved with the community in terms of,
I'm contributing to my own local local Linux user group here in Frankfurt,
where I live, I'm getting involved with the community,
organizing conference and all the rest of it.
Can you tell, can you tell us a little bit about how you are involved with Flust Weekly?
And how this whole Twitter slash Leo thing started off?
Yeah.
So the, well, I don't exactly know how, how Twitter started.
But there was some sort of, well, this week in tech, I guess,
was the first podcast that they did.
The, so what happened was I was a guest on episode nine.
And after 17 episodes, Chris Devona, who was sort of shepherding,
essentially doing my role that I had for many years after that.
He had a baby.
Well, his, I think his wife had a baby.
Okay.
And so I was doing a show.
Well, I was invited by Leo to go up to Vancouver, BC,
and be a guest on a few shows up there.
That was a video show, a TV show, actually.
And during one of the breaks, I said,
what happened to Flust Weekly?
And he said, well, you know, Christopher, you got busy.
Christopher, by the way, in case you don't know,
is like the open source advocate at Google.
So he has an important responsibility.
And, you know, he got a little busy for him.
And I said, so what would it take to get that restarted?
And he goes, well, I need to get guests.
You know, I need to get guests and like that.
I said, well, if I bring you guests can, can I like, you know,
help out?
Can I co-host and stuff?
And he goes, sure.
And so my first guest didn't come along for another couple,
couple months.
And the next one was like a couple months.
So it wasn't really weekly for a while.
But I started getting a little more regular and started doing that.
And so I was pretty much the primary co-host for all those shows.
For the first, maybe 30 shows, 40 shows somewhere in there.
2010 or something?
Well, whenever.
Whenever.
I don't know.
Let me do the math.
20.
Yeah, well, it was, it was 13 years before 2020.
So that's the 2007.
Yes.
Yeah.
Right.
So.
So occasionally I couldn't make it.
So we had to like, gentle bacon on and a few others.
Yeah, he was a host for a couple of shows.
Yeah.
Which was really nice.
He.
So at some point, Leo just emails me and says,
just take the show over.
I mean, you know what you're doing.
You know how to get the guests on.
And you can probably be a pretty good co-host and stuff like that.
So that was about a year after we started with the new format.
And then I've been showrunner ever since that.
Until a couple months, about a month ago.
I mean, you know, the idea of a rotating roster of co-hosts.
What was that you idea?
Like the ones of like the ones.
Like Aaron, like, like Dan, like Simon or the rest of them.
Well, I mean, people aren't always available.
I was willing to put in the time to always carve out whatever I needed,
except when I was on a cruise ship or whatever.
So.
So I was pretty, I was pretty consistent.
But, you know, other people not so consistent.
So I had to have a rotating panel of co-hosts.
You can make no work.
All the production and everything around you show yourself.
Do you have some help with that?
Oh, so I had everything up to the end of the show.
Okay.
So in other words, I had to work out who was the guest?
Who was the co-host?
What was the subject's, you know, organized all that?
That was all mine.
And that was about five hours a week, maybe four or five,
somewhere there.
And that includes the taping time,
because the taping time took cuts into that.
And then the moment, the moment it's in the can,
the moment we finish the show,
the tweet does the rest.
So they would do the editing down,
which wasn't much because we pretty much did live to tape.
So there wasn't much to do.
And then,
and then they would do the website and they would do the CDN upload
and all that stuff.
So.
Yeah.
So I was lucky because I got all the fun parts.
Yeah.
I have fun.
I guess with building the momentum,
it was presumably easier to get guests and later on like that.
Oh, right.
We got to the point.
We got.
Yeah.
Well, let me, let me follow up on that note first.
And then we'll talk about the spreadsheet.
We got to the point where PR people were emailing me saying,
my client needs to be on your show.
And I knew at that point I had made it.
Mm-hmm.
Because if I was visible enough that the,
that the PR people were like emailing me,
you know, then I was,
I was solid.
Definitely solid.
Yeah.
So.
You didn't consider charging them for history.
Sorry.
What?
You didn't consider charging them to come on your show yet.
No, no.
I would feel bad.
You know, people have always said,
well, why don't you have like a Patreon or something like that?
And I said, no, I mean,
whole point of this is that Twitter needs to get the recognition
for, you know, their advertising revenue and all that stuff.
I don't want to cut into that because there's a lot of production
costs involved on the back end.
You know, there's all the, all the, all the editing and,
I mean, you guys know, you know, there's a lot of stuff to do.
So, yeah.
So there's no way I was going to cut into that.
I can only recall a very few instances where actually people misused this
as a marketing vehicle.
The most prominent one, probably the one where Simon simply flipped
out if you remember this.
Oh, he flips a lot though.
Really, but really bad.
You remember this, this, this open source consultancy thing and Simon
was all over it?
Okay.
Yeah. Well, you know, it's all a blur to me now.
I don't remember anything about the show.
No worries.
No, the feedback that I got from other people,
but I talked to about this episode was quite riveting in terms of
Simon lost it.
Let's put it this way because he really took the guy apart.
I must look it up because I can't remember the exact episode,
but the guy took it quite cool.
It was an open source consultancy company that used closed source
software internally to do the assessments.
Oh, I think they remember that one, but it's only vague now.
Like I said, it's all a blur.
Yeah, it's that episode where Simon lost it.
Yes.
You know, it's funny is I don't remember any of the,
I don't remember really any of the episodes.
And part of it is that, you know, somebody will,
somebody will say, well, can you put these guys on the show?
And I go, that sounds really familiar.
And I have to Google a floss weekly and a topic in order to figure out
if I've done a show or not.
Now, tell us about the spreadsheet.
Well, the spreadsheet was my way of organizing.
So we had, we had the public side of it,
which is what you could see from the public link.
But there's three additional columns on the right hand side
of the spreadsheet that were private only.
And that's how we would organize, you know,
what ads there are, who's available for a co-host,
you know, all that stuff, the email address of the contact,
things like that.
So that was all in one place.
It was really, really easy for me to manage the show.
You know, so although you only saw the first two columns,
I had all these other columns behind it
that actually were the detailed information
about that particular show.
An interesting thing, because every now and then,
I used to look at the spreadsheet and notice the names coming up there.
And fair play to you, Randall.
There were quite a few Lillian's projects on that list.
For example, you intended to interview Lendiputtering
of System Defame, according at least to the spreadsheet,
but I never came to that because I never had them on the show, right?
Well, you know, so I would open up like another month or two of shows.
And I have all the stuff that's just right at the top of the beginning
of the bottom half.
And I would email them like month by month.
So there was a ton of email I sent out all the time.
And you know, people didn't respond.
I couldn't make them respond.
Yeah.
So, you know, it was a little tricky.
So that was my most frustrating part is that people who had said,
I want to be on the show.
And then I email them, you know, every other month or so.
And they never respond.
So it's like, what's what's what's the deal here?
So yeah, that was that was one of the frustrating parts of managing the show.
Okay.
I mean, the next question is probably a little bit tricky, but for every,
or for every business of last weekly,
the following question might not be a surprise because at some stage,
docs or oats took over of Linux magazine fame,
but also of Twitter fame need to say,
it sounded from the outside a little bit abrupt that change.
So given the fact that there was no communication on the Twitter website,
I'm just wondering what happened?
Well, no, there is communication on the website.
There's a whole, there's a whole article on the transition and,
and that docs taken over and,
and that we think Randall for 13 years of valuable service.
No, there's, there's a website, there's, there's a page on their,
on the, it was on their blog, I think, somewhere in there, but yeah, no.
So yeah, this is probably the, yeah, it probably shows that I'm pretty old myself.
So maybe I've just missed it.
But no, it just sounded like, like, like a little strange from the outset,
but maybe I should reread this blog.
Well, I think it's, I think it's linked from a Twitter, a tweet, a tweet.
You see, this is the problem, Randall.
I'm just too old for this hipster.
So we get things right.
But Martin, maybe you want to comment on that too.
It's, I'll use it every day, yeah.
Excellent.
For this, Martin is four years younger than I am.
At least this is what he says.
Right, right.
Well, I will, I will say it was a bit abrupt.
But, but it's also great because I got five hours a week of my life back.
And I had done this for 13 years.
So that 13 years is plenty.
You know, I, I establish my reputation.
I, you know, I'm always going to be known now for floss weekly,
as well as being done for Pearl and still trying to be known
better for Dart and Flutter.
You know, so yeah.
Why had question, Randall?
Are there any new plans for new podcasts on the horizon for you?
You know, so much work during the podcast.
I don't know.
I've been invited.
I've been invited.
Sorry.
I've been invited to join a network.
So we'll see how much.
Whether I'm actually going to take up something on that.
Let's see.
I've been paid, paid engagement this time.
No, that's the interesting thing when I would read ads.
Some of the revenue from the ads would come back to me.
I don't like this is a totally unpaid gig.
Okay.
I thought it was all going to Twitter as hard to Twitter, rather.
Yeah.
Well, maybe going to Twitter too.
You don't know.
No, you get it.
It wasn't a lot of money.
I mean, obviously they got to keep most of it because they got a production
cost taking care of.
But no, I'm.
It's not like, like I said, it's not like a lot of money.
But it was, but it wasn't, it wasn't insignificant.
I mean, Leo runs a commercial enterprise as in Twitter is a company.
So.
Right.
And of course their production costs are the rest of it.
Right.
Right.
Okay.
By the way, you probably, you probably can record the episode.
There was an episode with regards to a Linux outlaw specialist.
It's called Linux outlaw special about a you are one and a half ago.
And this podcast for disclosure is called Linux in loss for a reason.
Right.
And I don't know how much you are familiar with the original Linux outlaws format as done by fab and then.
But we have to be of them.
Okay.
But we aim to continue the legacy here.
Nevermind.
Dan turned having turned to different to different subjects.
Fab doing very different things these days.
I'm just wondering how you came across them initially because that that kind of legacy episode.
I reckon wasn't the first one where they were on your podcast on your podcast.
I think it was the overlap of, you know, Dan.
Okay.
Because.
Yeah, Dan way back.
Okay.
Dan was, yeah, Dan was, you know, working with me as part of the rotating panel of course.
And then I was on a couple of their shows.
I think.
At least one.
Remember the one.
And then.
And then we decided that we would do sort of a celebration of Linux outlaws.
As one of the podcasts on on floss weekly.
Indeed.
And just wondering that goes back to one of the original questions.
I had.
How did you recruit the co hosts?
Friends and friends of friends.
Okay.
Yeah.
I mean, there's.
Yeah, you have to have.
I mean, like, like Aaron had his own podcast.
Dan of course had his own podcast.
Simon was, you know, highly respected in the open source community.
I think he still isn't certain quarters.
Sorry.
What?
I think he still isn't certain quarters.
Oh, yeah.
Yeah.
I mean, clearly.
Being the head of the OSI and stuff.
Yeah.
Well, and, and when I.
When I recruited him, he was.
He was the or it.
Well, you know, it used to be son now oracle open source advocate.
And so that was, that was important to me to be able to pull that together.
I mean, he certainly added a certain color to the whole show, given.
His outspoken nature is that the what I'm looking for being the OSI.
I think he used to be a chairman, right?
Oh, he still is.
I don't know.
He was something.
I don't remember all the tiles he had.
It's just, it's just been too many.
But the thing is that he's, he's clearly was against open core.
And all that stuff.
So it's like open core now, you know, like that.
And so why did he just open source the whole thing?
You know, why do you have a, you know, a model that doesn't allow for a community?
You know, he was, he was really good at asking all those questions.
So it's funny is on the times when he wasn't there.
When I had questions about, you know, why they're not doing those things.
We would have, we had a back chat, so we could chat back and forth with the posts and the production people.
And I would always say, I'm about to channel Simon.
Very, very funny.
It's good.
It's a, I played bad cop for a little while.
And then, you know, once I played bad cop, it was like, okay.
I mean, it's certainly added.
It's certain flavor to the whole thing.
And I think for me, communist perspective.
And I reckon I speak for a lot of people in the open source movement.
Never mind free and open source or software movement.
You need that sort of different perspective.
And certainly given the fact that the OSI is one of the most important community representations in this area.
It does make a lot of sense to have something like Simon on that podcast.
Right.
Right.
In the, in the past, but also going forward.
Yeah.
The problem was that he.
He wasn't very technical.
He was much more philosophical than technically.
Absolutely.
Yes.
And so, you know, if I needed a technical backup, then, you know, I had to have one of the other guys on to be able to, to do that.
But, but, you know, like I said, he was on enough time is that I could, I could tell exactly where he was going to go.
You know, and also that I could channel that channeling Simon later.
Do you have any more people?
Sorry.
So I'll go ahead.
Did you have any more people like that that you could channel on demand?
Yeah.
Really, not really.
You know, it's very, very sad that we had, you know, Guillermo pass away while we were doing the show.
Because he was, he worked well with his maker projects.
And, and of course, Aaron was really good at that.
So.
Well, he continues the legacy, you know, with the.
Yeah.
So forth.
Right.
Right.
Exactly.
Fun fact.
Did you know actually that I had to review his book?
Oh, good.
Good.
He was supposed to send me a copy and he didn't.
I just just passed on him.
That's what this is for me.
Oh, the Christmas.
Sorry.
And you come.
If you're listening full marks, your book is great.
Yes.
Nice.
Yeah.
Okay.
Um, okay, Randall.
Um, can we look, can we talk a little bit about the recruiter and what happened afterwards?
Or you want to give that a miss?
We can cut this out too.
I don't know.
It's fine.
Um, well, like everybody that was affected by COVID, um, the, uh, zippercruiter laid off.
Almost, I think, 800 contractors and furloughed about 150 employees.
And so it wasn't, it wasn't me.
It was, it was, it was the, uh, it was the whole, uh, trying to, you know, pull,
pull in all the expenses so that if you had to write out the storm, you could do that.
And, uh, other companies did that too.
I've been, I'm on a, uh, couple of million lists that are, that talked about how, uh, you know, we just laid off.
We just slew left and right.
Um, because they had to, uh, they, they needed to, they needed to pull in expenses to make sure that, uh,
they could survive this, this, uh, the richest rough time.
But you found something new.
Oh, yeah.
Yeah.
I'm working for, uh, until a survey right now, which is, um, it's a company based in Orange County, California.
So once again, I'm working for a Southern California company.
Um, so you said, so you said commuting in that case.
Well, uh, no, I, I'm not on site at all.
I'm just working completely remote.
Nobody's working on site these days.
Nobody.
Yeah.
It's the same here.
I can't, Martin, your turn.
It's just to stop me talking for, it just to stop me, uh, talking all the time.
Sure.
Yeah.
I mean, so, so is, is, is that your, I mean, do you do these gigs on a, on a short term basis?
Or do you have any particular kind of, I mean, uh, yeah.
This one looks like it's at least, uh,
possibly longer.
So we'll see.
Um, I've got, I typically, well, I mean, I worked at zippercutive for four and a half years.
And I worked at the company before that for a year.
And I worked at the company before that for two and a half years.
So I mean, they're, they're, they're, they're.
I like to have as long term as I can because then I don't have to hunt down, you know, more work.
That's right.
I mean, but you're not, um, pursuing any particular kind of, I mean, uh, direction with these gigs.
You just, it's something that looks pretty interesting or keeps you.
Um, I mean, it's just like, you know, take, uh, take Chris Ryles.
It's open source related.
He'll work for them.
Um, for yourself, it's, it's more of a, uh, you know, bring the money in kind of a scenario.
Well, yeah, I'm just, I'm just treating, I'm treating time for money, you know.
And, uh, actually, you all do?
Yes, exactly.
Exactly.
I gotta, I gotta be the bills.
I gotta.
We all do, right?
Right.
Exactly.
Exactly.
Uh, yes.
Um, okay.
As soon as the word got out, we are doing an interview with you today.
People start sending in money to get through with about the Mexican situation.
Um, jokes aside, what's the story with, with, with Mexican apartment and the fridge, and the fridge magnets?
Well, I won't, I won't be there for a while because, uh, I can't renew, I can't renew my passport.
The US is not renewing passports right now.
So I'm kind of screwed.
Um, and so I can't go there.
Not that I could, if I had a passport, could I go there?
Because they also shut down the border.
So, uh, I can't, uh, I can't get there at all.
Actually, my passport's good to the end of June, but, uh, I guess that I'm not really counting on them opening the border before then.
The tricky getting back as well.
And the apartment is a time show.
Do you own the place?
Um, it's I'm on a lease.
Okay.
So, uh, you seem to have split your time between, um, I'm Oregon as well as Mexico, right?
Right.
Yeah, I prefer Mexico because, uh, it's, um, here, uh, uh, an Uber to get to the nearest restaurant.
Is probably $12.
Um, they're an Uber to get even a downtown central, uh, Tijuana is $3.
So everything is, everything is much cheaper.
Yes.
Everything is much cheaper.
Plus, uh, just right outside.
I live in the, uh, the, uh, residential district, uh, but it's about a block and a half to nine restaurants all in a row.
And so it's walking distance.
I mean, and it's safe walking distance because it's right by a hospital.
You know, people aren't going to mess with you.
Like you're Mexican food as well.
Well, you know, what's funny is they have like an amazing variety of food.
It's not just Mexican food, but I do like Mexican food.
So no big deal.
And I like spicy stuff.
I like spicy stuff.
So it's kind of cool.
You know, what's funny is I went to Brazil, uh, a few times.
And I asked about, you know, is your, is your food spicy and they go, no, no, they don't, they don't like spicy food in Brazil.
So which I thought was weird because it's a Latin American country, you know, what's a Latin country.
So it's a little weird.
Yeah, that's quite useful.
You're right.
So the, the, the, the, the, the, the, the, the, the main is a neighbor, but you can't have it all.
Okay.
Um, one last question before we have to wrap this up.
Um, the opposition with cruises.
What do you mean obsession?
You, I mean, for an average person is, you seemed to go on cruises quite a lot.
Yeah, I've been on the 82 in the last half of the year.
This is one of the questions.
So do you care to elaborate or?
Well, no, but so what happened was I was asked to be the first speaker on the first cruise.
Which was a pearl cruise.
I see.
There were 10 speakers.
And I was one of them, but I was the first one asked.
And there was about 200 people that were attending the classes.
And it went out of a Vancouver BC.
Uh, no, no, yeah, Vancouver BC Vancouver.
Yeah, Vancouver BC.
Up to, uh, uh, Juno and back basically.
And I thought I wouldn't like cruising because I kept thinking shuffleboard and.
All other crappy things buffets.
Right.
But I liked it so much.
I said, uh, to Neil Bowman, uh, Captain Neil, we call him.
Uh, can I go on the second cruise and he says, sure.
Uh, can you talk about something about Java?
Like cruises about.
And I said, you're serious.
I can do.
I said, I can do, uh, I can do Java.
I said, I can do Java regular expressions because that's the same as Pearl regular expressions.
But so I basically taught a class on, uh, on, uh, you know, Java regular expressions.
And, and then I liked that so much that I just said, I'll go on the next one.
I'll go on the next one.
Uh, on a lot of them.
I was a speaker.
Uh, uh, at least in the early days.
But, uh, after that.
The, um, um.
Uh, it was, it was like not my subject matter.
So I couldn't do anything.
So I ended up the, the deal with, uh, Captain Neil was.
For the ones I'm speaking on, I would get my room for free.
On the ones that I was, um.
Just attending, I would get the room at wholesale.
So that still wasn't bad.
It was still like a 30% discount.
So, uh, so it worked out nice.
But thanks to that, I've been, I've been to.
See, do I say 82 cruises or 82?
Okay.
Okay.
I think, well, somewhere in there, I think, uh, it's, I think it's 62 countries.
So, uh, somewhere in there, I think I might have got those backwards.
I think it might be.
82 countries.
But I know I've been like all over the world and.
I've been to lots of places I wouldn't have ever gotten to.
Because of these cruises.
So I'm very happy.
And it's too bad.
It's too bad that, you know, I don't think the cruise industry is going to recover.
It's just, it's just, they're, they're dry docking some other ships.
They're, you know, because, because nobody wants to be on, uh, you know,
a, a, a, a metal box in the ocean with a lot of other people these days.
So it's a little, it's a little crazy.
Okay.
Um, five or three questions.
Um, there's a long.
There's a long.
It's standing tradition in our, um, numerous seasons.
Never mind episodes.
Obviously.
Um, to do a pox as in a pick off the week.
Uh, so anything that comes to mind that you have come across recently or, um, earlier, um,
that interest is that, that you found interesting that you found worth,
remember worth, um, mentioning worth, um, remembering.
Um, yeah.
Of course, that's also, that's the, that's the, that's the whole idea behind the box.
Yes.
Uh, you know, nothing's coming to mind.
It's, uh, it's not the way I think so.
Okay.
Remember everything I've seen this week, um, or, or even in the last four weeks,
I'm not, I'm not finding anything.
So I don't know.
Yeah.
And final two questions.
This goes back to a long standing tradition that I picked up from some,
or that we picked up from some place else.
Your favorite compiler based programming language.
As in a program language that takes a piece of source code and translates it to machine code,
rather than interpreting program language.
Huh.
Uh, so dark wouldn't qualify.
Uh, actually though, no, they now have a dark standalone.
Okay.
So yeah, you could say it's the dark standalone.
My cool.
And you see other podcasts, lots of our favorite editors, but we're going to give that a miss.
What's your favorite type setting system?
If you have one.
Uh, well, I haven't used one in a while.
Um, I did write.
I did write a macro package.
For, uh, enroft.
Tear off.
That was eventually used to essentially create programming Pearl.
Wow.
Okay.
Yeah.
What's funny.
What's funny is, is it would full circle.
I wrote this at, well, I was at tectronics, which was the biggest employer in Oregon for a while.
And what, what am I, what am I?
Uh, uh, one of the guys that worked for me took a copy of it with him and took it and eventually, uh,
Tim Morally and he and Steve, I should say his name.
Tim Morally and Steve use that as their way of, uh, writing all the,
uh, Xbox.
So all the X 11 books.
There's roll.
Yeah, those are all written using my macros.
Okay.
So when we signed up for programming Pearl, um, um,
the, the, the editor sent these macros to me and, uh, said, uh,
and I looked in the source code and there's my comments.
So it's my code.
It was absolutely my code.
And the next day, the editor, uh, for the, for programming Pearl said,
are you going to have any trouble understanding these macros?
And he, I said, I wrote them.
I wrote them.
I wrote them.
Yeah.
I don't think I'm going to have any problem understanding this.
And so he says, no, no, we, we wrote this in house.
And I go, no, you didn't.
I see my comments.
I see your name in there.
Yeah.
Exactly.
Exactly.
So yes.
In raft.
Uh, interesting.
Okay.
Render, we have to wrap this up.
Thank you very much for being on this, on this episode.
Much appreciated.
Thanks for having me.
Thanks for having me.
Any time.
And we're looking forward to having you back at some stage.
And thanks again for, for, for joining this podcast and talk to you soon.
Thank you.
Thank you.
Bye.
Thank you.
Bye.
Bye.
Martin, what do you think of what do you make of the interview?
Oh, I think it was a very great insight into Floss Weekly, which is one of your favorite podcasts.
And yeah, I think as we discussed recently, there's going to be some changes right to Floss.
You see this, yeah, in terms of its popularity and you'll see, you know, the way things are running.
You'll see this already coming up.
The format is changing.
Um, let's just show you how many listeners have observed this transition from Rando to
some somebody called Dr. Seryles.
Um, the format is changing in addition to the content.
Um, he still does do the co-hosts, but in contrast to Rando, he doesn't give an overview of the projects on any given week anymore, but rather, it's now about topics.
So, um, about a week ago, you had some old photos.
It's not political or correct.
So some elderly person talking.
Uh, yes.
A grumpy old person.
No, uh, some older person.
It's our elderly person talking about ham radio and how this whole internet thing came about.
Uh, right.
Um, um, my impression is, and I'm more than happy to put some money on this.
Oh, maybe we can just basically put this in.
Quite a bit.
Unfortunately, I'm bought by the intern at the end of the day.
So I can't really talk about the specifics of this remark.
Okay, okay, people, sorry, um, Martin is referring to a previous incident that we unfortunately cannot discuss in the show.
Um, I'm more than happy to put some money on this, but I reckon before long,
Twitter TV, uh, will have a problem with regards to dropping distance for, for, for, for, for weekly.
Unless Leo, who is the guy behind Twitter, um, can mobilize OAPs like us like Martin and myself.
OAPs are standing, of course, standing, of course, for old age engineers,
as in people who are really old and have been around when ham radio was still the rage.
And obviously, um, which we don't.
Okay, um, any other take on this, Martin.
No, I was good.
It was good.
Um, I, I liked the interview because obviously, as we are both, um, barely new to podcasting,
it was a good insight into how they started and how they got people on the show and
how it went from there.
I mean, I said it on the interview, but Randall and I started listening, I think, in 2013,
2014, something like this.
Or maybe as early as 2012.
Funny enough, that was also the time when Redis Labs was founded, I think.
Anyway, it doesn't matter.
Um, that show has been pivotal, pun intended.
Um, yes, Martin used to work for pivotal.
Um, if anybody's wondering about this remark, anyway, it doesn't matter.
Um, serve it, uh, Peter.
Yes, indeed.
And.
Oh, sorry.
No, it's being with us.
Several work for this, too, but not to worry about this.
Um, he did.
Yes.
Uh, Randall was actually one of the driving forces behind my interest in community communication.
Let's put it this way.
And I reckon it's fair to say, without Randall, there wouldn't be a Linux in loss.
Um, you'll see this every now and then because we do bring on guests, although we do not do this on a weekly basis.
Uh, but this whole format and the projects that we cover and the, and the guests we bring on,
certainly, it reflects the kind of early days of Fluss Weekly.
So to say that Fluss Weekly has been inspiration for Linux in last is probably just an understatement.
And it's really sad to see Randall going from this show because I reckon that within a certain period of time,
the relationship will, we decrease.
And that's rather unfortunate because I consider, nevermind what other people say, um, the Fluss Weekly,
which was then still run by Randall Schwartz as one of the cornerstones of community coverage in terms of communication,
giving the projects that are worth covering, a, an outlet, if you will, to spread the word.
Um, of course, the, so go ahead.
Alternative broadcast.
There is.
There's something called Linux in loss, of course.
Platons have promotion ending tag.
No jokes aside.
It was, I mean, why did I start to listen to Fluss, to Fluss Weekly straight forward?
I was still a community to work then, which is not the case anymore because I normally just work from home these days.
But during the commute, these hour and on episodes gave me an overview of happening projects in the community.
You have the community, you have the project people on the show asking questions.
You had live participations from the audience.
So, uh, it's, it was then I think an IRC channel or some chat room on on Twitter TV way, way could actually ask live questions.
And I think this is still on with a new forum, but I'm not sure.
But, um, that was always an opportunity to participate in larger, but even you, if you would listen to a recording, like I did, most of the times during my commute.
It would give you within these 50 minutes, 60 minutes, just a compact overview of what that project was all about.
And when I finally got home, back home on that day, if the project deemed to be interesting enough, I simply checked it out.
I used Fluss Weekly full disclosure on quite a few occasions myself to promote more or less events, not projects.
So, for example, um, the limited user group that I still, that I'm still chairing does something called the mouse, the mouse door opener day.
It's essentially a very, the mouse door opener project.
You find the link, yeah, you find the link of the show notes.
Um, the, the show with the mouse is a long standing kid entertainment format that has been going on for the last 45, 50 years.
Some flotters in Germany.
Um, and about, I think, seven or eight years ago, they introduced something called the mouse door opener day, where kids could go places to, through doors that otherwise would be closed.
Um, meaning that the L.U.G., the limited user group that I'm, that I'm chairing or coach or rather, um, has been participating in these mouse door open.
It is organized by the broadcaster for the last, um, three years, four years, some flotters.
I mean, you just say there won't be a mouse door opener day this year for obvious reasons, but for the last four years, actually sorry, yes.
Um, we have been doing this, introducing kids between the age of six and 12 during the course of a full day to open source.
So the way we did it, basically, we brought them in.
Um, we had about four projects or four, or four, um, software packages that we used.
Like Libra office, so kids could do their own, the first presentation with Libra office.
Um, and then scratch where you would simply use a GUI to program instead of writing code.
And this, and then making music with Linux and so forth. The idea was basically in contrast to schools where Microsoft used that as a training ground for kids.
Introduce them at least in Germany.
I think that's just to introduce them to, to, to, to exit to word and to power point to show them an open source alternative.
Um, um, the present, the kids normally had the opportunity to present their work and did so by the way.
I can say remember the first, the first monster opener day when we did this, a six year old girl presented one slide made a done with impress.
In front of an audience of about 40 people.
First presentation forever. The mother was crying.
But she's still made an appearance. I mean, this is, it's just amazing.
And we have been doing this SSL for the last four years and this is, um, and so I went public with this on, on philosophy.
I pro, and I written, actually, no, sorry, in the front of the year, at least two people that came to our monster opener, they said, now look, we heard about this.
Not just on the TV show, but also on Floss Weekly.
And I found this quite amazing.
Which TV show?
The show with the mouse because they normally teaser that monster opener day.
Okay, okay, sorry. There is also a TV show with my spirit.
Well, uh, yes, that was the show that has been going on for the last 40 plus years.
In Germany?
Yes.
In Germany.
It's not getting very confusing, Martin, I know.
That, that's going to explain.
Okay, first I was the teaser show.
And then about 30 plus years into the show, they introduced this monster opener day.
It takes place on the third of October, normally in the year.
And the idea is to open doors that are normally closed for parents in certain likes.
So, um, firefighters opened their doors, library opened their doors.
Um, what else?
There's a, there's a various cooking school that blatantly uses in Frankfurt that blatantly uses this as a PR gag or promotion to get more parents into their cooking classes.
So, anything goes.
And the LUG here in Frankfurt decided to participate in this monster in this monster opener day.
As I said about four years ago.
Cool.
Sounds great.
So, um, yes, and I promoted this unknown most quickly.
Yeah.
And the year after that, we got feedback.
Um,
and
talking about it.
Yeah, enough with the, with the self promotion.
Let's go under it.
Let's get onto the feedback.
An anonymous listener posted on Hacker Public Radio.
By the way, we were hosted the show for the, for the time being.
And should that change?
You'll be the first to know as we're going to announce it here on the show.
Um, and now as a listener posted it, uh, posted a comment on the second of July about, um, a previous episode.
And said that the discussion about licenses and contribution agreements was interesting and informative.
For example, I really liked the way Fred explained how LGPL works in the context of projects like Big Blue Button.
And how it compares to a GPL.
Thanks for the show.
Thank you, and a number of listeners.
This was episode seven.
Martin is the being counter of, of the two of us.
So he keeps track about subjects, topics, interviews and, uh, guests.
I'm more on the create.
Well, we also have a, yes, I'm more on the creative side.
I, for example, I read comments.
That's my job.
So yes, that was, that was, of course, the 80 episode on the Big Blue Button.
And there was another comment posted on that, um, particular day by Ahuka.
Who is, who is, of course, a frequent contributor to Hacker Public Radio in case people are missing this.
And he said, good interview.
I really enjoyed the interview.
Good sort of information about an open source project.
And Ahuka and also to you, an anonymous listener.
Thank you for your feedback.
We appreciate it.
Okay, people.
The next episode will be on a teaser.
Two old farts and their arrival at communism.
You want to elaborate, Martin?
Yes.
Yes.
So, uh, the next episode will be, um, done by our great friends and colleagues, um, David and Tom.
Who are both grumpy and old and like to talk about communism being from East Germany.
Martin got this wrong.
Okay, blatant, blatant, not self promotion.
And there's a check it out.
It's on sound cloud.
It's on sound cloud.
There's a new podcast called two grumpy old quarters.
Both two Eastern Germans talking about Microsoft and Redis.
Now, if this up here, I need to check it out.
I put the link into the show notes just in case.
Martin is tying with the idea of bringing them on as guests.
I'm not so confident.
Or I'm not so sure about this.
Let's see.
Um, I think we would do the sketch.
Let's see.
The calls for a sketch.
Uh, Martin, sorry, um, David and Tom, if you're listening to this, feel free to get in touch.
So we don't have to do a sketch.
I'm sure they were looking forward to the sketch.
Okay.
Um, anything else before we close this?
Yeah.
Of course, the teaser.
Yes.
No, the next.
Yes.
Yes.
Yeah.
The next show will be about Martin and myself talking how we got not to just here, but also to the concept of open source.
So Martin will spill the beans, how he ended up at what?
What's the name of that new company?
Martin you're working for?
Blit something, right?
Blit, lit or something?
Blit, lit?
No, yeah.
No, no, no, no.
Okay.
Which is, of course, a closed source company.
I hope Martin can live with the pain.
I see an open core company.
I see an open core company.
Okay.
So we're working for.
Well, open core, maybe open portfolio.
If you can, Martin, if you can live with the pain, that's okay.
No worries.
And where I continue to work for an open core company, a credit slash for disclosure.
But the show won't be about Martin's new employer.
No, it will be about red slabs.
But rather, it will be at.
Yes.
No, Martin, you're watching Contrast of the Web.
Yes.
No, Martin, you're watching Contrast of the Web.
To the Web to all quarters.
I'm not that.
No, it will be essentially a show about reminiscing about the past and how we got into open source and our road to these companies.
To do these concepts and communism and stuff.
So if you're interested in learning hearing about how some old thoughts got to into open source way back.
Check out.
What is it?
Season one episode.
13, right?
13.
13.
This is 12.
So upcoming one is.
12.
Yes.
Yes.
This is excellent.
And of course, you'll find us in Hacker Public Radio.
Feel free.
We are also looking for feedback.
Feel free to get in touch.
Either by a comment on Hacker Public Radio itself.
Or.
Preferred.
Same feedback to.
Feedback at Linux 8.0.
And the final closing remark.
And going forward, you may find us on Google Podcasts.
If I got this right over the weekend.
Stay tuned.
This episode is proudly powered by the Grumpy old quarters.
Why leave your business critical projects to the young hipsters with their fancy, loosely coupled programming languages like Java, Snublin Python?
Never mind that fat, cold, no-sequel databases.
Which will be history in a fortnight when you can count on rock solid, professional experience.
Dating back decades rather than weeks.
With the combined expertise.
Span of touching nearly a century.
We can assure.
You that the abstract driving your collective will not only survive the next few decades.
But that's so in an optimized fashion.
Using our patented Windows on Rust technology.
Essentially a Windows emulation running on Big Iron.
We can crunch your SQL Server veterans from months or weeks down today.
Given you a near real-time insight into how your business is doing.
So that you can send that all important facts to the underperforming branch tomorrow rather than next week.
The Grumpy old quarters are proud to support Linux in laws.
The up and coming open source podcasts.
We are all communists at hardcom rates.
This podcast is licensed under the latest version of the Creative Commons license.
Type attribution share like.
Credits for the intro music go to Blue Zeroosters.
For the songs of the market.
To twin flames for their piece called the flow used for the second intros.
And finally to celestial ground for the songs we just use by the dark side.
You find these and other details licensed under CC Achimando.
A website dedicated to liberate the music industry from choking copyright legislation.
And other crap concepts.
Thanks for watching.
So we can bitch about mint or are you going to or both?
And snaps and yes, we can.
Render high.
Have you back?
Yeah.
No, Render.
Don't be disappointed.
We don't do video normally.
So your mother has shown a video on but.
But.
But again, I think I asked camera.
That's okay.
That's okay, Render.
But as I said, you won't see any video stream.
You don't see anybody.
You won't see any video of us.
Because because I am naked and Martin.
This is wearing a lipstick.
So that's okay.
Should we resume?
Yeah.
Yeah.
Mark is on the side.
So you want to do feedback next.
Yes.
I want to do feedback on the outro and then we're almost finished.
Which comes in handy because it's twenty to eight.
Yes.
Good timing.
Good timing.
Cut.
So Martin, what do you make of?
What do you make of?
Why are you cutting again?
Cut because the interview is finished.
Stop cutting.
No, fuck.
And it's not cut.
It's resume.
Resume.
Cut.
Resume.
We have.
Yes, we do.
Yes.
And.
Number eight.
Yes.
Do you want to read this out?
The review.
The review.
Yeah, that's sure.
I thought we did this already.
But so.
To do this.
To do this again.
What do you mean?
The review of the reviews.
How can we do this?
How can we do this already if we just done the big review button comment?
Because that was before.
Okay.
Eight.
Yes.
Big review button was seven.
It was eight.
So why don't you read it out there?
Sure.
Sure.
Sure.
So.
Comment.
Comment by Claudia and also contributed to HBO.
I wonder who that is.
It could be anybody.
Anyway, he says all according to plan.
Smiley face.
You really thought I would have done my research.
I wouldn't have done my research before recording.
This is the next step on.
Yes.
Yes, we have found it.
Yes, we did.
But no, no, no, no, no.
Why are we doing a feedback on seven then?
Because we didn't do the feedback on seven yet.
Why didn't we do the feedback on seven yet?
We didn't do it.
It has to do with our production schedule.
Yes.
Just blame the.
No, no, no.
It's not.
It's not.
It's not.
It's not on you anymore.
It's post production.
Right.
Department.
No.
Peter.
No, no, hang on.
It's the two grumpy old coders.
Yes.
David and Thomas.
David.
Thomas, please do a better job next time around.
Please do.
Because as you see, this really fucks up our schedule.
Okay.
Episode nine then.
Okay.
Um.
You've been listening to HeccopublicRadio at HeccopublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out
how easy it really is.
HeccopublicRadio was founded by the Digital Dove Pound and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website
or record a follow-up episode yourself.
That's otherwise stated.
Today's show is released under Creative Commons' Attribution, share a like, 3.0 license.
