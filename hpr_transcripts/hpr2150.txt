Episode: 2150
Title: HPR2150: Apollo Guidance Computer
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2150/hpr2150.mp3
Transcribed: 2025-10-18 15:01:05

---

This is HPR episode 2,150 entitled Apollo Guidance Computer and is part of the series,
Interviews.
It is hosted by Ken Fallon and is about 73 minutes long, the summer is.
Francois Rottenpart tell us how he is hacking 50-year-old computer.
This episode of HPR is brought to you by an honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's honest and fair at An honesthost.com.
Hi everybody, my name is Ken Fallon and you're listening to another episode of Hacker Public Radio.
I have got an awesome interview for you today.
Back some time ago I was introduced to everybody who can remember the Apollo missions to the moon.
I came across this website, thankfully provided by his brother.
I had the opportunity to interview Francois Rottenpart.
Rottenpart.
Francois, you're calling in from South Africa at the minute.
That's great, yes.
You have put together on your YouTube channel links in the show notes, some excellent videos on the Apollo Guidance Computer.
Can you just give us a brief overview about what the Apollo Guidance Computer is and why it was built?
Yes, Ken.
Basically about two years ago I started reading up about the Apollo Guidance Computer and I got some really interesting information about it.
We grew up with this idea that the Apollo Guidance Computer was no more powerful than a programmable calculator and I found out it was completely wrong.
This was a real computer, it wasn't that fast, it didn't have that much memory but it was quite powerful.
The purpose of the Apollo Guidance Computer was basically to first of all navigate the astronauts to the moon in the command module.
There was a second Apollo Guidance Computer in the lunar module and that was actually the primary purpose for it to actually land on the moon.
The guidance computer took the lunar lander through all the phases and sort of breaking phases and decent phases all the way almost right up to the point where it landed on the moon.
Right at the end, Neil Armstrong actually took over manually and physically landed the lunar module but the computer could have landed it as well.
They just preferred to do that last step under sort of manual control.
The Apollo Guidance Computer was quite important.
It was the one thing that made it possible for them to actually land on the moon without that they wouldn't have been able to do that.
What did it actually control the thrusters and orientations and stuff like that?
I think if I quickly go back but the Apollo Guidance Computer had something like over 200 inputs and outputs.
So it was monitoring not just sort of alignments and the position, the sort of geospatial position of the craft but it was monitoring all sorts of pressures and sensors and control all the thrusters.
For instance, the lunar module itself had four sets of four thrusters around the lunar module.
So there's 16 thrusters just around the module just keeping it upright and then there was the main engines and then there was sort of gimbals that had to be monitored and engines that had to be sort of moved slightly to change the center of gravity of the thrust.
So there was a whole bunch of things that it had to monitor and control and it was all from one computer basically.
It presumably had some sort of gyroscope to keep the level on center.
That's right, yes. So the gyroscope was developed by MIT in the 1940s, 1940s, 1950s and it was sort of an evolution and that's why they were able to get the contract for the guidance computer.
Because they had all this guidance navigation thing already under control with the gyros or the gimbals, you know, all of that and they were able to control the or to determine the position of a craft anywhere in a three dimensional space.
If you knew where you were, then you can actually get to a point, you know, further on, I mean, if you were orbiting the earth and you knew exactly where you were at that point, then you could navigate your position or your craft from that point to the moon and that was all the navigation stuff that MIT had developed.
And the guidance computer was just a natural evolution to that mechanical system. Wow. What's a gimbal?
It's the gyros, you know, they basically, okay, this is an interesting story, but normally you would need three sort of gyros turning inside one another.
So you had three gyros inside one another and these gyros doesn't matter how the craft would move, these gyros would always stay level and they would stay in one position.
So I'll give you an X, Y and Z coordinate, I guess, yeah.
Exactly, yes. But this sort of a snag there that when these gimbals, when you get to a certain point where all these the axes are aligned in a straight line and you would tilt, then you would get something called a gimbal lock where these gyros would sort of just spin out of control and they would just lose the alignment.
So you needed a third, you know, that third axis. Now with the Apollo guidance computer inside of the command module, they didn't have that.
They tried to save space and they tried to, you know, not do that. So they opted for a simpler sort of gimbal gyros kind of system.
And it came back and bit them a little bit Apollo 12, for instance, while it was taking off, it was hit by lightning at twice.
And the batteries went down and the whole computer reset it a few times and there was a chaos. The computer wasn't damaged at all. They tested it, you know, after the launch, they tested everything and everything was fine, but they lost gimbal.
The gimbal, the gimbals were the gyros was basically just spinning.
So they lost their position completely and they had to recalibrate the gimbals in space.
So the earth stations, they actually had to find out where is this craft, where is the position around the earth, then they had to transmit.
They were over here and re-align your gimbals and, you know, so it would know where it was basically.
Start point X.
That's right. You would also need to know like where the earth and the moon are and all variations of that over time as you're moving out.
Wow, that is actually quite impressive.
Just to give an idea of how difficult it is to actually fly to the moon.
You know, there's a company, I can't remember the name now, but they develop software to sort of plot your route to the moon.
If you want to fly to the moon, you use all their maths and their algorithms and the constants that they've already determined.
Now there's over 5,000 parameters that can affect your flight to the moon.
So there's over 5,000 things that they need to know to be able to get you to the moon.
So it's quite a complex thing to get to the moon.
And if you fly from the earth to the moon, then you don't fly directly to the moon.
You actually aim at a point in front of the moon.
And you have to know exactly how far you're going and how far the moon is going.
So that by the time that you get to that position, you're right in front of the moon.
Now if you get it slightly wrong, you're going to fly right past the moon.
You're going to end up in space and going on forever.
If you get it slightly wrong the other way, then you're going to fly right into the moon.
So you have to fly right in front of the moon.
It's basically like running in front of a bus and just missing it.
And if you're passing in front of the moon and then the moon catches you in its gravity field
and it slings you around the moon and then you just fire the engines once or twice
and then you know it around the moon.
So you have to get it absolutely right.
So that's actually quite a critical part of the mission.
Yeah, for episode 2000, I did a show on pointing satellite dishes, no satellite works.
Or, but there's nothing more than falling at the same race.
So you're falling around the moon, but not enough to crash in, but not enough to go away.
So this is an amazing feat of engineering from something.
How old would this have been?
It was 1966 that's introduced.
So two years before I was born.
Well, the computer was actually the first prototype came off the production line in 1964.
And this is why, you know, I've had some sort of discussions with people who said, you know,
the minute man missile had the first guidance computer because that was launched and launched in 1965.
And yes, it was launched in 1965 and the Apollo guidance computer was launched in 1966.
But by 1966, the Apollo guidance computer was already working for about two years.
You know, it was already in production.
They had production versions, training versions.
So this thing was around, you know, around since, since late 1964.
And it was actually the head working versions of it already as early back as 1962.
Wow.
Yeah.
Do you remember this as a little, I don't know how old you are, but do you remember this?
How did you start to become passionate about what, where does your interest in the Apollo missions come from?
It's basically from a, from a few point of angles.
But, you know, I was born in 1965.
So, you know, when the first missions went up, you know, I was really actually too small to realize that, you know, just remember my day where there.
Yeah, listening to the radio and it was like, are they going to the moon?
You know, you're going to the drive-ins and you see these set in fire rockets launching.
So you grow up with these things and then they disappeared.
Yeah.
You know, that was it.
And, you know, my background is more into computers and, you know, developing software and designing hardware and that sort of thing.
And at some point, you know, I started thinking back, you know, like, what was this about?
You know, what, what was the story there?
Now, they're not discovered.
These was a computer in there and that computer used integrated circuits.
And my perception of computers was integrated circuits.
This is something that happened in the 70s, you know.
Yeah.
My, I was going to say that.
That's it.
I didn't, you know, sort of think that integrated circuits was used in 1961 to build a computer.
And this computer had ROM and RAM and it had IO ports and counters and timers and it could do integrations, you know.
Also, it's a complex mess and it was around in 1961.
So that intrigued me, basically.
Okay.
I'm going to jump all over the place here as I think of questions.
But we're surely the integrated circuits.
I mean, there was a lot of development in order to get to the moon.
But that's a big jump to get integrated circuits from where were you?
You know, I guess there were a lot of developments with the V2 rockets.
But that surely couldn't, that didn't have any, you know, going from there,
which was at the end of 1945 to what, 10, something years later, 20.
Yeah, yeah.
About 20 years or 15 years at least later.
Yeah.
Yeah, this was, you know, that's also an interesting thing.
You know, it's like technology, you need to sort of learn and get comfortable with a new sort of idea.
Yeah.
You know, when the first rockets were built, I think about every second rocket exploded.
You know, these things went off course.
They just went crazy flying all over the place.
And as these guys started understanding how to keep a rocket, you know, upright and make it go up and not sort of sideways.
You know, it's clear.
Yeah.
They realized that, you know, you need to control this thing.
You know, you need to take the engines and you don't really see that.
But those engines in the bottom, they actually move slightly.
So the rocket kind of tilts to the one side.
They would just slightly shift these engines, you know, to sort of push it back on to its path.
So there's a lot of things that happened there.
And a natural thing was to have some kind of electronic circuit that could control this rocket and understand that it's tilting over by a half a degree or whatever.
And the one thing with the rocket is you, the thing you need at least is weight.
Everything needs to be extremely lightweight because you can't lift a lot of stuff.
And if you have to put a computer in a rocket, now you have to think back in the early 1960s.
You know, if somebody talked about a computer, they, a computer was something that occupied a room, a huge, big room.
And there was a lot of people working on this computer.
So when NASA said, okay, we need a computer in this rocket.
Those people, they didn't think about it a little laptop or a, you know, kind of thing.
They were thinking like, how can we put this room in a rocket?
Yes.
I've actually got a drawing where people drew this whole thing with tapes, spinning and printers printing.
And this is all in a capsule because that was what they thought a computer looked like.
You know, a computer is, it's, it's really it's something that fits in a room.
You need to put that room in a rocket.
So MIT said, you know, they proposed, let's build a, a, a miniaturized computer.
That was the exact words they used.
They said, can we build a miniaturized computer?
And they started building this computer with transistors.
And this computer ended up being like about four free, refrigerator size sort of cabinets.
And they said, okay, can we fit this in a computer in a, in a, in a command module in a spaceship?
So one of the guys went to a meeting in another city and he came back and he said, guys, big problem.
These guys gave us one square foot to put the computer in.
Wow.
And everybody said, no, okay, we've got four refrigerator size cabinets here.
And we need to put this in one square foot.
So how are you going to do this?
And there was this program just before the Apollo thing, the Polaris missile project.
And they wanted to use these really small new invention called integrated circuits in this.
And they ordered these integrated circuits from Texas Instruments.
But Texas Instruments, the process wasn't, you know, sort of streamlined yet.
And they, they build these integrated circuits with by hand, each chip individually by hand.
They would actually etch the, the transistors and the resistors on the chip.
But then they would take little, I think it was 10 wires or something and they would weld it onto the chip, make the tracks with that.
So it was an incredibly slow process.
And Texas Instruments quoted MIT $1,000 per chip.
And even at that price, MIT ordered 60 of these chips.
Now, imagine 1960 prices.
$60,000 for a handful of chips.
And they were willing to pay that because they wanted to get this Polaris missile like really small.
Anyway, Texas Instruments only delivered the chips about a year and a half later in 1962, which was way too late for the Polaris missile.
But by that time, there was also another company called Signatics.
They'd been bought out a couple of times, but it's, they were the first to actually make commercially viable integrated circuits.
And they built these really small chips.
And they said, okay, we can deliver these things for $40 a piece, which was way better than $1,000 a piece.
So MIT bought, you know, I think about a thousand of these chips, if I remember correctly.
And they started prototyping the Apollo guidance computer with these chips.
And these chips were actually ordered for the Polaris missile, but they're in it up being used in the Apollo program.
And this is why a lot of people don't know that it was actually used in the Apollo program.
They were the first.
It's amazing to think that it was only in 1947 at the end of 1947, beginning in 1948 when the first transistor appeared on the scene.
That's right, yes.
And I mean, just over 10 years later, they had integrated circuits.
And the $1,000 will be around $8,000 now and today's money.
So, wow.
Yeah.
Wow.
And it had three transistors and four resistors.
And that's it.
Oh, wow.
So, paint me up.
So, did they manage to get it down to a square foot then in the end?
Yeah, yeah.
They did actually get it down to that.
But it took a couple of iterations and squeezing it in.
And they managed to get that going.
I think the first computer had something like.
It was close to 5,000 of these little integrated circuits.
And they packed them really tightly.
There's some nice videos on the internet on YouTube, actually.
If you want to see how that was done, but.
They went to NOS and they said, we have to use these new technology.
And can we please use this?
And everybody said, you're not going to get that post NOS.
You know, they're not.
They're not going to try the bleeding edge kind of technology.
And they fell for it.
They went for it.
And the one thing that I want to say is that.
It's because MRT used these chips.
And they tried these chips.
And the chips was like horribly bad initially.
Every, you know, in a batch of 5,000 chips,
they would find a lot of them that wasn't working.
So they said, if we can get a batch of 5,000 chips
and there's not one chip faulty in that batch,
then we will grade that for space use.
Otherwise, we're not going to use it for space use.
So all these manufacturers, you know,
went in and attended and said, we can deliver batches.
That's perfect.
And they were all competing with each other to get this.
They had a perfect 5,000 batch of chips.
And in the end, they had storage rooms full of chips
that just didn't make it, you know,
a batch of 1 or 2 faulty.
And, you know, MRT would pay a premium for the ones
that's like really good.
And then what happened was, at some point,
they said, what are we going to do with all these chips
in the storage room?
I mean, we ordered literally millions of dollars of chips now.
And we're not going to use them for space use.
So let's force the guys building the,
what they call the ground support equipment.
Let's force these guys to use chips.
Let's tell them, we've already paid for this stuff.
Here it is.
You have to design using this.
And because of that,
a whole generation of engineers grew up designing
with integrated circuits.
And that is a major thing,
because when these guys, you know,
went after the Apollo program, obviously,
you know, they went into the industry.
And they said, I know how to use chips.
And everybody started using chips.
And the whole industry had been kickstarted by NASA,
who were willing to pay a lot of money to get,
you know, just the first batch,
the first, you know, sort of prototype chips
and evolve it and make it stable.
So I believe that this is my personal belief
that the Apollo guidance computer is,
you know, that kickstarted this computer revolution
by at least, it advances by at least five years.
I'm sure.
I'm, you know, listen to this.
And you hear like Velcro and stuff was not developed by NASA.
And, you know, we should really give credit for credit
because I did not genuinely realize
that there were integrated circuits on that,
how advanced those computers were
until I watched some of your videos.
So, yeah, no, it's pretty amazing.
It's amazing.
So, okay, you got interested in what's your background?
You said you were working hardware and software.
You have some really nice kids on your videos, by the way.
Yeah, except my power supply,
I did nice power supply,
but that sort of picked up shortly before making those videos.
So I had to go to a backup little analog power supply.
But yeah, no, I designed a sort of digital hardware.
I'm not really an analog guy that much
mourned to the microcontrollers,
embedded microcontrollers, that sort of stuff.
So for the guys working with pick microprocessors
of microcontrollers and the ethno microcontrollers,
that's a sort of stuff that I use a lot.
And then I also write a firmware running on that.
And all the way up to even web servers
and network protocols and that sort of stuff.
I try not to specialize too much in one specific area.
Okay, cool.
And so how did,
so when exactly did you become interested in the Apollo mission
and where did you go then from there?
I think what sparked my interest was
I saw a book on the internet at one point.
It was a book that explained the Apollo guidance computer.
I'm trying to remember the name.
Yeah, sorry.
It was a book by Franco Brian,
the Apollo guidance computer.
And that book was a very technical book
and explained in quite a detail
how the Apollo guidance computer worked
and all the different parts and pieces in it.
And you know, basically how the software worked,
the instructions of that computer.
Now, I bought it to actually read at night,
you know, sort of before going to bed,
but it's not really bedtime reading material
that seriously technical sort of stuff.
So if you into that kind of thing,
you know, it's quite intense and it shows you
exactly how that computer was built
and a lot of interesting things.
And that sparked my interest in the whole
and the Apollo thing.
And you know, one thing led to another
and you know, I ended up getting hold of it.
Yes.
Getting hold of these rope memories.
Okay.
So tell us what this rope memory is
and what part of it is in the guidance computer.
Okay.
So the rope memory is actually like a ROM,
like a read-only memory.
I know, you know, some people think it's like a core memory.
You get core memory, which is actually RAM.
We've seen it a lot.
It's been used even up till the early 1980s.
Mainframes used core memory.
And you know, it's,
if you see some really old boards
with these small little miniature cores
with three wires being tracing through those,
that's core memory.
A rope memory is actually slightly slightly different.
And it works in a very different principle as well.
It works in the principle of a transformer.
So if you have a primary winding through a transformer
and you put a little bit of current on that,
you can pick it up on a secondary coil
on that transformer without a physical connection
between the two coils.
Now, the rope memory works in exactly the same thing,
except that there's not just a secondary winding.
There's 128 wires.
Hello.
Brian, you just dropped off there.
Can you hear me still?
Yes, I can hear you.
I lost you as there's 128 wires, is that it?
Yeah.
That's right.
So there's 128 secondary wires
winded through this core,
this transformer core.
And if you pause the primary coil or wire,
you would actually pick up the signals
and all the 128 secondary wires.
Okay.
Now, if you take some of these secondary wires
and you bypass the coil,
so you don't wrap them through the core,
but around the core,
then they won't show any signals.
But all the wires that's going through the core
will actually, you know,
sort of have a current,
a current induced in them
and you'll see a signal on those wires.
And that's how they differentiate between the zeros and the ones.
So the principle behind the core rope memory
is that it's,
it's little transformer coils,
there's 512 of these little transformer rings
terodial cores in a rope memory.
And in a factory,
this, that video on my YouTube video,
shows that quite clearly how these wires
are winded through these cores or around the cores.
And in the end, you sit with a memory
that's 8 kilobytes in size of one module.
Okay, I'm going to just need to,
just need to what?
Sorry, finish your sentence,
because I'm going to need to explain this to people.
Yes.
So you just need to pulse the right cores
and then you get the signals the data coming out of that.
Well, I go 100% to understand everything that you just said,
but just to play devil's advocate for a moment here,
to people who haven't seen this video.
Now, some of your videos are absolutely excellent,
but it's a,
it's a video,
a black and white video,
so take, record it at the time,
and it shows ladies with needles,
and to describe it to the,
to the people listening.
Imagine a one-new 19-inch rack
with lots of holes in it,
literally as many holes as you can possibly put in a one-new 19-inch rack.
And they're threading a needle
from one side,
right across to the part working partner on the other side,
who threads it back to another one,
right through and back.
So that is,
so a transformer in,
in my mechanical engineering experience here,
I'm trying to see,
if I was doing an AC to DC,
or let's say a step down from a two,
to what,
to 40 or 110 volt,
let's say 110 for us listeners,
down to 40, 12 volt DC, for example.
I would have more coils on one side
than I would have on the other side.
That's how a transformer works.
That's right, yes.
So with the, with the, the course,
they actually don't even
wind it a couple of times through the core.
They only push the wire through the core once.
Yeah.
And both the primary and secondary wires
are just threaded through the core once.
And that's enough because you,
you don't,
you don't want to step up or down
or anything like that.
You just need to put a 14 volt pulse
on the primary wire.
And then you're going to find that there's a,
maybe 100 or 200 milli volt pulse
on the secondary wires.
And that's all you need to,
to, to, to see.
So you,
okay, I'm trying to get my head around this.
So if I was to,
if I was trying to write a binary one, for instance,
I would find both of them through the core.
That's right, yes.
If I was trying to write a zero,
I would have the same wire going through,
but the other wire not going through.
Exactly, yes, yes.
So I could send back those up a word.
A one on a zero will be one of the wires going through
and one of the wires not going through.
Exactly.
So with 128 wires on average,
you would probably get 64 wires going through the core
and 64 wires going around the core.
And they might be a little bit variation on that.
But that's the,
the sort of general principle.
And if you pulse the primary wire once
and all 128 wires,
you either get half of them might be zeroes,
half of them might be ones.
So the ones that going through the cores
will show a little pulse coming out of those wires.
And the ones going around the cores
will obviously not see anything significant.
Okay, so this will be, in essence,
something USP stick for that word.
Yeah,
yeah, that's right.
But even when the power was off,
that's right, yes.
And these things, I mean,
because it's physically wired,
like I said earlier,
Apollo 12 got hit by lightning twice.
And it didn't even damage to the computer.
There was no damage at all.
The computer worked perfectly.
You try that with a computer today.
It's not going to be,
it's not going to,
the smoke is going to come out.
And when we say it's physically wired,
I mean, this thing was physically wired.
It is,
Exactly.
Like physical wire has been knitted.
It's, you've knitted in.
So I just wanted to explain that.
So they,
at the time we're talking
storage of computer programs was done
on ticket tape on,
if I'm correct.
And in one of the videos,
I saw the computer program
was being read out by a ticket tape machine.
And that ticket tape machine was positioning
a sort of loop for the ladies
to use as a guide
where to thread this
rom memory,
rope memory.
That, that's correct.
Yes.
In fact,
this is another interesting story.
IBM actually competed with MIT.
They said, you know,
we can build a better computer.
And we don't believe in this integrated circuits.
IBM actually only started using integrated circuits
in the early 1970s.
But they competed with,
with MIT.
And they said,
we can build a smaller computer,
faster computer,
and,
but IBM's solution
actually consisted of a drum
that was spinning.
And,
with the head inside of the drum.
And,
they didn't had a rom.
The,
the drum would spin so fast that,
and you would keep track of where this drum was.
So if you want to get the first instruction
in the memory,
you would wait for the,
you know,
the index pulse for this drum.
And then you would,
quickly pick up the first instruction.
Yeah.
And if you wanted to execute
the second instruction,
you had to wait for the drum to,
to complete a full circle again,
and go to the second instruction.
So it's like a hard drive in,
in a sense,
but reading the instructions,
yeah,
reading the instructions from,
from that,
and executing,
sort of on the flyer.
Obviously,
there was way slower than,
than the rope memories.
And also,
you know,
in a spacecraft,
you don't want spinning things
and mechanical things
that could damage
and also,
sort of magnetic drums
and,
and so on,
radiation and all of that
could interfere with that.
And so the rope memory
was absolutely suited
for this space program.
Wow.
Absolutely amazing.
And you got your hands
on some of this.
How did that happen?
Yeah, that's it.
That's another story again.
But I was,
I think it was about two years ago.
And I was,
I was sort of browsing
on the internet
and looking for pilot stuff.
And I came across,
you know,
on eBay.
There was a guy selling
some of these modules.
So I ordered one of them,
actually,
you know,
managed to,
to win the,
the auction
and got one of these modules.
And that the module came
out of the,
what they call the diskey,
the display and keyboard device.
That was the screen
and keyboard
that the astronauts
used to enter the commands
and the data
inside the command module
and the lunar module as well.
So I got one of these modules
that came out of the,
the diskey.
And I was,
you know,
after I received the,
the module,
you know,
I got, got,
got into contact with a guy
who shut it to me
and I said,
where do you get these things?
I mean, it's like,
this is pretty amazing.
This is something
from the,
the mid 1960s.
And I mean,
you don't just pick this up
and he says,
oh, now you've got a few,
you know,
ported a few years back.
And,
you know,
we started communicating
and sent me some pictures
of things that he had,
some modules
that he already sold
and things that he still has.
Anyway,
so at one point,
he sent me a photograph
of these six modules.
And on the modules,
it said,
fly two or two.
Now, at the time,
I had no idea what fly two
or two was.
I mean, it didn't mean
anything to me.
So I started googling.
And I came across this
flight AS two or two,
the AS stands for Apollo Saturn.
Now, there was a flight AS two or one
that was the first Apollo,
official Apollo rocket
to be launched.
And then,
the second Apollo rocket
to be launched was actually
flight two or three,
because it was very simple
and it was really before
flight two or two.
So flight two or three
was launched second.
And then,
flight AS two or two
was launched
in on 25th of August 1966.
And,
wow.
You know,
well,
I thought flight AS two or two,
AS two or two,
you know,
it,
it,
this sounds to me like the,
and then I,
I googled some more
and I found out that,
AS two or two actually
contained the first Apollo
guidance computer.
So that was the first Apollo
guidance computer that was
launched.
It was an unmanned flight,
but it was the first
computer that was launched.
And, you know,
here's the first
road memory modules containing
the software, you know.
Where did that end up going?
Well,
I ended up,
sort of,
reading up a lot about these
road memories.
And there's lots of documentation
on the road memories.
But, you know,
the problem is
that a lot of these,
the documentation comes
from the early 1960s,
you know,
1960, 1961.
And you read that,
and explains exactly how
these things work.
And then you look at
a module,
and it doesn't work like that.
It used to probably work
like that,
but it doesn't
anymore.
So, you need to
surf through all this
information,
and sort of filter out
all the things
that's not applicable.
And,
and there was also
the block two,
the,
the later Apollo guidance
computer,
either. So eventually I managed to find out quite a lot about the rope memories, how they function,
how they work, and I managed to get a rope memory from the same guy, but not from the flight AS2A21.
Get a sample rope memory, and I played with that and I built a rope memory reader. Just a
little hack together device that would allow me to select the different lines and pulse the
cores and get the signals coming back and record that. Is that the one in your video?
Yeah, that's one of the ones in the video, but I also have the guys of the two ones in the video.
He says rough and ready. If you remember back to the future, the famous excuse the cruiser of the
diagram. These are laser cross rigs and it's absolutely mesmerizing to watch. If you have no
interest in the show whatsoever, go look at that video because it's absolutely mesmerizing.
Yeah, I've actually been spending many, many hours sort of watching these relays click and
sort of going through these signals. I've spent a part of my life doing that, but
so last year I've got a year ago, I flew to Houston with my rope memory reader,
set it up in a hotel room, and the guy gave me one rope memory from his two or two and he said,
try and see if you can read this. I read it. I managed to capture the data from that. The rope reader
wasn't perfect at that point yet. I managed to capture like three quarters of the rope memory,
but it was because of a software bug that I managed, not didn't capture the last quarter,
the last 25% but that was my mistake. But I managed to capture most of the data from these
rope memories. In the meantime, the last year, I've actually perfected my rope reader. I've
gone through the data that I've captured and to give you an idea of how difficult this is to
capture. I once just did a little sum to calculate how many combinations and permutations are there
because you end up with a box of zeros and ones. You don't know what belongs where,
is this part of that, is the address is sequential or you're jumping all over the place because
you don't know there's no documentation about this, and there was literally billions and billions
and billions of combinations. So at some point last year, in the last year, I thought we'll never
be able to get this. This is the last case. I've got the data, but nobody knows what the order is
of the zeros and ones in this memory. And then I've got a few lucky breaks. And I've actually,
I've recorded most of the video, but you know, over time, and I just need to put all of this together
for the third video in that series, where I'm going to show how I managed to find out what the
address lines is. Where's address line zero, one, two, three, four, five, and the data lines,
there's data line zero all the way to data line 15, 16 data lines. 16 data lines I've lost
after that. Hello, we may have lost for as well. One second, higher back. Yes, I lost you
after 16 data lines. Okay, because I think you'll probably have to cut and paste a little bit.
No, no, no, no, no, we don't have the tools. Some people do, I don't.
No, no, no, no, sure. Okay, so there's there's 16 data lines and there's no documentation that
tells you what is data line zero, one or two or three. So it's, I mean, it's just a wild guess,
you started one point and you said, okay, let's assume that is data line zero and you go all the way
to 15. Now, the same sort of, you have the same problem with the address lines. You can't,
there's no documentation that tells you where what is. So I've got all this data and I managed to
make a few small breakthroughs in sort of solving that problem, which data line is which data line
and the address lines. I've got another video. I've recorded most of that and that will be
on YouTube pretty soon. So that's a third video in that series. Yeah, don't want to give us a
sneak preview or something. Yeah, this is one of the biggest sort of discoveries that I've
kind of made. It was this a guy by the name Ron Berkey, which he did a lot of work on the Apollo
stuff, you know, not just the guidance computer, but virtually everything about the Apollo stuff
is on his website. Anyway, so one of the data maps that he uploaded to the internet showed
that there was, you know, it's just octal numbers of this rogue memory and I looked at that and it
didn't mean anything to me and then run about the same time I read a reply that was written by
the first programmer on the Apollo guidance computer and he wrote something and somebody said
something in his book and he said, now you're not 100% correct, this is the way it is and he just
elaborated a bit. And there was one little sentence he said, he said, in the block two computer,
things don't work like this anymore. And he said, the check sum in the block two now works like
this, not like this anymore. And that little sentence actually, that was the thing that said,
okay, so this is the way it worked in block one. And I looked at the code and I saw some values
that didn't make sense. And I remembered this and I remembered the Hicks dump that I saw from
Ron Burkis website and all of these things came together and in the end, I realized, you know,
if I shuffle the data like this and all the funny values, the weird values moved right to the end
of the rogue memory and everything started falling into place. So that was the key moment.
Yeah. No. I hope you had a good whisky for last or at least a nice refreshing beverage.
Well, I didn't sleep that night. So yeah, it was quite exciting.
Wow, this is unbelievable. So can you tell us a little bit about your reader,
how what you did and how you put it together, was it consistent? So yeah, when I started
with the rogue memory, I had a rough idea of how it worked and I knew that, you know, I'm going to
experiment with it and things are going to change and I'm going to learn things as I go on. So,
you know, I couldn't build a rope reader that's fixed and, you know, sort of, you know,
final, I had to do something that I could experiment with. So I built these three little relay boards
and each relay board had a 16 relays on it. And the relays was wired in such a way that I could
just using standard wire wrapping sort of wire. I could interconnect these relays in any kind of way.
So the relays, it doesn't really do any of the reading of the ropes. They basically just
route the signals through to the rope memory. So I need to sort of put pulses on certain wires
and sense other wires. And that's what the relays do for me. They sort of like a telephone
exchange. They would route the signals through to the correct pins to read that one specific bet.
So I built these three relays boards and I just, the first relay board would just do the lower
seven address lines. The next relay board would do the 16 bits would route one of those 16
bits through for me. So I can just look at that one specific bet. And then the third board
added your purpose, did the rest of the address lines and what they call the core inhibit lines.
So it's actually a pretty simple sort of system, but it allowed me to to experiment and try
different sort of things until I managed to get the right data out of that. And it's still a
reliable, you get some reliable data offered. I haven't yet managed to capture the zeros and
ones in a file. At this point in time, it's basically waves. It's raw data. I can, with the eye,
I can look at the data. I can see that's a one, that's a zero, that's a one. And I would write it
down by hand. And going right to the end of the memory, I could see that there's empty space right
at the end of the memory. And that's also an interesting thing. If you've done any kind of low level
programming on a Pentium process, so you know that there's something called that you can get a page
fault in memory. If there's no physical memory in that address and you try and access memory in
that address, you would get a page fault. Well, the guidance computer, Apollo guidance computers
got a page fault system. The absolute end of a rope memory that doesn't contain any software.
It's actually explicitly, they made a fault in that memory and that the parity is incorrect in
that memory. So if you jump into that memory, you would get a parity error and the computer would
reset and it would just carry on what it was doing last. So it had a page fault and that page fault
I managed to move all of that data to the end of the rope memory. I looked at that. I looked at the
three bytes preceding that end of the memory and I could see the check some byte called the bugger
word. I managed to find that in there. And then the two words just prior to that is what they call
the TC self. I need to explain that. TC is a jump instruction or a go-to instruction in the
Apollo guidance computer. And it means TC self means go to myself, you know. So it goes into an
endless loop. And they marked the end of the software with two TC self. So a jump to its
own address and the next instruction would also be a jump to its own address. And then they would
be a check some value. And if they did diagnostics on the software, they would start at the beginning
of the memory, run through the memory until they find a TC self, another TC self, and then they
would know the next byte is a check some. Don't read past that point. You're going to crash. You're
going to get a parity error. And I found those things. They are in the memory that TC cells
helped me to sort of find out what the data line order was. So I found all of that information.
It is in there. It's exactly as the documentation said it would be. Wow. And you could then
knowing where you are, work your way back. That's right. Yeah. So it's going backwards and forwards
and forwards. And in the end, you know, it starts all falling together, coming together.
And I think we're there. Okay. So you meet a strange guy in a bedroom in the U.S.
So I rate the memories. You know, I was quite pressed for time. They only had a limited time.
And hotel room is not this sort of base place. The lighting isn't good enough. And I lost my reading
glasses, you know, sort of going there, misplaced them somewhere. So I didn't have my reading
glasses when I was half blind, you know, bad lighting. Then I had my soldering iron with me,
even if I took it over there, you know, we used to tiny skulls. You know, it wouldn't have
worked. I had to go and buy myself a soldering iron. It was really grabbing, you know, sort of
working in non-ideal sort of environment. But I managed to read the data. And the data that I've
got right now, all the data that I managed to crack was based on that original data that I
read there. And I've got a whole new set of data now that I will release quite soon.
Did you get any more modules? That was about the other modules, isn't it?
Yeah, yeah. Well, they were more modules. So we've got the Flight 2.2. We've got a full set of
six rope memories for Flight 2.2. Then there's another set of rope memories from Flight 5.1.
Now Flight 5.1 was Apollo 4. And Apollo 4 was the first time that the Saturn
5 rocket was launched. So that was in the Saturn 5 rocket, the Apollo 4 rocket, the Saturn 5.
So we've got on the the 5.1 ropes, we've got 5 out of the six. And this is quite curious
is the missing rope on Flight 5.1. We've got a rope with exactly the right number that should go
in there, but it's not marked as Flight 5.1. So that's a bit of a mystery. It's, you know,
what's the odds that there's a spare one and that spare one just fits into that slot, but it doesn't
have the right markings. So yes, we have that. I'm pretty sure we've got the full set of Flight 5.1.
I think that that other one, the unmarked one was probably taken out and replaced at a
quite a late stage and it just wasn't marked. That makes a lot of sense. But we'll see when we've
captured that data from there as well. So I've got some of that rope data as well that I've captured
at my in the time that I was in in Houston. I couldn't capture all of them. It took quite a long
time to read the entire memory and get all the data correctly out of it. So I didn't manage to
capture the entire 5.1 rope memory modules, you know, all the data and that. But I got most of that.
Very good. Very good. Yeah. Yeah, I mean, you know, I can add to my surprise the second
last day that I was in in Houston. The guy said, you know, come down. I've got something for you to
have a look at. And I went down and there was this big, big, big trough container that I had to
carry up the trail behavior container for me. And there was a block two Apollo Gardens computer,
the actual computer, you know, and I happened. I was allowed to open it up and look inside and
measure it out. I pulled some of the modules out. I photographed everything and that was the third
video that I've put up on on YouTube as well, just for a, you know, sort of, that's, you know,
that's amazing. That's, you know, somebody asked me a while ago, so how did that feel like
opening up that computer? And I said, you know, it's, it's, I think I know how the guys who
opened up to Tom Coleman's cave and went in and saw all the gold. I know exactly how that feels
because when you open that thing, it's just gold. It's literally all the connections are gold,
all the chips, the leads are gold. It's that thing shines. It's, it's pure gold. Amazing stuff.
But you got a whole box of those readers, where did they come from?
Yeah, the one that I've got is all from Flight 202. So that's all the Flight 202 modules that I
showed on the video. And you bought them from Ebay? No, no, I didn't buy them. Those were all
known to me just to extract the data from them. Right. Gotcha. Yeah. Okay. So I've, you know,
I wanted to do it last year. I couldn't do it exactly the way I wanted to do it. I needed some more
time with it. So the guy, you know, sort of agreed, it's fine, you know, sort of, and we, we,
we talked about it and he said, okay, as long as I ensure the shipment and it's like really safe
and locked up and everything, you know, lock it up in the safe every night after I've done with it.
So these things are incredibly valuable. And he allowed you to take them just so that the
code could be taken off for posterity. That's, that's right. And that's, that's quite amazing. I
mean, I'm incredibly thankful for what he's done and the faith that he had in me for not,
not blowing these things up and burning them out. Absolutely. You know, you know,
destroying them in any way. Yeah. So that was, that's, that's, that's just to be commended.
It must be said. Yeah. Yeah. Yeah. Okay. Cool. And so how did you end up in hospital then?
In hospital. No, you mean like that. Yeah. It's a, it's a house friend of ours. And,
you know, I had these modules and I was like, really, I needed to know what it looks like inside.
I've got these videos, but I don't know if these videos is actually this thing. It looks like it,
but I can't really say in the videos doesn't show you everything. So I contacted the guy and I said,
you know, if I fly down from Pretoria to Durban, which is a one hour flight, you know, would you
be able to, to x-ray these things for me and he says, yeah, sure, you know, come through and let's,
let's x-ray them. So we arrived there and then sat in a morning, we went into the hospital and
stacked the stuff up there and it was over in 10 minutes, you know, way too quick.
You know, to look more, you know, sort of turn them and look at it from every possible side,
but yeah, we had it. Yeah. Yeah. Yeah. So that was, that was also quite amazing.
Absolutely fascinating stuff as everybody here on HBO knows I'm
fascinated by this, but really, really, I had no idea how advanced their,
their the kit was. You can see the chips are, you know, larger versions of what you have today,
but not a million miles from what you could buy on your local component story, you know what I mean?
Yeah, yeah. This, I mean, if you, if you look at these chips in the, in the guidance computer,
it's like you, like somebody came from the 1990s, 2000s and did a little bit of time travel and
going back to the 60s because these are all surface mount components. They're not through a whole
components. They don't look like anything built in the 70s. They surface mount components and
they weren't sold it. They were actually welded to that board. And because a soldier was, was
sort of deemed to not, not reliable enough for space flight. So each component was actually
physically welded to the PC board. And damage collector, the chip itself. No, no, not at all,
because they, you know, the way that it probably, the current wasn't flowing through the chip,
it was just flowing through that small track where they had to weld it to. But these,
these chips came with extremely long leads and they would sort of place them on the PC board and
then spot weld them to the tracks on the, on the PC board. And then they would cut off the little
XS pins, you know, on that. But it's, I mean, it's surface mount. It's exactly what you would expect
in a computer today. If you look at it, it's surface mount components and they were quite small as well.
I'm putting photos and stuff into the show notes as I'm, as we're going along here. So people
will be able to see some of this stuff. So where are you going now? You're going to
release the code and put in the third video up. That's right, yes. Yeah, so I'm, I've got,
well, I've captured all the data from the rope memories already. The, you know, the signals,
sometimes I need to put a little bit of filtering on it. There's some noise on some of the signals.
What I also do is I capture the same signal, you know, X number of times and then I,
you know, I've reached it out in case there's a glitch or a small little something that shouldn't have
happened. And then just going through that and just making sure that it's in the right order,
the bytes, you know, are correct. And everything's correct. And then I'm not, I'm not very good at
digital signal processing. So, you know, that's where I'm going to stop with it. I'm going to release
all this data and say, okay, who's going to be the first guy to crack the, the first micro computer
software? You know, who's going to, who's going to, you know, and it's easy to see if you've
cracked it because there's a check sum in the memory. Everyone kilowatts of data has got a check
sum. So if you've pulled all the data out and the check sum matches, then you've got it.
Cool. That is, that's just amazing. I'm here looking at your setup and you've got the rope memory
module wired up to the three different boards. It's got a little computer there, a little Intel
computer. Yeah, it's, it's a, it's a little computer called a rate pataya. And it's a, you
know, it's a, it's a Linux based computer and it's got two really high speed analog outputs
and two very high speed analog inputs. So I can, I can capture up to 125 million samples per second,
you know, so it's effectively in a two channel oscilloscope and a two channel signal generator for
me. So it was the ideal kind of thing to just put separately, you know, on a board that I can,
it's a self-contained kind of system. It would read the memories. I connected to them to my PC
and through a network cable or through Wi-Fi and then I get all the data as it's captured, you know,
being seen to my computer. So you're capturing the essentially oscilloscope output.
That's right, yes. You're going to need to break that down into ones and zeros at a,
that's right, yes. So you see the waveform and, you know, with a naked eye, I can look at that and
I can say that's a one, that's a zero, that's a one, you know, I can pick them out. Yeah, it's obvious.
Somebody needs to write a program to say, okay, yes, I can, I can pick up all these zeros and ones
reliably. There's, there's one and I have to mention that as for, there's one little snack on one
of the rogue memories, I found that one diode in that rogue memory is a little bit, a little bit ill,
little bit sick. So you get, you get data out of that bit, but it's not, I can't even say if it's
reliable, but fortunately with that specific rope, because you have the parity, the 16th bit,
which is a parity. Yeah. And you can actually work it backwards. You can say what it should have been
if the parity would match. This memory is nearly 50 years old now, and you're talking about one
bit. Yeah. Oh my god, this is, this is what you should be putting your family photos on.
I know a lot of missing though. Yeah, you can end up with a lot. Yeah, I know, sure. I mean,
it's eight kilobytes per module, so you can just imagine you could probably put a low resolution
by doing me. Wow, amazing stuff. So yes, okay, all I can say is you should be hanging up and finishing
off this video, because I'm fascinated to see it. Actually, you know what I'd love you to do,
is just point a video at that and start at address one and work your way the whole way through.
I would have that as my screensaver and work. I'll do that for you. No, sure.
You sent me an email, or you were saying that there was an announcement today on one of the
mail lists. Can you tell us a little bit about what happened? Yeah, and I just received an email from
Ron Berkey. He's the sort of main guy who's been driving, you know, sort of everything about
the Apollo guy and his computer and the other sort of computers used in the Apollo program. He's
been the guy who got a lot of the documentation and sort of sharing all of that. He's doing it
without any pay just because of its nice. And he actually sent an email out to the news group
this morning saying that all of a sudden we've now got a lot of new things that that came out.
So this, you know, initially we had the Apollo 11, the lunar module code and we had the command
module code, but it was all late kind of 1969 kind of code that we've got. And one of the guys who
wrote the software for the lunar module landing, the physical code that landed the lunar module,
he had some printouts with him. And it's amazing stuff that he had with him and they are now
busy scanning all of this. This needs to be transcribed. So if anybody is interested in any
volunteers who want to help transcribe that into a digital format, we've got all these thousands
of pages of incredibly interesting documentation and software that's all of a sudden become
available this morning. And we need to get this in electronic format. We've got a simulator for
the Apollo guidance computer that Ron Burke also wrote. And we can now, if we've got it all transcribed
into a digital format, we can run it on this computer and we can sort of see exactly how it executed.
You know, we'll have the first code and the code that I've extracted from Flight 2.2 predates a lot
of that code, but it's part of the way we need to make sure that the emulator and everything is
working is that's why we need all of this code, you know, sort of converted into a digital format.
But all of that is all of a sudden just this morning became available. It's not even published
completely because they still busy scanning it, but it's it's going to be available quite soon.
Fantastic. We never actually said where the where the guy found the memory modules. Do you want to
tell them that? Yeah, that's the most amazing part. You was actually a newer guy who was a chemical
engineer and this guy bought a whole bunch, you know, tons and tons of scrap metal from an auction
at NASA auction to meldown and extract all the precious metals and so on. And he went by this guy's
storage facility and he saw all of this junk lying around there and he said, but what's that?
That looks like an engine. That looks like a what is this thing? And it's got NASA and he took
everything that looked that had the it's NASA on it or that looked like some kind of electronics.
And he ended up buying three tons worth of scrap metal from this guy. And it it was literally
it was days before this bunch of stuff would have been shipped to I think Taiwan or some place
to be recycled meldown and that's right. And he just grabbed whatever he could. He
went home. He went back and he got some more stuff and he and he brought as much as he could
back to his home and he actually paid for those things. And it he's you know over time he started
sort of sifting through that and through all the junk away and sold some of the parts. And then
one day he realized he had a full perfect Apollo guidance computer. He had the the real thing,
the thing that the computer there was probably used to develop the software on. He had that because
it was just a metal box. You know you couldn't see any chips any circuits when they open that up
you know it was all the the entire computer inside the box. So yeah he was how was that actually
wired? How did the modules fit in? How does it all come together? The the computers basically it's
two and two parts. So if you if you undo all the screws around it and then you split it up
as split it basically in the middle and there's two parts of it. And then the first part
would contain all the memories, the RAM, the the rope memory modules would slot into that. And
everything to do with the software the RAM and the memories would be in that one part of the
the computer. And then the other part of the computer was probably 90% of that was the digital
circuits, the modules that contain the chips and that made up the the processor on the computer.
And there was a the last section on that is just interface sort of circuitry that would
interface to the rest of the spacecraft. What sort of language to the use for problem this
presumably assembly or something? Yeah yeah it was it was all written in a similar that when they
when they started doing like the really really tense math the the matrix you know multiplications
and the you know the really complex mathematical formulas then a similar you know you could do it
in a similar but you would take an awful long time to do that. So they actually created something
an interpreted language. So you would write it as part of the assembler. So you would write
assembly instructions and then you would say I'm going to start executing this interpreted language
is just one instruction that says start interpreted language interpreter or whatever. And then
you would use different instructions not assembly language instructions. Now that first instruction
that says start doing the interpreted language thing is actually a call to a separate team.
And the separate team then goes and reads all the next instructions out of the memory.
Yeah. And it interprets that it does all sorts of complex you know floating point math
and when it's done with it it just returns to the end of that list of interpreted instructions
and then the program just carries on like normal. So you had two languages the assembly language
and then a much higher interpreted kind of language. Absolutely all some stuff. So if so there's a
few if people wanted to get into this into assisting here. First start why are you doing this?
It's what is what is the benefit to humankind in order to be able to do this?
Well I have to be honest it's for me it's incredibly interesting you know every other week you make
a new discovery and you find something new that nobody's known and it's you know it's incredible
it's like hacking except it's not illegal you know. So nobody's going to you know come after you
fall for cracking that code and you know sort of figuring out how these things are working.
So you know it's it's really interesting to work on it but I think one of the things that I've
and this wasn't the initial sort of idea but one of the things that I've realized is that you know
there's a lot to be learned from from the Apollo space program. If you work in any kind of
environment where you do projects and you work with customers and you have deadlines and you have
meetings and all of that happened in the Apollo program and they did it wrong at one point and then
they've discovered what they did wrong they fixed it and it was hugely successful after that.
So there's a lot to learn from the way that that was done. There's a there's a reason why they
managed to get to the moon and why the Russians couldn't get to the moon and that's because of
the ways the projects was managed and the way the people were communicating the way they were
doing things. So that's one of the things that I've you know learned quite a lot
well found very interesting and that wasn't something that I initially thought that I would learn
to be honest I was not expecting that as an answer. Yeah it's it's it's it's it's it's really
the right story yeah yeah but yeah that is a I'm where would I find more information on that
on the management side because now I'm actually interested. Yeah it's you know I've gone out of
the first study all the websites but it's literally if you if you start googling for you know
the Apollo guidance computer and MIT and NASA and you and you get to these repositories where they
have all these PDFs with scanned documents then you see the meetings you know you see the minutes
of the meetings where the guy said you know this is not going to work you know so like MIT says
we're going to build this computer and then IBM comes in and says these MIT guys don't have a
clue of what a computer works like they've never built a computer we are the computer experts
you know we can build this much much better than they can and then they come up with a solution
which is actually pretty crappy sorry but and then MIT have to defend their their their position
and say this is a better computer and in the end you know they prevailed and and the better solution
actually you know was used but it it's exactly the same today if you if you work in that environment
you'll recognize a lot of those things and it's like I've been there done that seeing that yes
and not always the best choice wins in my previous experience but okay there we go yep yeah yeah
it's true it's true wow this is uh so if people want to help there's a helping transcodes they
the scan pages which I guess anyone can do and the techies amongst you out there you will have data
data feeds that they can go through and convert to binary I guess yes yes and anything else
that we can do to help I think you know it's it's it's basically it's less than three years before
the 50th anniversary of the first moon landing so I'm pretty sure things are still going to pick up
a lot lots more a lot of extra things are probably going to come to the fall and we're going to
discover a lot of new things I was already contacted by people who said you know I've got an LVDC
and I had to go and google what is an LVDC and it was the computer controlling the the rocket
you know people who say yes I've got this I've got that so I think
it is like this you know it's just going to spark more interest and more things are going to come
out and more people are going to open the their saves and say okay I've actually got this software
you can scan it you can you know yeah exactly and yeah that's it's going to get quite exciting
you know going forward if anything you're increasing the value of what you have by making a
public because the code that they're using there come from my thing here which is that's right
absolutely excellent they they kit that you that you have built crude or that maybe
is that available or is that useful for other people if they had modules or can they build
the wrong or would that be useful yeah well it's I don't really have a circuit diagram of it at all
it's it was like sort of tweak tweak tweak until I got it exactly right I probably should go back
and you know measure it out and and do a final version of it yeah but you know I can I can probably
make the relay boards you know the circuits and the printed circuit board of that I can make
that available that's it's it's it's it's not brain surgery to build something like that but it's
actually been pretty useful and I would probably use it in other projects you know in future as well
so it's I'm if anybody's interested I could probably sort of let them have a copy of that circuit
diagram and pc board layouts as well perfect tell me what is your email address or how can we contact
you I think yeah the the best is to to leave like a message on on youtube I can I can probably give
my email address I don't mind people emailing me you know I don't always get back immediately
the same day but I I invariably I will always get back to you eventually but you can just email
me if Rattenbach I'm going to spell that it's if are a you t-e-n-b-a-c-h at gmail.com
perfect then I'll put in links to your website are sorry to the youtube channel and people can
derive that that name from there okay anything I missed in this at all I think we've pretty much
covered it and I can I can probably talk about a lot of these things there's there's a lot of
other interesting things not really related to the computer but you know that I think that would
be a separate talk for for another day I think we've pretty much covered as you know this is
just me doing my plug and everybody's gone oh Ken's out again but seriously all you need to do
is just record a show pick a slot and upload this is right up our folks Ali so if you have anything
all that you just want to get off your chest send it to us or do a youtube video and that is all
I'm subscribed we'll do okay Francois thank you very very much I'm sorry it took so long to get
back to you and do the scheduling last night I we had actually originally planned to do this last night
and I completely got sidetracked with the kids the stuff we needed to do for the kids so
major apologies for that but thank you very much for doing this no problem at all again thanks
thanks a lot for for allowing me to be on your show another little tech rockets spacecraft what more
could I ask for all right thank you very much okay goodbye okay folks that was it and as you know
Hitchbarrer's community podcast network so tune in tomorrow for another exciting episode of Hacker
Public Radio you've been listening to Hacker Public Radio at HackerPublicRadio.org
we are a community podcast network that releases shows every weekday Monday through Friday
today's show like all our shows was contributed by an HBr listener like yourself if you ever
thought of recording a podcast then click on our contributing to find out how easy it really is
Hacker Public Radio was founded by the digital dog pound and the infonomicum computer club
and it's part of the binary revolution at binrev.com if you have comments on today's show
please email the host directly leave a comment on the website or record a follow-up episode yourself
unless otherwise stated today's show is released under a creative firmman's attribution share
a live 32 lives
