Episode: 3609
Title: HPR3609: Linux Inlaws S01E57: Operating System Level Virtualisation and Martin's Faith
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3609/hpr3609.mp3
Transcribed: 2025-10-25 02:09:16

---

This is Hacker Public Radio Episode 3,609 for Thursday, 2 June 2022.
Today's show is entitled, Linux and Laws Sci, Operating System Level Virtualization
and Martins Faith. It is part of the series Linux and Laws. It is hosted by Monochromic,
and is about 54 minutes long. It carries an explicit flag. The summary is, an
in-depth discussion about jails, containers, religion, and other sorts of confinement.
This is Linux and Laws. A podcast on topics around free and open-source software, any associated
contraband, communism, the revolution in general, and whatever else, fanciful. Please note that
this and other episodes may contain strong language, offensive humor, and other certainly not
politically correct language. You have been warned. Our parents insisted on this disclaimer.
Happy mom? Thus the content is not suitable for consumption in the workplace, especially when
played back on a speaker in an open-plan office or similar environments. Any minors under the
age of 35, or any pets including fluffy little killer bunnies, your trusted guide dog,
unless on speed, and qt-rexes or other associated dinosaurs. This is season 1 episode
57 I think. Okay, Martin, what's your guess? We're going to tell you 57, 57, so Martin, how are things?
If this is 57, really, as an episode of Linux and Laws? I don't think the episode number has
anything to do with how things are, but yes, things are okay. Here anyway, I can't say the same
better reals, but there we go. Little Britain's not standing. Standing floating,
whether or not to call it, yeah. Okay, for enough. Things are a little bit dire here because
with the war and stuff and people getting crazy about energy fuel to all the rest of it.
Well, yes, it has been mentioned that your country is fueling a lot of it.
By using the fuel or buying the fuel. Yes, there's a school of thought and people
were recording this kind of late march. There's a school of thought here in Germany and this is where
currently recording this. Essentially, by buying gas and other fossil fuels, we are financing part
of the war, which when you think of it makes sense. In terms of financing it, but rather basically
providing the fuel that Martin was referring to. Not happy about it. Neither are the ruling parties.
And they're basically kind of how can I put this scrambling, it's probably the best word,
to get out of this quickly. Probably as you can't. No, no, you can't just might dig up some gas
from somewhere, right? But this is not a political podcast about wars or the current situation in
Europe, but rather about open source technology. So Martin, what's the crack tonight to use the
totally R-ish expression? R-ish. Are you sure? C-R-A-I-F-R-C, yes.
Not C-R-A-C-K, right? No, that will be an illegal drug in most countries.
I'm sorry for the few non-R-ish listeners among the audience crack. As in C-R-A-I-F-R-C in Ireland
refers to good times, what's up? As in what's the crack? What have you been doing? What's happening?
That's not a thing. Uh, details maybe in the show notes are not enough. Yes, so tonight's episode is
all about learning. Yes. No, it's not about learning Irish, although many listeners may be tempted.
Details, certainly, that guys will be in the show notes. Joe Creeny for listening to this
episode. I'm the only joke anyway. Is Irish a language or is it Gaelic? No, no, okay. If you
if you had hope to listen to an open source podcast, people fucking wanted. We are, this is season one
episode one of the Celtic languages of Europe. So let me educate Martin, my my cherish co-hosts
about the Celtic languages that have been spoken in Europe and to some extent are still spoken
in Europe. Essentially, as probably some listeners may know, the Celts, an ancient race of many
people long gone brought a couple of, well, to a certain extent, let's put it this way. Yeah,
brought a couple of languages to Europe contrast to the Germanic family of, so in contrast to the
family of Germanic languages and also Roman, Latin Roman languages. What I'm looking for
as in Romanic languages. Oh, yeah. That was the term. So the Celtic languages essentially
still spoken today are Irish, Scottish, Mangs being revived, Cornish, also being revived at the
and something called Breton. Not bad, Welsh. That's Welsh, yes. Okay. Don't forget the Welsh.
Of course, Cornish being feverishly revived. There's a lot of money being born in Cornish at the
moment because this is the latest addition to the Celtic languages or family of languages rather
that have almost become extinct, but it's a fern of some people decided that this is worth
maintaining. So they put a little bit of money in it. And now you have quite a few people in Corn
were actually reviving the language, I think, which is which is good news. And of course,
probably the two biggest parishes in terms of Celtic languages being spoken in Europe would be
Irish as in the Celtic dialects being spoken in Ireland as in mostly the Republic. Of course,
Northern Ireland included in parts of it and also Scottish, I suppose. And next comes our
reckon really Welsh. Yeah. For Breton. Hmm. Thank you. There is. What about Basque Martin?
Is that a Celtic language too?
Details in the name of the show. But this is Spain, France, region.
But you see, the Celts had one important trade. They procured the way out where they solved this.
Yeah, exactly. Yeah.
So that brings us to the end, that brings us to the end nicely of this episode of season one of
the Celtic languages. How many episodes are there going to be? We do not know.
People, if you want to have more episodes like this as in really short ones, please do send
feedback to either feedback at Celtic language, or something called feedback at Linux in
hopefully you both may both email addresses, especially the second one may work.
Actually, we have a general catch all email. Yes, that would be Martin Visser as
a hero.gov as a near government. Very good. So anyway, back to today's copy, to today's topic, yes.
Yes, namely operating system virtualization, affectionately, also affectionately known as containers.
Well, yes. Yeah, okay. Fair enough. It's not entirely strictly the best definition is it, but
so go ahead Martin, a lot of us. Well, the container concept is exactly as the name implies,
a thing to shove things in and move around, right? So that's the whole kind of
let's call it the idea behind containers is that you can take it, move it, run it anywhere,
it's always has the same content you don't have to, and it's also contained rather than
rely on dependencies outside of the container. Whereas
which is more about making efficient use of resources. Excellent. That brings us to the end of
thank you for listening people. That's a rather short one, but we do like short episodes.
No jokes aside. Yes, Martin, I think you have its bottom. The main difference, like say, between
the main difference between operating system virtualization and hardware virtualization is,
of course, that the hardware virtualization essentially brings to the table a full operating system
kernel. And this is the main difference between operating system virtualization as the name implies,
and how to virtualization. With operating system virtualization, each and every container,
whatever you want to call it, or confinement is probably the best term to distract us in a
jar of a in a rather generic way, has its own so-called user land as in libraries, applications,
you name it. In contrast, however, virtualization carries the burden for one of the editor's
version of full bone kernel running on top of a so-called hypervisor, meaning that in addition
to the to the user land, also the kernel as such as in itself, it's virtualized,
including the hardware layer running beneath the kernel. Because that's exactly one of the main
functionalities of the hypervisor to abstract away of the physical hardware and to provide the
guess operating system, running these user lands with a virtualized view of the underlying hardware.
That's exactly what happen versus do, like Xen, KVM, VMware, you name it.
In contrast to this, operating system virtualization has a common kernel upon which user lands run,
your call containers, jails, whatever you want to call it. The whole thing is not new. It goes
back at least to early insunciations like BSD jails, Solaris zones. Solaris zones, that was
like 80s or 90s, right? Yeah, 90s or 2000s, I think. Details made in the show notes.
But the thing is that some people consider a change route actually to be the first
sensation of a minimal, let's put it this way, operating system virtualization. In terms of
change route essentially says, here's a directory tree, and with that directory tree, you have
your own user land. So if you do a change route, give it the path, and then give it in executable,
the kernel will spawn that executable inside path, which better be a full-blown user land,
because otherwise you will have problems. Meaning, in that case, you have simply perverted for
one of a battery expression, the root directory. That's the whole thing.
In contrast, exactly change route. That's the very thing. That's a very topic. In contrast to
this modern day containers, bring to the table a little bit more. If we stick to say the
backs of Docker, Alexi, sorry, Alexi, Alexi, it's just an example of Alexi.
Potman or any OCI as an open container initiative, compliant API, running on Linux that normally
evades of something called control groups and namespaces. Okay, and there is what these are,
yeah, I've told groups that usually refer to as C groups in Linux's admin terms,
really about controlling the resources, again, or setting limits around them.
I mean, if you think back to something like nice, you set a level of prioritization on your process,
but you can do C groups is kind of taking up to the whole container idea. Now I would describe it.
That's exactly in combination rather with namespaces. They form the basic, the basic infrastructure
containers, because what namespaces essentially do in a Linux context, they create as the name
classes separate namespace. So that allows you to have more than one process with process
identifier also known as PID as a bit, one, two, three, four, living different namespaces.
So control groups, as Martin rightly explained, essentially put a level of control
on the resource usage of a group of processes. And their namespaces take care of the logical
separation between different sets of processes that are confined to the single namespace.
So these are the two building blocks of modern containers in Linux,
meaning that, and this is one of the advantages of, say, using system D, a process that there's
a double fork and details are on the show notes. The friendly thing you try to get away from the
TTY controlling it cannot do so in a control group. That puts an extra level layer of control
on the whole notion of a process group, which, of course, makes administration of set control
groups much easier, because in previous days, especially before system D and control groups, of
course, if a process would do a double fork, it would itself detach it from the control
internal and then it would be free to do whatever it wanted. Especially if the user would lock out
controlling that terminal, the process would continue to live on. Now if you shut down a control
group, all the processes, a texture control group are essentially gone. Okay, a question for you.
So namespaces, then what, what can you separate with namespaces?
Anything including next week's lot of numbers. Oh, yes. Indeed.
Kids, for you out there listening, the command is a proper space C groups. Take a look yourself.
Yeah. No joke aside, they take a data care of separating essentially or confining.
Anything that is out there, memory CPU slices, network, network bandwidth and all the rest of it.
Equally important are namespaces.
Uh, current learning systems since two six, 90, nothing. Take care of
mounting points, especially bind binding mount points, IPC abstractions, network abstractions,
of course, memory CPU slices or sorry, not to be used as for other CPUs and such things.
Meaning that the combination of these two give you full, a full control and a full separation
of user lands because these essentially are the mechanisms that you need. If you want to
separate different execution of armaments for applications, also known as user lands.
Okay. So going back to the original question or, um, a question that, um,
uh, background, what are the benefits of doing this?
Compared to a, yeah, let's, let's people use to visualize the hardware, right?
If it's straight, exactly, it's straightforward. More jobs for system administrators.
Yeah, that's good. That's a good point. Fair enough.
How does that all end? Any other questions, Mark?
What are still such people around these days?
Yes. They're called devs or devsack ops or ops people. Yes.
Okay. So ops people are dying breeds for them.
No, they're not Martin. No, they're not really. No jokes aside. Of course, uh, that separation has
a number of advantages, especially if you take a look at how to package applications.
But, um, if you take a look at your infrastructure, you have about what 10 web servers driving the
the weapons shop, uh, about what five of another five looking after the recreational drug thing. No.
Oh, good possibly comments. I see.
But if none reserves correctly, all of these, all of these, all of these websites have different
application infrastructure, uh, ecosystems behind them.
So generally, do you need? Yes. This is the point.
Hmm. Whether websites are not people is straightforward.
If you take a look at any abstract that is out there at the moment, chances might be,
especially if you're looking at pre-package things, you will have a requirement for rust 1.48.
You will have a requirement for Python 3.9.1. Then the pit packages come into, into play. You will have
flask, you will have permits, you will have, uh, what's the bottom? Well, let's see, what's the
other Python package I'm looking for? Uh, fast IP, uh, fast IP, uh, exactly. But they, but depending on
the abstract that uses them, they will all depend on different versions. Same goes for us.
Now, the thing is with rust, you with some, you, you do have cargo with your package manager
or the details, listen to the previous episode. With Python, you have things like
virtual environments and some other abstractions. But the thing is these mechanisms only go so far,
because if you want to package your apps, you want to use an abstraction that allows the,
these DevOps people, especially these ops people, essentially to take a so-called image package,
whatever you want to call it and simply deploy it. Pretty much like an operating system
image that you install that has already application package with it.
And this is where containers come in. Essentially, with likes of Docker, which is another favorite
or famous container runtime environment, you get so-called images, constructed by so-called
Docker files, the following explanation, explanation essentially uses Docker as just an example,
other container runtems are of course possible. Essentially, if you take a Docker file and then
you let Docker build the corresponding image, what Docker event then does, it takes a base-level
operating system user app, sorry, it takes a base-level user lab, let's put it this way,
not operating system, but user lab, and installs and packages the required components in that image.
It then defines the starting point and typically a shell script or an init process or something
comparable to the process that starts up the user land, comparable to system D and modern Linux
environments. Then this startup script will take care of starting up the database,
of starting up the app server, starting up the Python interpreter if you want to stick to
last permit of our SAP I. It may also start reverse proxy, nginx, Apache, whatever to ensure that
Https terminated traffic goes the right way and all the rest of it. So essentially, what the
container does, it creates user land with the specific applications, with the specific versions
of these applications, and this is where the beauty of containers come in. Ready to roll because
essentially once you create this image on a container runtime, now it does, it takes this image
and creates a user land, transfers control to a user land, and then the web server will start,
the database server will start, and any other middleware that is required for this app stack will
start within the container. So at the end of the day, you will have a running application ecosystem,
including the hardware and the container. The beauty now is that this user land has the exact
versions that all of the components require. If you would do this in normal system, good luck with
it with the resulting complexity, and that's exactly where containers feature and the benefits come in,
because if you create that image, and then if you create a container from this image,
you have exactly the specified environment for this app stack to run in without interference from
the outside, because this is one of the main beauties of these isolated and verticals user land.
Oh, and the other way around, that's all right. Exactly.
Needless to say, there are quite a few container landhams out there. Docker is one of them.
Cryo, which essentially is just the, essentially, it's just a step ground version of Docker to
the very minimum. Potman, LXC, our dimension and container come to mind. Container probably being
the emerging standard here. Yeah, LXC is this sort of, that was still being
canonical pushed it, but yeah, it felt by the wayside. I'm afraid with regards to the
deployment numbers, if current figures are needed to go by. So, our reckon, we should probably mention
the OCI, no? OCI, we have mentioned the OCI. Yeah, OCI, if you're listening, the email
response are at Linnison, those are you. Sending a mail to that email will get you further mentions.
Sending cash based on the email that you send to us will get you beyond mentions.
Just get in touch. Yeah, maybe we should get someone from the OCI home.
So that they can plug this properly. Yes. Yeah. OCI for listening.
Next on plan. All right. And feedback slash sponsor, sponsor at Linnison,
or so that you will do the trick nicely. We will guarantee you a speaking slot so that you can
plug the technology. And forget about the cabin, if the cabinitas have stores,
the OCI is essentially the place where it happens. Yeah, cabinitas, of course, as we all know,
cabinitas, open shift, and all the rest of it is pure marketing. The core is the important thing.
Okay. Arming. Yeah, this is the end of my prayer.
That's not good. Okay. For the crack of it.
Well, we are hoping to get some.
Matt, Matt and Hang on, hang on, hang on, hang on. You're not implying you're not religious.
I'm not applying you're not religious. This is tricky. No, but then please.
Are you, are you not? I am not religious. What? Hang on.
Only half of your kid rides a surprise or a bird in the system. No.
So that makes you half religious. Okay. I get points.
Yes. Now, which part of you is religious then?
The left side. Yes. Excellent choice. Very good.
And what are the details, Martin, apart from Ubuntu?
Sorry, come on. The details about your religious left side.
Yes. You know, this is. Okay, we already covered Ubuntu. Maybe communism.
Maybe Fedora?
Dora, no, no, no. Fedora, I've got almost Dora.
Socialism? Socialism. Socialism, yes. Fine.
Castor, Catholic? Orthodox? Some Flatis?
No. Sorry, of course you're Dutch. I am indeed.
Well, there must be some Catholics in the home. About two? Maybe three.
Good question. Oh, no, no, no, no, no, no, no, no, no, wait, we have this island.
Well, it used to be an island in the, what used to be part of the sea in the middle of Holland.
And all the people there are some strange religion. That makes it five.
Okay. It was a couple thousand maybe.
In the middle of the sea, what is it? I don't know if you know the shape of the Netherlands, but
yes, I do. There's a great big gap in the middle where there's a bunch of water.
Yes. The bunch of water used to be bigger and there used to be islands in it.
And then they connected the islands with rest of the land, so they don't look islands, but
I thought you saw them.
You saw them? Yes.
No, I'm not. To the actual sections.
No, no, no, no, no, no, no, no, no, no.
No, we just removed all the water and we called the land where people could live, which is
okay. Being a small country, we don't have enough land here.
And of course, colonies are long gone for enough.
Oh, good question.
Well, you see the Netherlands had quite a few colonies, but
I think that there might be some islands left somewhere.
Still under Dutch rule, that would surprise me.
Yeah. Which ones?
Like Ursao maybe.
I thought you saw that with the Americans.
No, that was New York. We saw that with him.
No, Peter Sarvis, I never sold this. He just lived there.
Yeah, I don't think it was kind of...
Well, no, it was swapped with Suriname, but yeah, it wasn't really a real swap.
This is why we shall have this, and you shall have that kind of swap.
This is what I wouldn't consider to be a good deal, but that's what makes the interpretation
of the matter. It was classed as a swap, but it clearly wasn't, it was more of a...
If you don't swap, we'll just take it.
So the swap defaulted essentially, okay, Garret?
Ah, yes.
That's what's normally do.
Yes, I wonder if there's any left, no?
There might be some small islands here and there.
Anyway, well, this is the advantage of being connected to the sea,
so you can go places and just call them your own.
Yes, people, if you're being landboxed, you not have so much opportunity there.
People, if you happen to listen and listen and live on these islands,
please send emails from Martin's education
to feedback at Little's in law study you, so that Martin can finally get around to knowing
what the crack is with the current, with the concept of Netherlands.
Especially with the grassroots distribution,
and sorry, especially with the grassroots geographical distribution
as in the country where he's from originally.
Because apparently the British, oh sorry, the English have brave washed him to some extent.
Okay.
I just don't keep up with all these things.
It could be that too, now I was became independent ages ago, I can't remember.
Okay, Martin.
Yeah, 1975, there you go, see.
Do we have anything we have any left there?
Too bad, but did you notice anything?
We are slowly digressing.
We have digressed.
Yes.
I'm not sure why, but never mind.
Back to the country.
Back to the country.
Quite a thing, yes.
Yes.
Where were we?
Name spaces, sea groups, we've done.
Hi, so what was the advantage that introduced these?
Oh yeah, advantage is what I would talk about.
Yes.
What about the disadvantages?
Complexity.
Why?
You need to contain runtime?
That's not complex at all.
Well, you need to at least need to install
an additional package on the operating system in order to provide the container runtime.
Yes, yes.
And of course a tiny performance overhead.
Hmm.
Well, there was always a third one, which is why there was resistance from the
that's called this is admins and what have you
is that the way software used to be developed.
It's like everybody knew what was installed where, what it was doing, etc, etc.
And with containers you just
the developers basically just do what they like and say this
burn this container.
And what's bad about this?
A lot of control?
Yes, the first is admins, yes.
This is lots of job, right?
Not necessarily because somebody needs
when he says to install the container and demon needs.
Exactly, exactly.
Somebody needs an expert who can kind of can kind of can control that container may have.
And now a blatant teaser,
we will cover in the second part of this 20-part episode on virtualization, I think, maybe not.
We will cover, we will cover orchestration for it works like like cover needs and all the rest of them.
But given the fact that containers like Linux won't go away anytime soon,
somebody has to control them, to deploy them, to orchestrate them, to scale them, all the rest of it.
This is what you cannot do with the simple approaches of infrastructure,
like the OCI framework and similar approaches because you need an additional layer on top of that.
That's example, if you have a couple of containers, if you want to scale them up,
you have to do this one by one manually.
If you're not using something like carbonitas or friends,
well, it's not scaling at all.
It's also if you run two of the same containers, then how are you going to access them?
The ports and the routes into them.
Exactly. How do you define the network connectivity between them?
How you define the scalability between the different entities and all the rest of it,
and without going into the next episode too much, this is where frameworks like carbonitas come in,
because carbonitas provide additional layer of abstraction from the individual containers,
right up to ports, where ports actually define a set of containers,
and carbonitas then will take care of monitoring the health of these containers,
making sure that if a container dies, it's going to restart it.
If you want to add additional infrastructure to your to your port,
you scale this up, and there's just a simple command in carbonitas,
where if you want to do this manually, good luck with that,
because essentially you have to create new containers,
you have to provide additional resources to these containers,
you have to include them in your network infrastructure, all the rest of it.
So that's a very complex approach with doing it manually,
in contrast to carbonitas, taking care of this for you more or less automatically,
and this is where these additional frameworks come in,
but more on that actually in a future episode.
Indeed.
Anything else we should talk about in the context of containers?
Yeah, there are also these metal boxes that can put on chips.
There are no deals, I think, just from my practicality point of view,
and if you just ignore the development of applications and the deployment of them,
there isn't everyday advantages to containers right where you can just pull down a
RavitMQ container, or a Postgres container, or a bit of container,
and just start using it without having to install a bunch of stuff,
and start using it straight away, because most sufferers will have a container image available
on something like TokorHub, etc.
That's exactly because of the fact that somebody else did the packaging for you.
That's exactly it, yes.
Yes, but as a practical result, it means that you have a much easier route to
running things, excluding the blue button player. That's a whole difficulty.
Maybe one day, one day.
Very much so, yes.
Because if you want to take something for us, but just to try it out, of course,
blatant plug, for example, Redis, probably being the best example,
if you want to take how is the pullbot doing?
For this version, I still have to work for Redis, yes.
So did Martin before he defected? How about that?
Okay, no jokes aside.
If you take a look at something called Redis Modules,
Redis Modules essentially are self-extension.
That provides application level functionality to the native or to a native Redis instance.
So essentially, you take a native Redis data, no SQL instance,
so that instance that is, and then you attach a JSON model.
Redis turns into a document type database.
If you attach Redis graph,
you turn Redis into an open software graph database.
If you load the time choose module onto Redis,
you essentially transform this no SQL database into a time search database comparable
within Flux and other time search databases.
The trouble is of course that with each and every module, normally using the generic approach,
you would have to take the native Redis instance.
You have to pull down the source code of the module and then you have to compile it.
That's an additional layer of complexity on top of your native Redis deployment.
And some modules require the server to be of a specific version or beyond.
Of course, all of these modules have individual dependencies in terms of libraries that they're using
and all the rest of it.
So, compiling this manually is a bit of an effort.
Thing is that there is a container out there called I think Redis Mod,
details maybe in the show notes, with that you simply pull down in terms of the image,
pull down the image, and then you have a Redis server running inside the container with all
of the modules that Redis, the company basically has contributed.
That's a major advantage of in contrast to kind of doing that yourself in terms of installing
Redis natively and then compile each other module on your specific platform.
With the specific requirements that all of these modules require.
So, that's a lot of effort save to put it this way.
And that's exactly, and I'm using just this Redis Mod container or image as just one example.
It's actually a good example because you touch upon another aspect of containers there,
which is very suited to being a federal right or stateless or.
Most exactly, if you do not, well, this is Docker detail actually.
If you do not tell Docker otherwise, a container image, a container will be gone
in terms of the memory attached to a container, especially the file system,
will be gone once you've destroyed the container. Unless you tell Docker,
for example, to use a persistent volume, essentially amount points to the host operating system.
Otherwise, normally a Docker container will be gone, including any rights,
in terms of right operations that any of the applications or processes rather,
to be more precise, in the container did to the local to the container local file system.
This is what Martin means by a formal.
Indeed.
So it's good, which is why the, well, it's not a good example.
Exactly. So it's a, it's a, it's a straightforward way actually, just to take software that you
want to try out for a spin without having to install the multitude of dependencies,
worry about the versions of the dependencies and all the rest of it.
You simply put out the image in something in something container and then you off to the races.
You may have to map some ports, but that's as far as it goes.
Yeah, ports, volumes, it depends on what, what, what, what, yes, come up, but yeah, yeah.
Indeed.
Anything else that we should talk about, that we have missed?
Oh, I think that's probably a good introduction.
Oh, yeah, cool for those people unfamiliar.
For the, for the few people who work on your shipyard, yeah, a container, a container of also
metal, a metal box that can put stuff into and then put it on a ship.
Yes, yes, they come in actually.
I think they're standardized.
There are ISO containers, something about 200 feet long and 15 feet wide or something and
two inches high. I might be wrong.
Yeah, interesting way of shipping things for you.
This is where this, this is, sorry, full disclosure.
This is where flat packs come, flat packs come in, but that's a whole different story.
Details, may people or may not be in the show notes.
Of course, the hipsters among you listening, there might be a show on app images, flat packs,
and snaps, or maybe not.
Did we not do them?
Yeah, maybe we'll finish this and I'll just physically forget the things.
Maybe, I don't know.
Yeah, DHS, maybe, or may not be in the show.
On a final note, is that why they call Docker?
What do you mean?
Well, you know what a Docker is, don't you?
Hey, could you turn around time?
It might also have some shady meaning that, of course, that I'm not privy to.
Well, no, all the analogies are around containers and ships.
You mean, you mean a Docker meaning, meaning somebody working at a dock, on a dock,
and then, yes, I don't mean ladies of loose virtue, very.
What what refers to is dames of a shape of affection,
which are the dockers of course, because they do not dock, very important.
Yes, so there we go.
Button, yes, and of course, we should do the pockets before we, yes.
Okay, go on and whether you start any, any open, any OCI compliant Docker, sorry,
any OCI compliant content runtime will do.
No, Jokes aside, I recently discovered that actually from dust to dawn,
does have a TV series.
Okay, as in the movies, probably ring a bell, details, of course, on the show,
no, there, okay.
That's the, that's Martin, that's called movie, or movie franchise.
Okay, don't miss out on the, the genre.
True stories from the past.
Okay, subtitle while when pass are real.
Yes, okay, you can't, you, you haven't seen the original movie called from dust to dawn.
Are you serious?
I don't know.
This is something from.
Quentin, apparently wrote the script.
1920, 1922.
No, no, no, no, no, no, no, you're talking about kind of late 90s early 2000s or something.
The, about maybe the original dust, almost, was 1922, but yeah.
I'm talking about the Mexican, the Mexican city bar built upon an ancient burial site,
as a temple. Okay, definitely not seen that. You must check it out Martin. It's coming. I mean,
I mean, if you think that reservoir dogs or perfection are great, don't, I mean, you must check
out from the salon. Forget about the sequel and forget about the third part, they're not important,
but the original one is the must see. Okay. Because okay, it's a little bit of a splatter movie,
but it has quentin written all over it in terms of humor and stuff. Okay. It's almost as good as
perfection. Right. And there's a there's a spin off in the shape of a theory series that is okay
in terms of almost as good as the first installment of the franchise. And what's your pox, Martin?
My pox is a question. I haven't really had much chance to what about a proper cat six cabling,
especially being run underground. Oh, that's, that's, that's not a recent one. That's, uh, I did that
a couple years ago. Okay. But they're still holding up. Yes, why not? Excellent, excellent. So
Martin's pox of the week would be good Dutch craftsman work, especially if done in the former UK.
That's fair. And you're not a kingdom, of course, which is now just not even a kingdom,
but that's another difference. No, there would be a kingdom, surely. You're not a kingdom.
Well, a kingdom is such a thing as a kingdom, I wonder. Oh, it should be because it's run by the queen,
surely. But only for the last six years, seven to years, some floppies.
Out of was a, is it, this year is an anniversary, I think.
Martin, you lived there. I do not. But I got a fake recollection that we got an extra
bail off for something. This is how Martin remembers nestle holidays. Yeah, it was a day off for
no, I don't know, it hasn't happened yet. I think it's, um, it will happen. Okay.
Jones, uh,
Jones this year, I don't know, say, uh, that was platinum jubilee, is it?
Yes. Martin, you live there. I do not. Platinum jubilee. There we go.
That's very important. Yes. It's important enough to get it, to get it all for enough.
Hmm. That's 70 years this year. Rain. So she's been powerful for the last 70 years. Okay.
Hmm. Never mind. Well, she's not doing too well recently, but there we go. Yeah. Never mind.
Members of a family defecting in one way or another, but that's a, but that's a different story,
of course. Yeah. Harry, if you're listening, you know what I mean, right?
Well, there was, there was, there was a president as well, president, not the president, but
they're president. Sorry. The president has defected too. Okay. You can't have a president,
but anyone do I know? No, the, um, the other one, uh, back in, in the, in the 30s who
went on to marry a common American woman, whatever, his name is. I think that was before
Queen Elizabeth. Yes. To crane. Yeah. Yeah, but he was, well,
it's basically also a defector with, he went to check out within the American female. As he do,
exactly. It's been a theme there.
It is, if you want to get in touch with us, the first consultation is always pretty.
The email address is, um, marvelous. One of your subjects might get back to you.
And it's not me, you know? Yes. I guess I won't be getting a telegram from it.
Yeah. That's probably not. No. Okay. Um, anything else that we should, yeah. Of course,
we should mention probably Hacker probably. Oh, yes. Thank you for hosting us.
I hope you enjoyed the, it, get the episode on static. Yeah, that was about four years ago.
Can, but don't worry about it. How does it give it up?
No, no, no, no, no, no, no, no, no, no, no, can you find that episode actually in the back,
I don't know, don't worry about it. Okay. Uh, with that, I think that brings us
to the end of the episode. People, thank you for listening. Uh, and see you soon.
Bye bye. This is the Linux in-laws. You come for the knowledge, but stay for the madness.
Thank you for listening. This podcast is licensed under the latest version of the creative
comments license type attribution channel like credits for the intro music go to blue zero
for the songs of the market to twin flames for their peace called the flow used for the second
intros and finally to select your ground for the songs we just use by the dark side.
You find these and other details licensed under cc hmando or website dedicated to liberate
the music industry from choking copyright legislation and other crap concepts.
You
you
How come that's the bank holiday?
Because it's the early May bank holiday.
Every year, the first Monday in May is back home.
Why?
Because it's May and people like to have a holiday.
A cunning scheme to get procreation going in terms of more taxpayers?
I think it was something to do with Labour Day and the past.
You have been listening to Hacker Public Radio at HackerPublicRadio.org.
Today's show was contributed by a HBR listener like yourself.
If you ever thought of recording a podcast,
then click on our contribute link to find out how easy it really is.
Hosting for HBR has been kindly provided by an honesthost.com,
the Internet Archive and our sync.net.
On the Satellite status, today's show is released on our creative comments,
attribution 4.0 international license.
