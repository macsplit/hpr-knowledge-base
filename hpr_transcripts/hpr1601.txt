Episode: 1601
Title: HPR1601: Howto Install LAMP
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1601/hpr1601.mp3
Transcribed: 2025-10-18 05:39:24

---

It's Monday 22nd on September 2014.
This is an HBR episode 1,601 entitled How To Install Lamp.
It is hosted by Klaatu and is about 16 minutes long.
Feedback can be sent to Klaatu at Hacca Public Radio.org or by leaving a comment on this
episode.
The summary is Klaatu introduces new web developers to Lamp.
This episode of HBR is brought to you by an honest host.com.
At 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at An honest host.com.
This is Hacca Public Radio, my name is Klaatu and in this episode I'm going to talk about
how to install Lamp on Linux.
You heard that correctly.
If you're learning to be a web designer or a web developer, then you probably have already
heard about the Lamp stack and it's at the heart of pretty much the internet as it
drives most of the web servers in existence, I think.
If you're doing web designer development on Linux, you'll be pleased to know that you
already have a full Lamp stack on your computer or you can get the full Lamp stack pretty
quickly with just a couple of installs and honestly not really any configuration.
It's pretty cool.
Other operating systems installing this stack is pretty convoluted and you never really
achieve a full Lamp stack because the L part is not there.
Whether you have to splice on the environment that simply doesn't exist during your OS
or whether you're overriding the pre-existing amp that shipped with your OS, which does
happen sometimes and it's pretty frustrating, there are usually lots of hoops to jump
through.
This is often the case.
Third parties rise to the occasion to deliver sometimes sell easier solutions but do not
be distracted by these, especially if you're running Linux already.
If you're not running Linux, this might be a great opportunity to try it out because
especially if you're getting into this kind of stuff, Linux just does it so naturally.
It's so much simpler.
It's actually a lot easier than you think.
I'm going to go through it right now and if you're not, it takes only a couple of steps.
Lamp, as you may or may not know, it stands for Linux, Apache, MySQL or MariaDB, both
basically the same thing, and PHP.
There are lots of valid alternatives out there because you could use like, instead of Lamp,
you could use BSD Unix or instead of Apache, you could use Ingenx or Hywaath or Lighty
or any other number of things, Postgres instead of MySQL and so on.
There's totally other ways that you can do this.
I wouldn't worry about that yet.
Just do a standard Lamp stack.
It's still kind of what everyone else does and it's just the easiest place to get started.
We're going to install a normal everyday, well, AMP stack on top of Linux because that's
what I'm assuming you're using at this point.
If you're on Ubuntu or Debian or Mint or anything like that, then it's just sort of a pseudo
apt-get or aptitude if you have it installed Apache 2.
That's just Apache and then the number 2.
MySQL-server and PHP 5.
If you're on Fedora or Sintos or Red Hat or Scientific, then you do an SU-space-C-space
apostrophe, yum install, HTTP-D, that is HTTP-D Delta or Demon actually.
Space MySQL, space MySQL-server, space PHP, space PHP, dash MySQL, close apostrophe or single
quote, I guess, is not really an apostrophe, it's a single quote, but anyway, there's sometimes
some shortcuts like on Fedora or Red Hat, you can do like a young group install web server,
that's single quote, web-space-server, close single quote, and I think on Ubuntu and Debian
and similar, you can do like an apt-get task cell, that's T-A-S-K-S-E-L and then a semi-colon
and then a task cell install lamp dash server, that's kind of, but both of those will just,
they're basically, I would call them meta packages, you know, they'll go out and figure
out what you need for the full lamp install.
On Slackware, I should probably mention here, you're already to go already, you actually
didn't even need to listen this far, you've already got all of those things installed.
Okay, so depending on your distribution, the names of the packages might be a little
bit different, like if you're using Magia or, I don't know, BSD or whatever, then, and
I know that BSD is not a distribution for the next, I was just kind of rambling.
But yeah, depending on what you're using, there might be slight differences in names, but
I wouldn't worry about it.
Also don't worry about the fact that much of the world is transitioning right now from
my SQL to MariaDB.
They're basically the same thing, they were literally developed by the same guy, it's
just some, you know, the name changes and legal reasons and stuff like that, don't worry
about it, you can take either one, both work fine, I wouldn't worry about that at this
point if you're, if you're just getting started.
Okay, so the next thing that you need to do is start the services that you have just
installed, or at least some of them.
The two that need to be started are your web server and the MySQL or the MariaDB server.
Those two things need to start, PHP doesn't need to be started, it's just kind of there.
To do that, you can do it a couple of different ways and really it depends on what distribution
you're running and when in the life span of each of those, you're actually listening
to this in, but generally speaking, it's sudo or su-dash-c, whatever you use, service,
and then for instance Apache 2 or HTTPD, whichever you installed, start.
And then for the other one, it would be, again, you know, sudo or su-c, service, MySQL-server
start.
So it's like the name of whatever you installed when I told you to install Apache or MySQL,
and then the word start, that usually starts the demon running in the background.
Now that just means they're kind of like, they're idling in the background, they're not
really doing anything yet, but they're on, they're turned on.
So now we can start making requests to a server.
So some people get confused when, you know, when Linux Geeks talk about servers because
you think of, you know, generally speaking, you think of a server as a big metal computer,
big heavy thing off in a data center somewhere, but we're not obviously speaking of big data
center servers, we're talking of a software server.
It means software application that runs usually in the background, waiting for other computers
to make some kind of request.
And they receive that request, they can then serve that other computer in the way that
that computer is requested.
That's why they're called servers.
Now you know.
So in the case of a web server, the Apache application kind of runs in the background,
and it waits for another computer to come in and contact it on a specific port, port
80, and request access to a web page.
That's what it does.
In the case of MySQL, it runs in the background, and it waits for a computer to come and request
access to some kind of database and some kind of entry in that database.
You can test out your Apache service really, really easily by opening up your web browser,
just like normal, and navigating to the word localhost.
That's L-O-C-A-L-H-O-S-T.
That's all you need to do, just type in the localhost and your URL bar, and it will render
a web page.
Usually it says something like, it's working, or you know, sometimes it's a big complex
page telling you that you've installed Apache, congratulations, and all the other
things like that.
But generally speaking, if you see something, then it's working.
You're talking to your own internal web server, congratulations, and that's really it.
You've just installed AMP on top of the L, so you've installed your lamp stack.
You have a lamp stack now.
There's absolutely no need for third party easy installs.
I've heard of quite a few lately.
I never understand why anyone resorts to them.
It's just so simple to get a proper Linux Apache MySQL PHP server stack running, and you
can start developing and testing your code and install a local version of WordPress and
all kinds of stuff.
Just get practice with all kinds of web developer types of things, all on your own laptop
or desktop.
A couple of web developer types of people getting started have sort of expressed a hesitation
to go down that road to me, because I guess a lot of people see web design and web development
is just sort of like sitting in Photoshop, sick, all day, that's SIC, all day, and kind
of designing like front-ends or something, and then chopping them up and putting them
in the web sites, which I didn't even know people did anymore, but apparently there
is like this thing, you know, there's still this subset of people who actually do it that
way still, which, you know, to me is very sad, because all the stuff that I've seen online
lately can be done in CSS, pure CSS, and HTML obviously, and really, there's, for me,
not a great excuse for resorting to doing all that stuff in an image manipulation program,
and then slicing it and dicing it and putting it online.
That's a really weird way to do things, and I don't think it's the best way to do things.
But I digress.
People have hesitated to kind of explore, well, how do you set up this environment?
And I've always thought that was a little bit strange, and I really think that's a bit
short-sighted, because if it's your profession, or if you want it to be your profession,
to do professional, like for money, web design, or web, certainly web development, then
I think that you owe it certainly to yourself and probably to the person paying you, although,
you know, the person paying you may not require it, but if you have it, I think you might
find that the employment terms are remarkably improved, but you owe it, I think, to someone,
to actually know a little bit about what you are developing on top of.
For people to say that they're a web designer, or web developer, and not know how to set
up, even just as I've described, a basic lamp stack, you know, a lamp server upon which
they can then do their work, I think that's really risky, because you're now completely
dependent on some support person, who, especially as a freelancer, or consultant, or whatever
they call themselves these days, you may not have that support person, and if you need
that support person, you may have to pay for it, and that's kind of silly.
So yeah, learning this kind of stuff along with all the other stuff that you have to learn,
I know it's a lot, but it's not a bad idea, and as you've heard, it's really not that
hard.
And the great thing about a lamp stack, if you don't want to do all this on your computer,
if you're not running Linux, and you don't want to try running Linux, so you can't have
a true lamp stack, it's really not hard to set this up on your local network.
Just grab an old computer, it could be a laptop, it could be a desktop, doesn't have
to be very powerful at all.
I run a couple of websites off of a Raspberry Pi located in the Netherlands.
I mean, it's really, it doesn't have to be a fancy computer.
Grab something, put Linux onto it, hardwire it to your network, start the web server,
and there you go.
There's your web server.
Now start learning Git and other things that modern web people use.
I hope that helps.
Hope that shed some light on some otherwise very mysterious things, like lamp stack,
like what is that?
Hey, that was a pun, too.
Anyway, I hope that does help.
I hope you do try it and enjoy it, and as always, you know, you can let me know if there
are any questions.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out
how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the infonomicom computer club,
and it's part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on
the website, or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the creative commons, attribution,
share a life, 3.0 license.
