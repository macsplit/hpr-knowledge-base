Episode: 193
Title: HPR0193: What is Free Software
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0193/hpr0193.mp3
Transcribed: 2025-10-07 13:23:35

---

music
Well, hello public radio listeners and welcome to Finnex's Student Hackers Guide.
Well, we've got something a little bit special this month, as some of you guys know.
We've just recently had software freedom day and my local Linux user group was involved
in this year's software freedom goodness.
I did a talk on what is free software if some of you guys may have heard in the past.
I'm a little bit passionate about this subject.
So we've got this talk recorded, I hope that you guys enjoy it.
My slides will be available at www.theLinuxsociety.org.uk, that's www.theLinuxsociety.org.uk.
I hope you guys enjoy.
One of the advantages of what we're playing out of software freedom day this year is we're
recording on the talks so that people can download them after the event.
So if there's something in there that you don't catch or you want to listen to it again,
feel free to download it.
If you drop me an email, I'll give you the link.
This website will be live in after software freedom day and you'll be able to find links
and all of that sort of stuff.
The copies of all the slides and talks that I've done today as well.
And if you want any more information about how you can get a whole of this stuff, you
could just email me.
I thought I throw this up when it's towards a very famous in that community but it comes
up with some great things and this is a very famous one of his.
One of the things I'm going to learn, well I don't really want to use the term one today,
it's probably recognized as probably a third time to use, but what is free software?
What makes a different to other types of software?
Why is free software kind of so important?
Free is in freedom not as in beer.
I'm not sure how many of you know about free software because the term that gets used
all the time is free is in freedom not free is in beer and I'll explain that later on.
The history of where we come from, believe it or not, free software isn't a very, it's
not a new movement.
It's been around for 25 years.
So we have history, we have roots with, you know, unless kind of explaining it's culture
and it's views and I hope to kind of highlight some of those points as well.
And when you all see free software being used, you'll be very surprised, hopefully by
the end of this talk, you'll be very surprised to see actually that free software touches
your life every day without you knowing it wrong and when you can find free software.
Why are these important for personal reasons, when you make a choice, it's always best
to have an informed choice, rather than just kind of telling you, this is what you should
do, it's better to have all the information at hand and make your own decision.
Understanding the importance of that decision, how it's used, more options, generally many
small solutions.
Making your computer work for you is another very important thing that we've taken away
from today.
Society reasons, sharing questions, sharing knowledge, sharing solutions, adaptability and flexibility.
It's just a rough agenda, kind of outline of the talk, I'm going to try and keep it short
and sweet because I'm sure there's lots of other things that you want to be doing
and having to look at.
I'm just going to talk about what is free software, why it's important, different sort of
primary models and all that sort of stuff.
In the beginning there was like, I couldn't think of a better way to start the stuff, then
some stuff happened, and a gentleman called Stoneman gave a bow.
Stoneman is the original, Richard Stoneman is kind of this original architect, kind of
curator of the free software movement.
He's very, very well known in our community in good and in bad terms.
He has a very interesting ideology, and it's been shared out, and the science about his
ideology, his ethics, and how it came to the free software and how this decision to
start this long movement started.
Basically, his ideology is that people should share ideas, and software is an idea.
It's not a piece of art, it's a recipe, it's a process, ultimately it's a mathematical
process, and it's like, nowadays, it's like Microsoft saying, we are an E equals M.C.
Square, you know, it can't be owned, it's not a piece of art, it's not someone's creative
ideas, it's a recipe, it's a solution, it's a government.
And in the beginning, software was very much that way, that people would share software,
people would pass on, people would take their software, and they would act to it and change
it.
Because one of the key freedoms in free software is the ability to take software and make
it work for you, not this one-size-fits-all, but you are the chief of, you're the chief
person, when it comes to software, that you decide how it works and how it runs.
And he worked, he's a very, very clever gentleman, and he worked in the AI, the hard-to-ficion
intelligence lab at MIT.
And what they had is they had these printers, and they used to, they did have one printer
for two forks.
So, Stalin wrote software all the time that would let every user know when the printer was
out of people.
Very simple functionality, very happy to pass it back to the company, works very effectively
for MIT.
They got a new printer, and the company said, this piece of software didn't work, he contacted
the company and said, could I get the source code to your printer, please, so that I can write
this feature?
No.
And that was the answer you got, no, it's our idea, you're not getting it.
And this is when he suddenly came to this conclusion that free software is an absolute
cost.
I mean, it's such a basic, if someone is willing to put their time in to make a feature and
quite happy to pass it back to the company, he could understand where the problem is.
And he uses a UDA, and in lots of talks he uses this simply of a recipe.
So, say I make a dish, and you come over to my house and give you this dish, and you say,
that's really, really good.
Could I have a copy of that recipe?
I say, yeah, no problem, here you go, and you take that recipe home, maybe you can do
it a little bit more sort, and how about this, how about that, and I can move to your house
and say, that's beautiful, what did you do to the recipe?
I did this, and I did this, and I did this, bro, I take it home, I taste it, I have another
friend come over, and he has that dish, and he looks at that recipe, this is a really
nice kind of copy that he goes on, he changes it, and in the end we have this beautiful
recipe made.
And now imagine that someone stands in the middle of there and says, I own that recipe,
you have no right to share it, in fact you're breaking the law if you share that recipe.
That is the right to software, that is Windows, that's where ever you look, that's
happening, that people don't have the right to look at how something works, and make it
better.
And he uses that kind of story to kind of outline what proprietary software is, it's very
hard to talk about free software without talking about software being owned by a commercial
entity.
His answer was the free software foundation, which started about 20 years ago, and he
wrote, he wrote basically manifest, but he also wrote what's known as the GPL, the general
public license, and what this is is a license that enables developers of free software to
release their software, and for it not to be stolen, their idea is taken by another company
and half that sold as their own, and forwards that, if I work on free software, it means that
those reasons that I afford it, are afforded, are afforded to you, and it can't be broken,
it's an legal document, and it sends any kind of sort of any sort of software.
Beloom, this is very interesting, this is a very beautiful play on words, and this will
show you the spirit of word control.
The name is not Units, I'm sure, probably some of you guys don't know how Units is, and
very rarely touch it myself, but Units was the old, that's still very popular, but it's
what academic institutes used 25, 30 years ago as their operating system, and what Simon
decided to do was release an operating system that was free from painting, so it was released
to the community, and what he did was he played on the word, good news is not Units,
and if you know it, the G, the GNU stands for GNU, it's a recursive acronym, so it shows
you some of the play that people have.
The free software definition, I'm going to show you what these are, and you can see that
this is a very good way of showing why it's important, free software like this.
The freedom to run a program for any purpose, I know this sounds strange, but there's lots
of software out there that you can use at home, but you can't use the commercial problem,
commercial use, or you can use it at home, but you can't use an academia, one of the fundamental
freedoms is the right to run a program for whatever purpose you decide to do with them.
The freedom to study how this program works, and adapt your needs, and access to the source
code is needed to do this, but the right to actually look at how software achieves it,
it's job, that's the fundamental right, and it means the solutions can be passed on.
Freedom to redistribute purpose so that you can help your name, but this is exactly what
I'm talking about with the recipe.
The freedom to make modifications and say, I think this modification will work effectively
in your environment, you should try this, and that right to do that is an important way.
The freedom to improve a program in relation to improvements to the problem, so that the
whole community can benefit from it.
This is a fundamental right as well, and what this means is if software doesn't afford
you these rights, it isn't free software, these are non-negotiable, these are absolute.
If you use free software, you're guaranteed these rights, not only by code of ethics, but
by law, by user agreement use that everyone uses.
This is Stony, this is the curated that I was talking about.
He does look like a happy Unix hacker, I'm happy to say this, he's very, very passionate
about what he does, and a very passionate indeed.
It's a terminology, I'm going to use some terminology in any time, if I use it, tell me
you don't understand, just stick your hand on the shelf, I'll try and explain it.
You're going to use a term fox or maybe fox, and what that means is free, liberal, open-source
software.
It's just a very nice way of saying what software it is.
Don't mistake free software, the freeware, shareware, or shared source, they're incredibly
different.
Freeware is an example of the first freedom that I talked about earlier, about the freedom
to run a program for any partners.
Freeware packages, you all find, most of them say free to use a public, free to use
a whole user, can't use a commercial user.
It doesn't afford you the freedoms under free software foundations, GPO, shareware is
the same, or that it doesn't cost anything, it doesn't afford you freedom.
You might hear me term and say fsf, I'm just meaning free software foundation, they
can be found at fsf.org, GPO means the general public license, a lot of people will have
this confused and say, the GPO means the GNU public license, it doesn't, GNU is a project
and a different entity to the free software foundations, it just means the general public
license.
Developers and end-users, developers and end-users, I know this sounds maybe tactical,
try not to worry about that, developers and end-users is exactly what it sounds like.
People who make software and people who use software, so when you use your internet explorer
or your term you confuse your own, you're an end-user, when you rewrite how your web browser
works, then you're a developer, I'm not sure what that means.
An open source, open source is kind of like a diluted version of free software, it just
means that the source purpose is open.
This is not have all the free software, and you make him use like a vendor lock-in,
I'm sure you probably hear this throughout the day, if you're here for other talks, vendor
lock-in is when you use the software for so long that you can't make a choice anymore.
So if you're an organization and you always have used Microsoft Office and to the point
where you no longer can take a backward step, and that vendor has locked you into their
product across, you can't easily change.
This is kind of what I was talking about, source code, the access to source code is incredibly
important, it stops us from having to reinvent the wheel every day, shared problems and shared
solutions.
If you have a problem, the likelihood is someone else on this planet, someone else is having
a problem as you, and if what you find is that people come together with a problem,
they will find a solution.
Common ground is a shared knowledge, and sharing knowledge is an important thing.
More experts work on common goal, tends to find solutions quicker, and this is a very
true, if you have people who are invested in making something work, you will find that,
they will find a solution because there is a benefit to that one.
People should use better work when they're invested in it, and then pay us free to review it.
It's a bit like if you were going to write a story and you were going to release it to the
world, you would do your best to make sure that that story is good quality, that it highlights
your best work, that you're good at what you do, and this is much the same in software.
Solutions to problems are in the code.
We all maybe speak lots of different languages in this room.
I don't, but I'm sure some people in here that does.
Programming language is a universal language.
It doesn't matter what you speak.
Programming language is the same in any country, and it doesn't matter if your developer speaks
Russian, and you achieve architects who speak English.
They can speak in programming language, and that's why source code is very, very important.
And this means that how you fix something in a Russian language is the same as how you fix
something in an English language.
This means that if a program doesn't have any features, and there's something you want,
and there's something that you see in other programs that'd be really nice if I...
This program's brilliant, but I wanted to do what my other program does.
It means that people who don't have a look at this other program say,
that's how they do it.
Let's see how we can play it to our case.
And that's a very important freedom.
And this is sort of what I talked about earlier on.
Software is documentation.
If there isn't any developers out there, you probably...
You probably will love this term, because that's exactly what software is.
It's exactly what source code is. It's documentation.
And documentation is software.
I thought I would put it out.
I thought I would put a little picture up here.
It seems as if I were for the kind of Star Wars.
Kind of feel for this one.
For probably software.
Every part needs a steering wheel.
Every part needs a steering wheel.
Who owns the steering wheel?
It's a concept.
It's a part and parcel of how something works.
In software, if ideas have only ships, then who owns this?
Believe it or believe it, not Microsoft,
or the multiple-click select.
That's double-clicking if you're wondering what that is.
They actually own that.
That's their painted-in technology.
So selecting something on a computer with more than one flip
is owned by Microsoft.
Who owns this steering wheel?
That's the message that I'm trying to get across.
If we can drive a car,
someone must own that wheel.
Someone must have come up with that idea.
But in the reality of this,
it's a needed part of how that works,
and the same software.
Solutions are very much the same.
The ability to play MP3s is a proprietary software.
That the ability to play an audio code app is owned by someone.
It's not owned by Microsoft,
but it's still a shape up.
Microsoft spend more money defending paint and Frenchments
and they do defend to pursuing people
that are French and French.
That's how praising the proprietary software actually is.
The software companies assume software companies
because how you play the audio, how you select something,
how you read something.
Somewhere along the line,
someone thinks it's okay to say,
I own how you look at a work document.
I own how we transmit it.
I own how we send data.
When you're finding the proprietary software,
you will never, ever own that operating system.
You may own the hardware that runs it,
but you will never, ever own what's on it.
If you run XP and Mac,
you're licensed to run.
You don't own a copy of it.
You own a license.
And that license allows you to use it.
It doesn't allow you to make any changes.
It doesn't allow you to have a look at the source code.
You are just,
you can use it, and here's my permission to do it.
You're explicitly prohibited from sharing solutions.
You know, someone will stand in your way and say,
that's our idea, you cannot share it.
The reality of it is,
is marketing deals dictate majority of people's confused use.
Not the best.
We all like to think that we use the best software for the job.
That we use, you know,
if you were building the wall,
you would want to use the best trial, the best cement.
And you would do that on merit.
You would do that by, I've used this,
and I think this is an effective tool,
and I want to keep on using it.
This is not being afforded to people.
This is a deal with manufacturers,
a deal with software houses.
And that's how people are running the provider software
without even noticing it.
And I think that that's the shame,
because it hearts back to what I said earlier on about
an informed choice, you know,
getting all your options in,
exploring on them a lot, kind of, down.
Sometimes there's a very famous book called
The Cathedral in the Bazaar.
And that does it,
as it looks at how the free software community
kind of exploded and how we developed software faster,
did commercial software houses.
And he talks about software in this context
of standard software development is like a cathedral.
And free software development is like a Bazaar,
where you know, there's mass marketplace,
where lots of people are doing lots of different jobs.
And by this kind of organized chaos,
this unity happens,
and one overall idea happens.
It was very important in this book.
I'll go to Derek Simmons is a very big advocate of free software.
And I'm going to do a quick short poll,
because then how many of you in here have heard of Firefox?
It's the web browser.
Okay.
Firefox used to be known as Nascade before it became a Mozilla.
And what this book did,
it didn't make the decision,
but what Nascade did is look to this book and thought,
the only way that we could start Microsoft
from taking over the server market
is to release our software for him,
and give the source code away.
And what happened was Firefox was born.
We did a short poll in here,
and virtually everyone put their hands up.
So this shows you kind of how this Bazaar effect actually works.
How's the software different to provide,
and how are Apple's different armages?
The community owns,
the community itself owns a free software.
There's no individual that I own that's better software
and you can't use it.
We all, every single one in this room,
every single person in this room owns free software.
You have rights to use it.
It's there for you.
Centrens as a commodity versus sharing as an asset,
this is really what it is.
If you're hiding your source code,
keeping it away from people,
then you're treating as a commodity.
Rather than saying,
here is how we did it.
Can you make it better?
And sharing is an asset.
Diversity, diversity, and a bit more diversity.
This is what happens in free software.
Many people, many different folks,
being in an experience is to make this recipe.
And that's how it's very different.
There's only few flavors in proprietary software.
Microsoft Windows, MacOS,
and Linux.
It's a whole freedom of choice.
Just my example here,
there's a distribution code of Ubuntu.
It's a very popular Linux distribution.
And there is, just at the top of my head,
four or five different variations of it.
The very popular one,
if you don't like it in that flavor,
you can have this flavor.
If you want to make your computer into a TV,
you can run a method of Ubuntu.
If you're an education institute,
you can run an edgy Ubuntu,
which is a Ubuntu made with what's a education software.
If you want to make sound and video,
there's one called Ubuntu Studio,
and that's just one distribution.
There's lots of different distributions
that use free software to deliver their message across,
to show their work out to the world.
Users contribute directly to software.
This is a very strange concept,
but if you use software,
and you say,
this doesn't work for me,
there's something wrong.
You can actually speak to the developers,
and I do that.
It breaks.
And he says,
really, can you send me some information?
The next thing you know,
is bugging,
there's a patch been released,
and you've directly contributed
to fixing the piece
of free and remote software.
This is a really nice feature.
I want to be able to do this.
Is there any chance
that we can do that?
And then the next release,
someone's ridden that into it,
you're directly contributing to it.
You don't get that.
No one sends an email to Microsoft
and says,
you know, Internet Explorer is brilliant,
but could we do this?
You don't get input.
It's freedom.
You know,
and this is the big difference.
This is, you know,
you're giving over
an enterprise-ready software,
you're controlled as a user,
and free software,
you're liberated as a user.
And that's built-gates,
if anyone's wondering,
one of the original Microsoft guys,
I don't think you really recommend
that one too,
but that's just possible.
The Linux Society people are in here.
Free is in freedom, not as in beer.
If I was given,
in fact, if I was given a beer for every time,
I said this, say,
it'd be, you know,
spending the next two months
in the prior year or something.
What freedom,
free software means is freedom.
Free is in freedom,
not free is in beer.
It doesn't mean that software is free software.
It doesn't mean that you're not bummed
to get built for it.
You have the right to redistribute
copies and to charge for that.
What it does afford is,
what it means is that those freedoms
that are passed on to you,
you must pass on to everyone else,
so everyone else gets to have
the same piece of the pie.
You know, no one's excluded.
Because you give something way,
it doesn't mean you're not responsible for it.
You know, if I gave you a piece of software,
I told you this was going to work perfectly on your computer,
and then I blew up your computer.
You wouldn't be particularly happy with it.
And because software is free,
it doesn't mean that there isn't some liability towards it.
I'm not sure what's going on with this lighting.
If you make modifications,
this is another thing.
If you make modifications,
you're not,
you don't have to share.
You don't have to,
if you're a bank and you find a solution that
is important to how you bank,
as long as you don't give,
as long as you don't sell your software,
you don't have to share those changes.
You have the right to make private modifications
and keep your secret.
That's another misnomer in free software.
If you make a change,
you need to give it to everyone.
You don't always.
An example of this is Google,
Google, eBay, Amazon, Facebook,
Yahoo.
All use free software in some way,
shape, and other.
Google, have the right to make private modifications
and let people use that service.
So Google runs what's called a lab
and it's patching my ASQ on PHP.
And this is the open source bundle
that we, that basically,
web ISPs and stuff use.
And they will use them.
And they're able to make software,
they're able to make private modifications
and they're able to keep their commercial advantage.
And that's what free software is.
By guaranteeing those freedoms,
what it actually means is that people
can go about daily business
without worrying about
how to be released and operating the system.
Freeing could be called socially modern.
Because you're passing on
freedoms and giving it to everyone.
Which is, you know, it's a nice thing.
Free beer is only in dreams.
Well, it doesn't happen to me very often.
Open source.
They're not the same thing.
They have different mindset.
They have different rooms, but a similar goal.
Sometimes a word of stigma
and this is the reality of free software.
When I turn around and say free software,
when I turn around and say free to you guys,
most of you will be thinking
about the cost, and that's what free means.
And the problem is, is in the world,
if you go to software houses
and say, you know, I'm a big company,
I guess, free software, you know.
Certainly, but if it doesn't cost anything,
it can't be worth anything.
That's a bit of a mess, no.
So the term open source was kind of invented.
And what this enabled
kind of freedom lovers with a better word
to be able to go into corporate businesses
and say, no, no, no, it's open source.
You know, we take all the benefits from it,
but we'll have some kind of ownership to it.
And open source is very different.
And if you're interested in it,
certainly grab me after this and I'll talk to you about it.
It was just basically to start off a new.
The open source definition is very, very different
to the free software.
As you know, it's free software.
There's five freedoms.
And you showed four of them.
The open source definition
is 12th.
And this still ownership companies have the right
to own the codes.
And one of the differences in open source is that,
if you make modifications to a source code,
you need to put your name to the bottom of it
so that the credibility of the author
of the original document is not in question.
So if I wrote about software, it works perfectly.
I'll give it to John.
John messes about it.
And makes it really bad piece of software.
My name is Captain Clear.
Because he signed for his software changes.
Lots of differences.
We all start from,
we all start from somewhere.
And free software,
it's about the free software foundations
around 25 years old this year.
And so it goes to show that it's not,
not something new.
When you look at where my history is,
the home group, the home group computer,
and it was a club in America,
where Steve Jobs,
and Steve Wasnick,
were basically originally
kind of got their first ideas for Apple,
which they became iPods and IMAX
and I this and I that.
But that's what they originally put out their ideas.
Bill Gates wrote a very famous letter
to the home group,
he was using the top,
saying, you're pirating software.
And it was very derogatory.
You find that pretty much anywhere along the way.
The model railway club as well,
most of our routes.
I know it sounds very strange,
but in Berkeley,
I think the modern railway club,
they used to take
any kind of hardware they could
and hack it to do lots of different stuff.
So it started off as a model railway club
and then all of a sudden it did lots of different stuff.
I think trains were just part of it.
There were basically hackers before hackers.
And you know, hackers is a term
that's been taken over by the media.
And what hackers originally meant
was that someone
playedfully worked with stuff.
And what it's been changed to
is there's a term called cracker,
which is sort of legally trusted,
breaking to computers,
it legally tries to steal stuff.
And the media instead of using the term cracker,
used hackers.
So what you equate to being the hacker
is actually probably more
to what the cracker is.
But these are what these people were.
They would take hardware, they would take software,
and they would make it do things
that it wasn't designed to do.
And that's originally what a hacker is about.
Artificial intelligence, like I've heard,
my tea is a very big birth place to us.
And all of these things,
or all of these groups,
one thing in common,
sharing knowledge.
You'll see links.
And free and open source software
and a lot more things than you
will ever realize.
And better devices, mobile phones,
audio play,
set top boxes.
You know these guys set top boxes,
most of them they're running links cans.
So it touches your life in ways
that you'll not know.
When you play your council tax,
Dundee City Council use free and open source software
to actually, for their credit card payments.
So when you pay your council tax,
free and open source software,
is it the back of that?
I've talked about some of them,
Amazon, e-mail,
Yahoo, Facebook.
I'm sure everyone's heard of
at least one of those.
Half of the footsie file,
a half of the Fortune 500 allegedly runs
Unix Linux free software direct versions.
It's very hard to get those figures
so you can just don't tend to them.
So how they're doing.
The big advantage for our future and free software
is our ability, our scalability,
our flexibility.
Because we share our knowledge,
it means that we're able to get into
every nook and cranny
and find a solution to fit that problem.
Organizations and governance,
running fonts.
The French ministers,
all of them are running,
they're not running Windows.
Russia has rolled out 12,000 users
in schools with it.
I mean, the adoption of Linux itself,
which is a piece of free software,
is peripherally everyone.
NASA runs Linux.
Apparently not on the space station.
If anyone's read the newspapers recently,
a space station is running Windows XP
and it has a virus.
But it has no anti-virus software on the space station
and it's not like they can send a CD up there to fix it.
So, you know,
you can find fonts on lots of different places.
Google is your friend.
I say this every day.
You don't believe how often.
But, you know, use a search engine
to type the word,
freedom software.
Online resources with freedom software.
There isn't software packages on the internet,
but the source of port is the free and open source community.
Yeah, it's the free and open source community.
The free software foundation is always a good place to start.
Destroy a watch.
It's a very good place to find Linux distributions.
Source forage is a very good place to find software that's time
that's released in the open source.
And you're probably running it without realizing it.
There's only ideas and thoughts about
what I've spoken to you that afternoon.
It's your thing to throw any ideas in it.
Any questions about what I've talked about?
Okay.
Let's come to your front.
Thank you for listening to Hack or Public Radio.
HPR is sponsored by Carol.net.
So, head on over to C-A-R-O dot-N-T for all of her TV.
Thanks for watching.
