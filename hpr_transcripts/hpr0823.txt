Episode: 823
Title: HPR0823: Klaatu talks to Trevor, a programmer for Phonon's Gstreamer backend
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0823/hpr0823.mp3
Transcribed: 2025-10-08 03:03:01

---

Hi everyone, this is Klaatu, I'm at the Ohio Linux Fest talking to Trevor who is a KDE
developer.
Hi Trevor, how you doing?
Pretty good, how are you?
Pretty good.
So, you work on phone on and, well, you work on phone on and what else?
Yeah.
Those who don't know, KDE has a multimedia abstraction library thing that basically lets
you play multimedia with his video or audio on any platform, including OSX, Windows, and
Linux.
And the way it works is there's these different backends that use different libraries.
So such, for instance, on OSX, it's QuickTime, Windows DirectShow, Linux, you have a choice
of VLC or G-Streamer.
And I, along with my cohort Roman Pierre, we work on the G-Streamer back in the phone
on.
So, what are some of the applications that a KDE user might know phone on from?
Um, Amroch is one big thing, it is a heavy user phone on, there's also a Dragon player
which uses phone on.
Yeah.
I believe Bangering uses phone on, I could be mistaken on that.
Okay.
K-Notify, the whole notification system uses phone on.
Oh wow, okay.
Um, it's all like I remember off the top of my head, I know there's more of that.
Sure, sure.
So, um, the advantage to me as a KDE user who knows nothing about whatever you're talking
about right now, what does phone on give me?
I mean, what was, why did, because phone on hasn't existed for very long, it's more
of like a KDE4 thing, right?
Yes.
So, what, what is it, um, why was it necessary?
Why did people think, oh, we should have something, you know, to do this?
If you recall back to the original announcement of KDE4, they were talking about the pillars
of KDE, such as things like solar for hardware, discovery, NEPO mug for some
romantic storage, and then phone on was for multimedia, because before KDE4, we're all
relying on this really old framework called, arts, and it was at a design similar to
phone on, but kind of different, and it works.
It needed pretty much rewritten from scratch to be usable in a modern system.
So, the whole reason behind phone on is that all of KDE, not a single program has to rely
on any specific multimedia framework.
We don't have to hard code any codex or coding techniques or streaming APIs or anything
like that.
And this actually has recently come to fruition in the last week, when G Streamer, they're
working on releasing the version one of the whole framework, and it took me about 10 minutes
to tweak phone on G Streamer to, you know, port all the new stuff to the new system, and
I didn't have such a single KDE application.
Yeah, that's great.
So, how is this different from like, I mean, to me, again, someone who doesn't know anything
about this, it kind of sounds like Pulse Audio or something, you know, something that
like basically sits on top of everything else, and sort of like grabs a hook or an API
or whatever, and translates it for me, is it at all similar or completely different?
Um, it's, I guess I would say it's different, it's not completely totally different.
I mean, they both do multimedia.
The big difference is Pulse Audio lets you stream raw PCM data to a sound card or just
any abstract sound device, which could be across the network or a USB headset or something.
Phone on handles from the loading of the multimedia from any kind of stream to the output, be it
your display or forwarding over X11, or network connection, or audio over Pulse Audio, or
using OSS or ALTSA.
It handles everything from loading up the stream, decoding it, sending it out to the different
categories, such as, you know, having voice communications go to your headset while
music stays on the speakers, handles all of that, Pulse Audio is just audio, X video is
just video, phone on kind of ties it all together, and makes it work on all platforms.
Okay, cool, so right now, I mean, is phone on, is it kind of where it needs to be, is
it kind of one of those projects that's kind of, you've developed it, it's kind of,
it's, you can kind of set it down and let it be, or is there a lot more in store for
phone on?
Um, well, earlier in the year, around April, I believe, uh, Harold Sitter, Apache Logger,
some of you may know, um, a bunch of the KD Multimedia Developers and a few other
associated people with KDMM, we all got together in Ronda and Switzerland, the KD Multimedia
Sprint, and there we started working on plans for what we thought we would call phone
on five.
Turns out we don't actually need a phone on five, but there's still some new features
we can add, such as Blue Rate Playback, uh, actual transcoding, so you can record from
a webcam and stream to a nice cast server or something, or just more streaming and ties
in with the KO framework for KDE, so that even if you're back end like G Streamer or
VLC, if it doesn't support some protocol that KDE supports, phone on will support it
now because of this KO integration.
Wow, nice, okay, very cool.
Would that, by chance, help me, I mean, see, out there, what you just said almost sounds
to me like Jack, so is that again something completely different, I mean, where I can
sort of take streams and send them to other places, or is that not what you're talking
about?
Because I mean the KO thing, kind of like having something to do with that.
Streaming to another source, um, that's actually currently done right now, but it's not
really Jack, Jack is more for absolutely, if you absolutely need real time audio with
zero latency whatsoever, that's what we use Jack for, and it's very routing of audio.
Phone on when we're talking about KO streams and streaming to an output file, what's basically
happening is you're writing to a device and you're writing to a file, which just happens
to be in a different place, which is the kind of the same concept as Jack, but it's actually
completely different.
Okay.
All right.
So, um, since your explanation of that was so good, why do you explain to the audience
and me, uh, what exactly the, the, the, the, the, the KO framework or whatever the KO thing?
What, what is that?
Essentially, it's a really cool way to support different kind of communication methods and
network protocol and just transferring in throughout all of KDE.
You write one little bit of libraries, say transfer files over Bluetooth, and suddenly
every single, you know, dolphin, you've got Amorock, you've got, uh, K edit, everything
can read and write files over Bluetooth.
Yeah.
And phone on leverages a little bit of that too.
And it's seamless, which is amazing to me, because I mean, it's like, you don't even
know, you don't even have to think about the idea that you're using that, the KO thing.
Yep.
And the applications themselves have no idea that they're receiving data over, like, say,
a laser communication with the moon or whatever it comes up next.
Yeah.
Cool.
Um, yeah.
That's really interesting stuff.
Um, how's the festival been going for you so far?
Pretty good.
I showed up here last night.
I actually live about two hours away in Akron, Ohio, so, you know, it's not that far of
journey for me.
I met a couple of cool people here, hung out with a couple of friends back from Akron.
Cool.
I met a couple of neat people here, saw some talks.
I like the keynote looking forward to the rest of the day.
Cool.
Um, oh, what, what district are you running?
What's your, you know, just, what, what, what, what, what, what, what, what, what, what,
what you see by the, uh, you on my arm here, of course.
I happened to be a Fedora ambassador, and I do a little bit of Fedora packaging on the
side.
Nice!
Okay, cool.
Well, thanks for talking to me, sir.
Yes, thanks.
Thanks.
Thanks a lot.
You have been listening to Hacker Public Radio, where Hacker Public Radio does
our, we are a community podcast network that releases shows every week day in one
day through Friday.
Today's show, like all our shows, was contributed by a HBR listener back yourself.
If you ever consider recording a podcast, then visit our website to find out how easy it
really is.
Hacker Public Radio was founded by the digital dog pound and the economical and computer
club.
HBR is funded by the binary revolution at binref.com.
All binref projects are crowd-responsive by linear pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting
needs.
Unless otherwise stasis, today's show is released on the creative commons,
attribution, share a life, free those own license.
