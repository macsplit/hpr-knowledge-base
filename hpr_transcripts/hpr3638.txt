Episode: 3638
Title: HPR3638: Ken drops a bear on his android phone
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3638/hpr3638.mp3
Transcribed: 2025-10-25 02:35:51

---

This is Hacker Public Radio Episode 3638 for Wednesday the 13th of July 2022.
Today's show is entitled, Ken drops a bear on his Android phone.
It is hosted by Ken Fallon, and is about five minutes long.
It carries a clean flag.
The summary is, How to Enables Pusing this Server on Android Line I Joes.
Hi everybody, my name is Ken Fallon, and you're listening to another episode of Hacker Public
Radio.
Today, I want to talk to you about something that's been an ongoing topic, a conversation
on the GNU world order podcast, about getting reliable connections to copy files to your
phone.
Back in the day, you could just copy files and it would appear in your SD card, it just
mounted as a network drive.
Alas, that's a has gone with file system on Android being an amalgamation of similink,
sun change and write files, and all sorts of stuff.
If you actually want to see what's going on, my experience has shown that the best way
to do that is use Android debugging tools, and I did an episode on that back in episode
3515, which will be linked in the show notes.
And you can run as root if you assign the permissions in developer tools.
So on your host machine, say connect a via USB, you can go ADB space root, and then ADB
space shell.
And you will see your form.
For years I've been using ADB space push and ADB space pull to transfer files over.
That's the most reliable means of sending media over, but it's not really very convenient.
If you want to use the Linux shell, or you want to copy via file manager, or you want
to do another sync or something like that.
So for years I've been using primitive FTPD, and that is an FTP server, but it also supports
SSH.
For some reason that stopped working, and I was looking around for an alternative, there
are plenty of clients, but very few servers.
Then I hate on simple SSHD, which is a SSH2-based server based on DropBare that supports skew
copy, SFTP and R sync.
It only supports public key authentication, no password or interactive alt except for bootstrap
shipping.
It does not use root, which means it must listen over port 1.0.2.4 and default support
2.2.2.2.
At me, it's not a huge problem.
Setting the install is quite simple.
It's on FDroid and also on the Google Store.
So once you install it, you can actually just go SSHspace-P, space 2.2.2, and then the IP address
of your form.
And you're connected, it's as simple as that.
But in order to set up authorization, if you go into the menu, and I'll have some screenshots
of this in the show notes, if you start simple SSHD, go into settings on the drop down menu,
and then you go SSH path.
It will give you the path to where you need to put your authorized keys file.
It's slash data, slash user, slash zero, slash org.galixandr.sshd forward slash files.
And I went there using ADB shell, and I created in them from the phone a file called authorized
underscore keys, and I copied and pasted my user ID or my public key into there.
And then I changed permission to 600 for the authorized key file, and I changed the user
to the user that the phone is, because when you're running the application, it's using
the user on the phone.
So in my case, it's you underscore, sorry, you zero underscore a268.
And you also need to type restoreconspace-applicasef, space-authorized keys.
So once I did that, and I turned on off the phone, just simply typing SSHspace-p222 space,
and the IP address of your phone, and now you can connect it.
You can make this a lot easier by adding to your .ssh forward slash config file an entry
that says host, space, and maybe my phone or whatever you want to call it.
And then next line port, space-222, and then you're basically done.
You can simply type in SSHspace-myphone, and you'll get directly to your phone.
The SSHFS part is actually rather simple, really.
You install SSHFS on your host computer, apt install SSHFS and DNF install SSHFS, I believe.
And then type once it's installed SSHFS, space-p, to do the port, and then the phone's IP address.
Space forward slash, and the directory where you want to mount it.
So I mount it into slash mount podcasts, and then I can copy and paste, I can browse the
directories, and that's it.
So simply enough, tune in tomorrow for another exciting episode of Hacker Public Radio.
You have been listening to Hacker Public Radio, and Hacker Public Radio does work.
Today's show was contributed by a HBR listener like yourself.
If you ever thought of recording podcasts, click on our contribute link to find out how
easy it really is.
Hosting for HBR has been kindly provided by an honesthost.com, the Internet Archive,
and our Sync.net.
On the Sadois status, today's show is released under Creative Commons Attribution 4.0 International
License.
