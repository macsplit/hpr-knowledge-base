Episode: 1748
Title: HPR1748: Scale 13x Part 5 of 6
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1748/hpr1748.mp3
Transcribed: 2025-10-18 08:49:34

---

This is HPR Episode 1,748 Entitled, Kale 13x Part 5 on 6.
It is hosted by Lord Rush and Lutt and in about 68 minutes long, the summary is for Internew
from Kalex 13.
This episode of HPR is brought to you by An Honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Get your web hosting that's Honest and Fair at An Honesthost.com.
Greetings Hacker Public Radio, Lord Drockenblut here at scale 13x, and I am currently at the
Windhouse booth.
And who do I have the pleasure of speaking to?
This is Susla Watson, the project leader of Windhouse.
Now for people who may not know, what is Windhouse in a nutshell?
Well Windhouse in a nutshell is the Linux Entertainment System, and the idea is really just to make
it as easy as possible for anyone to create their own T-bone steroids essentially.
Now Windhouse has been around quite a while, could you talk a little bit about the history
of Windhouse for people?
Yeah, sure, it's been over 11 years now, and it actually started off with my desire
to have a T-bone box if you will, but I didn't want a T-bone because it didn't offer the
all the functionality I need.
At the time, T-bone just did television, but I wanted something that would do television,
my music management, what have you, and I found MythTV.
When I first installed MythTV, it was an Linux magic, and that was a bit of a beer.
I always wanted to use Debian because of their package management system.
And really, it's kind of a confluence of events.
I learned about Nopics live Linux on CD.
I booted it up, and there I was with Linux running live off the CD with a desktop.
And to go back to that confluence around that same time was when you could first install
Nopics onto a hard drive.
So I installed it.
One of the MythTV developers of time, he had built Debian packages, added the repo,
app get update, app get install MythTV, and there it was, pulled in everything it needed.
And again, I'm saying that we're confluence a lot because that's exactly what it was.
When you first started, well, around that same time was when you could, they had instructions
for remastering Nopics, and it just went off in my head, you know, this is what I'm going
to do.
This is going to be my contribution to open source.
I'm going to take Nopics, remove things that I don't want, add things that I do want
to make sense for a home to payment appliance, and this will be what I give back to open source.
And you know, it's later on this year, it'll be 12 years.
Now, Lin has its current name.
What did it originally start out as if people want to have a little more of the history?
The original name was Nop Myth.
It was a Nopics, since it was remastering Nopics, we got the Nop and Myth for MythTV.
And it's going on about what, six years now, I guess, we decided to use Arch Linux as the base
of it.
I thought, well, we're going to use something else at the base that makes sense to do a name
change.
And really, from the very beginning, I've referred to my system at home as the Linux
home of the payment system.
So it made natural sense to call it Lin has.
Now with your interest in Debian, why did you make the decision to go with Arch instead
of using Debian as your new base?
Package management.
That's the quick and easy answer.
Well, aside from Package management, the Arch philosophy is keeping it simple.
And really, it was synergistic, if you will, because the entire idea with Nop Myth was just
to make it easy.
It was TV.
It should be easy.
And really, the Arch guys do a great job with PackMan.
It's super easy to build a package with what they have.
So what can someone accomplish with a Lin has system at home?
Well, like I said, it's Tiberon steroids like Tiber or other DVRs.
Well, unlike some other DVRs, I should say, it'll flag commercials for you.
So if you want to skip commercials, it'll automatically skip the commercials.
You can transcode the shows you recorded.
So for instance, let's say you have a mobile device and you want to take your shows with
you, you can do that.
My brother was in the Air Force and when he was stationed overseas, there were some certain
shows that he followed.
He couldn't, you know, follow them overseas.
Well, he's my brother.
I had the ability to, you know, get those shows to him.
So I recorded them over the air, flag the commercials to cut the commercials and I made
a custom DVDs for him.
So you could, you know, keep up on his programs.
So if someone were interested in getting started, what is kind of the, what is kind of
the most basic setup you would say they would need?
Well, the most basic setup is, well, I'll speak a little bit about the Mith TV architecture
and that it's a front end and a back end.
So you could have those both running on one box, which would be the most basic setup.
Or you could have multiple systems, you know, throughout your house.
You could have multiple back ends.
You'd have one master back end, a slave back end and really the easiest way to, you know,
to find that is the back end takes care of recording, you know, your scheduling and so
forth.
So you could have a back end, a slave back end.
You could have just the front end and the front end is essentially what we use to interface
with the system.
Very cool.
Now, what does your home system look like?
I would imagine that as the creator of Lin Hess, you probably have one of the more over
the top setups.
And hopefully, I'm not mistaken.
Well, at home, I really only have two systems.
I have a master back end in my living room and that has six terabytes at the moment and
I have a slave back end, which is also capable of recording in my bedroom.
I have three over-the-year tuners, so I could record things over the year and I have
a Verizon files at home and I use a cable card, so I could record four streams from
Verizon files with that cable card in my system.
And I also have a NAS that currently has about 30 terabytes or so where I store my recordings
and whatnot.
A little more impressive setup than I think you were giving yourself credit for, you know,
almost 40, 50 terabytes of storage, yeah, that's a lot more than most people have at home.
Thinking about things with the way, you know, a lot of services more and more are coming
online, being available to just be streaming instead of having to do video or doing, you
know, over the air capture or even using a cable card.
How do you see myths staying relevant, you know, in that kind of where, you know, the need
to do your own recordings seems to be diminishing more and more.
Well, I don't know if it's diminishing more and more, you know, I think a lot of people
that I've talked to over the years, you know, they want to cut the cord, if you will,
and really the first thing those people think about when they're cutting the cord is going
over the air.
I live in LA and, you know, depending on where you live, of course, you can get over a hundred
channels over the air.
You know, secondary to that is, you know, Netflix.
We actually just added Netflix to the distribution, so there's Hulu, we've had Hulu in our repository
for years now.
So it is more, well, more things will be shifting to, you know, streaming over the internet.
And hopefully, you know, the content produces, if you will, will be enlightened and they'll
see, you know, well, let's do this with HTML5, you know, let's, you know, let's, let's
be friendly to everyone and, you know, I mean, if I won't say I'm a big fan of DRM because,
you know, if I purchase something, it's mine, you know, as it should be.
So if there are things that require DRM, you know, we would definitely look into, into
doing that because we, again, we want to give people that option of, you know, getting
their meetup from where they want to get it to, from, and we just want to make it easy
for them.
Very cool.
Now, what are some of the more unique features of, you know, myth TV or Lin-Hes that someone
just getting started might not know about, but you think they should know about?
Well, like I said about myth TV, it has a front end back end architecture.
So, you know, you hear commercials now saying, oh, you can record four channels at once.
Well, I was doing that 10 plus years ago.
You know, you get a DVR from, you know, your provider.
It has what, maybe a 500 gigabyte hard drive, maybe a terabyte, well, you can just keep
adding.
You know, like I said earlier, I have, you know, upwards of 40 plus terabytes at home with
regards to myth TV.
There isn't much we do with it, but as far as things that, you know, we, we introduced
in Lin-Hes, like I said, we have Netflix and all that can be accomplished by our menu.
You know, we have supports for various remotes.
If we detect what your remote is during the initial boot up, you could use our remote
to install the entire operating system.
I mean, is there another operating system out there?
You could think of it as to get installed with a remote?
One.
And it's in a very similar space.
I've actually done using, using just a point and click or remote was a XBMC live install.
Okay, well, that's fair, but, you know, I don't, you know, from installation, you know,
configuration daily use, you can just use, just, just to remote.
So I could, I thought from the very beginning, it was appliance.
So that's where our focus is to make it as, as simple as possible.
So if people were interested in getting involved with the Lin-Hes project, where are,
you know, getting involved, using, where should they head to?
Well, we have a website, Lin-Hes.org.
You know, we have a forum on the website.
They can get on the forum, register, start asking questions.
There's a hardware section on the forum, and that's split up into three different areas.
So, you know, if you're looking to build a system, for instance, you look at the Tier 1 section of the forum.
And that's, you know, we ask folks to put their hardware that they've used to build a system on there.
So if you go to Tier 1, you know, it's just going to work.
Very cool. And where are some places that people wanted to get involved in Lin-Hes?
Where are some areas you could use some help?
Ah, that's a, that's a good question.
You know, I, it's, I won't necessarily say something I've struggled with.
You know, when I initially started off with, with not myth, I kind of, you know, there were people who said they were going to do stuff and,
and, and help out what have you, and that never really came to a fruition.
So I just kind of, you know, in the, in the early years, it was just something myself and another friend fellow developer did.
We just kind of, you know, took it on our shoulders and around with it.
With Lin-Hes, we've had a couple, a couple great guys, you know, helping us out.
So, you know, if you truly want to help, you know, you can just get on the forum, let us know that you want to help.
You can send me an email, let us know that you want to help.
Alright, and one question I was asked to try to ask of everyone I had interviews with this weekend was,
what is your preferred text editor?
Vi.
Alright, well, there you go, Zoke.
Yes, we'll blame Zoke because he was the one who asked the question.
So, is there anything you feel like I've missed at this point you would want, you know, the hacker public radio audience to know about?
I actually have one more before we get there.
How is international sport?
You know, Lin-Hes is based here in the US, but how do you, how have you heard of it working, you know, kind of globally?
I'd say it works well globally.
Obviously, I can't, you know, give first-hand accounts, but I know we have users from all over the world.
We have folks in Australia, back in 2005, I went to Linux World UK, and there was a guy there who was like,
that came specifically to meet you.
So, I know we have users all over the world.
Alright, so, and then, as I said a second ago, anything you think I've missed that,
Mr. Oberloak, you would like the hacker public radio audience to know?
Well, Lin-Hes is the next home entertainment system, and we spoke primarily about, you know, a myth TV because it was the core of it.
But we also have things like games, you know, have emulators, maim, dolphin.
You can view trailers with it, you know.
All kinds of stuff that, to us, makes sense to include in a home entertainment system.
Alright, well, this has been Lord Dragon Blue with Cecil Watson at the Lin-Hes boot that's scale 13x.
Alright, this is Lord Dragon Blue, the digital dragon here at scale 13x.
And, well, I happen to have stumbled across K9.
Any of you who know who that is?
Great, any of you don't stick in.
Stick around, and you'll find out you might need a screwdriver for this one.
So, who do I have the pleasure of speaking to you right now?
You're speaking with John Warthog 9 Holley.
Alright.
So, as I said, we've got K9 here in front of me.
Tell the HPR audience a little bit more about K9.
So, K9 originally is a character from Doctor Who in the late 1970s and early 1980s,
and I've gone ahead and recreated him just about one to one scale.
There's a few concessions here and there, but it's basically a demo for the middleboard open hardware project.
He's got a 64-bit computer bolted into his back doing a lot of processing,
taking a lot of input from sensors, and not quite doing computer vision yet,
but just about at the point where he could be polyautonomous.
Alright, so, break down what all components you have inside of K9 here.
So, we'll start from the middleboard itself, which is acting as the big processing.
Actually, can we, let's start with the chassis.
Let's go from there and go up. Let's not skip anything.
So, okay, well, so we'll start real well.
That way he's basically a track, you know, kind of like a tank vehicle made out of wood,
cardboard, paper tape, and a bunch of spray paint.
There's a lot of custom angles woodworking going on here,
and that feeds into, there's a couple of batteries that are on the bottom.
There's a 7-amp, and a 7-amp hour and a 10-amp hour 12-volt life-up-oh batteries down at the bottom,
providing power to both the middleboard itself and to the motor controller,
and the motors for the dog.
And the middleboard obviously pulls power off of those batteries,
acting as the central processing unit for all the sensors, like the gyros,
the accelerometers, the GPS, those kinds of things.
And there's a rather extensive motor controller that the middleboard communicates with
to actually provide power.
And it's got a monitor so that you can play movies and get stuff on the screen,
which is actually relatively accurate to the dog that was on the show.
And talk says a lot of things from the show, and yeah.
Now, what's the motor controller board?
Is that off the shelf or something you've built from the grounds up?
Yeah, it's an off-the-shelf product from Robotech, R-O-B-O-T-E-Q,
if I remember correctly.
And I apologize to Robotech if I've spelled your name wrong.
But it's just an off-the-shelf motor controller that talks over USB,
or serial port over USB.
All right.
Now, what was the, and well, actually, there's another thing you're holding in your hand here
we should probably talk about too.
That's true.
So right now, he has the ability to know where he's at, where he's going, and what's going on.
However, he has no computer vision sensors yet.
Those are getting installed at some point.
But it would make it really hard for him to wander around the show on his own.
I mean, he could get there, but he'd run into everybody to do it.
So I've got an Xbox 360 controller that I'm issuing commands to him to wander around with.
Now, what was the genesis of this project?
What's, besides the fact that you're a huvian, and you wanted your own canine,
what sparked you to build this?
So I had just gotten done doing a rather large Artemis build for the Albuquerque Comic Expo in Albuquerque, New Mexico,
and was trying to figure out what to build the ex-friend of mine.
Now, Artemis, if I'm not mistaken, that is for lack of any other better way to put it.
That is a Star Trek bridge simulator.
Yes.
It is a Star Trek bridge simulator, and we built a two-ton bridge that ran at the Albuquerque Comic Expo two years ago now.
So after that, you were just looking for something else to satiate.
How much time do you have invested in this, and kind of what has been the process of getting him getting canine to the point he's at now?
So yeah, it pretty much rolled down to a friend of mine.
You know, she owns her own Tartus, and she drives it around to conferences, and I'm like, you know what? I should build canine.
So started on that, and it started out small, get the motor controller working, get the computer hooked up,
and start going from there, do basic testing, and 180 hours of man-hour build time later, and programming and whatnot.
We have the current dog as he exists.
Okay, so now getting into the software side of things.
Yeah.
What software is involved, you know, how much is custom, what are the tools you've used, you know, just kind of everything.
So he runs a custom Linux distro based on Yachto, which is Yachto is an open source built system for Linux distributions.
So he runs a custom distro based on that.
The control program in M right now is a completely custom one off C program that I wrote to handle everything.
But he runs Linux, and he has access to all the standard Linux libraries, and you know, if I wanted to add computer vision,
OpenCV would be the way I'd go.
You know, you want to add voice processing, you know, sphinx, all those kinds of things.
Now, you have seen there's some gentlemen around here with the silent JS project.
Have you ever looked at those guys to maybe see if they could help make some of what you're doing a little easier?
I've seen them running around.
I haven't looked at it, to be honest.
A lot of people have actually recommended that I ditch my completely custom operating system and custom programming and switch to,
there's a Linux distribution called Robo OS, and I, you know, they've suggested that a lot.
And I just haven't had time to do it as, you know, the dog is relatively popular and conferences keep asking me if I'll bring you.
All right.
Is there anything else you think at this point I've missed that you would like the hacker public radio audience to know about?
No, I mean, you pretty much covered it.
I mean, it's basically been a maker kind of project for myself.
And it just works out that it's a great vehicle for the middle board to kind of run.
Now, this being, you know, a Linux and technology conference, I feel like I kind of need to ask.
And it's there somewhere people can go to, you know, one, see kind of the build as it's progressed.
What's start there?
So, if you go out to my Google Plus, yeah, it is.
If you run out to my Google Plus page, which is plus.google.com slash Warthog 9, W-A-R-T-H-O-G-9.
And if you look for the hashtag K9 off of that K-9 usually, you can see a lot of the photos from the build stuff.
There's a couple of videos of him very early on falling downstairs and whatnot.
So, and beyond that, if you just search for, you know, K9 and middle board on the internet,
you'll find, you know, pictures of him at Maker Fair last year and Oskon and all kinds of things like that.
Now, is the code you've written for him at this point available anywhere?
Or is it solely kind of resides strictly on him?
The code is such a disastrous mess.
I'm afraid to let anybody else look at it.
And if I, so it is unfortunately, custom to him.
If anybody really, really wants to look at it, I'm happy to send it to them.
But it's kind of a messy hacked up.
I haven't had time to clean it up and open source of properly.
Kind of code.
Well, I will personally say I've never, I can't count the times I've heard the,
it's a hacked up mess. I'm ashamed of the code.
Excuse.
Of people not sharing their code.
Don't be afraid, man.
Puck that thing to get hub.
Maybe someone will get interested and help clean, help you clean up that code.
It's quite possible.
So, where do you still, you know, besides the vision, what else do you have yet you want to accomplish with K9?
So, there's a lot of mechanical things I want to get working.
If you, if you've seen the show, there's a lot of things that happen in his head.
He's got the ability to kind of spit out ticker tape and he's got a, kind of,
a probiscus that can extend from near his eyeballs.
He's got a laser.
And so, these are, there's a bunch of things along those lines that I want to get built into the head
and allow him to display things and make that all work.
And I don't have that current.
So, I've got to fundamentally rebuild his entire head.
Get the, and get the computer vision stuff in there as well.
Beyond that, get him, I would love to get a website where he can start uploading and giving telemetry data
just straight out to the public internet when he's at conferences.
I mean, if he's going to have computer vision, there's no reason why he shouldn't be able to display
out to the, you know, live stream, his video stream, out to the internet.
And those kinds of things.
So, if someone were interested in helping you with this project,
one place they could potentially really, really help you is with that website of things.
So, you can focus on him and they could build that out.
Yeah, that's one particular possibility.
All right.
And if people wanted to get in contact with you to learn more about K9, what's the best means?
Probably the best way is find me on Google Plus and just tag me from there.
It's, like I said, plus.google.com slash Warthog9, W-A-R-T-H-O-G-9.
You should be able to find me.
All right. Well, this has been Lord Droggenblut with Warthog9 here at scale 13x.
And well, of course, we can't forget K9. Have a good day, folks.
All right. This is Lord Droggenblut at scale 13x.
And currently, I'm sitting with Michael Hall from Canonical.
Michael, tell a little people about what you do with Canonical right now.
I am on the community team. I'm one of the community managers for a bunch of.
And my name is Michael Hall. I'm on the community team.
I am on the community team. I'm one of the community managers for a bunch of.
And my job is to work with the a bunch of community and make sure that we are
giving them all of the information and resources that they need to be good contributors to the bunch of projects.
Now, if I heard that right, you said one of.
So you're saying that somehow it supposedly takes multiple of you guys to fill Jono shoes?
I mean, how did it go from being a one person position to a team of managers?
So it hasn't been a one person position in quite a while.
We all worked for Jono before he left the company.
So we were all doing the same job that we're doing now.
We just didn't have the title community manager.
There was just one community manager title at Canonical at the time.
After Jono left, Rick Spencer, the VP of engineering who that position reported to,
decided that the entire team was already doing the job of community manager.
So we should all have that title officially.
And then there would just be one team manager that reported to him.
Okay. And you've been with a bunch of for quite a while.
What all have you done for either, you know, inside of a bunch of community or for cannot?
Or what have you done inside of a bunch of before you became a part of Canonical?
So before I joined Canonical, and actually right after I joined Canonical, I was a web developer.
So I focused mostly on Django projects.
When I got involved in the Ubuntu community, one of my first things that I was involved in was the local team portal,
which is at locododabuntu.com. It's a resource to track what teams are doing across the wider community.
And that was a Django site, so it worked for me to get involved with it.
So if I understand you right, you're saying you got a job at Canonical before becoming a part of the community?
No, I was in the community for about two and a half, three years before I joined Canonical.
So what were you doing in the community before you joined Canonical?
That's the local team portal that I was working on.
I was doing that before I joined Canonical.
So that's an open source project that's community developed and community run.
I was also working on the Summit project of summit.abuntu.com. It ran the UDS schedules.
So I worked on that before I joined Canonical also. That's another Django project.
And what brought you to the Ubuntu community?
So I had been using Ubuntu itself for a couple of years before I really found out about the community around it.
And I found out first about my local community in Florida.
So there was a meetup close to me that I went to and I met again, John Pugh, who worked at Canonical time.
And about a dozen other Ubuntu community members or Ubuntu users that were really excited about it.
And so that really led me down the path of being involved in the community itself.
I got involved in my local team. We hosted some local events.
And from there, that's how I learned about the local team portal on the need for web development there.
So one thing kind of led to another.
So now what is your history with Linux in general?
My first Linux experience was back in 1999. And it was with the Caldera Open Linux,
which eventually became Skow and tried to zoo all of Linux.
And that was just kind of bad.
But it was mostly on the server until I started working for Verizon,
where we were actually all using CentOS Linux on the desktop on our workstations to develop internal projects.
And I've been a Linux user ever since then.
About a year after that, one of my co-workers introduced me to Ubuntu.
And I've been a Ubuntu user since then.
So out of the Linux community, what is the kind of the one thing you've seen that's been just amazed you the most
that came out of the broad Linux community?
It's the sense of family that you get.
I mean, people that you talk to across different projects all other times,
you don't even meet in person, you just know them online.
But you get to know them so well that they become friends.
Some of those become such good friends, they're almost like family, too.
I've had people from the Linux community come and stay at my house multiple times.
Even when they're not part of Ubuntu, I'll go hang out right now after, you know, scale stuff.
I'll go hang out with the SUSA community manager, the Red Hat community.
We're all just really good friends across all of these different projects.
And now, kind of switching back to canonical.
Canonicals had a lot of big projects in the fire lately.
What are some of those and kind of what's the current state of them?
Well, our big project has been the phone and that's kind of a lot of different projects all rolled into one.
So we've got the actual phone platform that we had to develop for that.
We've got the new Unity 8 shell, which is on the phone and tablet.
And it's going to be coming to the desk soon.
We've got the mere display server that we needed to run that several other different things around phone enablement.
And then, of course, on the cloud side, we've got Juju and Maz and OpenStack stuff that we've been working on.
But that's kind of a little bit out of my area.
Most of my focus has been on the phone lately.
Well, since you're a community manager and there are people who listen to this show, who are part of the Ubuntu Linux community,
what are Juju and Maz at least on a high level?
Say that again.
What are Juju and Maz at least on a high level?
So Maz is a product that lets you take just bare metal servers without anything installed on them.
And start getting Ubuntu and OpenStack on them automatically.
So you just kind of plug them into your data center.
You plug them into your network and you boot it up.
And they'll do the rest from there.
So there's nothing that you have to do as assist admin to get that running.
And then once you have that on this different server, and you've got OpenStack running on it,
then Juju lets you deploy all kinds of different services to those.
And it'll orchestrate them and it'll connect them so that you don't have to pass around credentials or whatnot to give them talking to each other.
So Juju is the Ubuntu specific DevOps tool flavor, so to speak.
Yes, although I think it'll work on Debian now too, but you'd have to check with somebody else to make sure on that.
Alright, and also to go back up on Maz here a little bit.
If I'm not mistaken, that does support more than just Ubuntu Linux, correct?
I believe so, but that's been kind of out of my area of focus.
If you want to know more about that, well, he's not there now.
But the guy in the little black cat, Marco Chepi, he can tell you.
Well, we'll probably catch up with him to try to talk about those things a little later.
So what have, you know, on the community side of things?
What have been some of the hurdles you've had to deal with?
Well, as far as your role as the community manager.
A lot of the times is just trying to correct misconceptions.
You know, when we have a new product come out, there's a lot of work that needs to go into telling people what it is and how it works.
And some people will jump to conclusions or assumptions and post about those.
And so we have to go around and try and correct that.
Sometimes we'll have something that's a little bit controversial and people get upset about that.
So we have to go out and we need to explain what exactly we're doing and why we're doing it.
And most of the time, that's all that anybody needs.
What is something that was kind of controversial you had to deal with?
So MIR is probably the most recent example of that.
We back in 2010 or so, Mark Shuttleware said he wanted to use Wailand.
He saw Wailand as the future display server for Linux.
And then he passed forward three years later and we're getting ready to make a phone.
And we come out with an alternative display server technology called MIR.
And there was a lot of miscommunication on our part then about why we were not using Wailand.
And so that has caused us something.
And if I'm not mistaken, Mark Shuttleware not only came out and announced MIR,
but he came out and he came out swinging and insulting the Wailand project.
On some of those initial posts or at least that's how people perceived it.
Do you think that might have caused part of the controversy?
So I don't think anybody came out swinging at Wailand.
We posted a wiki page explaining our reasons for using MIR.
And some of those reasons claimed that Wailand didn't do things that it actually did.
And so we were wrong on that.
And we apologized and we went back and corrected the wiki to reflect the actual state of Wailand.
But nobody came out and started trashing on Wailand.
We all have nothing but appreciation for what those guys have done.
It just wasn't what we needed at the time.
Well, maybe I made it a little too dramatic as the explanation.
But I'm also kind of trying to channel some of what things I've heard, questions I've posed.
Because for some people, they're not going to come forward and pose these things.
I apologize if it comes off as that was me personally.
What are other challenges that are facing a bunch of right now?
Most of our challenges are just trying to get as much done as we can in the time that we have to get it done.
And we just got our first phone shipping.
And it's been kind of a mad dash to get as much done as we could before those phones started going out.
And that was in canonical and the community also.
We've got like six or seven community develops applications that are shipping by default on these phones.
And these were requirements that we had from our hardware partners to have these apps available.
So we've been working closely with them to make sure that they had all the designs and requirement information
that they needed to get those apps developed.
All right. At this point, is there anything you think I've overlooked, missed, or things just in general you would like the hacker public radio audience to know?
Just that everything that we do is open source.
So everything on the phone is open source. All of the cloud technology we've developed is open source.
If you want to use it on something else, you can grab it and use it on something else.
If you want to help build it and make it better or add features to it, please come and join us in the community.
And so then I'll ask, where can I get the source for landscape?
Landscape is not one of the products that we distribute. So that's something that we run.
That is one of the very few things left that are closed source. It's not really meant for regular end users.
And I'll admit, I kind of knew that one and what the state of that was.
And I just kind of couldn't resist asking about that one because I know someone if I didn't ask the question about the fact that landscape is still currently closed, there would be questions about it.
So if people want to get involved with a bunch of Linux, where should they start?
Well, there's all kinds of places you can go to start, but you can go to community.abuntu.com.
And we have information there about the different parts of the community and links from those pages to where you can get involved with those different teams.
And if people would like to get in contact with you directly, if they had any more questions, comments, concerns, and wanted to tell you how much of an idiot they thought I was for some of these questions I'd posed, how do they contact you?
So you can find me. My username is mhaul119 just about everywhere. So Twitter, IRC, my email addresses mhaul119 out of buncher.com. So you can email me directly if you'd like to.
All right. And one question I was asked very specifically to try to ask everyone I was doing interviews with, what is your preferred text editor?
My preferred text editor. If it's mostly it's going to be genie. I've been using cute creator a lot lately to develop a bunch of bone apps, but genie is my go-to text editor.
All right. Well, any final thoughts, words, comments, concerns, fused for me for the questions I've posed?
No, I just want to give a shout out to everyone in the Ubuntu community. You're all doing amazing stuff. If you're not in the Ubuntu community and you're listening to this, come get involved. It's a fun and exciting place.
And with that, this has been Lord Drockenblut with Michael Hall, a member of canonical, and part of the Ubuntu community at scale 13x.
Greetings, Hacker Public Radio. This is Lord Drockenblut at scale 13x. And I'm sitting here with Brian Prophet. Brian, what are you here at scale representing?
Oh, okay. So I'm here at scale as the community liaison for the Overt open source project. Overt is a product that is designed to manage multiple virtual machines in an organization or even up to the data center level.
So as we were discussing a little before we started the recording, this would be something similar to what some people might know as, like, data and where it is the interface for building and constructing your VMs and doing some management with them.
Right. Yeah, exactly. So however you build your virtual machine, whether you're doing it on the command line with KVM or, you know, you're building it invert manager individually, however you get there, or you can migrate them straight over from VMware. If you've got a VMware deployment, you want to switch over to something like Overt, you can just, we have migration tools that do that.
However you do that, once you get them to KVM, we're going to be the platform that will let you manage the machines, get them together in clusters, handle the storage, handle the networking in between the machines, and hopefully provide everything you need to run a virtual data center.
Now, is it a desktop application? Is it a web application? Well, I'll call it a web application for lack of a better way.
Yeah, so yeah, it's primarily the interface with it is a web GUI. I mean, it's basically a service that runs on a server somewhere, you hop into it through the web GUI.
You can also get through it through an API so you can integrate it with whatever controls you want. You can get to it from the command line if you need to and do it that way.
It's completely open source, completely free of charge. We serve as the upstream. This surprises people. We're sponsored by Red Hat, but we're not a pure Red Hat shop because there's actually, you know, Red Hat uses it for their commerce.
It's a virtual Red Hat enterprise virtualization product, but Wind River uses it for their open virtualization project, our product, and they sell it there.
It's pure overt, they just repackage it and send it out. And we're really excited about that kind of thing because we feel it demonstrates our model. We're not just here, you know, doing it just for Red Hat, because we're doing it for multiple companies good, so it makes us happy.
Now, some people will be interested. What license is over under?
We're actually under the Apache license, APL or Apache license too, sorry. And so that's good in that, you know, it's open source and everything. We have our source code available on GitHub and whatnot.
It can't lead to some problems, you know, like, so like Wind River consumes our code. They read, you know, they're perfectly valid under the license, but we don't see a lot of feet, you know, push from them back into the upstream, which is unfortunate because we want to try to be as diverse a community in terms of whose contributing is possible.
So, so we'd like them to do that, but we'd like to sit under the AL2 and we will continue to follow that license.
Now, it's correct me if I'm wrong here, but one of the features of the Apache license is that they can take it, they can rebrand it. They can basically make a completely commercial version of it off of that.
Right. Right. And that's exactly what they've done. I mean, that's what we knew with Red Hat Enterprise Virtualization. That's what, you know, Wind River's done with their product. They can take that. They are not, it's a permissive license. They're not required to, you know, push anything back upstream.
Well, I thought Red Hat was pushing more up. We're a little more open with their implementation. This is not as a slight against anyone using this.
So, why would someone consider, say, a home user who's playing with virtualization stuff? Why might a home user consider using something like over, over, say, vagrant?
So, like, I use overt at home for a couple of reasons. So, one, I've got, like, I've got the obligatory Windows machine at home because it's just a couple of apps that I just really need to have and I've got to have it, but I just have a virtual machine.
So, there's that. But then I also use it to manage, you know, I've got a file server that's running own cloud for the house.
So, all my kids can put all their file systems in there. And I've got a, you know, a firewall server running in there too that kind of helps lock things down.
So, that's, you know, if you need multiple services and you want to do it across, you know, multiple virtual machines, that is one way a home user could do it.
All right. And just in case people know, I don't know, vagrant, vagrant is a tool that went at least originally started out, targeted virtual box as its VM, or its hypervisor back in.
And it was a tool that allowed you to script basically the creation of VMs. You could define the size, you know, informative throughout the networking, the networking hardware, disks.
So, you know, what kind of capabilities along these lines does Over and Author?
As far as creating VMs, I think that's an area where we're not quite as strong because the presumption of our model is that you've already built your VM already, like either through the command line or like through some smaller tool like BERT Manager, that said once you have a VM created, we have like templating tools and snapshotting tools in Over.
So, basically clone, you know, the machine that you've made and build on that. So, you don't have to do everything outside over and over and over again. You could build a few good models, get them in Over, and then, you know, snapshot and template them to your hearts content.
So, Over is not a tool I would use to say if I wanted to be able to generate 20 different types of VMs all at one time, I would use something else and then potentially pull those into Over's interface to manage them from there.
Correct. If you were making 20 different different instances of VMs, then yeah, you would want to try to do that through another tool. Or in some cases, our users are pulling, you know, they're migrating from something else and they're pulling them in that way. We have tools for that.
If you're creating 20 instances of the same VM, that's where Over can help you as well. And that helps you to scale out very quickly. But yeah, as far as like actually creating a VM, we do have some capabilities of tying into like for storage, like a glance repository, glances open stack storage, cloud storage system.
We can connect to something like that so you can have your VM sitting in a glance repository and import them easily from there and, you know, build them that way.
So there's multiple ways you can pull things in. But for actual VM creation, you know, typically people are doing that, you know, on their own, they're snapshotting existing machines or whatever and doing it that way.
All right. And what is over primarily written?
Can you repeat that?
What is overt primarily written in?
Okay, so we've got a lot of job in there, quite a bit of Python and quite a bit of C. Actually, the interesting thing this is why I laughed.
Over originally started as a proprietary piece of software. Not a lot of people know this, although it is public knowledge.
It was written in C sharp and dot net, and it was written for the Windows platform. And red and this was a company in Israel called Kumranat.
We have bought them in 2009, immediately rebranded it as red hat enterprise virtual.
Yeah, yeah, so rev and sold it that way. And that is the only time in red hats history that we were selling a Windows away proprietary product as a thing.
You had to have Windows run this. But meanwhile, we were doing this whole thing where we were converting.
If I'm interject here, I actually do remember that. And I remember red hat getting a lot of joking criticism to flat out flames for you bought a proprietary application.
Because unfortunately, either through perception or whatever, the message didn't come out that yes, we bought this Windows only tool.
But we bought the technology. And as some people like to call it the acchohyram where they had purchased the company in part for the talent to get their hands on this.
Because, you know, as we were saying, you know, overt is kind of a graphical front end for dealing with your infrastructure in the back end.
So they bought the team that created this infrastructure or this management technology. And they almost immediately started working on rebuilding that.
Exactly. And that's the great part of this story from like 2009 to 2011. Basically, the part of the code that was actually called over went completely dark.
And they spent two years converting all of that dot net code into more of a Java based and Python based set up modules that could be used and properly implemented as open source technology.
And that talent that you talked about, I mean, some of the people at Coomranet were directly involved in vetting the KVM hypervisor.
So certainly that was a big deal and having that talent. And they they went under they underwent a great cultural shift where now the people at Coomranet and they're so mostly based in artillery offices are some of the most outstanding proponents of open source technology and technology.
And community building that I've ever seen and they really do a great job. They sincerely believe in building community.
They want more people to come in the overt and be a part of our community. It's not just going to be a red hat only project. We want it to be as diverse as possible.
And so it was a really good turnaround.
Now you mentioned Java and I I feel like I need to ask, do they does this require Oracle Java to run or will this run on the open implement implementation of Java?
It'll run on the open implementation.
So zero problems. You can grab whatever you're, you know, if you were say a Fedora user, the open Java chips, you're in good shape.
Yes, yes. That's that's not an issue. Occasionally sometimes our defendants on Java, something might, you know, every once in a while we might have to hold off and, you know, like not move like right now.
People are wondering why we're not, you know, moving to Fedora 21. Well, because we're using the job of this in Fedora and we want to stick with that.
We did recently, you know, shipped our support from CentOS 6 and the whole EL6 family over the EL7. So now we do CentOS 7, scientific Linux 7, REL7.
So we did that. We actually did that amid cycle because a lot of people wanted it.
And a lot of that is contingent upon the job and it's being used and keeping, you know, synchronized with that.
But yes, to answer your question, we do use the open Java implementation because it's not Oracle.
So what is the community around overt like?
So the community is really, there's a couple, there's two things I like about this community.
One is it's, it's very supportive of users in terms of if you have a question or a problem, you come to our user mailing list, you come to our IRC channel,
documentation on the website, which needs to be improved like every other documentation piece.
But you can come there and get what you need as an answer. On the flip side of that, you know, we are, you know, if I look at the numbers of who's contributing.
Yes, we have contributions that are great from HP and IBM and other companies that have contributed and improved overt.
But in terms of numbers, you know, I would like to see a much more diverse community in terms of non-red hat people.
And so with that, you know, it's not like we're a exclusive club.
And we need to, that's one of my main goals as community liaison is to improve that diversity and get more people involved in over.
And that's getting the word out that it's even there, getting the word out that we're, you know, everybody's welcome to come to the table and contribute what they want.
We're excited because we're working.
There's some work going on in LibBert now, incorporating Zen technology.
And if that continues and if it keeps going in the trajectory that we want, you may see overt supporting Zen machines.
And so we're talking to people a little bit about that and seeing what we can come up with there.
Now, you've mentioned LibBert more than a few times here. Could you explain what LibBert is and why it's important?
So LibBert sits in a layer between the KVM hypervisor and tools like overt, also like individual VM tools like Bert Manager.
And LibBert is very much the set of libraries and I'm hugely over explaining this, which is bad because my boss is the main LibBert maintainer.
But, you know, my understanding is that is set of libraries that enables best practice communication between the VMs and the KVM hypervisor underneath and allows us to fully get the resources of the host machine.
So, would it be fair to say it's kind of an abstraction layer between your hypervisor and your graphical front end?
Yeah, that's a very good way of putting it. I mean, not just graphics, but all the other resources that goes along with the hardware.
Yes, that's a very good way of saying it.
Now, besides just KVM, what else does LibBert support? Because I thought at one time and maybe I'm hugely mistaken here that LibBert had support for some even cloud providers like AWS.
Maybe I'm mistaken and that was something else, but now you're not mistaken at all. So LibBert is being used by a lot of different tools.
I mean, LibBert is also part of the open stack cloud system. And I'm not sure about AWS. I'm fairly sure that it's also kind of cloud stack is definitely very interested in it because they're also curious about it.
It's a really great set of tools, but I don't want to say AWS, you could be right. I'm not sure. I don't want to say the wrong thing though, but yeah.
So, if nothing else, if a company had a hypervisor technology they were providing, whether it be an on-premise solution, a cloud solution, a hybrid solution,
they could contribute to the LibBert project. And if they really, really wanted to keep their proprietary hypervisor close, they could support LibBert to enable people to be able to interact with these things in a more programmatic way.
Yeah, I believe if that situation were to arise, yes, they can do that. They can push things into the LibBert upstream. I'm not 100% sure. I think LibBert is releasing into the GPL model.
So, if they're using LibBert making changes on their downstream, they're going to have to push it up to the main LibBert trunk. So, there's that.
But yeah, that situation described as certainly possible. I'm not personally aware of anybody who's doing that. Most of the work that I'm aware of is out in the open.
All right. And at this point, would you say there, or is there anything you think I've missed or lost over that you would like the hacker public radio audience to know about overt?
No, I think, yeah, I think we've covered about pretty much the highlights where we're growing. We've got a lot of growing user base. We're working on the diversity issue. We're excited about moving forward.
Let me ask real quick, when you say diversity issue, what can you clarify that because diversity is well a very diverse term.
Yeah, exactly. So, in my case in this context, when I refer to diversity, I'm referring to not gender or race. I'm referring to people who are working on the project who are not red hat.
Because right now, the ratio of red hat to non-red hat contributors is very biased towards the red hat side. And that's, you know, that's not good as an open source project. We need to have more non-red hat participants and that's something we're working on.
And let me pose this question to you and get your thoughts feedback on this. Perhaps it's just a perception issue because overt was purchased by red hat.
They may have granted created as a GPL. Perhaps there's this misconception that people would have a hard time getting their code. If they, you know, weren't right, Apache, getting their code into the mainstream.
Yeah, I wish that were the case. Unfortunately, we have public stats. If you go to overt.org slash stats, we have a community dashboard up there. And you can see very clearly our demographic model of who's contributing and what company you're coming from.
And so, you know, it's a very real issue. And also, too, one of the things that makes it difficult is overt itself. There's a steep learning curve on this code. There are a lot of sub-projects inside overt, like managing the hypervisor, managing the scheduling, managing the imaging layers.
That's all really complicated stuff. So if you're a new hacker coming in, we want you to come in, but we also recognize we've got to do a better job of making it easier for outside people coming in. But it's right now the learning curve is really, really steep.
So, as the question is there perhaps a chance, there's more the overt project needs to do to get ready to accept more outside contributors.
Absolutely. And that is, that is probably, you know, I said my main goal was increasing that red hat, non-red hat diversity. And the way I'm going to do it is to basically lower the barrier to entry to make it very easy for contributing.
So, come on board and start working within the project on whatever they want to do, whether it be coding, testing, looking for people to help volunteer on a continuous integration side and work with our Garrett and Jenkins tool sets that we use to do the code.
But we got to make that known and document it to the point where it's not that hard for people to come on board and start jumping in.
Now, if people were interested in trying to get involved with the overt project, what kind of, what areas could you people use help in the most?
Well, I already mentioned one which was like our infrastructure team is really looking for people who like to volunteer and help out with continuous integration and helping us do testing as well of code and doing QA work.
If people want to do that, I, for my part, will be willing to work with anybody who want to help with documentation. Our storage team, you know, we integrate with cluster quite a bit.
And we, you know, we've got things smoothed out over there. But now red hats working heavily with Seth and block storage land. And now we've got that all that integration to do.
So, anybody interested in that field would be very welcome as well.
And where should someone go to find more about overt to learn where things are and where to go to get involved with the project?
I think the best place, well, okay, so to find out more about overt, you know, people are encouraged to come to the website, come to overt.org.
We have, you know, versions that you can try to download. We even have a live USB version where you can download it, put it on a USB stick, move to the stick and just basically try out the interface in the platform live without installing anything.
So, this USB image you're talking about, it'll boot up a full graphical environment, bring up, you know, web browser with the interface and with KVM already running in the background.
Right, it's basically on Sento S7. And it basically auto installs are all in one because there's different ways of doing, you can do like this big all in one package for over or you can do something small like a just a node, which is a really hype, you know, just something that runs the hypervisor not much else.
But this would auto install your all in one and give you everything you need and walk you through and then you use the browser in the live USB, you know, environment and go in and look and play around with overt.
And if people want to contact you directly for more, for any more questions, comments or information they want, where, where's the best place to do that?
Okay, so if you want to contact me personally, my email address is bkp at redhat.com. Also, as I mentioned earlier, our user mailing list is very, very active.
And so if they go to users at overt.org and pose a question there or reach out there for more information or specific ways that they can help, that's certainly another good way of doing that.
Yeah, because it's certainly very active.
And just one question I was asked specifically to ask everyone I could, what is your preferred text editor?
My preferred text editor is Emax.
So, ladies and gentlemen, you heard it here, this man likes to boot into an operating system, did it a text file?
Yep.
And so, and the reason I make that joke is I actually ran across someone had done a how to, on how to get a system to boot up where Emax, they did one that was a version with Emax, one that was a version with VIM, where it was like P, where Emax or VIM were PID1.
Right, right. And I know, I know all the jokes and foibles of Emax. I really got into it when I was working on Linux today because I did a lot of text to HTML conversion.
And I, a friend of mine, built some really great scripts to do that. And since then, I've been really hooked on Emax. And it's scripting capabilities. So, I'm just stick with it.
Well, this has been Lord Drachenblut with Brian Profit of the Overt project here at scale 13x.
You've been listening to Hacker Public Radio at Hacker Public Radio dot org.
We are a community podcast network that releases shows every weekday, Monday through Friday. Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the Infonomicon Computer Club. And it's part of the binary revolution at www.bimrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise status, today's show is released on the Creative Commons, Attribution, Share a Life, 3.0 license.
www.bimrev.com
