Episode: 542
Title: HPR0542: Little Bit of Python Episode 8
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0542/hpr0542.mp3
Transcribed: 2025-10-07 22:48:42

---

MUSIC
Hello there and welcome to a little bit of Python, episode 8.
Saturday morning's keynote speaker at Python this year was Mark Shuttleworth of Canonical.
Mark was kind enough to agree to an interview and we thought you'd be interested in hearing what he had to say.
So you're managing a company that's growing fairly rapidly for the open source world.
You're trying now or you're seeing our reduction in complexity of the products that you're trying to build
or a reduction in the rate of increase.
So they have different things in complexity?
Yes, okay.
So what about your early career?
You came to view, I think, through your development of certificate-based software and thought.
That's right.
Thought was my first business.
It was a tremendously lucky, right time, right place kind of experience.
I can't attribute its success to any great brilliance or clarity of technological or mathematical insight.
But I was really interested in doing this opening up the commerce on the web to a global participation.
It was very centered around the U.S.
And one of the key blockers and barriers to setting up commercial sites outside of the U.S.
was access to digital certificates and quality authentication.
And thought really sort of specialized in doing that on a distributed basis around the world,
which met a very particular need.
And it was just very fortunate the way it worked out.
And you were a very early Python adopter.
You were using Python from the University days, yeah.
I remember scrolling through Compt.Lang.Star and Python sort of caught my eye.
And you know, that was quickly followed up by reading something that reinforced that.
And so I died into it. I was using yes, always two at the time.
And there was a Python build for it and it just became an interesting.
It just felt like it was at the right stack of the right level of the stack in terms of being able to do rapid prototyping for web work.
Sure.
Right.
Do you have any involvement in what we've thought since the sale to Versailles?
No, very little.
I think Versailles has conducted themselves very well in handling the brand and the company.
I'm glad that they kept it as an individual brand.
And that market has continued to sort of very rapidly grow with new entrances and so on.
So it's become, it's become, you know, something that really required sort of fairly deep industrial experience that I didn't have.
Yeah, right.
So you've, you've had to make the transition from being, would you have considered yourself as a software engineer earlier on in your career or just a programmer or?
I've never been a great anything.
You know, I've never been a brilliant programmer and all of I've been a brilliant administrator or brilliant anything else.
You know, I don't know.
I try to glue things together.
I try to glue ideas together and people together and say, here's interesting stuff that's going on.
It's connected to this other interesting stuff that's going on and make it work.
So more of a builder of connections than?
Yeah, a builder of communities and competence.
Yeah.
Okay. Good.
Fine.
So we were talking on the, on the way here about your trip to the space station.
That was 2002.
Yeah.
It feels like yesterday, but I guess it was really eight years ago.
So the experience stays with you then.
Yeah, very much so.
Although I think it becomes, it becomes stylized in one's memory.
You know, it's a bit like a dream.
You start to remember more vividly the pieces that you've talked about.
Yeah.
And so eventually you start to wonder whether, you know, you remember what the way you described it or whether you're,
whether you really remember it better.
Yeah, the story becomes the truth.
But how do you think it's changed your perspective on, on life down here?
I think most of that side to globe looking down.
So there's a very real sense of being removed from, removed from the earth in humanity.
You know, you have this cold sense of distance.
Everything, everything that people have done with them to and for each other.
Has happened in this tiny little biofilm.
You know, this thin little layer.
When you see the planet, you see just how thin the atmosphere is around it.
You know, it's a moon viscous.
It's not a layer.
You know what I mean?
It's a, it's a film.
It's a film skin.
Yeah.
And it, you know, protects us from all the harshness of space and sustains us.
And we do much in return.
And when you see that, you see how kind of close and connected everything is.
It does tend to make one want to find projects that will have a global impact.
And so, you know, in thinking what to do next, there were several options.
And Ubuntu was sort of the scariest, but it was also the one that had the best results.
If, you know, for me and for everybody, if I could put it off.
So I'll tell you in 10 years time, whether it was a good idea or not.
And so has, has Ubuntu been the success you thought it would be?
Or did you go into the project wanting to take a Ubuntu in a particular direction?
Or did you just have the desire to see it as an economic growth?
This gut feel that we could do platforms better.
That open source allowed us to, if we really set free software free,
which the existing sort of incumbent hadn't and still haven't done.
It could become a truly revolutionary force in technology.
I certainly believe that too.
And I think Ivan is one of the particular technologies which is poised to do that somewhere.
I agree.
And so there's a question of figuring out, you know, what does that mean?
What does it mean to set free software free and to do it the right way?
And in every sort of change, I think people tend to view it initially
through the filter of what went before.
And then later, you know, it's true nature becomes revealed.
If I think of the web, you know, we spent a long time making online brochures effectively.
Yes.
Applying, trying to apply various traditional media experiences, print or movie or TV to the web.
And they don't really fit.
And then you get the second generation, the second wave of people who kind of grew up with it
and say, well, why are we putting it into the strange box?
You know, the web is the web.
It's not those other mediums.
And so then you get that second wave of goodness.
But it takes, sort of, takes a fresh eye.
And I think the same is true with open source.
Open source kind of broke out into the real world as opposed to the dream world.
Where you're unconstrained by operational reality.
Kind of broke out in the thick of the internet and the move to, you know, the drive for
Unix performance at Wintel prices.
And so what most of the early companies who were doing Linux did was dress it up like proprietary software.
You know, it came in a box with a sticker price and there was a phone line that you could call.
But that's not, it's real nature.
It's real nature as it is an intrinsically collaborative thing.
And so I think we should be focused on things that we can do differently, not the things that we can do the same.
Yes, trying to emulate the traditional corporate philosophy.
So time-based releases to me are a brilliant example of stuff that we can do that the proprietary software will just very unlikely to adopt.
And delivers huge benefits to end users.
They're unlikely to adopt it because they tie very strongly, their revenues tie very strongly to upgrades,
which are tied very strongly to features.
So the balance of the debate is very heavy skew too.
We must get this feature into this release and therefore the release will slip and therefore we can't do that.
Because we're so driven by being able to justify the price of the upgrade in terms of features.
Whereas in the free software world, we can say, you know, we release it on time and we release it at high quality and we achieve both of those.
And we're sorry.
We don't know what this feature is.
Right exactly.
But it will be another one long in half an hour.
Right.
And you'll be able to get it with a simple upgrade and we'll make that upgrade predictable and reliable.
So you'll do it with confidence and everybody wins.
It's the sort of thing that we can do that the proprietary software world would never do.
And so it's the sort of thing that catches my attention as leading it free software to be free.
Yeah.
Okay.
Well, such a reply, Colin.
And since I have seen announcements that the commitle are hiring, have you got anything you'd like to say to potential employees?
Sure.
I think if you want to be part of the breakout of free software to the broader world and to do that in a way which really keeps the ecosystem open and moves things forward.
I think canonical is a great place to be.
And we have a diversity of teams, some of whom are dive, you know, essentially who's specializing, integrating and adding a level of polish and connectedness to other people software, which is a real skill and discipline in its own right.
The platform team they build up into.
We also have other teams that do kind of deep software development either.
We're based or service oriented, you know, network servers or clients, clients side, you know, with our new desktop environments and things like that.
So it seems to me that people, people love, love the experience of working there.
It is, there are challenges that you know, distributed working isn't for everybody.
And it takes a certain level of personal, you know, you've got to love the problem.
Yeah, exactly.
You've got to love the problem.
So you show up to the call face to attack the problem every day.
Yeah.
Well, roll up the sleeves and attack it when you figure.
When I was a kid, I got a lot of help from people who knew about the subject.
So I was interested in like chemistry and electronics and so on.
What were your influences as a child that made you?
So it's called computing.
Yeah, I was very interested in science and technology.
And it's very lucky to have a series of teachers that kind of supported and encouraged that.
And let me, let me run live with it.
My folks did a cunning thing.
They sort of arranged for me not to be allowed to do computer science at high school.
Yeah.
Which sort of had this built up, this pent up demand.
So I kind of came out of the, came out of the gates into university, you know.
Gagging, gagging to code.
Yeah, really.
And so although I signed up for a communist degree, I kind of threw myself into that.
Yeah.
And embraced the, embraced the internet very early and just had a lot of fun with it.
Since most of our listeners will be the Python users.
What's the last piece of Python you actually wrote?
Oh, just this weekend I started working up something in the pie game.
And I'd like to bring a bit of I open GL into it as well.
But essentially I'm mocking up a bit of desktop user experience.
I threw a new kind of way to interact with the applications that are running on the system at a given time.
I just sort of be fun to try and mock it up with by game.
And how did that go?
Did you find you could use by game to put it together quite quickly?
Yeah, I got the sort of static bit up.
Next weekend I guess I'll have a stand at the various interactions and so on.
So you've done the easy bits and the rest is waiting for you?
Yeah, it's all easy.
It just takes learning and time.
Yeah, I'm patient.
So where from here you'll be leaving Atlanta today?
Tonight back to the UK and then onwards.
OK, well thanks very much for coming to talk with us Mark and to give the keynote speech.
It's been great talking with you and I hope we'll have you back at Python again soon.
Thanks for the role that you play in keeping the Python community vibrant.
Thank you very much.
This has been a little bit of Python Episode 8 featuring Steve Holden interviewing Mark Shuttleworth of Canonicon.
Our theme music is Track 11 from the Headroom Projects Album Haifa available on the Magnetune label.
Please send all your comments and suggestions to the email address all at www.bittipython.com.
Until next time.
Have a good time.
Thank you for listening to Haifa Public Radio.
HPR is sponsored by Carol.net.
So head on over to C-A-R-O dot E-C for all of us in need.
Thank you very much.
