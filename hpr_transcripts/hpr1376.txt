Episode: 1376
Title: HPR1376: How Should We Then Teach the Art of Computing?
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1376/hpr1376.mp3
Transcribed: 2025-10-18 00:27:23

---

Everyone, this is Clack 2 and this is Harker Public Radio.
In this episode I'd like to discuss a little bit about the idea of education and open
source, the impetus for this episode was that I was speaking with a few people about
what public schools and private schools, but the focus of the conversation I think was
public.
No, that's not true.
It's actually private.
So, yeah, both of those things, what those schools should promote in terms of what
they're teaching.
And one of the arguments that came up was that it's a good idea to teach people what
realistically they are going to encounter in the real world, the workforce and so on.
There's a good argument for that.
I mean, it's almost, I dare say, obvious.
I mean, it's almost, you sound crazy if you have an argument against it.
It's just kind of that makes sense, right?
You are teaching people things and the, I guess, the realistic sort of most obvious goal
of education, if you think about it, would be for people to end up getting jobs in the
real world.
And that does, like I say, there's a huge argument for that.
That makes sense.
So, if you're teaching someone how to use an office application or a graphic editing application
or whatever, a whole operating system, then the obvious choice would be whatever is the
most prevalent on the outside world.
That's a good idea, right?
And in some ways, it does seem like it would be a good idea that you wouldn't want to argue
against.
If that's what education is going to provide for people, then that's a valuable service.
Getting people into a secure job so that they can eat and pay rent and things like that
is a good goal.
The problem, I think, with this idea is, well, there are a couple of problems actually,
in my mind.
The first of all, it's very defeatist.
You're kind of saying education will therefore never pave the way.
It will always sort of trail behind whatever happens to be the going trend.
And by that logic, you could also say it was a very good idea to teach and promote military
service to people so that they could possibly get into that, because there's a valid career
path as well.
You're kind of going different directions with that, and it's very much not taking the
lead on anything, which granted, I'm not sure that everyone would see a problem with
that.
I mean, that may not be an objectionable thing for some people.
If you're not trying to be an institution that paves the way that sort of forges ahead
in new directions and teaches people new things and tries to, I guess, change the world as
cliche as that phrase may be through the people that you're educating, then maybe that's
not such a big deal.
Maybe you're okay with that.
So that is one thing that, me personally, I'm not okay with.
I think that education should be a little bit more progressive, not everyone does.
But that's one thing that I thought about that I didn't really, you know, it didn't quite
sit right with me.
Another problem I have with the idea of just teaching people whatever happens to be the
going thing is that it's very, very finite.
And I realize that there are a lot of things out there in the computing world that really
seem like they're never going to go away.
You know, there are some institutions or some companies that simply you just cannot imagine
them ever leaving the landscape of computing.
And this may be true, but you can talk to a lot of people who've been in computing for
a very long time and ask them if they've got any kind of prior, prior instance of that
phrase, oh, this will always be there.
Having turned out to be incorrect, actually, it's not always going to be there.
Actually this company is going to be displaced.
Actually this company is, this product is going to be discontinued or it's just going
to fall out of favor.
I mean, there are a lot of prior examples where that may happen.
I mean, I think probably a lot of people would have said that about IBM as the, you know,
the Microsoft vehicle, that was something that, I mean, for a long time, it was sort
of Mac versus IBM.
And people would say, well, do you have a Mac or an IBM?
And IBM was kind of like a Xerox or a Kleenex, you know, it was this term that just meant
anything running MS-DOS.
And so you might have, I don't know, I don't really know what else was out then like
it, whatever, an older computer that wasn't an IBM, you know, it was an IBM clone.
And then it became later, it became a lot more diverse in the market.
So that was one example.
There was of course in the print and publishing world for a very, very, very long time, there
was a program called Quark Express.
And this was a page layout program that people in the publishing industry would have never
given up.
It was the, it was the tool that they needed that Quark Express would never go away.
And it's still, I think it still exists, but nowhere near as prominent and kind of must
have an important and significant as it used to be due to Adobe InDesign having sort of
swooped in and taken a lot of their market.
So there was that.
There were more, most recently, and very close to my industry, there was of course Final
Cut Pro, which, well, before that, there was Abbott, Abbott was the video editing platform.
There was no other video editing platform, but Abbott and then Final Cut Pro moved in,
displaced Abbott.
And now Final Cut Pro 10 has come in and displaced Final Cut Pro itself.
So it's, it's a lot of, you know, there are a lot of stalwarts that we kind of assume
and really, really believe, like in our heart of hearts, we believe these things will never
go away.
It's ridiculous to say that they're ever going to go anywhere.
And yet that doesn't happen.
That's not the, that's not the trend.
That's not the example that we've seen.
And we kind of need, I think, wake up to, to that idea that things in computing, you know,
may, we say that computers themselves don't last for very long.
And I think just because of that reference point we think will software certainly does,
because this package, this office package, or this graphic package, or whatever, has
been around for so long, it's been through generations and generations of computers.
So it'll never go away.
It's here to stay.
And it turns out that a lot of times that's just not the case.
There are, there are things that fade and things that come in and, and that's that.
And my point is that if we're teaching students one thing, one software package, then we're,
we're, essentially, we're, we're doing two things.
We're, we're teaching them, assuming in kind of the assumption that when they get out
of school, that's the software that they're going to encounter in the real world.
It was, so we're assuming that it's going to still be around, which, which again, in
my industry, especially that has, has absolutely failed a whole generation, you know, a whole
set of four-year college students have basically been set up for complete and utter failure,
or not complete and utter failure, but like a complete and utter surprise and, and some
amount of failure.
So it's that they get out of school, they've taken all these courses on one editing thing
and suddenly they get out and they find that that one editing thing that they were told
that, that is the industry was not the industry.
And in fact, it's not even in the industry anymore.
Well, it is, but I mean, it's, it's, it's on its way out now because it's been discontinued.
So yeah, big, big surprise there and there was no diversity in education.
So that kind of leads me to the point, as a, as someone who is involved, you know, sometimes
a lot, sometimes a little in, in education, to think that at least at the very least diversity
is required in education.
So when you're teaching people software, when you're teaching people computer thing,
this diversity is, is really, really significant because the, the fact is that if you're, if
you're telling, if you're, if you're painting this picture, this world view for people that
everything is one, you know, it's, it's run on this platform with this software package
and there's no variation there.
Then if they're that student to go get that job where they don't use that platform and
they don't use that, that whatever software package, then they are, I guess at a disadvantage
or, I mean, if you don't want to say it's a disadvantage, then certainly the past, you
know, four years or however long they've been trained on this thing has, has sort of been
a waste of time to some degree.
I mean, it might not be for their next, next job or it may, it might be certainly I don't
recall any kind of education, computer education in my own schooling history that really has
ever served me well at all.
It was all basically useless and the most computer education I've ever gotten was sitting
at home messing around with computers.
I think there's a lot of wasted time in the really, really poor quality of computer
education as it is simply because it is focusing on this false world view of this is exactly
what you're going to find in the real world.
You have to learn this stuff.
If you don't, you're going to be at this advantage and it turns out that you're learning
something that you might not encounter or you that you might not need or that has changed
drastically by the time you get out in order to use it anyway.
Two other arguments, I think, for this open source thing that we should analyze.
First, the obvious and kind of crude, well, we're teaching people things that they really
don't have access to and that, I think a lot of Linux and open source enthusiasts are
hyper-sensitive, I should say potentially hyper-sensitive to this issue in a way because
I mean, there's this sort of fear I think that we're going to go outside someday and see
all these young, starving children out on the streets begging for copies of Photoshop
and MS Office and whatever, and a computer, you know, that they're just not going to
have access to a computer and honestly, in my personal experience, I haven't really
encountered that too much.
I tend to find that people end up having access to computers if they need access to computers.
They end up obtaining copies of MS Office if they want MS Office or Photoshop if they
want Photoshop or whatever.
It's, that's just kind of the reality.
The people are smart enough now, they know about the wears sites, they know how to get copies
of things that they need that that happens.
Now, whether or not we should be encouraging that in schools is completely different question.
Yes?
I mean, this is the problem in a capitalist society where we're saying, okay, this
this thing you cannot have unless you pay a certain amount of money and if you do try
to get it, then you're breaking the law, then if, and then for teaching people these skills
that are 100% dependent upon this product that you have to buy, then I really don't see
how that is something that we should be teaching people at all.
I don't understand how that's a valid thing in education.
I don't know about you, but in my couple of years of high school, I was never for
instance given driving lessons for free.
You had to learn driving from someone that you knew or you had to pay for driving lessons
from a driving school in your area.
There were no free driving classes in high school and I'm assuming part of that reason is
because they don't feel like that's something that everyone necessarily has access to right
away or maybe they just don't feel that that's their, that that's their territory to teach
people, but then why is computing their territory?
Because certainly in the real world you're going to probably need transportation just as
much as you're going to need the ability to write a business letter or a resume.
So I kind of have a strong philosophical objection to teaching people things that they will
not have access to by default, whereas obviously the well known argument is that everyone
will have access to Linux because they can put it on any computer that they find in the
dumpster for free and then they will have access to Libre or open office because it's free
and then they will have access to GIMP and all these other applications that that we're
not teaching them, but but it is there.
And I think I think that the the difference and unfortunately I have not found a graceful
way to to communicate this to people in in real life because it's usually too much talking
but I mean the difference isn't isn't that one you just don't have access to to a proprietary
software versus you have access on open source is that you have legal and you you can
promoteable you know non liable access to to open source software.
In other words as a school system if you are promoting proprietary software you are
probably whether you know it or not promoting piracy and I mean I don't really believe
in the concept of piracy but I will if it means that people are going to be persecuted
for it non-stop and that's that is what happens right I mean don't even get me started
on on piracy and and how absurd it is that Adobe and all these other companies even even
put forth a famed effort to prevent you from getting their software when it's obvious
that using their software is great marketing for them and and probably results in huge
corporate sales later but I won't get started on that because it's not worth talking
about in this episode.
So that's that's a thing there's there's there's this whether or not we're going to promote
people to go out and illegally obtain software and and and if we're teaching the software
and if we're saying this is how you get stuff done in the real world oh by the way it
costs hundreds of dollars then we're telling people that they need to go out and get it
for zero dollars because that's what they're going to do and don't tell me that you have
any friends with legitimate copies of of half of these software applications because you
don't or least I don't and you probably don't either because why would you people don't
purchase these things they're expensive they're not quite worth the amount of money that
they're going to spend on and there are alternatives out there whether it's just online
or or or whether it's the free stuff that you and I maybe use anyway I mean it's just
people don't have paid for copies paid copies of these software packages and yet these
are the software packages being taught in school so it doesn't it doesn't add up it
there's a disc there's a disconnect there a little bit of incongruity there why are we
teaching this stuff when the only realistic way that people are going to get them is by
stealing it and realistically a lot of them are going to bother because it's just not
that it's not worth the trouble so there's that and then the well-known that I think possibly
the other most well-known argument that I encounter when speaking about these things within
the open source community is that and it's almost it's so well-known it's kind of so so
so often repeated that I almost started thinking it was a cliche or kind of a buzz buzz phrase
is that a word buzz phrase instead of buzz word and and the idea is that oh if you teach
open software you teach the you know the concept and if you teach proprietary software you teach
the the that that title that software title let's say if you teach open source you teach
software if you teach proprietary you teach a brand I don't know it's it's not really
working for me but you heard it before right the idea that somehow magically by teaching
open source alternatives you're teaching people how to use computers you're teaching people
how to use all office applications or all video editing applications or all graphic editing
applications and somehow if you're teaching people specifically how to teach MS office or
Photoshop or or Final Cut or whatever then you're only teaching them how to use MS office or
Final Cut or Photoshop or whatever couple of things about this first of all that's a red it's
kind of a ridiculous statement right I mean it doesn't make any sense it sounds like it sounds
fake it sounds like that's why I choose I mean that's just what I how I choose to see the world
I've made this decision and so I'm making this declaration I mean why would that be right I mean
if we teach if we if we abolished all Microsoft Office education and established LibreOffice
education then then people are learning LibreOffice instead of Microsoft Office and when they get
to Microsoft Office in the real world they'll be just as confused about how to use it because the
places are in different menus and things are the things are in different menus and different
places and the buttons and stuff so it doesn't make any sense until you start really really thinking
about it and here's what you're thinking about first of all by teaching open source you're very you
would be very rarely necessarily teaching only one application you would have the the flexibility to
teach different applications whether or not that's actually useful I don't know because um I
certainly I don't think that that you can become an expert on something by being taught five
different examples of that thing but then again are we trying to teach people to become experts at
anything or are we trying to give them a nice sampling of everything that they might encounter in
the world and and frankly I think that at that at the at the stage of most educational institutions
if you're in an educational institution unless you're in a very advanced courses you're not
becoming an expert on anything you're becoming familiar with with something possibly with a
couple of different things and I think that is valuable I I I wouldn't say that I was just a
drop-in thing that we could just all of a sudden do because lesson plans would have to change
dramatically and I would really not want to teach a class where in the first week I'm teaching
them Abbey word and in the second week I'm teaching them Libre and then in the third week I'm
teaching the Microsoft and then in the fourth week I'm teaching them I don't know something else
I mean that would just be insane so you would have to look at at the at the progression of of
of all these different kinds of lessons but but would it be useful to to to do a course called
word processing and have a lot of different options available not options but a lot of different
solutions available that people would need to become familiar with so that instead of being taught
this is how to do a business resume which is going to probably change by the time you're out of
school anyway and and the style and kind of the the accepted thing that you put on resumes is
going to alter anyway instead of teaching that sort of thing and teach them this is what you do
when you open up a word processor this is this should be your thought process here's how to figure
out where to go from starting the application and staring at a blank piece of paper here's what
you should think about here's the workflow that's a significant difference and that's not what's
being taught right now whether or not that relies upon it being open source or not probably not
you could teach the exact same style of lessons with proprietary software but then we go back to
well what are you promoting here you're promoting stealing the proprietary software since probably
realistically all the students are not going to have access to that so I think it's more realistic
to teach yeah the kinds of applications rather than the specific applications wouldn't wouldn't
say take out your MS office class and drop in a Libre office class because I don't think that would
serve anyone any better than they would just know a different set of menus and they'd still be
just as clueless whenever they open up anything else other than the exact same version that they
taught that they got taught on in school and that's that's not useful another side of this coin or
or maybe maybe to take it even further maybe it's the same side of the coin but we're going
further with it is this thing that I have recently come to realize and that has been that me
myself I have been called upon multiple times in my life to help people learn software or to help
people bug test or not you they don't call it bug testing but to fix problems that they're encountering
in in their software a lot of times I mean like very frequently my entire life and probably yours
to if you're listening to this you're probably a geek you're probably geeky enough to be
that computer person in your family and in your circle of friends where people come to you and
ask for help and it's really bizarre that that every time someone has come to come for help to me
I I frequently have to tell them look I've never used this software before or I've I've used this
software for a total of 10 minutes in my entire life I am not an expert I'm not the person you want
helping you fix your problem and and actually I'm wrong I am the person they want me help they
want helping them on their software and and it's almost invariably I can't think of a time
there may have been at the time here or there but I can't think of it off the top of my head
and this is probably very similar for you but they're I cannot think of a time when someone's come
to me for help on software and I had to actually turn them away because I couldn't fix their problem
and that's really bizarre when you think that when you realize that on on a lot of these in a lot
of these situations it's been software that me I have personally never used I have sat down in
front of software that I have never used and I've taught that software to people or I've fixed
I've helped them fix problems in their in their project on software that I've never used or that
I've only used you know for like literally like 15 minutes or 30 minutes just kind of looking at
it for for fun one day and that that's been very consistent I mean sure there have been software
applications that I that I know very very very well and I've been able to help people but I'm
talking about the stuff that I've got no exposure to they just come down and sit in front of me and
just demand that I'm going to help them and and there's no amount of but I don't know this software
but I don't know this operating system whatever there's no amount of convincing I'm going to be able to
do to get them to leave me alone finally I help them and I solve their problem it's there has been
a little bit surreal sometimes because there's that self doubt you know you sit down you're like this
is gonna be a disaster I've never used this thing before I'm gonna I am not going to be able to help
them at all and then it by the end of the session you've changed their life and of course you know
bizarrely side side bar here bizarrely you know it's it's funny how geeks we geeks we're so smart
right we're so we're life changing we're smart we deserve such a lot and and praise after we fix
their problem and the minute we start saying well you really ought to learn such and such you
really ought to check out you know this open source alternative you should you should check out
this thing you should back up your data you know all these other like really practical ideas we
have they're nonsense what are we talking about we don't know what we're talking about we're geeks
we're we're crazy we we have we have no connection to the real world but then when we help them
save their project or save their data or whatever we do we're we're we're paramount to to godliness
but but everything else we say is nonsense open source backup whatever that's all that good
advice that's nothing but anyway that was a sidebar back to the point so in in your life and in
my life probably or in my life certainly and probably in your life there have been times where
people have said okay help me with this software you're going to help me fix it and you do you don't
know how you did it but you did it you you figured it out for them you can't explain it and I think
the reason for that is is because whatever happened in our lives as youths we we trained ourselves
on computers not on a specific software application but on the idea and the workflow and sort
of the the the the the mind sets the the way of of computing the art of computing and that is of
course what a school really should be teaching because more than anything what people really need
to understand is that there are only you know there are only so many different ways of doing
essentially the same process over and over again it's not really that much of a mystery you know I mean
okay you've got a video project you need to consolidate or a multimedia project you need to
consolidate all your media and and keep all of those links in your multimedia project look at the
paths if the paths don't match what you if you the paths saved in your in your project file don't
match the paths on the actual computer then yes there are going to be there's going to be missing
media files and you need to correct those paths now all you need to do is figure out how to correct
those paths is there a built-in tool for that or or can you just do a quick set on the on the data
file probably not if it's proprietary but I mean you just need to kind of reverse whatever got screwed
up and and as long as the path is now matched then your project is fixed that's a real life
example from a recent disaster that I that I repaired on a software that I've never used before
but I mean there are plenty of others right there are so many different examples of of things that
people just seem to get so bewildered by how do I do this thing I don't know look for a button
with bullet points on it maybe that's how you make a bulleted list how do I do such and such I
don't know look around in the menus try to find your tab settings and that we're in your ruler
settings and change that or whatever the case may be that there are only as a couple of answers
for for pretty much every problem that exists or that arises on you know when you're using software
and and if schools were teaching that rather than again specific brand name software package titles
then people would know how to use a lot more again this doesn't necessarily require open source
to be involved you could always teach these principles like how to compute the art of computing let's
call it you you could always teach this to people using anything you could say here's an office
program it's proprietary you can buy it for this hundreds of dollars and here's how you should
approach you know when you launch it now you're looking at a blank screen now write your content
and then do the styling and then do this however you want to teach it you can do that and you can
you can tell them now children there are different office packages out there so you might not
always encounter Microsoft Office and then there'll be some awareness of that I think it would be
probably better to have a course on word processing like I said before and and show them a lot of
different packages so that they actually see yes there are different ways of implementing and
getting the same results and yes there are differences and yes you have to think outside the box
and really think about it and and I think this is why programming courses are so universally admired
in in education because within programming you can sit down and teach people I mean especially
if you're doing it right I mean you can teach them programming tricks but the minute they start
to deviate and come up with with brilliant ideas of their own they have to actually think of how
to implement those ideas you know I mean yes you've taught them what a for loop is or a do while
kind of loop a while loop I guess you can teach them these things you can teach them variables you
can teach them all these different things but and they can copy exactly what you've done on
on you on the projector screen with your computer but the minute they try something different the
minute they want their little sprite to fall into lava and die and rather than you know or have
health points rather than permadeath I mean then they suddenly have to think that out and they
have to think outside of the box from what you've taught them and and invent solutions and I think
that's that's what computing in general should be taught as there should be there you can't just be
here is exactly how to write a resume it's got to be here is here are the tools that you can use
to create new stuff so let's work together to come up with some project ideas and you figure out
how to get it done and now two weeks from now I'm going to swap the word processor out from under
you and give you a different one and you can think of some new things to do and come up with new
ways of accomplishing things and that's really really important so that's where I think computer
education such as it is in in some schools it's not even a thing at all but I mean that's where
computer education really really fails and and I really think the computer education these days
right now it's it really smacks of being some administrators half-hearted effort to just kind of
make sure that you know it's it there's an allowance there that's like yes we understand that
people should be aware that computers exist and yeah they should probably be able to write a resume
so let's let's let's nudge this solution towards them and that'll be that and it's it's not really
educating it's just making the motions of education and that's a real pity and it's a huge
disservice to people and it's it's producing people kids who are coming out of school who don't
know anything about computers and in this day and age I mean the cliche when I was starting to
teach the one or two classes that I teach the cliche was oh watch out for these kids coming into
your class they know everything about computers they know everything they'll they'll they'll blow you
away with their knowledge of computers and I was shocked shocked by the the lack of computer
experience and the just the lack of logic that that students would have I thought you guys are
college level kids and you don't know how to do really really simple computer tasks you you can't
even wrap your mind around why you would need to keep all of your your files consolidated for
for later for for archiving it later whatever so yeah it's it's not it's not serving anyone it's a
huge disservice to the people that that these think that these educational institutions are
claiming to to be educating so how does open source figure into it all again I think that open
source technology because it's exposed because it's open because it it is really really open like
you can look at code you can look at mailing lists discussing certain decisions I mean everything
is out in the open that encourages exploration and in computers exploration is really important
like I just said about the programming classes you know I mean part of the idea about computers
is that there are no you that there aren't just not that many set set ways that you have to do
things there are so many different ways to do things I mean there are certain tasks where yeah
there's only about five different varieties of of menus or buttons that they could possibly be
but in terms of like actually producing something new there are so many different ways to do
things and people should be encouraged to explore those ways and find find out how computing can
work for them rather than that rather than having it such that every time they sit down in front of
the computer it's a fight and for a lot of people that's exactly what it is it's a fight and they
can't make the computers do what they want and they can never think outside of the box enough to
to imagine some new way of making it happen open source also of course is available and that's
important you can promote proprietary software all you want you can say that hey that's what they're
gonna encounter in the real world hey it may or may not be I don't know how the future is going
to turn out but I don't think it's a if I don't think it's a valid excuse or valid reason to say
well that's just what's big right now so that's all we should ever teach that that doesn't make
any sense and besides that you're teaching stuff that people do not have legal access to which in
in some kind of extremist kind of lawyer way although I'm not a lawyer and this is not legal advice
that's probably makes that educational institution sort of and what do they call it an accomplice or
you know like an enabler you know that they're they're telling people hey we taught you this
package of software so you have to go get it and if you can't afford it right now there are ways
there are other ways to get it so that's not a good message to send I don't think uh the
open source stuff is freely available it's legally available people should be encouraged to seek
that out rather than to go steal stuff instead and yeah that might not be with the encounter in
the real world I mean it might be in the future I don't know but that might not be with the encounter
but again if we've educated them such that they are explorers of computers and and know how to
use computers like computerists then yes they can they can they will be able to learn the the
other software and and with the exception of a few very specialized classes I have yet to
witness someone coming out of school with real like solid ready for the real world knowledge
of even the most specialized software applications there might be some exceptions there and certainly
there are exceptions when you're talking about specialized software like where they've actually taken
three advanced courses just on this software package but I don't know in my experience so far
I have seen people who you know without that real world experience all they've got is an intro
to that software anyway it just doesn't matter it takes it takes real world every day usage of
software to really become an expert on on the way that most industries that I'm aware of actually
use that software I could give examples but it would be tedious so yeah I don't think that you're
I don't think we're really teaching people the the proprietary software anyway I mean not in a
useful way we're just kind of introducing them to these ideas and if that's all we're doing then
there's no reason really that we shouldn't swap out the open source alternatives because they're
not going to become experts on it and when they go into the real world and encounter some other
software package it's not going to be scary it's not going to be a a deal breaker for them it's
going to be something that they can sit down in front of and figure out just like me and you
and other computer geeks and as much as I'd like to think that I was that much smarter than the
average Joe I really don't think that's the case and if I can sit down and figure out applications
that I've never used before simply because I know how to use a computer then soak in anyone else
as long as they're taught that way and that my friends is why open source in education is really
really important this has been a heck of a video my name is Kat too thank you very much for listening
I will talk to you next time you have been listening to Hacker Public Radio at Hacker Public
Radio does our we are a community podcast network the releases shows every weekday on
the free Friday today's show like all our shows was contributed by a HBR listener like yourself
if you ever consider recording a podcast then visit our website to find out how easy it really is
Hacker Public Radio was founded by the digital dog pound and the economical and computer cloud
HBR is funded by the binary revolution at binref.com all binref projects are crowd-sponsored by
luna pages from shared hosting to custom private clouds go to luna pages.com for all your hosting needs
unless otherwise stasis today's show is released on the creative commons attribution share a line
3.0 license
