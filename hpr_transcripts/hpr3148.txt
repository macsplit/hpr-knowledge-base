Episode: 3148
Title: HPR3148: Why Open Source matters (to me)
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3148/hpr3148.mp3
Transcribed: 2025-10-24 17:47:58

---

This is Hacker Public Radio Episode 3148 for Wednesday 26 August 2020. Today's show is entitled,
Why Open Source Matters to Me. It is hosted by Paul Quirk
and is about 27 minutes long, and carries a clean flag. The summary is,
I go briefly into my own history that has lead me to choose open source software exclusively.
This episode of HPR is brought to you by Ananasthost.com. Get 15% discount on all shared hosting
with the offer code HPR15. That's HPR15. Better web hosting that's honest and fair at Ananasthost.com.
Hey, good listeners of Hacker Public Radio.
Paul Quirk here with my story about how I got into using open source software, and why it's important to me.
This topic is an important one for me, because I believe the importance of open source software may lose its relevance
with future generations that might not have the perspective people of my generation may have.
I've been wanting to do this for a while, but I kept going off on tangents,
because my reasons for getting into and using open source software was a path that started a very long time ago.
From the moment I got my very first computer, the Commodore VIC-20.
So let's have a go at this and see if I can stay on topic.
Like just about every other household in the late 1970s and early 1980s, we had an Atari 2600 video game console.
I found the two player games to be more enjoyable than the single player games, but, like Pong, it soon became boring.
It was revolutionary in that you could play such a wide variety of games for such a low price and in full color, but it left me wanting more.
It bothered me that I could spend 20-30 dollars on a game cartridge, and the game may not even be all that great.
To add to my frustration, my school received an order of Commodore PET computers, but these were generally reserved for either the exceptionally smart students or students that had developmental disabilities.
When it was discovered that PETs had a poke command that would destroy the CRT, I wasn't even allowed to write my own programs on them during the odd time I could use them during my lunch break.
My teachers made every effort to discourage my interesting computers, but I would have none of that.
I had been spending my paper-out money and birthday money on issues of compute magazine instead of the traditional comic books and candy of kids my age.
These magazines weren't cheap, but they were worth it.
Each issue was packed with reviews of the latest hardware and software, how-to instructions, as well as computer programs that could be typed in.
This meant that, at least on paper, I had a library of software before I even owned a computer.
I wanted to learn all I could about computers like the Apple, Atari, PET, VIC-20, the RadioShack Coco, Commodore 64, and the TimeX scene Claire.
I wanted to be able to learn how to create my own games, so I begged and pleaded for a computer of my very own, and one Christmas, a Commodore VIC-20, with a cassette drive and a binder with six cassette tapes holding 20 games was there to greet me under the tree, which was the best Christmas ever.
In spite of the fact that a row of keys did not work out of the box, and I had to wait until after new years to get a replacement.
I could, however, load and play the games from the cassette tapes with the shift runstop key combination, and as low tech as the VIC might appear today, each and every one of those 20 games were better than anything I'd seen on the Atari.
I'd like to take this moment now to talk about the VIC-20. If you saw one today, either for real or through emulation, your first impression might be that it wasn't all that good.
With a 22 calm display and only 3.5K of RAM available for programming, it certainly seems an odd choice for a computer.
However, for underachievers like my younger self, this was the perfect computer, and I'm thankful Commodore made it.
How the VIC-20 came about was that Commodore had developed a video and sound chip called the VIC, short for video interface chip, intended to be used for arcade machines, video game consoles, and control system displays.
However, there was a video game market crash, and nobody was buying this chip from Commodore, so they decided to combine it with other low cost components in a case that featured a real keyboard, which was remarkable for any computer in its price range in the early 1980s.
It also had a generous offering of various ports to add real computer hardware, like disk drives, a tape drive, a monitor, modem, memory expansion, and everything was programmable and accessible to the user.
Now, out of the box, it could be used like any other game console by plugging in a cartridge and a joystick, or you could turn it on and start right away in version 2.0 of Microsoft Basic.
Even though the basic programs are interpreted and not compiled, games programmed in basic performed very well on the VIC-20 due to the low screen resolution and reasonably efficient processor.
If you could imagine living in a world where your options were either prohibitively expensive real computers, reasonably priced game consoles, cheap but barely functional computers, and then a company like Commodore comes along and delivers this game console that is also a computer that can be programmed and expanded to the equivalent of a computer.
You might start to realize why the VIC-20 was as popular as it was. It was a real counterculture move where Commodore was delivering the power of a real computer into the hands of anyone who wanted a computer.
They truly made a computer for the classes, not the masses. I still have a VIC-20 today, and even wrote Sudoku to play on it.
Using a VIC-20 over a video game console had a number of advantages. The most obvious advantage was the money I was saving. For the price of a single Atari game cartridge, I could buy four issues of Compute Magazine that had games and utilities that I could type in myself, and many of those games were not any worse than the average Atari 2600 game.
Another advantage was that I was learning how to touch type, which I think you will agree is a worthwhile skill to have. As I typed in the programs, I was starting to learn about programming.
I took what I learned to write my own programs. The first program I ever wrote asked me to type in my name, then it would say hello to me, which I thought was fascinating.
Then I expanded the program to play a guest, the number game, after learning how to generate a random whole number, eventually adding code to tell me if my guest was too low or too high.
I then added code for the computer to ask me how my day was, and it would offer sympathy if I told it I had a bad day. Then I added a short adventure part to the program, and then I ran out of memory.
In spite of the limits of my VIC-20, I was learning concepts like Boolean Logic before I even knew the word Boolean.
Eventually, I did get memory expansion for my VIC, and I would save programs I was working on on the B side of a mixtape I made off the radio to listen to in my annual portable cassette player, which was, in my opinion, superior to the then popular Sony Walkman.
So I could sneak my programs onto the school's pet now and then. I was spending all my money on blank cassette tapes in computer magazines while growing my library of music and software.
The idea that I was doing anything wrong, recording music from the radio, didn't even cross my mind. I bought and paid for my tapes, so I figured whatever I recorded on them was nobody's business but mine.
Things started to change a little when I got my Commodore 64. Instead of spending an afternoon typing in a computer program, many programs for the Commodore 64 would take me a couple of days or an entire weekend to type in.
Because of this, I would make deals with some of my friends where I would type in one program, they would type in the other, and we would exchange programs.
We also exchanged our own programs for each other to play with and provide feedback.
This created a culture of learning that really resonated with me.
Once I got my disk drive, a whole new circle of friends opened up and I stumbled unaware into the world of cracking.
This is when I was introduced to the very strange world of proprietary software.
You see, I wasn't against buying a computer programmer game, it made perfect sense that there was a value in purchasing something to save me the time of typing it all in.
However, the price of a game on a floppy disk was around $40 and up. This didn't make sense to me.
I understood how floppy disks worked and what they cost a new full well that producing floppy disks was much cheaper than producing video game cartridges.
So why were the game developers gouging us like this? Whenever I did find a game or cartridge within my budget, I would buy it, though piracy was very pervasive.
I often thought if the games were sold at a more reasonable price, there would have been less motivation to crack the games and less motivation to pirate them.
Now I mentioned that the world of proprietary software seemed odd to me at this time.
That someone would want to hide their source code to the programs to prevent others from seeing how the program worked was to me like buying a car with the hood welded shut.
Now I learned about copyright and came to understand that I couldn't just take someone's work copy it and sell it or give it away as my own.
But it didn't make sense to me that I wasn't able to give my little brother a copy of a game I just bought so that he could have his name in the top 10 high score list without me pushing him off of it, for example.
In fact, making a backup or duplicate copy of a programmer game was generally considered good practice even back then, as the floppy disk could easily become damaged.
However, some of the developers went to extremes to hide their code. They did not wish to participate in the culture of sharing, and then I saw this entire demo scene emerging as a way for crackers to show that.
Not only did these weirdos fail in hiding their mystery code, but also that the culture of openness and sharing of ideas in the demo scene resulted in even better code as evidence by the cracker intro screens often added to crack versions of games.
It got to the point where the crack intro was sometimes more interesting than the game itself.
In 1987, I upgraded from my 8-bit Commodore 64 to an Amiga 500. I was joining the 1632-bit revolution.
This was a magical time when you could buy an Amiga for half the price of a Mac or PC, but the Amiga was better and more advanced in every measurable metric, including concepts like multitasking, RAM disks, good quality stereo sound, and high resolution graphics with thousands of colors.
It would also do video games better than consoles and arcade machines at the time. It could provide a what you see is what you get interface so it was no longer necessary to memorize weird keyboard combinations and applications like word processors and spreadsheets.
It did have its shortcomings, but these would not become readily apparent until a few years later when the advancement of the PC outstripped the capabilities of even the most expensive Amiga for a better price.
It played some part to the open architecture of the PC, but at that time I saw my Amiga as a clean slate.
I was determined to not run any pirated software on it whatsoever. I did buy my favorite arcade hits like Super Hang-On and Space Harrier, and when I realized that these didn't quite measure up to the arcade originals, I was left with the feeling that Sega may have purposely not made their games on the Amiga as good as they could have been.
In order to not have the Amiga compete against their own master system console and arcade machines, so after that I would only buy the top rated games as reviewed by Info Magazine.
The games didn't interest me as much as did the new Amiga Basic, developed by Microsoft for Amiga.
My favorite Magazine, Computes Gazette, only covered the 8-bit Commoders, but Compute Magazine still carried the occasional Amiga program.
However, the new floppy disk technology for the Amiga provided enough capacity that a magazine with programs could be published on a disk.
My favorite was Jump Disk. For $10 each issue came with articles like VBS listings, reviews, news, and of course the editor's opinion, as well as programs often written in Basic with the source code.
Some issues even included art and music. This was the future I wanted. I also got into Fred Fish Disks, which featured public domain software.
My local user group, the Toronto Pet Users Group, also put out their own collection of disks with public domain software.
This is where I got my first terminal program for the Amiga to use with my modem to connect to VBS's, which was where I got into Phytonet, offline mail readers, and even got my first email address.
Eventually, even Jump Disk offered their own public domain offering called PDQ, which are also the initials of my phone name, so obviously the PDQ disks were the best.
Now, after graduating high school, I wanted a career as an electrician, but there was a recession in the woman at the local International Brotherhood of Electrical Workers Hall advised me that it would be some time before they could take on new apprentices.
Since I had put my computer skills on my resume, she suggested that I get work as a Y2K programmer. Taking her advice, I took some courses at my local college to learn languages like Cobal, C++, and RPG, and applications like Lotus123, Debase, and WordPerfect.
Thanks to the culture of the sharing of knowledge that grew into the open source software community that we know and love today, I had the skills to succeed and get a good job during an economic recession after a housing bubble collapse, and was therefore able to get into the real estate market when the prices were very affordable.
The bankruptcy of Commodore made the value of open hardware very clear to me. Many computer companies had come and gone, but if I had bought a PC instead of an Amiga, it wouldn't have mattered if the company that made my computer win out of business.
My software and disks would still work on other machines made by other manufacturers. With the Amiga, my investment in software was pretty much gone.
Moving forward, nothing would read Amiga floppy disks except Amiga. I ended up building my very first PC from use components. Fortunately, the skills I had learned on the Amiga transferred easily to the world of Windows and DOS.
I bought OS 2 Warp 3 when that came out, not because I hated Microsoft, but because I honestly felt it was the better operating system. The rest of the world didn't agree, and I soon discovered that when a company decides it's the end of the line for an OS, that was that.
I didn't like my computer experience being dictated entirely by market forces, but saw no choice and was still unaware of Linux.
I went to Windows 98 only because my experience with the Amiga taught me that a closed source system like the Macintosh was not the right path for me, and the Mac OS couldn't even multitest, but at least Windows ran on open architecture hardware.
So if Microsoft went away, the market would still exist.
I needed an office suite mainly for spreadsheets and more processing, and the work processor and spreadsheet that came with the bonus pack on my OS 2 Warp 3 wasn't compatible with Windows 98.
I found that the prices of commercial products were rather high in the licenses restrictive. Remember, I was the guy who typed in SpeedScript for my Commodore 64 and saved it to a cassette tape.
There was the more affordable Microsoft works which I decided to buy, but I was disappointed when there were compatibility issues with the latest documents created by my colleagues in the latest version of Microsoft Word.
It seemed Microsoft was in the habit of releasing new versions of Word that was compatible with documents created by older versions of Word, but created documents which could not be read by those older versions of Word.
For no other reason than to push their users to upgrade, that's when I discovered Star Office 5.2 which had no issues with the latest version of Word and introduced me to the open document standard.
I used this very Star Office to create my first website which is still hosted at Tripod.com. You can see it yourself today, 20 years later, at psquirt.tripod.com.
No way back machine needed, and some of the links still actually work.
My wife decided to go back to school after our son started kindergarten, so I upgraded her computer to Windows XP in Office 2003 so that she could work with the new .x format.
Star Office 5.2 didn't support it, and later versions were on free.
I ended up buying the student and teacher edition 2003 of Microsoft Office because it was the best price.
I didn't think it was any of Microsoft's business whether or not I was a student or teacher, though my wife was legitimately a student.
I will now read to you the qualifying criteria that Microsoft laid out for this product.
It must be a full or part-time student, a homeschooled student, a full or part-time faculty or staff of an accredited educational institution,
member of a household meeting any of the above criteria, install full version of the latest Office products on up to three of your home PCs, and it was for non-commercial use only.
Now it goes on to read, you must accept the enclosed license agreement before you can use this product.
The product is licensed as a single product. Its component parts may not be separated for use on more than one computer.
If you do not accept the terms of the license agreement, you should properly return the product for a refund.
Product activation is required for continued use of this product and may be done by internet or telephone.
Instructions and Microsoft's privacy policy will be detailed to the user during the launch of the product.
So let's spend a moment to understand what this means.
First of all, Microsoft's lowest price Office product, which still cost over $100, was only available to people who were wealthy enough to afford to go to school or better yet have a teaching position.
If you are a minimum wage working poor person looking to better your skills and wanting to create a resume to get out of your poverty, too bad for you.
If you are raising for kids on a tight budget and you wanted to give them each copy of Microsoft Office on their computers so they could do their homework, only three of them are going to get it.
If you are a student and decided to use Microsoft Office 2003 Home and Student in the new business you are starting up, you will be in violation of the terms of service.
Now, I know what it takes to start a business fresh out of college. Often, these graduates have come to rely on their computer and software in the configuration that they have it in when they set it up in school to the point that when Microsoft announces an upgrade to their operating system,
many will continue to use that old outdated version of Windows because the nature of business is such that they just don't have the time to learn something new.
The idea that these graduates are expected to wipe out their copy of Microsoft Office Student in Teacher Edition 2003 just because they need to do commercial work is beyond the pale as far as I'm concerned.
The entire concept that I would need to agree to such terms and conditions after I'd given Microsoft my money to run their software on my computer really motivated me to seek out a better alternative.
If you were to visit my old website at pscork.tripod.com, you might get the impression that we were using dial-up internet back then, which we were. Hosting my website at a service-like tripod was a compromise.
I understood that my content was living on someone else's machine and they covered their expenses through advertising.
Now, if you were to examine the source code HTML of my very first website, you would have noticed some interesting JavaScript code.
Likeles got quite aggressive with advertising to the point that it was ruining the layout of my website.
And I added this code to get rid of the more obnoxious ads when a friend mentioned he had seen an ad on my page advertising something of, let's say, questionable morality.
It became a game of cat and mouse that I didn't want to play anymore.
I noticed today, as of the recording of this podcast, there is an ad for lottery.com at my very first website.
People who know me understand that I feel the lottery is a tax on people who are bad at math.
And therefore, I do not support the lottery in any way, but I have no way of controlling the content that gets advertised there.
You can think of me as an anti-lottery kind of guy. I wanted to take back full control of my presence on the web.
I didn't want my personal website, which was just a hobby of mine, to become a product for someone to drown with cheesy advertising.
However, I also didn't want to pay for web hosting since, as of 2005, I was already paying for an always on high-speed internet connection over cable, and I already owned computer hardware that was up to the task.
I already knew that the internet was a great democratizer, so I decided to host my own website on an old AMD K62450 based computer I had built originally for Windows 98.
I had already learned about Microsoft's personal web server that came with my Windows 98, but I ran into another Microsoft licensing issue.
My copy of Windows 98 was an upgrade from Windows 3.1, which I owned a legitimate license for from my days of running OS 2, because OS 2 required a licensed copy of Windows 3.1 in order to run Windows software.
Now, I had used my Windows 98 product key to get the upgrade to Windows XP.
I was growing increasingly frustrated with Microsoft's schemes. It seemed bizarre to me that I owned the hardware, but the offering system in the turns to use it were controlled entirely by Microsoft.
I realized that I could never actually own a copy of any version of Windows because Microsoft doesn't sell copies of Windows, it sells licenses.
Now, I don't lease my truck, I don't rent my home, and I certainly had no interest in having my computer hardware that I bought and paid for become a revenue stream for Microsoft.
After some extensive research, I decided to install Red Hat Linux running the Apache server and installed OpenOffice 1.0.2, that marked turning point in my life.
Red Hat Linux had its limitations. It couldn't play my favorite games, it couldn't do video editing, and the photo editing software wasn't that great. However, using OpenOffice 1.0.2 was a delight compared to Office 2003.
I realized that investing my time to learn a product like Microsoft Office was an investment for Microsoft, while investing my time to learn OpenOffice was an investment in myself.
I taught myself Linux with that Red Hat box. I didn't install Linux on my personal daily use machine until Ubuntu 10.10 came out and dual booted on my compact laptop between it and Windows 7.
This gave me the opportunity to ease my dependence on Windows as Ubuntu was a great platform for me to find open-source alternatives.
I soon realized that Windows was doing a lot of things in the background that I didn't know about and was using my finite clock cycles, memory, and hard drive space solely for the benefit of Microsoft.
It got to the point that I only booted to Windows for video editing and I did everything else in Ubuntu.
Today, I'm writing Ubuntu 18.04 LTS on my main computer and RIS being on my web server. It's time for me to get a new laptop so I'm going for the PineBook Pro.
I no longer have any desire or interest to use anything that is close source. This is a personal choice I have made that gives me peace of mind.
If you like to use Windows or the Mac OS, I'm not going to tell you that you're wrong. I understand that for some people giving up their rights in leasing their software and offering system in the form of restrictive licenses as a trade-off they're willing to make for convenience.
I can see why these big software companies get their software into schools to get kids trained on how to use their software and I can see how someone might wish to take this path in order to focus on an end result, whether that be an Adobe Premiere video, an AutoCAD drawing, or a PowerPoint presentation.
I can't tell anyone that it's worth their time to invest in learning the open source alternatives because I have come to recognize that most people don't really care about things like licenses and learning how to develop code for computers.
But for me, the idea of buying a computer that runs an offering system that is engineered to upsell and advertise to me is obnoxious.
That products like Chromebooks and Macbooks are engineered with artificially short life cycles through planned-off solicences goes beyond the philosophical and into environmental concerns, especially when considering how damaging the environment it is to manufacture microchips.
When I see kids in third world countries burning obsolete computer components to extract the metals exposing themselves to toxic fumes, then I see the open source community that develops distrails for low-end machines so they can still be relevant today.
That's when I actually see open source software as the solution to many of the problems that close source creates.
I don't think I'm going to save the world by using open source, but it does make my own world better, it makes me feel better about myself and the choices that I'm making.
Well, I hope that wasn't too much preaching to the choir for you, and maybe it might motivate some of you to consider going open source.
We really are fortunate to have such a rich library of good software and good open hardware that we can call our own today in the year 2020.
Well, thanks for listening to me, and until next time, please remember to drive safe and have fun.
This is Paul Quirk signing off from Hacker Public Radio.
You've been listening to Hacker Public Radio at Hacker Public Radio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast and click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dove Pound and the Infonomicon Computer Club, and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
On this otherwise stated, today's show is released under Creative Commons, Attribution, Share a Life, 3.0 license.
