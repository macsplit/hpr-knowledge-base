Episode: 2901
Title: HPR2901: Describing how I listen to podcasts PART 3
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2901/hpr2901.mp3
Transcribed: 2025-10-24 12:57:41

---

This episode of HPR is brought to you by Ananasthos.com.
It's a 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's honest and fair at Ananasthos.com.
Hello and welcome Hacker Public Radio News. My name is Mr X and welcome to this podcast.
I'd like to start by thanking the people at HPR for making this service available to us all.
It's really invaluable service. They go to a great deal of effort to streamline the service and make it as easy as possible to use.
Just pick up a microphone, record something and send it in. You must have something interesting to say I'm sure.
It's really quite easy. If I can do it, anyone can.
Okay, so this is part three about how I consume podcasts.
In part two, previously, let me just see what did I cover.
I covered basically how I listened to them using cordless headphones.
How I control a mock P, music in the command line player via the touch screen session.
First of all, I use an old compact laptop, triple EPC and Nokia N810 and finally an attempt to use an XS7 tablet.
Incidentally, the problem with the triple EPC, because it's almost an ideal solution other than the battery, life isn't too good.
Because setting so it stays live all the time, I suppose I believe it plugged in, I guess.
I don't know what thing going to sleep per losing the Wi-Fi connection.
I wanted it such that I could just lean over and push a space bar and just pause the playback.
So that's a trouble with the triple EPC, the battery life.
It couldn't even run any all day sort of thing.
So I'll kind of say a bit more about the Raspberry Pi and then how I came up with a solution to know that I had nothing to control mock P.
I was mentally impressed with the Raspberry Pi and over time listened to a number of podcasts about the Raspberry Pi itself.
There was much excitement about how it could be used education via its onboard GPI opens and how it could be used to control other devices.
This was after all the real reason it came into existence and the first place.
Of course, what also happened was that a lot of old parts such as myself also bought one.
I was quite interested in the electronics back in the day and getting a Raspberry Pi rekindled this to some extent.
I think I must have started hearing people talking about add-on boards for the Pi and decided that I might like to play with one of these devices.
Even though I had absolutely no idea what to buy or what I would use it for.
My first add-on board was the excellent Pi-Face Digital I-O board.
It's an add-on board that sits on top of the Raspberry Pi and connects via the Raspberry Pi GPI O connectors.
It currently costs by the look of it about 40 UK pounds.
Pi-Face Digital 2 add-on board for the Raspberry Pi allows for connecting things that will influence the world around it.
Pi-Face Digital 2 includes components like relays, switches, digital and analog I-O that will allow for connection to sensors, motors, lights etc.
and can be controlled by the Raspberry Pi board.
The original Pi-Face Digital Interface board fits the original Raspberry Pi model A and B.
Pi-Face Digital 2 has been redesigned to fit the Raspberry Pi model A and B.
Pi-Face Digital 2 sits neatly above the Raspberry Pi and connects using the expansion connector.
Take care to ensure all expansion pins are linked up with the holes on the Pi-Face Digital 2 socket.
Check the alignment for left and right and front and back before pushing down and never force the boards together if they don't slide smoothly.
The Pi-Face Digital's website has two changeable relays, four tactile switches, eight digital inputs, eight open-collector outputs, eight LED indicators, a graphical emulator,
e.d.t. program in Pi-Face 3 and 2, scratch and see, and support for interrupts.
With Raspberry Pi, you can easily install the Pi-Face Digital software with AppGate.
To install the Pi-Face Digital software runner command, Sudo, AppGate, Install, Pi-Face, and 3- Pi-Face,
to install, Dash emulator into the wiring prompted.
Now reboot your Raspberry Pi with Sudo Space reboot.
That was a bit quick and fast, but I'm sure you can find this information to yourself.
So it's probably not worth a while going into a lot of detail about that.
Now that I had the thing, I started wondering what the heck was it going to do with it.
The documentation said that the four onboard switches could be extended to eight.
To do this, I had to purchase some components and do a bit of soldering.
Something I hadn't done for a long time.
It was actually quite enjoyable.
I think the idea was really aimed at trying to encourage kids to have a go building a simple add-on board.
I built the board using some strip board, purchased some switches, resistors, and LEDs.
What did the Zuck diagram?
What did all together and connect the via ribbon cable to screw down connections available on the Pi-Face Digital add-on board?
Again, after extending the thing, I still had no idea what I was going to use a thing for.
Although the board was designed to allow you to connect and control things by the Raspberry Pi,
I had nothing further to connect to it.
And on top of this, the voltage and current limitations of the board
means it can only really be used to control small simple things, maybe a remote robot type device.
I deal if you're a kid, I want to start experimenting, but not much good for myself.
I decided it might be quite useful if I could use it to control the Pi itself.
The board is controlled by a set of supplied Python libraries.
At that time I had nothing about Python, but had been contemplating doing some Python for some time.
This gave me the perfect excuse.
Being able to program the board using the excellent Python libraries gives great flexibility and is only limited by your imagination.
For example, you could program it such that pushing one of the buttons would put the board into a second function mode,
so that each of the remaining seven buttons have two or more functions.
This could be indicated by way of an LED coming on, or perhaps a double tap of a button could be used to gain access to the second function.
Again, only limited by your imagination.
I think the very first button I program was used to control NCURSE's mock music player running on my Pi.
That way I could easily toggle between play and pause by pushing a button.
This turned it to be immensely useful, particularly as my colours headphones sit on the charging dock next to the Pi.
I could simply pick up my headphones, tap the button and continue off where I left on my podcast playlist.
I thought it might be nice to turn on an LED next to the switch when play is selected and turn it off when pause is selected.
The only trouble with this is that if I pause the player from somewhere else in the house, then the LED on the board would get out of sync and stay switched on.
I solved this by adding a timer so the LED would turn off after about five minutes.
The second button I did the same for, but for audio books that I rather embarrassingly like to listen to when in the bath.
Perhaps that's too much detail.
mock is very flexible and can have multiple playlists in operation.
In fact, as I found out after activating this second button, it is impossible for the Pi to play two separate things at the same time using the music player mock on the Raspberry Pi.
Okay, so I'll cover some of the buttons that are programmed on this device a lot of them or just that things.
So button 1, toggles between playing pause of my podcast, which I basically told you, two toggles playing pause of audio books.
Three turns of all LEDs, so if any of these actually illuminated buttons, you always turn them all off.
Four, with each button press, an LED turns on, starting from right until all eight LEDs are lit and then finally the next press button press turns all LEDs off.
Continue to press the button, repeat the LED cycle.
It may not much use, but was a fun thing to do while playing and learning a bit about Python.
Button 5, up time, what that does is pushing this button, runs up time command and so I can see how long my Pi has been up since the last reboot.
The up time a number of days is shown for a few seconds in binary on the eight LEDs.
If the number of days return is less than one, then it flashes the first LED.
The highest number available using the eight LEDs is 255.
So in the very unlikely event, the number of days return is greater than this.
All eight LEDs flash to signify over range.
Button 6, disk 3.
Pushing this button runs the DF command, returning information about how much free space is available on my Pi's 128GB SD card.
Incidentally, so far I've never had an SD card fail on my Pi, I don't remember it ever crashing except with a power cut.
I think my first SD card was possibly only 32GB in size and was filled many times.
I probably still have it lying around and maybe I've put it to some other use.
Pushing this button first displays the percentage of disk usage for a few seconds.
The first LED lit indicates 20% usage, all the way up to 90% with all eight LEDs lit.
Above this, it flashes all eight LEDs to signify over range.
After a few seconds, the number of gigabytes free is displayed in binary.
Again, if the range is under or over, the same thing happens as above.
7, currently unallocated.
8, any 10.
This was originally just a bit of fun, ended up being quite useful.
Pushing this button, ran the command A play with a wave fell with organ.wave.
This plays a recording of me playing the mouth organ through my Nokia N810.
I proved a handy way of locating my N810 when misplaced.
It's now of little use since my wonderful N810 now no longer functions.
Incidentally, being able to script and remotely run any command at will
from another computer is immensely powerful.
Is this possibly another platform such as Windows or Macs?
Remember, with great power comes great responsibility.
Okay, so I think that's probably enough for this episode.
It's just an introduction of the PyFace digital IO board.
In the next episode, I'll cover my next add-on board with a purchase.
So, I hope you enjoyed this and didn't find it too boring.
So if you want to contact me, I can be contacted at MrX at hpr at googlemail.com
As MRX, AT, HPR, the at symbol googlemail.com
So until next time, thank you and goodbye.
Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen. Listen
Listen. Listen. Listen. Listen. Listen.
Listen. Listen.
Listen. Listen. Listen.
