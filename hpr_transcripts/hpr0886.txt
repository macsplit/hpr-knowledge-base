Episode: 886
Title: HPR0886: Product lifecycle management (PLM)
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0886/hpr0886.mp3
Transcribed: 2025-10-08 04:06:03

---

for
Hello everybody, my name is Ken Phalan, and yet again from the disment of Alistair one
rule.
Is that correct?
That's right, yeah.
So Alistair, what do you want to talk to us today about?
I wanted to talk to you about PLM software, which is something I've recently got involved
with, thrown into the defense, and it's just a fascinating subject that people might not
know much about.
What's PLM?
It's product lifecycle management.
The idea at one time day was if you wanted to design something, you would use a piece of
CAD software.
If you wanted to keep records on something, you would use a database.
If you wanted to keep financial records, you might use a spreadsheet.
And the problem that gave people who were making products was that the guy who was designing
on the CAD software, his software wasn't compatible with spreadsheets and the spreadsheets
and the CAD software weren't compatible with the database.
So every time anyone needed to pass any data between those subjects, there would be a
long delay while it was translated from one piece of software to the next piece of software.
PLM gets around that by saying you will use one piece of software for everything.
You will start designing whatever it is.
In my case, it happens to be airplanes, Airbus that I work for.
If you want to design an airplane, you will start using the pieces of where I use this
thing called Katia.
It's also known as DelMia.
It's all done by DassoSystem and you will start designing the airplane on Katia and
DelMia.
When you go into production, you will still use Katia and DelMia.
You will still use the same pieces of software.
When it goes into actual use, when the plane gets sold to the airline, they will still use
the same piece of PLM software to keep track of all the maintenance, to keep track of all
the technical aspects of the airplane.
Even after the airplane lands for the last time and they have to break it into its component
parts and recycle it all, they still use the PLM software to see what went into the
making of the airplane in the first place.
The whole life cycle of the entire project is entirely encapsulated in one piece of software.
There is no delays in transferring information between one group of people and another group
of people because they are all using exactly the same thing.
Does that kind of go against the Unix philosophy of many tools, each doing a small job, doing
a problem?
All these tools are on Unix, but that philosophy hasn't been strong enough to overcome the
flaws of, they call it over the wall problems where you have to pass information to somebody
doing a different job.
So it's at the moment not something which the open source world is heavily involved
with at all.
It's very much a proprietary idea.
Why I'm so interested in it is because of the efficiency gains that they've got from
this.
They've taken the cycle of getting an airplane as a concept through to an actual flying
airplane down from 12 to 15 years down to 6 to 8 years.
It's been a massive shrinkage in the amount of time it takes to actually get a product
out into the actual world.
So if they're gaining that kind of efficiency, there's obviously something to it which is
interesting, but there's a niche that the open source community should be coming rushing
into the build.
As much as anything it's a way of thinking and there's got to be something there for companies
like Airbus and all the other companies such as the big car companies, Ford, Waxel,
and all those people are using it.
For them to invest that amount of money into it, there's got to be something there of
value which is why I'm interested in it.
I've got to, you know, as a new to the topic about the length of this eye cast, the new
to the topic.
You know, Todd Johnson to remind, well, you know, in the life cycle, you're talking about
lung projects there are playing to be playing for 20 years.
And this, you know, think back now, software in 1970s or something, and that's, you expect
that to still be running when this plan is over.
I don't think it claims to completely solve that problem with fragmented groups of software,
it just exacerbates the problem because you've got to solve the problem once for the database,
then again solve it for the cabs, then you've got to solve it for the spreadsheets and
so on and so forth.
If you bring it all into one, as PLM has done, then you only have to solve that problem
one time over.
But does that end up bringing you super underlocking?
Yes.
You know, two years down the line, this company will go, okay, you're bought in, you're
now committed, you have no choice but to continue using this software, it would even
be who you to buy the company who is developing this software.
That's definitely a big fear with it.
I have no idea personally how open source would solve that problem.
And that's one of the things that I would like to talk about, if anyone has any ideas
about how you would solve that problem, by all means getting in touch with me at the email
address, which would be at the bottom of the screen, I guess.
It will be in the short notes, but that's absolutely fine.
Thank you very much, Alistair, it's been a very intriguing topic.
It's good to have an over-tentative beer on the open source, on the hack-and-pop beer,
what you've just highlighted at the top of the cup, we have a lot of interest to a lot
of our listeners.
And if some of our listeners has any more expertise on this, feel free to record a show
and send it in to our group at the beginning of the day.
Thank you very much, and enjoy the rest of the show.
Thank you.
You have been listening to Hacker Public Radio at Hacker Public Radio, those are, we
are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener by yourself.
If you ever consider recording a podcast, then visit our website to find out how easy
it really is.
Hacker Public Radio was founded by the Digital Dark Pound and the Infonomicom Computer
Club.
HBR is funded by the Binary Revolution at binref.com, all binref projects are crowd-responsive
by Lina Pages.
From shared hosting to custom private clouds, go to LinaPages.com for all your hosting
needs.
Unless otherwise stasis, today's show is released under a creative commons, attribution,
share and like, Digital's own license.
