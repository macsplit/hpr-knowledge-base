Episode: 668
Title: HPR0668: Read 'n Code - 3 Kurt Vonnegut's Slaughterhouse-five and Erlang
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0668/hpr0668.mp3
Transcribed: 2025-10-08 00:38:58

---

...
...
...
...
...
Hello, welcome to the third episode of the Read and Code podcast.
The only podcast about literature and computer programming.
My name is Flavio.
Today, we're going to talk about Kurt Vonnegut's Slaughterhouse 5 and the programming language
called Erlan.
Just I'd like to let everybody know that we are now in iTunes, the quintessential place
for any podcast to be, and I managed that using Ken Fallon's RSS podcast.
Ken Fallon is the keeper of the hacker public radio podcast, which you can visit at hackerpublicrater.org,
and he, his podcast on RSS feeds and how to best structure them for iTunes helped me make
the feed required to be in iTunes for this podcast onto the show.
Kurt Vonnegut was born a few years after World War I and died in 2007.
He served in World War II and many of his writings talk about World War II in some way.
He wrote Slaughterhouse 5, one of his most famous novels, The Year Neil Armstrong landed
on the moon.
He's typically regarded as part of the post-modern movement, the Rarely Movement, which started
after World War II and continues today, I guess, since Thomas Pinchin, a famous post-modern
writer, is still alive.
Post-modernist literature basically takes everything in life with a large grain of salt, and
the stories are often a commentary on the story itself.
For instance, one of the quotes in Slaughterhouse 5 in the middle of a paragraph says, quote,
that was I, that was me, that was the author of this book, end quote, so that self-referential
in that way.
Slaughterhouse 5, the book, is about an emaciated fatalistic and ill-trained soldier named
Billy Pilgrim in World War II.
He is once compared to a broken kite.
The narrative of the story is non-linear, but it follows some of Billy's experiences
in Germany, and then his experience getting caught by the Germans and shipped to Dresden
a city in Germany for community work where all the soldiers, the American soldiers reside
at an old meat-packing house called Schlachthoff-Funth or Slaughterhouse 5.
When Dresden is bombed, most of the people in the city are killed, but the American
soldiers survived because they were in the basement of this meat-packing house.
So they survived this total destruction of the city and woke up the next day to find
everything completely annihilated.
Billy then returns to the U.S., where he becomes an optometrist and marries an undesirable
obese woman whose father has a lot of money and they have children.
He suffers head injuries and a plane crash of which he is the only survivor, and starts
thinking he has made a connection with the alien people of Traffamador, with whom he
has traveled in time and has seen all that will happen in the future.
He starts giving radio talks and speeches about the nature of time and flying saucers and
he dies shot at one of these events in Chicago.
Now onto a few quotes from the book that I think best reflect Kurt Vonnegut's writing
style in the essence of the book, first quote.
First quote is actually the first line of the book as well, first quote.
All of this happened more or less.
The war parts anyway are pretty much true.
One guy knew really was shot in Dresden for taking a teapot that wasn't his, end quote.
As an earthling, I had to believe whatever clocks said and calendars, end quote.
So funny remark on time and how meaningless it is in the war.
Next quote, all this responsibility at such an early age made her a bitchy, flibbered
teagabit, end quote.
I enjoy strange words that show up in my dictionary and I took note of this one in particular.
Next quote, the gun made a ripping sound like the opening of the zipper on the fly of
God Almighty, end quote.
There's more to life than what you read in books, said Weary, end quote.
Weary is one of the characters in the novel and I thought it was ironic that it would
have you not believe what you read in books.
Next quote, like so many Americans, she was trying to construct a life that made sense
from things she found in gift shops, end quote.
This is the brief description we actually get of Billy's mother, that's the essence
of it right there.
Next quote, one scout hung his head, let spit fall from his lips.
The other did the same.
They studied the infinitesimal effects of spit on snow and history, end quote.
Next quote, now they were dying in the snow, feeling nothing, turning the snow to the
color of raspberry sorbet, end quote.
These last two quotes definitely show the derision and the attachment with which the book
perceives war, history, politics and such.
Next quote, rosewater told a psychiatrist, I think you guys are going to have to come
up with a lot of wonderful new lies or people aren't going to want to go on living anymore.
Rosewater is one of the characters in the novel that makes these sort of deeper remarks
and makes fun of, say, psychiatrists and humanity in general.
Next quote, so they were trying to reinvent themselves and their universe, science fiction
was a big help, end quote.
That's the attractive thing about the war, said rosewater.
Absolutely everybody gets a little something, end quote.
This is a dialogue quote, I'm afraid I don't read as much as I ought to, said Maggie.
We're all afraid of something, trout replied.
I'm afraid of cancer and rats and doberman pinchers, end quote.
And last quote, and then the Russians came on motorcycles and they arrested everybody
but the horses end quote.
So these sort of quotes and sayings pretty much pervade the entire novel.
As a matter of fact, the saying, so it goes, appears 106 times in the novel.
So for instance, here are some examples.
There used to be a dog named spot but he died, so it goes.
Another one is, the champagne was dead, so it goes.
Another one is, the water was dead, so it goes.
Air was trying to get out of that dead water.
Bubbles were clinging to the walls of the glass two week to climb out, end quote.
That should give you a feeling of how the novel's language functions and maybe a little bit
of Kurt Vonnegut's writing.
On to Erlang, the computer language.
This first I should remark is based on a one day training session I had with Kevin Smith
who was on Twitter as Kev Smith.
He was kind enough to come here to Charlotte, North Carolina and give a one day training session
on Erlang, which I attended and was wonderful.
The language, Erlang, was designed by Ericsson in 1986 to support big, fault tolerant applications
internally for Ericsson.
It was released open source in 1998, so that's 12 years later.
And it stands for Ericsson language, Erlang.
These main features are that it's multi-core, functional and proven.
Multi-core means basically it supports great concurrency, which means doing a bunch of things
at the same time.
And this is a problem because languages like Java or Python struggle to efficiently use
machines with tens or hundreds of cores, so very, very powerful machines.
Erlang, on the other hand, has these lightweight processes with very minimal overhead, which
allows for the rapid creation of hundreds of thousands of these processes.
And these processes have no shared state.
They don't know anything about each other.
They communicate through asynchronous message passing.
Basically, each process has a mailbox, which it checks to see if it has the message
it wants, and then deletes it after it's consumed.
Very much how we would ideally check our own email inboxes.
And to start one of these, all you have to do is just call spawn, the function spawn,
and that returns a process ID, that's it.
So that's the multi-core feature.
Erlang is functional, which basically means it uses immutable variables.
So you can only assign variables.
You cannot change them later, which allows you to depend on that value of those variables.
Functions are first class citizens.
They can be used like any other data, like a number, or anything else.
So this basically replaces the need for objects that we have in object-oriented languages.
You can just use functions.
And the third proven, it has been used Erlang in recent years by many high-profile open
source and non-open source projects, of which the ones that stand out to me are CouchDB,
M-base, and Riyak, which are three no-SQL databases or key value stores, and Rabbit and Q,
which is a Qing service.
Very much all of these four require great speed and concurrency fault tolerant applications.
That's probably why they choose Erlang for their implementation.
Now you may wonder what this has to do with Kurt Vonnegut's Slotterhouse 5.
Well, there's a few similarities in there, for instance, the quote that says all this
happened more or less.
I compare that to the spawn function that I mentioned before.
I told you you can just call spawn and a process in Erlang happens, which is more or less
true.
Really, you would pass it a module or a function with arguments that basically allow that
process to handle any messages that it receives, basically pattern matching any message it receives
to make sure it acts according to what the process sending the message wants it to do.
Second similarity.
Kurt Vonnegut packs a lot of meaning in a few lines, he's extremely concise.
For instance, this quote, he said that everything there was to know about life was in the
brother's Karamazov by Fildor Dostoevsky, but that isn't enough anymore, end quote.
I feel as though with that sentence, he was able to say so much about both books in general,
Dostoevsky's book, he mentioned, as well as meaning of life.
In the same way, I think Erlang is an extremely concise language, particularly it has a great
ability for list comprehensions, which basically, for instance, if you would like to find the
even numbers in the list, you would be able to type one single line that retrieves that
list, and many other languages you would require several lines, usually a function of some
kind to get this done.
I'm not saying this is unique to Erlang, but it's especially concise.
Immutable variables is the name, the next similarity.
I think Billy Pilgrim, the main character in the book, we find out more about him as the
book develops, and as we find out more about ourselves through Kurt Vonnegut's writing
style, but he is really the same throughout the entire book, he does not change at all.
I think this consistency allows us to depend on the narrator more.
In the same way, we depend on an Erlang program that state will not change in the middle
of it, hence the immutable variables and the functional nature, which each function will
return the same thing, given the same input, so I think consistency is a similarity.
Furthermore, the functional aspect of Erlang, like I just mentioned, functions being able
to return the same thing if given the same input and be used whenever needed and returning
themselves, I think in Slotterhouse 5, a lot of the narration jumps in history, in the
future, in dreams, and then comes back in history.
I think that's similar because all of these parts of the novel can live on their own
and can be used independent of one another, just like functions can in a functional language
like Erlang.
He is in a constant stage fright, he says, because he never knows what part of his life
he is going to have to act in next.
I compare this to inboxes and the message passing in between processes in Erlang that
I mentioned before.
I think these processes are also in constant stage fright because they never know which
part of the program they are going to have to act in next.
They are just waiting to be given a message and check against it for what they need to
do.
The last comparison is, so it goes, if you recall, a lot of the saying is used a lot throughout
the novel, so it goes to end a paragraph about something tragic or somebody's death,
it says so it goes.
I compare this to Erlang endings.
I think, so it goes a very ambivalent ending, and I think Erlang has three different line
endings, right?
In Java, the line end would be a semicolon all of the time, in Python, there is no line
end, there is just a space.
It knows that the new line is a new line.
But in Erlang, you can either use a comma, a semicolon, or a period.
Not interchangeably, but rather depending on how what you end.
If it's a line that is part of multiple lines, you would use a comma, if you had done,
and sort of a fragment, I guess they are thinking it like a paragraph that would be a semicolon
and at the end of a bigger thing, like a function you'd have a period.
I think this was especially confusing and still is for me, so I compare that to so it goes
in Kurt Vonnegut.
All right, with that, I end this podcast.
I want you to know that show notes will be up on the website for this podcast and hopefully
future ones.
I want to thank Samantha Simpson for the intro and theme song of the podcast.
Please address any passionate approval, dismissal, or comments at Flaview.
That's F-L-A-V-I-U at read the letter n code dot com.
Until next time, read and code.
Thank you for listening to Half Republic Radio, HPR is sponsored by Carol.net, so head
on over to C-A-R-O dot com for all of us here.
Thank you for listening to Half Republic Radio, H-L-A-V-I-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-
U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U-U
