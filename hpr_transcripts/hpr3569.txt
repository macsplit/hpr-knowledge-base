Episode: 3569
Title: HPR3569: Linux Inlaws S01E53: Rust Marketing
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3569/hpr3569.mp3
Transcribed: 2025-10-25 01:33:02

---

This is Hacker Public Radio Episode 3569 for Thursday the 7th of April 2022.
Today's show is entitled, Linux and Laws SIE Rust Marketing.
It is part of the series Linux and Laws.
It is hosted by Monochromic, and is about 44 minutes long.
It carries an explicit flag.
The summary is, a shameless plug for this hipster programming language and why you should use it.
This is Linux and Laws, a podcast on topics around free and open source software, any
associated contraband, communism, the revolution in general, and whatever else, fans is critical.
Please note that this and other episodes may contain strong language, offensive humor,
and other certainly not politically correct language.
You have been warned.
Our parents insisted on this disclaimer.
Happy Mom?
Thus, the content is not suitable for consumption in the workplace, especially when played
back on a speaker in an open-plan office or similar environments.
Any miners under the age of 35, or any pets including fluffy little killer bunnies,
you trusted Guy Dog unless on speed, and Q2T Rexes or other associated dinosaurs.
Welcome to Linux and Laws, a season one episode we guess 53, season one episode 53.
This is just a mere guess.
Hello Martin, how are things?
Approximation of the episode number, yes.
How are things?
Well, good question.
I think things could be better, right?
We are recording this on the last day of February, as in February 28th, 2057, I think.
Oh, but surely we still didn't speak in Russian.
No, no, no, no, no, you see, funny thing.
Due to the recent turn of events, Ukraine, due to funding from the EU and actually the
US, Biden, full marks here, if you're listening, has actually conquered Russia.
So, the Russian Empire is no longer here, they're almost speaking Ukrainian.
Swift has, the Swift ban has been lifted, and because of the Greens in Germany, the whole
of the previous Russian Empire has now been converted to green energy, so it's so
full of patterns, and all the rest of it, in the biggest, let's say, for Empire, nation
whatever you want to call it, in the world.
Nice.
Okay, well, that's something to look forward to.
No, Martin, it has already been happened because we are recording this, if you don't know.
Ah, okay.
But people will have forgotten our bridge in early Biden.
Get your flax capacitor in order.
I don't do that.
But this is not about world politics, but this is something rather about open source.
So Martin, why don't you get us started with tonight's episode?
In terms of?
Yes.
Subject matter.
Okay, so tonight's subject matter is iron dioxide, or iron oxide, so perfect.
Yes, for the chemistry lovers among us, that is F-E-O-2 or something, right?
B-2-O-3.
Yeah.
Mr. Martin.
Full marks.
You are now a proper geek.
I did chemistry many years ago, but apparently you did Russian as well, so Martin, I wonder
what happened.
Well, this was kind of a premonition, I guess.
Anyway, let's not go there.
In deep, you know, exactly.
If you're looking for political opinions, you might want to refer back to what is it?
Season one.
But most of them are.
Sorry.
Yes.
Sorry.
Yes.
To an upcoming episode on the Electronic Frontier Foundation, the Georgian chapter, where
you will be invited about the American Civil Liberty Union and other very important things.
Not this much of the subject for tonight, but rather a chemical composite, it's a completely
mistake.
So, Martin, why don't you tell us all about cars, iron, steel, and why this thing is so
important in the greater economic picture?
How many dollars, for example, are falling victim due to this chemical composite on a global
scale, on an annual basis?
How many dollars?
In terms of what's the damage?
I mean, you buy a car, which consists of, which of course, consists of steel.
And before you know it, only about after what, 30 or 50 years, it's gone.
Well, that depends.
And first of all, which country you live in.
And second of all, how well the car has been protected, new methods like galvanizing and
powder coating, all these kind of things, right?
So if you park it on tree, you never wash it.
What happens?
If you park it well.
If you park it on a tree, you never wash it.
Or your heart is moving.
What happens?
Exactly.
So that's a city, a city, right on the coating, I wonder.
And it's up to you, don't park it on the tree.
Yes.
If you want to continue to use using it, don't park it on a tree, yes, especially put it
in the garage and wash it regularly if you're parking on a tree or something.
But before we lose our last listener, I'm tempted to say it.
Maybe we should kind of review the real subject of today's episode.
It's not about cars, and it's not about chemistry, but rather it's about, yes, rust, but
from a technology perspective, Tom Martin, what is rust?
What is rust?
It's a programming language.
Yes.
Well, it's probably many other things, but that's the topic for today.
Indeed.
Tom Martin, what do you know about rust?
This is podcast, and this one guy keeps going on about it for some reason.
I don't know.
Maybe he has shares.
I don't know.
It's an open source product.
Let me think.
He's looking for a new job.
That's W.
That's a rust program.
So it's joking aside, it's a language that has met some decent growth over the last
few years.
Let's start at the beginning.
It's 1975.
UNIX has just been invented.
People are wondering about the next big thing after see.
Unfortunately, it takes about 40 years to come up almost 40 years to come up with the truth
in terms of what's going to happen afterwards.
It's 20 or eight or nine details, maybe in the show notes.
Yeah.
2008.
That's nice to be corrected, Martin.
Thank you.
A certain browser manufacturer is looking for an alternative with regards to no, with regards
to C++, Java script, so you name it in terms of some people still might use that browser.
It's called Firefox.
The Mozilla Foundation, to be precise, was looking for a better implementation alternative
than C and C++ as in the program languages that the previously had been using to implement
something called Firefox.
They took a look at the depth in terms of what the code base was costing them with regards
to overall maintenance and other implementation related costs and said this is not really
on.
So somebody at the Mozilla Foundation came up with a beautiful concept of a new program
on language and this was the birth of something called Rust.
This is a dramatic pause on purpose to give Martin a chance to ask more questions.
That's nice.
Yes.
Okay.
Cokes are okay, Martin.
I don't drink Coke's bad for it.
You don't drink Coke for enough.
Yes, indeed.
Here's the point.
Here's the thing.
Absolutely.
And Coke is not a hipster drug.
If any of you kids are listening, don't do Coke.
Don't drink it.
Don't do it.
Simple as that.
So more recently, I think it has won this most loved programming language thing for a
while.
That's probably true.
Details may be on Stack Overflow, maybe on other platforms.
Yes.
There's also a GOB as the truth of being earnest.
Another program language index.
Details will be in the show notes.
Or I'm the show notes, actually, as a matter of fact.
And yes, you'll find Rust there too.
But what does Rust bring the table in terms of why do people rave about it?
And why does it have gained that much popularity over the last 10 years?
And I'm tempted to ask.
Any ideas, Martin?
Well, when you say, gain that much popularity, are we what are we talking about in terms of adoption there?
There's this corner show called Microsoft that in 2020, actually, yes, exactly.
I think that was the date that was a year of a conference at that.
Well, it said it's probably too strong word, but hinted at the fact that they will
swap Rust for C++, which had been the major driver for the majority of the projects up to then.
Ranging from Office software to somebody called Azure to other projects within Microsoft.
There's this bookshop thing called Amazon, I think.
That did something recently in AWS called what's called Martin?
Partly rocket or something?
Other major open source projects.
Or probably being the prime example are thinking about replacing portions of their C base code base with Rust for a reason.
So the rage is already happening.
In terms of why more people, companies projects, whatever you want to call it, are actively taking a major look at something called Rust.
It's just not Mozilla, it's much more than that.
Is there a specific reason why they are doing this?
Mattness comes to mind.
Yeah, they've been listening to our podcast too much, perhaps.
Travel is basically that major, that many of these decisions predate something called little style, little style.
Yes, absolutely, Matt.
No, the simple reason basically that brings that Rust brings something brings a lot of things actually to the table.
That prevails among other technology choices.
Happening off the last 15 years, I suppose.
On the subject we did have an interview on Rust, not too long ago, I think.
Yes.
Steve Klobnik was on the show, yes, indeed.
He had some, one of the main maintainers, yes, planet and it's good.
He had some good insights on adoption and stuff like that, so with listening to.
In a nutshell, for those two people who haven't listened to the episode, maybe link will be in the show notes.
What are the benefits of Rust?
In a nutshell, people, it's straightforward.
Time isn't saving time.
If you take a look at.
Exactly.
The metrics are all over this cat video network called the internet.
It's straightforward.
If you can convince the Rust Compiler to generate code, you're almost half there.
In terms of.
Rust has a couple of traits.
That are baked into the language.
In terms of, for example, the memory management.
Top checking and much, much more details as in terms of the links will be in the show notes.
The website to check out for is RustLang.org.
The thing is basically that in comparison to C or C++, actually what you do is when you use Rust,
you move the whole development now to the left.
If you picture your development now cycle from left to right, as in the left side of the equation where you start a design,
you then think of the low level design.
You finally start to implement and the right hand side.
Which country are we talking about?
Oh, we're talking about the 18th century.
It's called the V model.
But these were drafting Martin.
Oh, those hipsters.
Exactly.
If you look at the last back look.
Or implementation like a sprint.
If you take a look at, yes, a typical sprint.
You probably spend with Rust, you spend about two thirds coding in terms of designing, coding all the rest of it.
And you'd spend about a third of the overall sprint on QA.
In contrast, pro game language is like C, especially C++.
Python, as in wrong languages, they're not strongly typed.
Whether compiler based or not, you probably spend a third of the overall sprint duration coding and two thirds on QA, the whole code base.
This is actually the benefit that Rust brings to the table.
For example, is it strongly typed language?
It has typed what's what I'm looking for derivation in terms of the compiler can figure out.
Often they're not.
If you simply state it variable, then basically how the way you use it, what type it is.
So more often than not.
And this is prevalent in GitHub and other court repositories.
The compiler can figure out, by the way, how you use it variable, what the type is.
And this principle applies to your whole code base.
So the idea is that a lot of the things you were encountering when you QA a program.
As in quality or short program, once the build has been finalized, Rust actually shifts this to compile time, meaning that Rust will be or is actually able to figure out a lot of the errors.
That only surface and other program languages during runtime and quality assurance lifecycle already a compile time which saves you a lot of effort.
When you actually write code, rather than basically during your quality assurance cycle, if that makes any sense.
Okay, that sounds promising.
What about the much mentioned benefit over things like C of pointers?
You keep on technical we are getting now, aren't we?
Yes, of course, Rust has a couple of principles that relate somewhat to pointers in C, but let's take a look at the big picture.
Rust has a couple of notions that other program languages do not have.
Hence there's somewhat steep learning curve in terms of.
Rust is probably the opposite of Python in that regard in terms of if you start to learn Python, you get results pretty fast.
The more you progress, the steeper the learning curve gets. Rust inverts that to some extent in terms of it puts you through the steep learning curve at the very beginning.
In terms of you have to master a lot when you start to learn the language, like for example, the concept that a variable only has one ownership at a given time.
But that also entails the concept of not having a garbage collector in terms of the compiler can identify the ownership of a certain piece of memory at any given time so it can prove or can validate basically if you're valid, if you're valid in that principle.
The dangling pointers and new pointers and all the rest of it as an even use after freeing in Rust are nonexistent because at any given point of time, the compiler knows who owns a piece of memory.
So actually it can follow the lifecycle of a variable until its destruction that has a lot of benefits with regards to pointer problems, reference problems and you name it.
And that's exactly actually one of the benefits of Rust. Because of this principle, you are not facing no pointer problems, void pointers and dangling references because the language per definition excludes this from day one.
So why you in contrast to see why you're where you're shifting much of this effort actually to the later QA stage of development life cycle in Rust, you do this pretty much at compile time more or less.
So what are the guiding principle of our principles of Rust? Yeah, sorry, go ahead.
Yeah, sorry on the questioner because let's say every variable has a ownership then what about the things like buffers that need to be accessed by multiple.
Oh, well, they can't be multiple owners. So can they be multiple owners and then how does the compiler who owns it at any one point in time?
That's a very interesting question, because that brings us right up to the something called the center library. The center library has multiple training models, if you're referring to that, that support multiple currency control mechanisms.
Details are Rust lag dot org. So it goes right from signals, right up to channels and other synchronization primitives.
So similar to go lang, I might add, the multi processing capabilities are multi, multi three capabilities are built right with the language.
So even at that stage, closures come to mind because if you take a close look at us.
It's as usual, there are no major inventions been happening in computer science for the last.
I'm tempted to say 40 years. This is granted. This is granted talking now jokes aside, it's the the principles that Rust engages are not new.
Concerns to mechanisms have been run for ages. So the whole thing of locking are signaling mute Texas as an kind of synchronization locks and otherwise of it are not you.
Java has them. Other program, either program languages, even like other going back to the kind of 70s, 80s, now already had them. So yes, of course, Rust has them too.
But in contrast to that, Rust actually in contrast to to do the other these other languages, exceptions of course being present.
Rust actually has the has the ability to type them, meaning that Rust actually can check and compile them, for example, if a concurrent construct being typed is valid.
And that's and that's a major benefit because that, for example, excludes sending down a wrong type to a channel where the receiver will not be able to to to decipher this.
Let's put it this way.
So similar to go along, our concurrency is built right up into language. You simply, it's a matter of use case definition. You simply pick the idea of your choice, essentially.
Okay, so we touched on the, let's say the type checking and the handling of memory.
What else would you say is stands out?
Cargo comes to mind.
And before I forget, full disclosure, this episode is not sponsored by the Rust Foundation.
In case anybody is wondering, no, full disclosure, I've been using Rust on one of basis for the last two to another years.
This is my personal opinion. Martin was coerced into this episode. I'm not at.
But Martin finally gave him an answer. It might be a good idea to do an episode on Rust.
So it's for the great to go to it.
Yes indeed. What is cargo? Martin, any ideas?
Trusting that question back to you.
It's the, let's say, the matter that is transported by a transport vehicle.
Perfect. And with that, we've reached the end of the episode. Thank you for listening.
No jokes aside. For those of you who know sea, there's a thing called make.
For those hipsters out there who are familiar with Ninja, Mason or the rest of it.
Cargo is probably the next step. Hate mails actually go to Martin at Linus, Injus.
Where are you?
Where are you?
Along with all the other meals for the things that you subscribe.
No jokes aside.
Okay, Mason and Ninja probably are being the example.
The exceptions for that prove that we'll know jokes aside.
A cargo is a blend of a package management system and a build system.
With that, it combines benefits of both worlds because essential what you do is when you have a piece of rust called similar to pip in Python.
Pa long. I'm, I'm tempted to add.
Essentially, you take a look. If you have, if you have something that you want to code, you take a look at what's out there already in terms of in Python.
If it's it's the Python package index in Python, you take a look at the packages that are already out there.
And in, in, in Russ, it's, it's similar.
There's a package index called crates.io where any framework, any, any functionality that want to implement is probably already out there.
So similar to Python, if I'm challenged with implementing a piece of software in Russ these days, I simply take a look at the ecosystem that is already out there.
Either the functionality is already in the standard library as an STD or it's on crates.io.
So cargo will take care given a proper definition file in terms of cargo to a table will take care of downloading the packages, compiling the packages, depending on your target architecture.
And then we'll take care of compiling a source code in order and then generating statically linked executable that is ready to run without major external dependencies on your target platform.
Similar to Python, but only in a compiled fashion, meaning that again, you shift much of the quality assurance from runtime or from debugging time
to compile time because Russ is a strong is a strongly top language and cargo in combination with the rest compiler will help you to identify issues early.
That's the whole idea.
The slide drawback of course being that especially if you do an order project basis, cargo will download all of the packages that are required from crates.io down to the project directory and we compiled it for this individual project, meaning that a lot of potentially a lot of disk space will be spent on storing these source codes, these libraries, all the rest of it.
Before you even get to an executable need to say you can configure cargo to that extent that it will create a common library in your in your home directory.
Another and so that you save a little bit on the on the project storage requirement, but cargo is also able actually because you can define the individual version of a crate.
And the crate in russ in russ parlay is pretty much comparable to a module, for example, in Python code, you can specify the exact version of needed crate in the in the cargo in the cargo.
That means that potentially can have you can have many versions of crate in your library, depending on the particular requirement of a project.
If that makes any sense, I have a guess what the most downloaded crate is on there.
It's probably some sort of web framework.
It has to be ran.
Okay, indeed.
Okay, which is interesting because the sound library already has a pretty capable run with not randomly generated.
That's how that's directly in with the operating system, supply functionality, because at the end of the day, russ, like Python, like any other program language, makes use of something called Lipsy,
which is the standard C library, at least on Linux, that comes from the operating system.
And that directly interfaces, for example, to the entry generator of the kernel.
But maybe there's some syntactic shiver added to that particular crate, I don't know.
Yeah.
Yeah, that's us.
It's surprised me as well.
Martin, I reckon the next one on that list you're just currently looking at would be the way of two exit integration, right?
No, no, it's not.
It's actually called sin.
Not too far off.
As an SIN.
Well, as one ending.
No, for these two listeners out there who don't know what a D-wave 2X is, it's actually a quantum computer.
Not to be more precise, it's actually quantum in eating infrastructure.
The idea, of course, being that if you digress from your typical restaurant,
for a new architecture, I'm tempted to add venturing into quantum computing.
You actually can, you can actually can gain a little bit of, let's put it this way, runtime performance at a price, of course.
Given the fact that we are talking about a hipster subject, I thought,
exactly the quantum integration would be right down the list.
Ah, see, see, see, see.
That was great on that subject.
Needless to say, this episode or the idea behind the episode has been brought up by marketing,
who thought we should digress from the use of cadence of boring subjects.
Like Zik or Python or other technologies, right up to something that really stirs.
What's the bottom for the community in terms of hipster stuff?
So, if you have any other idea, but any other ideas about hipster subjects,
the email address is feedback at linuxilaws.eu.
Yes, we normally have some suggestions from BQ, don't we?
On hipsters.
We do?
Yes, Martin and Thomas, if you're listening,
a subject on cryptocurrencies and NFTs is actually next.
Yes.
And we came up with that idea, with that idea before you did.
Just adding this?
Yes.
Yes.
And of course, we are talking about the granular quarters.
Platent, yes, blatant, blatant, what's the bottom look for?
It's lagging off there.
No, no, no, no, no, no, no, no, no, no, no, not plot, but we want to get things out of it now.
A plug, sorry, blatant plug, the grumpy quarters are closely associated podcasts,
preferred podcasts, whatever you will call it.
As close to us, details may be in the show notes.
Grumpy's, if you're listening the iBANG, will be in an email, you get from us next.
Just in case you want to spawn details also maybe on the website with regards to property
to Patreon.
Yes.
Good idea.
Okay.
And you finally, and you finally remarks on Rust Martin.
Well, but I don't, you tell the listeners what you have done with Rust.
Hmm.
Most are talking actually.
Funny that?
Well, you haven't implemented your D-wave quantum and annealing program in that.
I can't really talk about this.
And you won't find the code on GitHub, I'm afraid.
And that's for a reason.
The foundation is on the Rust Foundation.
If you're listening for some strange odd reason, there have been, let's put it this way,
attempts in the past by marketing to get in touch with you.
Foyled is at the bottom floor.
Failed.
Feebled.
Spam filtered.
Probably.
If you want to get on this show, Rust Foundation.
Forget about the failed attempt of marketing.
Just get in touch with our feedback.
Our links are in-laws to the you and we'll sort you out.
We already had Steve on the show.
That was a great episode.
This is another plaque, of course.
Yes.
And we are.
Martin, Martin probably would say we are cheap.
But I'm tempted to say we're inexpensive.
Yes.
We are inexpensive.
Well, we value for money, right?
That's exactly.
That's the reason why so many people listen to us, I suppose.
It's more than ten.
Hang on, I thought the latest hats were a hundred.
Ten times, that I'm afraid.
Okay.
If marketing is anything to go by, we're looking way beyond that.
Can if you're listening that was a joke that includes the scrapers.
No, the point, okay, bottom line.
Rust is not for everybody.
But it may be for system programming.
Exactly, but if Microsoft and other companies are anything to go by.
It depends on the use case, but.
Rust has a certain couple of advantages that brings to the table that are not to be neglected.
I'm almost tempted to say it took rust ten years to get where it's now in comparison to Python.
Where it took almost 30 years to get to the present stage or state, rather.
And that's a little bit of a difference, all right?
And I'm really interested in the next 20 years.
And to see where Rust is going from, not just from a system language perspective.
Well, it's really done quite well in the last 10 years, right?
It's a past number of, let's say, more established languages in the population.
If marketing says anything, go by, of course, they can be rigged.
Donald, if you're listening, we are as much of a cheap.
The email address is how to rig your election at Linuxinlast.eu.
So never want the midterms send an email and we'll sort you out.
Okay.
Mr. Farber, president of the U.S. as in POTUS.
But you, those, isn't it?
Say, second.
But a few former presidents of the U.S.
But that's only one Donald Trump.
I'm afraid.
Well, couple of words.
Well, you see, the hint Martin is actually, I'm afraid.
Ah.
Well, yes.
But I am afraid to do that.
It's better that there's what if there would be two.
Bernie.
Bernie.
Yes.
Yeah.
Bernie, Mr. Biden, whatever.
If you want to prevent this, be my dresses.
How to prevent Donald as a POTUS at Linuxinlast.eu.
Just send a email.
We thought you out at no cost.
No, no, no.
And Donald, forget about the previous joke.
You won't get anywhere with us.
Especially in the lot of ACLU and other fine institutions in the U.S.
I'm going to the air.
Yes.
Is that going out before or after this one?
Asmogatin.
Or post-production, whatever.
Martin, unless you have fired them once again.
Well, I don't think we need marketing, right?
This is what you keep saying for almost the last two years.
Yes.
But then you keep hiring them once again over and over again.
I don't know.
I don't know.
Okay.
Someone must be.
Ah.
Must be the grumpy suit.
I'm sending them away.
You think they'll rig this?
Maybe.
I think so.
David Thomas, if you're listening.
Say it on you.
But that's enough plugs for the grumpy suit.
Anyway.
All right.
Any final.
Yes.
We should plug upcoming episodes.
Okay.
We can do that.
We have upcoming episodes.
Yes.
We do.
For example, the Mozilla Foundation.
Yes.
And when is this one coming up?
I'm marketing.
In the new future, I'm tempted to add.
We will have.
Sorry.
The schedule is somewhat fluid, isn't it?
Yes.
We will have Eric Rescola, confirmed for an upcoming episode.
Eric is one of being the, of course, in the CTO of the Mozilla Foundation.
Yes.
No, important.
Yeah.
Very good.
Very good.
And.
So let's have a look.
Well, we got Eric Rescola there.
And of course, the next episode or the, the, the, the, the, the episode after next will
actually be on system D or that mostly brings us me to the next plug.
Leonard, if you're still listening.
And I'm going to show you are.
Send an email to feedback and let us know.
So we can finally do this episode on system D and friends.
Okay.
Does he know that's a volunteer to come on, does he?
He did.
But that was some years ago and I reckon.
Rueling Red Hat came in between, I suppose.
I'm joking.
Anything that you want to plug Martin before we finish this off?
Well, I'm kind of looking forward to the multimedia episode.
That's quite a way.
Oh, yeah.
It's going to be 20, 25.
If marketing is anything to go by.
If Martin has fired, if Martin has hasn't fired them, but then.
20, absolutely.
Exactly.
Yes.
As that you all will be revealed on us.
Excellent.
And with that.
I think we have come to, to the end of this.
It looks a loss episode.
As usual, we would like to thank Hacker Public Radio.
Never mind changing the upload page or not.
Sorry.
Sorry.
I had to squeeze this in, but that's okay.
Our artificial intelligence thought about the upload at the uploading code.
So fair play to PyTorch, TensorFlow and all the rest of them.
So that I didn't have to spend the whole afternoon of fixing the code.
All as well.
Anyway, sorry guys.
The code will not be on GitHub, because that's really proprietary.
I was right.
Yes.
Anyway, the way if you want to send us money, the email address is sponsored at Linuxinlogs.eu.
Especially after September, or if you're one public with a spec in the autumn,
I do get in touch and we would really, we would really appreciate a sponsor.
We should do an episode on quantum computing.
Yes.
The way if you're listening, just send a mail.
We'll talk to you out.
Yes.
Otherwise, we will have to make something up as usual.
Speak to IBM or something.
Push comes to sharp.
Yes.
Worst thing possible.
Exactly.
But so D-Wave, please do it.
So we don't have.
So we don't have to do an episode on IBM.
Thanks.
Yes.
Yes.
Yes.
Anyway.
Okay, Mark.
Thank you.
And with that, see you soon.
Bye.
This is the Linux in-laws.
You come for the knowledge.
But stay for the madness.
Thank you for listening.
This podcast is licensed under the latest version of the Creative Commons license.
Type attribution chair like credits for the entry music go to blue zero sisters for the
songs of the market.
To twin flames for their piece called the flow used for the second intros.
And finally to the last year ground for the songs we just use by the dark side.
You find these and other dd's licensed under cc.
A website dedicated to liberate the music industry from choking copyright legislation and other
concepts.
You have been listening to Hacker Public Radio at Hacker Public Radio does work.
Today's show was contributed by a HBR listening like yourself.
If you ever thought of recording a podcast, click on our contribute link to find out how easy
it really is.
Hosting for HBR has been kindly provided by an honest host.com, the internet archive and
rsync.net.
On the satellite status, today's show is released under Creative Commons, Attribution 4.0 International
