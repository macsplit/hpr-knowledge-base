Episode: 2227
Title: HPR2227: FOSDEM 2017 H Building and the Hallway track
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2227/hpr2227.mp3
Transcribed: 2025-10-18 16:14:17

---

This is HBR episode 2227 entitled, Boston 2017 H Building and The Hallway Track and is part
of the series, Internews.
It is hosted by Ken Fallon and is about 85 minutes long and carries an exquisite flag.
The summary is, can internews the project in the H Building and anyone else at once to
talk.
This episode of HBR is brought to you by an honest host.com.
At 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair at An Honesthost.com.
I'm at the Goddall stand and I'm talking to Remi Versheld and what is Goddall Goddott?
So Goddall is 2D and 3D game engine open source under the MIT license.
It was open source in 2014 and that's grown a lot over the last three years.
We now have more than 300 single contributors and a core of maybe 2025 active developers.
And basically the point of Goddall is that you get a full engine with a full fledged editor
where you can create a game from scratch by placing nodes in a scene tree and then extending
the features using strips.
So for the scripting we use a domain specific language called GD strips which is quite similar
to Python in the looks but it's implemented in C++ in the engine.
So what is a game engine exactly?
Yes, a game engine.
It's quite a complex concept actually because we have several engine things which are referred
to as game engines.
They are stuff like rendering engines, physics engines which are sometimes referred to
as game engines but Goddall is all in one game engine much like some proprietary engines
like Unity 3D or Unreal Engine.
So where you get the rendering, the input processing, the OS stuff, the animation, everything
is in one big editor and you can create your game once and then export it to any platform
supported by the engine using a runtime binary.
And what sort of platform support the engine?
So Goddall supports all desktop platforms you can think of.
So Windows, Mac, Linux, FreeBSD, HighCOO, mobile platforms, Android, iOS, Windows Phone,
and HTML5 for the web.
How does it become so popular?
Sorry, how come you got, however you were able to get such broad support on all these
platforms?
Actually it's developed in C++ and OpenGL.
So we can support any platform that supports OpenGL or OpenGL ES.
And just for Windows phones, we use DirectX via a Google library called Angle which can
transcode to DirectX.
And yeah, the engine is built in a very modular way and the platform code is really well
split.
So it's quite easy to add support for a new platform, you just have to implement support
for how to create an OpenGL context and how to access OS functions like input processing,
creating the date, accessing files, stuff like that.
So what sort of games can you write in this thing?
So you can write any kind of game.
It's really free.
You have tools to make all genres.
You can make 2D, 3D, strategy games, multiplayer, arcade games, RPGs, adventure games.
First person shooters?
Yes, first person shooters of course.
And do you have a library of types of games where I can go and see examples of games?
Yes.
On the website, we have a showcase page where some of our users are sending a screenshot
from their games.
And there are also many open-source games that you can find, typically on GitHub.
There's recently introduced by GitHub tag features so you can look for the good or tag and
see what games people have tagged.
So for a complete novice, how difficult would it be to say, get something that bounces
a ball?
It's quite easy.
When you open the editor, it's a bit frightening.
It's like Blender.
It can do so many things that it's hard to understand what to do.
So my advice is to start by reading the beginning of the official documentation.
We have a step-by-step tutorial which goes through the basic concepts and how to make a simple
pong game very good.
And then I would say there are many, many video tutorials made by the community, like how
to make a floppy-bird game, how to make a space shooter, how to make a platformer game.
And then you can just go through each video where they introduce a new concept each time.
So when you see maybe the 10 videos, you have created yourself a full game.
Fantastic.
Do you, what sort of requirements would I need in order to run this?
It's a desktop application, is it?
The editor is a desktop application.
It runs on all our desktop platforms.
And it's as very little dependencies because we tried to implement as much of the stuff
ourselves.
And then we rely on some libraries, but they are of course compiled in the official binaries.
So Godot is distributed as one binary.
You don't have to install it, it's just 10 megabytes for the whole game engine.
And you can then just click it and open it and start working.
Then you can also download official demos to inspect their code.
What did Rona and Raspberry Pi?
It would run on Raspberry Pi.
I haven't tested myself, but basically Pi is Linux, so it supports our X11 protocol.
And maybe there's some work needed to make sure it builds on ARM, IRM for Linux.
But it should be quite easy.
Actually, there were already some interests in doing such ports, but we never cut back
from the guys who started it.
But it should be doable quite easily.
Excellent.
Is there anything else coming up this year that you want to tell people about?
Yes.
Our current release is 2.1, which was released last summer.
Our next release is going to be go to 3.0, where we are changing lots of things.
And mainly the killer feature will be a new physically based renderer, which is state
of the art rendering, which should concurrence or maybe be better than some of the commercial
renderers that you can find in Unreal Engine or Unity 3D.
So it's going to be quite awesome.
It was developed thanks to a grant by Mozilla, where we received last year $24,000, which
we could use then to hire full-time our main developer, which is also the engine creator.
And so for the last four months, it has been working full-time on the engine.
And the progress is mind-blowing.
Excellent.
Has there been, is there a company behind this or is this a completely free project?
Yes.
It's a completely free project.
It was started by two Argentinian guys.
And for a short time, it was sponsored by their own company, but they left this company
and now it's back as a completely free open source project.
And our legal entity is Software Freedom Conservancy.
Right next door.
Yeah.
Right next door.
Excellent stuff.
Well, thank you very much for taking the time to do an interview and enjoy the rest
of the show.
Thanks a lot.
Hi, I'm at the Software Freedom Conservancy booth, and I'm talking to you.
Bradley Kuhn.
Hi, Bradley.
What is the Software Freedom Conservancy?
So primarily, the Software Freedom Conservancy is what's called a fiscal sponsor organization.
We create a home for open source and pre-software projects, so they can join our organization
rather than forming their own nonprofit.
And the value that they get is the ability to get all the things done you need from a
non-profit that we take care of so they can focus on software development and documentation
instead of logistics.
So you're actually a Charity.
Yes, we are a charity in the US, where it's called a 501c3 charity in the US, which is
sort of the gold standard of charities in the United States.
And that means that we are chartered to do the public good.
And the public good that we pursue is making sure that open source and free software is
available and accessible to all by helping our member projects advocate about their projects,
educate new developers, run conferences, make sure they're trademarks in licensing order.
Pretty much anything you can imagine a project might need, we try to help them with.
So what are the requirements in order to become part of your conservancy?
So we have an application process, and if people are out there running free software projects
and think it might be a good fit for them, they can go to sfconservancy.org slash apply.
And there's a whole list of details about how to apply.
Really, the primary requirement is your project has to be community oriented and developed
by a large diverse group of people, individuals and companies as well.
But we'd like to see a lot more individual contributions.
And of course, need to be under an open source and free software license.
Yep, so for example, Hacker Public Radio is a critical commons by a state license.
Would that apply?
Well, so we are focused on being a home for software projects.
So since you're a very good service to the community for sure, but we're really focused on doing software.
And part of that's because that's what our charter says.
So when you become a charity, you define a charter with the regulatory body
and our charter is specifically for open source and free software projects.
So how are you funded?
So we're primarily funded by individual donations.
So if people are like what we're hearing about what we do and they think they would like to see us do more of it,
they can go to sfconservancy.org slash supporter and become a supporter for $120 US dollars per year
or $10 US monthly to support us.
That's in the price of a cup of coffee.
You know, a lot of charities use that phrase and I try to actually what I try to do is I say,
I say, if you like to go out to dinner, just go out to dinner one less time per month
and you'll have enough money to give us money.
And then people joke that I must only go to cheap restaurants because in most cities in the US and Europe,
you can't get a dinner for $10.
But then I say, you sound like you go to really fancy restaurants because I can't go to those.
But I'm too busy defending your rights.
Well, mainly because I work for charity and we are efficient with our dollars and I'm happy to make a middle class lifestyle working for charity.
But obviously we do not pay as well as the tech companies that many of our supporters work for.
But yeah, we are primarily funded by individual donors and if you have a company that can sponsor,
they can sponsor us too and that's another way we get revenue.
So if your company is willing to do that, that's wonderful.
And also, the interesting thing about our model is that we accept earmarked donations for each of our projects.
So if there's a specific one of our 30 and now growing member projects that you're really interested in,
you can donate specifically to that project and those funds are earmarked within our organization,
specifically to go towards that project in advance, its goals specifically.
So how are you different from the Free Software Foundation?
So the Free Software Foundation is a colleague organization of ours.
Personally, I also happen to be on the board of directors of the Free Software Foundation.
So I care deeply about that organization.
But the FSF's primary free software advocacy organization.
So they're trying to educate about very important issues around software freedom and the future of software freedom.
And Conservancy really is an organization that's doing services on the ground for the community of Free Software Projects.
We do a little bit of advocacy ourselves and we actually collaborate some with the FSF on that advocacy that we do,
particularly around copy left and education about the copy left licensing.
But our primary goal is to take individual developers who really need to get something done.
But they're focused on software development, that's what they know best.
They don't know how to run an organization, they don't know how to run a conference,
they don't know how to register a trademark.
We take care of those things, so we're really focused on services directly for the open source and free software community.
So, protection from getting sued for instance?
That's some of the things we have to do for our projects.
We do have certain amounts of liability protection for our projects when they join.
Our general factor matter is we don't think anybody's foolish enough to sue an open source project.
For various reasons that I would be happy to discuss.
But we do provide that protection if anybody were ever sued by a company or something like that.
We would be there to defend them.
So, what has been going on in the last year?
Any cool new things?
So, we've had a couple of projects join.
You're probably about to talk to, hopefully your listeners can slip over here.
The Good O project is here with us.
They're one of our new project, it's a game engine, so you'll be talking to them soon.
They're right next to us, so they'll be your next interview I bet.
So, your listeners can speed forward maybe and hear that one.
And so, they joined this year in a couple other member projects join.
You can see on our website.
We've been doing a lot of work for our member projects that are copy-lefted.
So, we have both projects under, we're licensed agnostic.
We accept projects that are copy-left and non-copy-left.
But the ones that are copy-left, they have asked us to do a lot of advocacy work in the area
of copy-left enforcement and copy-left licensing and education and compliance activities.
We've been doing a great deal of that this year.
I've been speaking a lot about it and educating.
I have a keynote here at the conference at Phosdom about that issue and I'd encourage
your listeners after they're done listening to your show to download a copy of the keynote
I gave here about the future of copy-left and how it works.
So they can learn more about that.
Super.
I'm coming up next here on the other plans.
Well, we always have plenty of plans.
We're hoping to bring in more member projects.
I like to say we have a queue of projects lined all the way through the house and out
the door and around the sidewalk projects that want to join conservancy and we hope to
grow and be able to add them.
We always prioritize the needs of our current projects over the ones who are applying.
And so we bring the new ones in slowly.
So we're hoping to do that this coming year.
We also mentioned one of our member projects is the Outreachee program, which is a program
to encourage participation in open source and free software from groups that are traditionally
underrepresented in our community, particularly women and people from other ethnic minorities
that are not available, that are just not diversely represented in our community.
And that's an paid internship program.
So those who are in those types of groups who would like to become an open source developer
they can apply for the program.
It's quite competitive, but there aren't many spots and they should apply.
Okay.
Thank you very much for that and enjoy the rest of the show.
Thank you for interviewing.
I always happen to be on Hacker Public Radio.
Hi, I'm at the BBC booth and I'm talking to.
Hi, my name is David Buckhurst, I'm an engineering manager at the BBC and I look after our
open source initiative, which kind of an internal collective of people who are kind of very
into open source and free software and want to make the process of the BBC releasing open
source software as easy as possible.
And have you struggled with that?
Not really.
I mean, most people I think feel that kind of because of the BBC's public remit, actually
opening up the software we're building is kind of an important part of that.
So it tends to be people trying to find time to do it more than any kind of real challenges
about actually getting permission or anything to get it done.
But yes, there is that on the one hand, but there's also the argument that if they don't
pay the TV licence, then there shouldn't be able to get the code.
Yes, well, I think we kind of focus for the TV licence mainly on the broadcast space.
So I think we still see that the news website and a lot of the educational initiatives
we do are kind of for everyone, so it just happens that the licence fears how we fund it.
So what sort of software have you available?
Is it broadcast related or all that?
There's so much stuff really.
I mean, so things from the microbeats, which is obviously a big well-known one, but
also we've got things like the like TAL, our TV application layer, which is our foundation
for all of our smart TV apps.
And when we made that available open source a number of years ago to kind of just because
we found it so difficult building across all these platforms, just to open it up so everyone
could have that level playing field.
So if you go to your website, you're going to haul this stuff that you contribute to?
Yeah, I mean, I think even that isn't a complete list because our R&D department do a lot
of stuff that they make available, but we try and just kind of collect it together as
a catalog so that there's kind of one place you can go and look and one point of contact.
Quite a lot of interesting stuff from me for video stuff and TV metadata, so it's
right up my alley.
Can we talk about the big computer?
What was the motivation behind building that when we've got the Raspberry Pi and we've
got all these other devices?
Why were the broadcasting company waste, customers' licence fees in order to build this?
Yeah, I think the microbeats, we found that we were missing that kind of real entry level
to programming for kind of high school children and certainly, you know, why I got into software
and programming technology was because my school had a suite of BBC Micro's, so I kind
of see this as the kind of the evolutionary equivalent, but really it's targeting kind
of much younger children, it's that stepping stone to kind of the Raspberry Pi and so for
example, my four-year-old was programming on the microbeats, you know, and now he's
into the Pi.
It kind of, I think it's a real kind of stepping stone for kind of young, interested software
developers.
So can you describe it physically, how big it is, what it does, how we can get it working?
Yeah, it's only one and a half by two inches, tiny little board, LED display, it's got a
couple of buttons, it's got rotation, sensors, gyros, and so you can start with the most
basic program, just maybe programming an animation on the display and then kind of move on to,
you know, maybe games based around tilting or pressing the buttons, and then it's also
got them connected so that you can extend beyond the actual microbeat itself and tinker
with robotics and driving electronics, so we've got some examples here of things people
have built.
Can you walk me through them and I'll take some photos later?
Okay, so this is Dave too, which is the digital autonomous vehicle for education,
which is basically a clap-based robot, so you can clap and it moves forward, one clap
to stop.
So we've got here a motor controller and this is the bit here, is it?
That's the microbit plugged in at the top and it controls the whole thing.
And then there's a break off board to a breadboard running some water to the two integrated
circuits.
There are 555 timers or something?
I didn't tell you, I didn't build this one, so you got some, what it looks like, 555
timers, big capacitors, a lot of capacitors and some LEDs and a transistor and a 9V battery
on the bottom.
We've got a little motor and I'll take some pictures to put into the show notes right
here with wobble cam.
Excellent.
That looks very nice and it worked.
Moving on?
Yeah, and so this other demo is a sequencer that we've got set up, which is just demonstrating
that the kind of way you can kind of take the microbit next, so they're connected via
Bluetooth, all talking to one central microbit that's looking after the sequencer and then
playing via a Raspberry Pi through a speaker we've got here.
So let me just describe this.
There's the board there with one, two, three, five rows of eight microbits and are the
microbits connected to each other, they're just getting power from each other.
Bluetooth?
They're just connected to the batteries, so that's the wires you can see and then Bluetooth
connected to this microbit.
One single microbit here on the ground.
And that must be a nightmare trying to communicate all these devices together.
It's setting it up.
It's been a challenge, but actually it works surprisingly well and once it's going it's
been pretty stable all day, so I touched wood right there.
So the idea from I've been a little bit facetious earlier on, but I think the idea of the microbit
and crevmium were among us to also do TV programmes and additional websites and stuff.
So the educational pack that goes with it is quite an important part of it, so that was
sent out to schools.
In fact we sent a microbit to every 11 year old in the UK and then that was tied into
the curriculum programme and then teachers had the support to be able to teach about
it.
Did you say a feedback from the teachers been?
Yeah, I mean very positive, I mean the kids we've spoken to absolutely love it, and as
I say my own kids are just totally switched on by it, they've really got them into the
idea of programming and playing with hardware.
Is there something that's available outside of the UK or is it just a kind of...
So the microbit foundation, which is kind of a company we spend, it was a spin off to
look after the microbit, they sell it on their website, so you can order it.
How much does it cost?
It's around 11 euro for just the microbit on its own, but you can buy the teaching materials
and the battery and things for about 15 euro, and then there's shipping costs on top of
that, so you probably have to find some.
Okay, very good, so any other projects that I should know about?
So we also do a lot of automated testing, so we've got a project called Hive, which is
basically it's our internal test lab, and we've made that all open source so that anyone
couldn't kind of go and set that up themselves and use some of the same techniques for testing,
and it kind of manages a lot of the pain that's normally associated with running tests
on devices, so we test on our TVs, we've got a whole wall of TVs, we've got loads
of mobile devices, Android and iOS, and any developer in the BBC can just send their
tests to a device and run tests on it or bring back screenshots, so it kind of really
speeds up the development.
Are you doing any OCR on that or not?
No, we aren't, so pictures come back, yeah, but we're kind of looking at where we go
next with that, because yeah, at the moment it's all, we do some kind of basic sort of
screenshot comparison stuff like that, but it's something we're going to think about next
yet.
Okay, well, was there anything else I missed, or the links to the websites in the show
notes, bbc.co.uk for such open source?
Absolutely, yeah, I mean the best thing to do is take a look at the website, follow us
on Twitter, whenever there's a new project or anything of interest we'll post on there,
so.
Excellent, thank you very much for taking the time and enjoy the rest of the show.
Hi, I'm at the Wolf SSL booth and I'm talking to you.
Hi, my name is Chris Conlon, I'm a software engineer with Wolf SSL.
Can you tell people what Wolf SSL is really quick?
Sure, yes, a Wolf SSL is a very lightweight, very portable SSL, TOS and crypto implementation.
And why do I need another one when there's open, when we already got open SSL?
Yeah, that's a great question.
So we're 20 times smaller than open SSL, so we fit very well on resource constrained
and embedded environments.
We also scale well up to desktop server and enterprise systems as well.
So you've been, when you say smaller, you mean not the community, but the actual physical
number of bytes?
Exactly, yeah, we're 20 to 100 kilobytes is our standard build size, but we are very
widely used.
We have over 2 billion secured endpoints on the internet, we estimate today.
What sort of devices are those?
SSL and TOS is very horizontal, so that could be anything that connects over network
or connects to the internet.
That might be automobiles, that might be smart appliances, IoT, or just normal desktop applications.
Okay, and what sort of license are you releasing this under?
So this is a dual license product, it's a GPL2 and a commercial license.
Similar to the license model that my SQL used.
And so I guess it's kind of popular now with the swath of internet of things devices.
They would really be relying on World Pass SSL to provide the engine encryption, I'm guessing.
Yeah, they will.
And we have lots of IoT customers right now.
Lots of smart light bulbs, smart door locks, routers, lots of fun stuff like that.
What has been the major thing that's looking back at the last year?
What's the major thing that has happened within the project?
Sure, so within the last year we have a couple of new products, we have an MQTT client.
That's a Polish subscribe technology.
What's that for?
What's that for?
So you have brokers and then you have subscribers.
And so one use case that we're thinking about using it for in the near future is a secure
firmware update system.
Okay.
And what's that?
So updating your embedded device firmware remotely and securely.
Okay, so when the inevitable happens under DDoS, then you at least are able to go into
somebody's home and fix the device for them.
Yeah, the device may need to update its code, it might need to update certificates.
And this would just provide a mechanism to easily facilitate that.
And is after they recent attack, botnet attack using Internet of Things devices, I'm guessing
that's becoming a popular thing to be able to, can you update all the firmware on the
on my remote light bulb, for example, or?
You know, it would be dependent on the vendor.
But this would just be a tool for them to use to make that a little easier to do.
I'm coming up next year.
What's the plan?
So we're going to continue to grow the company.
AdMAR developers, push out some new code, continue development on our SSL, TLS, crypto.
And we also have an SSA server that we're bringing up.
We've also got some ports to new hardware crypto platforms in mind and new open-source projects.
Is the working on a crypto really a thing that you want to invent your own crypto, or
is this, are you just re-implementing schemes that are already out there?
Yeah, so we're implementing specifications that have already been written.
It's very hard to develop your own crypto solutions.
And if you do that, you should be very careful.
We have 20 people just working on this all day every day.
And so how do I know that your stuff is secure?
Yeah, so we've been around over 10 years.
We do a lot of testing.
We do a lot of static and dynamic analysis.
We do a lot of unit testing.
Do you have anybody externally come and look at your code?
We do have, we have had several of our larger customers, security labs go through our code.
And look at it more of a line-by-line analysis.
And we also work with security researchers at various universities that have analyzed
their code base and sometimes contribute back, even changes that they find.
That's awesome.
So, what are you looking for here at FostM?
What's your goal?
Our goal is to just kind of spread the word about Wolf as a Cell, find some cool new projects
to work with, help our users, use Wolf as a Cell more effectively.
Yeah, and we're having fun.
Cool, excellent.
Couldn't say more.
Thank you very much for the interview and enjoy the rest of the show.
I'm at the Gilmore lab stand in the Hitch Building and I'm talking to Daniel Hittgirdo.
From Biteria.
Okay.
And what is Gilmore lab?
I'm pronouncing that correctly.
Gilmore lab is a tool chain to analyze open source communities.
So basically, what we do is to retrieve information from any of the usual data sources, so you
can go to Git, Care Rate, Mainly List, IORC channels, Stack Overflow, Twitter, all of them.
The tool chain basically aggregates all of the information in a NoSQL database.
In this case, this provides station documents and those are uploaded to Elastic Search.
Okay.
So, why would I want to gather information from an IRC channel and put it into Elastic Search?
There are several approaches.
So, if you're a community manager, probably you are interested in engagement of your community.
So, who are the new developers?
How good you are retaining developers and who are those that are living in the community?
Maybe you are interested in saying today hello, but also to say we are missing you, why
you left the community, right?
So, you want them to come back to the community.
So, you need data in the end to make decisions and supply specific policies to retain those
developers.
So, you're going to monitor your users?
Exactly.
But, this is for the good.
In a nice way.
Yeah, exactly.
We try to, this is, this is, we are working with some communities like the Linux Foundation
and the Cliff Foundation.
All of the tool chain is 100% open source.
The data is also, their data is not our data.
So, we only provide the data services.
I mean, you already know if you're checking into Gaze and Typing on IRC, by the policy,
it's either public or not.
So, I'm messing with you a little bit.
Is this actually useful?
I think so.
So, we have some good customers, let's say.
And there are some people using the tool chain, as far as I remember, I can say that some
people from the open source group from Samsung are using the tools on their own.
This is also used by some research labs around the world.
And Bitoria, which is the company providing the services under this, is we also have some
good, let's say, customers.
So, as I mentioned, we are also working with Wikimedia Foundation and the Cliff Foundation
on Linux Foundation.
We are also working with companies such as Red Hat.
So, yeah, I would say that it's quite useful for communities and community managers.
So, everything is open source.
What sort of licenses are depending on the project, depending on the components?
There are not licenses.
I mean, the license we use is GPL, version three, for the source code.
It's Python, by the way.
So, you are more than welcome to Cam and Send Pull Request.
And the data is yours.
So, basically, what we only do in Bitoria is to build the environment, and we provide
the knowledge to say, okay, this is, let's say, the data you need and the metrics you want
to have.
So, we build the panels.
But everything is open source, so you can do it by yourself, basically.
So, you're offering consulting services?
Yeah.
But also, maintenance and, yeah, and maintenance of the service and so on.
General, kind of Red Hat issue type model.
Yeah.
No, just maintenance and support, okay.
Yeah, it's more maintenance, and then, let's say, we sell knowledge in the end in terms
of the company.
Okay.
What made you do to what, how did you wake up one morning and decide, yeah, this is
something we wanted to do.
Where was the need?
So, we all come from the university, something like we've been researching in open source
for the last 10, 15 years.
And then at some time, we started to have some, let's say, more industrial oriented needs
from the companies and the people.
Things like we need a new backend or any two guys to work on this specific needs or studies
that they have, because we don't understand where our bottlenecks in the software development
process are.
So, then we said, okay, maybe we need to try it is, and then we went for the P30A, which
is the start, and we started for a half year or so.
And then, well, we started for, we are now 12, so it's quite good.
So you might use that to see, you know, if you're having an issue, getting developers
to come in, but they're dropping off after a few weeks and where you can do improvements
within your tool chain, I guess.
Oh, can you check in?
This will be giving an example, developers, you see developers coming along and then the
due two commits and then the go away.
You can try and see that as a problem and how you're going to a community manager could
then decide how she's going to go and fix that problem.
Yeah, you are absolutely right.
But I have to say that this provides information about broader scope, so this is providing information
about activity, community and process.
So in terms of activity, this is counting, let's say, potatoes, right, but then if we
go for the community, we can go for which companies are working with, which companies
or developers interacting among them and so on.
And you can say the retention and how those are being attracted and retain and maybe they
are living.
And also in terms of process, so an example is, as far as I remember, the OpenStack
community, they had this issue, they didn't know where they had some bottlenecks in the
code review process.
So then we went for this analysis to understand if the problem was in the people reviewing
or in the people submitting the code, so you can have the time to review or the time to
submit.
And you were able to identify that?
Yeah.
So then after this, well, I don't know if they decided to go for because of these results,
but they started some training process of the submitters.
Okay, very good.
So what is coming up next year?
Do you have any plans and new releases?
What are you looking for?
Well, first, anyone is more than welcome to come to the community.
So we have an IRC channel, Metric Timoir, so you can go there and ask everything.
We are a small community, but quite active.
As I mentioned, this is Python-based, so it's quite easy to develop there and quite
straightforward to develop new vacants for the next year.
I don't know.
But probably to keep working on Kibana, we are now migrating to Kibana 5, which was released
some weeks ago, so we are basically in that process.
Okay.
Excellent.
Anything else on the list that you want to mention?
I love hos them, so I'm thank you very much for the interview.
No problem.
I'm at the MySQL booth and I'm talking to.
Mark Lee.
Hi.
What is MySQL?
So MySQL is an open source database, the number one open source database, both a clustered
and replicated database, highly available, and easy to use for pretty much the web.
But I thought MySQL stopped as a project when they got forked by somebody else.
Now it didn't stop.
It's actually moved forward a great deal since we got taken over by Oracle.
So what sort of changes has occurred within the project then?
Basically, we've been focusing on replicated clustered solutions and working with an overall
clustered solution with a router transparently.
We're working on data dictionary at the moment, a real data dictionary in the database to
help scalability.
And focusing a lot on things like security, scalability, performance, those kinds of things,
instrumentation.
Those are our major focuses right now.
And what's the license that's just released under?
It's under GPL, still.
We haven't changed that at all.
The model of MySQL is the same as it was in MySQL AV, pretty much.
And the support options, it's owned by Oracle, Oracle, have their own database.
How does that sit together?
The way we see it, like I said earlier, we are largest in the web, where Oracle really
doesn't sit that much, they sit in the enterprise.
So we continue to be in the same model that we always were.
We sell our enterprise subscriptions, a yearly subscription.
That provides support and monitoring tools and security and some scalability tools or
plugins into the server itself.
That's the way that we see it.
We'll continue to work to be the number one web database.
So two different spaces.
There's entirely two different spaces.
We focus on web and Oracle focuses on the big enterprise side.
That said, the name Oracle probably ain't going to hurt you either.
Having the name Oracle, ain't going to hurt you either, you're going in.
It doesn't hurt us, it's actually been a very good thing for us in large enterprise
spaces as well.
And it's funny, in large enterprises, they use Oracle a lot, but they also use MySQL a
lot.
There's a lot of departmental applications and things like that where MySQL is still used
and definitely on the web of those enterprises as well.
So what's any big changes that were happening last year that you wanted to tell us about?
Keystones, milestones?
Last year we released 5.7.
This year we've gone on to release what we call group replication, which is a virtually
synchronous replicated cluster of systems in 5.7 itself.
What does a virtually synchronized cluster of servers mean?
So it's not actually fully synchronous replication.
The system agrees on changes, so it's all pushed into a PaxOS base group communication
system.
So they all agree on the changes, they get replicated and asynchronously applied, but
they will get applied because the agreement of the protocol basically ensures that they
will be applied properly.
So there's no risk of loss of data in this process?
There is no.
That's always good when talking about database.
I like that as a database.
Yeah, we like that as well in databases too.
Coming up next year, what's the plans, anything cool happening?
So at the moment, we're focused on AO, the next big version of the server.
Like I said earlier, we're doing a transactional data dictionary, which is probably something
that's been most requested with my SQL, the way that we manage information on objects,
tables and all that, has been pretty poor up to now, but with the data dictionary, it's
much better.
It's fully managed in ODB and a transactional storage engine and not stored in two places.
So that's probably the largest piece of work that we're working on right now.
It's a massive project.
Were you a mySQL developer before Oracle took you over?
I have been with mySQL A, B through Sun and Oracle, so I've been with the company for
11 and a half years now.
Have you found the transition?
I've found it very positive from our perspective.
We have had massive investment from Oracle, so the amount of QA and the focus on QA and
having a stable product, a good product, has been something that Oracle have pushed
us very hard on, which is something that is actually very different to my SQL A, B.
We weren't as thorough in the QA processes where Oracle believes that we should be as
solid as possible and as secure as possible.
So those things have been hugely positive.
They've grown all of our teams, they continue to push us to make a better product, so it's
been very positive.
Anything else that I missed that we should, don't you want to get across?
No, I don't think so.
Enjoy the rest of us then.
And I'm talking to Andrew Shadura.
And what's your project?
The project is called CaliTea or CaliTea depending on what language is your first language,
basically.
And it's a great word, which means the best view.
And this project has started as a fork of previously free software projects, when the original
authors decided they don't want to keep it full of free software.
What was that project?
It was called RodCode, it still exists, and they came back to the free software model,
but they decided to go for OpenCore model, which is something we don't quite like.
So it's not likely that the project will merge back at this moment, but yeah, or with
help of free software, sort of freedom conservancy, we made a fork of the project that can be
developed in the community.
And what exactly does the project do?
The project aims to develop free software calibration hub, basically, like, well, there's
lots of software, there's GitLab, Gogs, and other things, basically, GitHavi can install
on your own server.
And unlike many other projects, these projects are both Git and Mercurial, which is basically
how it started.
The original author decided to write Mercurial repository server, and then he added the Git
support.
We support full requests, workflow, we have some nice counterview tools.
Unfortunately, there's no backtrack yet, because this is not an easy task to design a
backtracker from scratch in a very good way, so we decided that we probably shouldn't
do this at this moment.
And what's been happening in the last year, and what are you going to be doing this
year?
As this project is based on quite an old code base, I think the original project started
in 2007 or something like that.
We have quite a lot of code, we need to clean up things to improve.
So we've been doing a lot of clean up stuff.
There was an initiative to pause the code base from Pylons, which is the Web Framework
League.
We've been using it for quite some time.
The Turbogees, which is another way of Framework, which has been developed unlike Pylons.
Pylons has been deprecated by the original authors, they now develop.
It's called Pyramid, but Pyramid, it doesn't have, there's no easy way to migrate from
Pylons to Pyramid, and Turbogees maintains some compatibility with Pylons, so it may
be easy to migrate there, and the upstream of it are some support in this migration process.
So there's a group of people working on that, and there's also been an initiative which
I started in fact to migrate the project to the front end to Bootstrap, because Bootstrap
is a CSS JavaScript library, because we've been using a lot of CSS, and Yahoo, you idle
kids for JavaScript, and we've been trying to migrate from that for some time, I don't
know, our custom JavaScript, they look very like 2000 something, not more than enough,
not like GitHub at all, so I started this, I tried to do some work, but one person was
not enough for this, and then another guy joined, and started it basically from scratch
incorporating bits of my work, and we've done some progress, quite some progress, and
I hope we can finish the migration in a couple of months.
Fantastic, where can somebody guess your project now, where can I get the code?
Well, if you go to CalityACM.org, there's a Mercury repository there, you can clone it,
and well, there's a recommendation on how install it, unfortunately there are no packages
in distributions, yes, I tried to package it for Debian, but because we incorporate lots
of code from different projects, the copyright compliance is not an easy job, because even
though we worked with software freedom conservancy to be fully GPL 3 compliant, unlike the
linear project was, Bradley Kuhn and other guys, me included, we made quite a lot of work
to document all code we have, and fully comply with GPL with 3, Debian, which I'm also part
of, has some slightly strict requirements, and I wasn't able to fulfill them yet, I'm
still working on that, but yeah.
Okay, cool, and what do you think of something this way?
I know, if you're someone who knows how to code in Python, and knows something about frameworks,
you're welcome to join the project.
Okay, you heard it here folks, thank you very much for taking the time, and enjoy the
rest of the show.
Thank you.
I'm talking to Reinhard Moots, what is the, what project are you here promoting?
Well, we are promoting a project very easy to explain, the project covers the fundamental
rights people have in the internet.
We associated a new club or association, located in Graz, that's Austria, and the name
of all is World Privacy and Identity Association, in short WPIA.
And what's the purpose of this organization?
The purpose is to set up and operate a trustful service provider, where we are in the face
to set up three legal entities.
The first entity is our association, which is done.
We are registered at the official registration office in Schliomark, Austria.
We have several registration numbers at the data protection court, we have a dance
number, and so on.
The second and the third legal entities are just in the beginning, one will operate and
one the certificate authority, and the other one will be founded as a cooperative.
The idea of cooperatives is not new, the UN has made it a more immaterial, I forgot
the word.
What's up in German?
Immatrijele's culture good.
Cultural importance.
Yeah, maybe.
Okay, we'll go with that.
We will set up a cooperative, and the cooperative is open to all kinds of organizations.
The basis of all of the association, the cooperative, and the incorporation is the respect to
the human rights in its full extent.
We think that, for example, if you deploy certificates, you have to manage trust.
The basis of all is trust, and trust is one of the basics in human rights.
If you have no trust, or if you lose trust, and so on, you may lose your rights, and that
is not our target, our target is really to allow people to organize their rights in digital
environments.
How does that, so you're an umbrella organization for certificates authorities?
Just for one.
One, we're just setting up three legal entities, one is an association that is done, the second
one is an operating incorporation, that's the CA, or certificate authority, it's our
certificate authority, and the third one is a cooperative.
The certificate authority will get its customers only through the pipe of the association,
or the pipe of the cooperative, so it's not on the market to look for customers or to
sell certificates.
No.
The members of the association and the cooperative have the right to get as many certificates
as they need, and the members of the association will not pay money, just the membership fee,
and the same will happen with the cooperative.
The cooperative will pay membership fee, which is very low cost, and they at least will
pay the cost to operate a certificate authority.
When our final set of is done, after an audit, and we will start with an audit on the first
day we deploy certificates, there's no test phase.
No phase to show that we are able to demonstrate, we can't do it, no, we will start with an
audit on the first day, and we think that audit is successfully passed one year later.
We will start in this year of summer, so the audit should be passed in 2018.
And then do you think that you will have browser support, or are you?
Immediately, because if we are a member of the capforum, that's some kind of an association
between browsers and CAs, if we are a member, then we enter the trussers of the browsers
more or less automatically.
Okay, very good.
That's the procedure, yeah.
And how do people help or how do people get involved in the project?
At any time, they have possibilities to deploy, for example, development and software.
They can help in documentation, they can help in making propaganda for us.
For example, showing and demonstrate on workshops how the software works.
I have to say, the software is used in two different areas.
The one area is our own certificate authority.
It runs the software, and the results are certificates which we deploy.
The second and totally different use cases that everyone may download the software and
use it, for example, to set up its own internal PKI, PKI.
So you see, an internal PKI is run, for example, by every government in this world.
The biggest one is the West administration.
If you see Euro, the biggest internal PKI is run by the administration of the Federal
Republic of Germany, and so it can use our software.
The government will not do it after their own capabilities, but the market, there are so
many organizations who have problems in this, they may use our software freely.
Okay, very good.
Excellent.
Was there anything else we missed?
Or are we covered?
No, no.
That's all I have to say for the day.
And what I wish here at Forstown to get new members into our association, and everybody
is welcome.
Excellent.
I'll have links and everything in the show notes.
Thank you very much and enjoy the rest of the day.
Okay, thank you.
Hi, I'm at the XMPB booth, and I'm talking to Sam Whitehead.
Hi, Sam.
Tell me.
First of all, tell everybody who didn't listen to the shows that we've done before.
What XMPB is?
So XMPB is an extensible framework for communicating between any two arbitrary nodes on the internet.
It's mostly used for instant messaging, but also in a whole suite of other things, including
logging and data synchronization and all sorts of different uses.
And how secure is it as a message?
Well, like anything, it's sort of as secure as you make it, but one of the main goals
of XMPB is of course to be secure, especially in the instant messaging field.
So by default, almost everything is encrypted.
Both with your normal client to server TLS, like you would expect with an HTTP connection
but there's also the ability to do full end-to-end encryption between two nodes talking to
a server can also encrypt between themselves so that the server doesn't know what's going
on.
Aside from encryption, things like authentication use standard protocols like SASL, the secure
authentication and security layer to make sure data stays safe and passwords aren't sent
over the wire in an unsafe way.
So it definitely security is one of the primary goals.
So this isn't really a product like Firefox, it's more like HTTP rather.
Right, absolutely.
It's approachable.
It is.
Yeah, XMPB, a lot of people use the name as if they were talking about a product which
is unfortunate because I think that confuses people, but it's the extensible messaging and
presence protocol.
And it really is just something to build your product on, not something to sell as a product
itself or to add to market as a product itself if that makes sense.
Yeah, it does.
Is there like a foundation behind it?
There is.
The standard is mostly maintained by the core XMPB specifications are maintained by the
IETF, the Internet Engineering Task Force.
The XMPB is weirdly for extensible, which, and the extensions and all of the development
on the protocol is handled by the XSF, the XMPB Standards Foundation.
And most of the people here at Boston today are members or affiliated with the XSF.
I must say, now that I'm reading more stuff, I'm seeing XMPB as a protocol being used
a lot more, is that because of the Internet of Things devices or is that because of
development, methodologies have changed.
Yeah, definitely.
That's definitely part of it.
The IOT or Internet of Things crowd has definitely become one of our biggest proponents
recently.
We've had a lot of companies building IOT devices that use XMPB for communication.
One of the sort of nice things about the protocol is it's all streamed and you end up with
it's streamed over persistent connections, which is really good for small devices that
need to save battery, where you don't want to be having to create a turn your wireless
radio on and create a new connection and then send some data and then get some back
and then turn it off and then have to do it every single time someone wants to send
data with something like XMPB, you can create a TCP connection and then leave it and your
radio say can go off when nothing's being transmitted and you don't have the overhead
of, and then come back on only when it needs to receive data and you don't have the overhead
of all of the extra tail time creating a TCP connection, you just can keep your old one.
So it is popular.
That's interesting.
Is there a way to explain how that would actually work?
Yeah, that did get a little technical, I apologize for that.
No, we're fine with technical, it's just, one of the big common misconception about
XMPB is people all the time say, oh XMPB is terrible on mobile phones because it's, you
have to always keep that TCP connection so it's very bad for bandwidth.
The thing about mobile phones though is the radio, in an LTE radio, has two states and
a power saving mode which can operate in both states.
And when you connect to a tower, you make a TCP connection, you have to turn the radio
on and there's a long tail time between where the radio has to turn on and that's using power
and then you have to create the TCP connection.
But once that connection's created, the machines are talking to each other unless data's
being sent.
You just have a TCP, I forget what the TCP spec calls it, a connection idea or something.
And you know to contact this machine when you want to send data.
So if no data's being sent, the radio can go off, it can be asleep.
And then when you're ready to send data, you can wake it up and send data over that same
TCP connection without having all the extra tail time of creating, and all the time creating
a new one.
Similarly, at least on mobile phones, when data needs to be sent to the mobile phone,
in the low power state, you can't actually use a TCP connection.
You receive a, I think it's called a paging message from the mobile tower.
And the paging message is, just says, wake up, I have some data, I need to send you.
And then you can put the radio into the high power state and start sending data over that
TCP, or receiving data over that TCP connection.
So having that persistent connection saves a massive amount of battery over say something
like HTTP, where you can have a persistent TCP connection, but maybe you do, maybe you
don't.
He's also asynchronous, which is very nice.
You don't have to have the problem of similarly with the HTTP say, since that's the protocol
everyone knows, I kind of used that as an example, where it's very synchronous.
You send a request, then you wait for a response, and there's some extensions to do pipelining
and that you never quite know and different things support different, maybe they support
it, maybe they don't.
XMPP is always asynchronous, so you send what you want, and then you wait, and you might
get a response back, you might get them back in a different order.
So it's sort of like asynchronous programming, and it adds challenges, it adds a bit of
complexity, but it also means on something like a mobile connection, you don't have to be
waiting for a response before you can send another request, it's mostly polypipeline
that you can.
I'm assuming that on the, from a connection point of view, if you met a TCP connection
here in Brussels and you're on the train and you have nothing to send, and you arrive
in Antorporic on the different cell network, is that connection still going to be open,
that's still TCP?
Yeah, that's a great question.
I am, I think, and I don't quote me on this, I know it's on the internet now and I've
said it forever, but I don't believe that's handled by TCP normally, because you've changed
IPs, so it can't know that it's the other end can't notice and back, but in XMPP land
anyways, we have a protocol that's widely implemented called Stream Management, and what
Stream Management does is it kind of, it does that, but at the application, the XMPP
layer, the application protocol layer, so when you, when you first make your connection
and you do your authentication or, or connect the, your server, it reserves a Stream ID for
this current connection it's making, and if you resume within whatever your server's
timeout is set at, if you, so you swap mobile networks, you go from a cell to your Wi-Fi
connection at home, say, it, when it, it reconnects, makes perhaps a new TCP connection, so you
have a new IP, connects back to your server, and says, I have this Stream ID resume where
we left off, which means it can sort of resume almost instantly and not have to go through
the full handshake and do the, and negotiate all the, or negotiate the Stream state or whatever,
whatever the case may be, whatever. I'm assuming actually, if you're, so long as, if you arrive
in Antwerp on the same mobile operator at least, then connection might survive, but that would be
a, that would be a real low level thing anyway. Okay, anything cool going to be happening this year
with the protocol? Well, I'm, I'm particularly excited about, we've just, this past year released the
at 2016 XMPP compliant suites, which are sort of a, not really a technical thing, just a document
that says, here are sort of the recommended extensions and recommended way to configure an
XMPP server for a modern, kind of for a modern chat experience, for instance, it's also
for other things, but I tend to focus on the instant messaging side of things. And we're just,
hopefully, just about to release the 2017 suites, which take it a little bit further and kind of
refine some of our, some of our previous choices and some of our previous recommendations.
And I'm really looking forward to getting those through and making them kind of official
recommendations of the XMPP standards foundation. And how is, I know this because we've spoken in
previous times, that this has been the moment going effort from the XMPP for me guys basically.
How has the feedback been from the vendors to, to that process? Have they been, have they complied,
have they fixed off? Have they? We've actually, yeah, we've actually seen a, it's been great.
The compliant suites we kind of stopped doing for a while. I think the last ones were in 2010 or
2009. And we, so we just picked them up again this past year for 2016. And already we've had lots
and lots of people come forward and fix things and ask what, how they can best implement certain
things to become compliant. Daniel Gulsch, the author of Conversations, a popular client for
Android, wrote a, wrote a little script that tests servers for compliance. And he's been generating
a large table of kind of, you know, red green. What has, what has what features and what is compliant
and is not. And that, that especially having that visualization of, here's exactly, this is your
server that does or does not do things. Has really, we've had all sorts of people on that list
reach out and say, yeah, this is great. What can I do to, to fix this? I know it's broken, how do I
fix it? Yeah, or what can I do to make my users battery life better or make my, my users lives
better. And that, so that's been really nice. And I, I hope that continues. Anything else that we
should know about? Nothing off the top of my head, but definitely check us out, xnpp.org if you're a
protocol developer or a technical person. Or if you're not, there's a many xnpp providers. You can
go download Conversations or Swift or any of our, any of the many clients and connect to a server
and see if it works for you and see what you do with it. Excellent. Thank you very much.
My name is Brian Bouters. My model is the PULP project. The PULP project is an open source software
project for dealing and managing repositories and content. So content is things like
puppet modules or RPM packages, Python packages, Docker containers, or
stealth that you want to organize it. Yeah, software. Mainly, it helps to consume, organize,
and deliver software of various kinds. And what sort of licenses is it and who uses it? Yeah,
it's licensed to GPL. Which version? V2, if I remember. And a lot of different people use it.
A lot of universities and businesses use it. A lot of mainly people who want to deliver software
to a bunch of users. So it's not really for end users. So it's like I've got machines that I want
to control and I want to push some stuff down. Yeah, exactly. So you'll have a PULP server. And
you can use that to fetch content from other sources. So for instance with Python, you can fetch
packages from PyPy and you can host those packages on premise or in the cloud. And then you can
have your machines subscribe to your server, your PULP server instead of subscribing to PyPy.
It also allows you to upload your own packages. And so you can create mixtures of content between
publicly available or privately available. So I actually have a very, I've had to use case for
this exact thing where I was working in a banking environment that was physically firewalled from,
I mean, physically no network connection between the outside and the inside and sneaker net coming
in. So this would be an ideal solution for that. Yeah, exactly. And it also supports the ability
to export content onto disk, walk it over to another machine and then import it again. Yeah.
And then do you also deal with the problem where I specifically for this one dude, he's built
everything and he requires this old version of this particular library that's not available anywhere,
but I can put it up in this room. Yeah, absolutely. So PULP is very good at managing and storing
previous versions of content. And so you can make available older versions through a separate
repository and have just some subset or a single user subscribe to that. So how does that work
on the client? Is it a pull thing or is it a push thing? We have a, from the client, it's a pull
model and we make the repositories available and the client subscribe to them and then they do their
normal update process. PULP in right now, our mainline is PULP version two. And we also support
for some of our content types like RPM to actually manage the repos at the end clients are subscribed
to and Trader updates. So does this interface with yum or DNF or it do it? Yes, it does. So for,
you know, all the content types have different kinds of clients and so the feature set varies
from here to there. But for talking yum and DNF specifically, we have a yum plugin which allows
us and server to report its packages, for instance, up to the PULP server, which is very useful in
cases where say you have a security update that has come out and you want to know what machines
need to be updated. We can help you answer that question. So I do need a specific PULP client running
on my machine, do I? It's a generic yum plugin that works with yum. We do not... What have I
ever run in Debian? We are working on our Debian support and we're looking for some community
contributions to help support that effort also. Okay, cool. So I would just use my, ideally, I would use
my existing package manager and point to your server and then pull down one on me. Yeah, that's
exactly the idea. We don't want to be in the business of, you know, right in our own client
managers. We want to be the server primarily and in PULP 3, we actually only want to be the server.
We want to let the configuration management tools like Puppet or Ansible or things like that
do all of that. Our core competency is in managing the bits and making them available to all the
right places. Cool. So what has the last year been like? The last year has been a real year of
growth for the PULP community. We've gotten some pretty exciting new upstream users and developers.
We've gotten real focus towards kind of ending the PULP 2 line right now. We just released PULP 2.12.
We moved to a time-based release model, which lets us release more frequently. And we've had
a big improvement in our QA process with an automated test suite. That's its own separate project
called PULP Smash, which is written by some very smart people. And looking forward, well actually
already, we're in the past year, certainly passed up a couple of months, switching to PULP 3 and
developing PULP 3, which will be significantly different because currently in PULP 2, we use Mongo
and in PULP 3, we'll be switching to PostgreSQL. Why don't you change from a no less well
database down to a actual database? Yep, so our data is highly relational. And so it makes sense
for us to be using a relational database. We really require all data to be perfect. And we don't
want to lose a single record. And so we just cannot afford to have any data quality problems at all.
So the way that our application is written today, we're not in a good position to
guarantee that perfectly. We do a great job of it, but mainly in some extreme circumstances,
particularly in the area of like failover, it can be challenging. So we're looking forward to
switching to PostgreSQL. I'm coming up in, so that's what you're doing now. Yeah, yeah, I mean,
that's really our big focus. We're switching to that, so we're looking for beta testers and
contributors and feedback in terms of how to do that. Sounds like a good project. Thank you very
much. Thank you. Thank you very much. Cool.
Hi, who are you? I'm Roman Edgar. I'm a part of team content. We're looking for speakers for
Shah 2017. We have in the current call for papers. Hold it right there.
What is Shah 2017? Shah 2017 is the follow-up conference for hackers as a hacker camp,
which lasts for a week. We do it once every four years in the Netherlands. This one's by Amsterdam.
And it's the follow-up of OHM 2014, which we covered four years ago actually. And so when we talk
about camping, we're talking about actual physical camping, people with tents and bolts this year
are heard. Exactly. We're by the water and it will be tents. There are more civil physicalities
pretty close by if you are so inclined. But the fun is that the activities last well into the night
if you want to and if you don't want to, you go to sleep, you wake up and there's always
stuff happening. So it's much broader than just software or hacking. It's also guys doing food
hacking. There's usually metallurgists, there's fire breathing people, lots of art, lots of art.
It's way broader than just computers and ICT. And very the pace is a lot slower. There's people
of more time to chat. Yeah. What happens here in five minutes because you get a rush,
you get to go to somebody else, people sit down, you have a beer, it's a cool thing to be.
Yeah, we have absolutely. We have five days with which to be together. So that makes a huge
difference. It's really a bit more in depth and getting to know the people and the opportunity to
meet, you know, sometimes you're heroes, sometimes the people you completely don't agree with.
But you know, you have a neutral ground to chat with. Absolutely. And there is fiber coming out
to the wazoo. Yeah, we've got, we've absolutely got a lot of fiber and it's redundant this time.
So if someone puts an axe in it this year, we'll keep trucking. So now go back to what you're
actually asking for. Cold for papers. Yeah, that's right. Shah 2017.org slash CFP.
We're looking for more interesting speakers. We have around 138 people signed up already.
Some really interesting stuff. And the beginning of April, we'll start evaluating the entries.
So, you know, we're looking for anything that's kooky, crazy fun, hackers, you know, anything that's
interesting, ethical, moral, technical, anything that you feel will interest this crowd of very diverse
crowd of people. Yeah, my type of people. Cool, lovely stuff. Nice to meet you again. Thank you very
much again. Hi, my name is Carol Chan. I'm the Community Manager for Manage IQ. What is Manage IQ?
Manage IQ, well in a brief form, is a cloud management platform. And it's best used when you have
like a hybrid complex system or environment with different clouds, both public and private,
anything from Google Cloud to OpenStack. We're also adding like container management because
containers are so popular nowadays. Through OpenShift, that's container management room and
with Manage IQ. So, it's like an abstraction layer. Yes, it's like a meta manager of source that sits
on top of the different systems and managers and provides like a single interface and dashboard.
So, you can see everything what's going on. You can deploy VMs from the different providers that
you have hooked up to the Manage IQ system. You can generate reports, usage data. See, if there's
something going wrong, you can, you know, fix it really quickly because everything is visually very
well presented. But if you wanted to, can you migrate machines from one service to another?
Yes, there is possibility. You can write certain automation scripts that, you know, check for
certain conditions and make that happen. So, you can run your own services internally and then
you get slash, you know, the old slash tosses and then twister vegetables. Yeah, you're right.
Yeah. You are trending on Twitter and then you can move everything over to AWS.
Right, right. Yes, we do. I'm not sure about the extent of the support because there are some
that's more supported than others. But you can rent in services.
Right, right, right. And who's behind this project? Red Hat is the spot supporting Manage IQ.
The Red Hat product called CloudForms is the downstream version of Manage IQ.
Yes, yeah. Manage IQ is upstream. It's open source. It's open for contributions. It's
written in Ruby on Rails. So, you know, we have a lot of great Ruby engineers with us. And,
yeah, so it's a really active community and we welcome people to learn more about it from our
website, Manage IQ.org. And, you know, what license is it under? Sorry? What's the license?
Apache. Yes, it used to be dual license. I think it was MIT and Apache, but just last February,
it's not Apache. Okay, very good. So, what have you been doing with the project last year?
I actually just joined Red Hat last year. And so, okay. So, I just got to learn about the project
myself. And we have been trying to get more, how to say, awareness around the project because
I think people might know CloudForms and not Manage IQ so much. Yeah. And so, we have been
attending this open source conferences to let people know, hey, this is a really powerful tool
that you can just use it for yourself if you have like a some kind of a hybrid system that,
you know, needs a bit more control over. So, you don't have to be big enterprise to make use of it
because it's free and open source, so it's available for everyone. What's the plans for the coming
year? More events, more. I've been traveling quite a bit for this, which, you know, I'm really happy,
happy to be, to get paid for what I love doing, which is, you know, talking about Manage IQ and
traveling. So, and also, we are having more additional providers while working with Ansible.
Yeah. So, there's Ansible integration coming up very soon. Ansible is a Red Hat project now.
Yes, it is, but the thing is also a lot of people use Ansible. And previously, for some of the
automation tasks in Manage IQ, you have to know Ruby code to be able to write some of the scripts.
Oh, with Ansible, you can take the playbooks exactly, which makes it so, so, so, it takes the way
the pen and the machine. Right, because some people say, I'm not a programmer, I don't want to sit down
and, you know, write code just for certain things, so now it kind of makes it easier for that.
Okay, fantastic. Anything else that we missed or do you want to bring to our attention?
Any events that are coming up?
Well, I will be at Foss Asia, which is in Singapore next month.
Yes, and we will also be at, you know, Red Hat Summit. I think we are also attending OpenStack Summit
Boston, which is the one coming up. Oh, KubeCon in Berlin. It's Berlin?
So, even, yeah, KubeCon in Berlin. So, we'll have probably some kind of demos at each of these events.
And I think just go to majacute.org and click on Community, where they should have,
that would be the updated event list, because right now, my mind is a bit blank, so I may have said
all the events and dates wrong, I don't know. Yeah, better check out the website. Don't go
booking tickets, folks. Right, right, check it before you book it.
Yes, exactly. Well, thanks very much for talking to us and enjoying the rest of the show.
Are you too? Thank you.
Thank you.
Thank you very much.
You've been listening to Hecropublic Radio at HecropublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hecropublic Radio was founded by the digital dog pound and the infonomicon computer club,
and is part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on the website
or record a follow-up episode yourself. Unless otherwise stated, today's show is released on
the creative commons, attribution, share a light, free.or license.
