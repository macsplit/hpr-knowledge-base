Episode: 1236
Title: HPR1236: Lament For httpd
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1236/hpr1236.mp3
Transcribed: 2025-10-17 22:02:44

---

Hey, it's DeepGeek, so I'm kind of shook up over changing web servers.
For the longest time me and the partner in a web server co-op were using THTTPD as
a web server, and the time came to move on, hopefully by now, you're asking yourselves,
so what's the big deal?
That's why I hope to explain to you why I should be emotional about, well, changing
a tool.
To do that though, I will first have to explain a few things.
First will be, what is the attraction to THTTPD?
Well, THTTPD is a web server with a cult following.
It was originally written in the 90s to beat out Apache by being a non-forking server.
It actually did this with some surprising results, as was written to handle 100,000 simultaneous
connections, something you could do with Apache, but you would have to do it with a much
more beefy machine than THTTPD would need.
But if you remember the 90s, web pages were different, CGI was newborn, PHP and the
lamp stack were not accessible to every non-professional.
Most non-professionals were using flat HTML and doing that usually on a slash tilde account
at a regional ISP, you know, without having individual domain names.
The THTTPD code base was quite small, yet it supported a certain base of functions
that was highly desirable.
It ran in a few megabytes of memory, but it used memory mapping for files that served,
so it would serve a file and that file remained in memory for a while if the web page was
popular that file would be served to the next comma from memory, and in that day that
could be a time saver.
So it was small and it was fast, but it was also evolved for T1 lines, so it supports
throttling, so you could give it a speed limit to certain files and set resource usage
that way.
Lastly, all it sounds could be set in either command line switches or in a small config
file.
It truly did one thing, served web pages, and it served them well, and instance would
also run month after month without fault.
However, the advent of PHP and MySQL backends really did not work out for this tiny server,
and when they began to become dominant, he quietly announced, in an email list, it's
deprecation.
It was obsolete, yet still its reputation was set.
People kept using it, it was small, cool, efficient, a real demon with flat files.
It was bizarrely easy to configure, also, so that it could be used for months on a server,
as well as a quick program you could run on a command line to make a quick HTTP file
transfer over a home network.
But technologies, inexorable March, can do nasty things to un-maintained programs, no
matter how robust, THTPD went from being a top 10 web server demon to being a specially
demon used to assist large websites for stack content, in other words, it kept its superiority
over a patchy for things like JPEG, GIF, and MP3 files.
So smart webmasters with big modern demands would create lamp stack webpages, but all
the images would be served by an instance of THTPD, less letting a patchy do what it
did best, and letting THTPD do what it did best.
Eventually, THTPD did an amazing Deadman walking routine.
I used it for years after the original Maintainer Stop development, and I used it for years,
and it sent my podcast forward-wide all over the planet, yet I shed a tear, let me give
you some perspective.
I recently read a blog entry, its point was something like, remember the 90s when everybody
was a web designer, what a bunch of amateurs, well, that's not how I remember the 90s,
I remember the 90s more like this, remember the 90s when we built the medium for you
bitches that didn't require you to go through big ass corporations in order to communicate
worldwide without being gouged by some greedy douchebags, that's how I remember the 90s.
THTPD to me is the end of an error when one man could write a production class web server.
To make a competitive server now, you have to use a whole bunch of libraries written
by others, it's a matter of ending an error of independence on a frontier to me.
Most people on the web don't care about independence, building sub pages for Facebook or something,
for them to advertise to your friends and surveil you and your friends, nice present,
the amateurs did it better, fuck being slick, I'll take freedom in privacy and a feast
of friends online any day of the week.
You have been listening to Hacker Public Radio at Hacker Public Radio does our, we are
a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR listener like yourself.
If you ever consider recording a podcast, then visit our website to find out how easy
it really is.
Hacker Public Radio was founded by the digital dot pound and the infonomicum computer
club.
HBR is funded by the binary revolution at binref.com, all binref projects are proudly sponsored
by Lina pages.
From shared hosting to custom private clouds, go to Lina pages.com for all your hosting
needs.
Onless otherwise stasis, today's show is released under a creative commons, attribution, share
a like, free dose of our license.
