Episode: 2547
Title: HPR2547: MSYS2
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2547/hpr2547.mp3
Transcribed: 2025-10-19 05:16:48

---

This in HPR episode 2,547 entitled MC2, it is hosted by Clackit and in about 11 minutes
long and Karimaklin flag, the summaries, in which I talked briefly about the history
of MC2 and Sidwin and why you might want MC2.
This episode of HPR is brought to you by an honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Better web hosting that's honest and fair at An Honesthost.com.
Hi, I'm Clackit. I guess when I post this and when you listen to it, it will probably
a week ago for you that I talked about GitLab pages on my dad's website.
For me it's 2 minutes ago and I'm checking my HPR app's tag here again and it says MC2.
Yeah, that sounds like a good subject to just freestyle on as well.
So we were talking about on the Obcast Planet IRC channel on Freenel.
I was talking with C-Prompt and Claudio M about the things you have to go through when
you're a Linux native and you're trapped on a Windows machine probably for work reasons.
So there are a couple of different things to do.
These days of course there's Windows subsystem for Linux or whatever it's called this week.
Basically Linux kernel emulation by Microsoft and then they run the full Ubuntu user space
on it or Fedora these days also Debian.
It's pretty funny that you go to the Windows store or Microsoft store or whatever it's called.
And just yeah, I would like to install Debian and then you can do that.
If you're not going to install a full Linux thing and these days I guess that works pretty well
but before it was limited like you couldn't call Windows things from the Linux things and so up.
They've been working on that.
But if you want to stay in Windows land but still have access to all the or some of the
Linux but at least POSIX-C goodness and also have it interact with Windows things directly.
Then the way you used to do it is you used SIG-WIN, a Windows POSIX layer by SIG-NUS solutions
and they were a company that were later bought by Red Hat and they implemented the
port in GCC to Windows.
I don't know if they completely ported G-NUS or if there was a port and they picked it up and improved it
but they were part of the force maintaining GCC on Windows as well.
So they have the solution SIG-WIN which was a or is still available.
A bunch of DLLs and some tools and stuff that the main purpose was to create a build environment
for GCC to run in so you would have bash and make and all the other things.
But it was also a complete user space.
You could even install GNOME on it.
You have an X-server running on your Windows machine.
You can install GNOME through SIG-WIN and then you can just run for example GNOME terminal
and it will talk to your X-server and it will be just like if you had been exchanging
to a remote real Linux machine and running GNOME terminal there.
So SIG-WIN was much better than not having SIG-WIN but it also had its quirks.
It was very concerned about its own things and you were a little bit separated.
You were in SIG-WIN world and not as separate as the Windows Linux thing of course but
still you had different past names and everything and there are tools to overcome that.
A lot of people felt that actually this whole SIG-WIN thing and the package manager and all that.
That's more than I really need.
I just don't bash and make and the auto tools and whatever just to be able to run my compile.
I don't need GNOME or any of that stuff.
So then some people who wanted this, they sat down and made M6.
And M6 did not have the SIG-WIN package manager.
It was pretty much just, yeah you install this thing and then you have the things.
It still used the SIG-WIN library, the DLL implementing the POSIX interfaces.
And it also made use of probably the build recipes and everything to make things work on SIG-WIN.
But anyway, it wasn't the whole SIG-WIN deal.
So a lot of people were using M6 and they were pretty happy about that.
But then you always run into this point, oh now my build script needs this library.
And I wish that was, I wish I had that package or now it needs this tool to generate something or other.
Yeah, now I want the real POSIX-C environment in Windows and M6 just done and cut it.
I want packages.
But then people don't like the SIG-WIN package manager.
It was a UI package manager, not just say, oh, SIG-WIN install blah.
And then it just happens, you run the setup.exe and then it pops up and then you select,
yeah, I want to upgrade this thing, I want to install this thing and it's pretty tedious.
So some people went and took the arch package manager, Pac-Man.
And they modified that so that it would be able to run on M6 or on the SIG-WIN in the SIG-WIN POSIX-C environment.
And this is what they called M6-2.
I don't think there's a direct lineage between M6 and M6-2 is completely different people, I think.
But nobody has complained about the use of the name.
So M6 still exists, I think, and is still being maintained.
But then M6-2 is sort of like M6 plus the Pac-Man package manager.
And it is so much nicer to use on SIG-WIN.
I like M6-2 a lot.
And if you need a package, you need T-Mox.
Then you just Pac-Man, dash, capital S,
Pac-T-Mox, and then it installs T-Mox, it's pretty nice.
It sometimes will tell you that, okay, now I updated some really important things.
And because you are on Windows and Windows is terrible, you need to now destroy this window.
And don't press Control-C because then things will try to do things and things will be terrible.
So just kill this window.
But yeah, it tells you, if you do what it says, everything will work out fine.
Otherwise, I guess you have to reboot and that will fix things.
If you use Git for Windows, you're actually sort of using M6-2.
You don't have the package manager, but the Git for Windows is made in M6-2.
So basically, you take the M6-2 system distribution,
they modify some of the paths, and then remove the package manager.
Just basically, you're down to M6 plus a not-siguring compile, but Windows compile Git,
but which also understands posixy things, which is a pretty interesting hybrid that can confuse you sometimes.
But basically, you have Git for Windows, compiled for Windows and expecting a Windows environment.
But then you have the SIGWINY tools, the posixy tools around it.
And it's all made using M6-2.
So if you use that and you think that is comfortable, and you just feel, oh, now I want T-Maxor.
Now, I would like a, I need a, I don't know, a Python or something.
Then just go M6-2 instead, it will be the same experience,
but you will have a package manager.
And installing M6-2 is really easy.
Go to M6-2.org, I think.
And just download the installer, run it, boom.
You have M6-2, you have a BASH thing you can run.
And then you're in a nice window with BASH, and then you can pack man.
If you're from ARCH, then you can pack man as you're used to.
So if you're not from ARCH, then you can just look it up.
It's, it's not very complicated.
The names of the switches are not entirely intuitive, I'm thinking, Pac-Man, but, I mean,
you just need update and install, and that's it.
Pac-Man dash is, Pac-Man dash you pretty much gets you everything you need to in day-to-day
life.
M6-2, check it out.
This has been Hacker, public, radio.
I've been listening to Hacker, public, radio, not a work.
I've been listening to Hacker, and I've been listening to Hacker, and I've been listening
to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've
been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker,
and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening
to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've
been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker,
and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to
Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening
to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening
to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening
to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening
to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and I've been listening to Hacker, and
