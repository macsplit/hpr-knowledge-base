Episode: 2690
Title: HPR2690: A chat about the HiveMQ Broker
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2690/hpr2690.mp3
Transcribed: 2025-10-19 07:34:22

---

This is HBR episode 2690 entitled, a chat about the HBMQ Broker and in part of the series
Interviews. It is posted by Ken Fallon and in about 7 minutes long and Karina Cleanflag.
The summary is, Ken talks with Florian Rashicler and Anja Helmbrecht, a chat about HBMQ.
This episode of HBR is brought to you by AnanasThost.com.
Get 15% discount on all shared hosting with the offer code HBR15.
That's HBR15. Better web hosting that's honest and fair at AnanasThost.com.
Hi everybody, my name is Ken Fallon and you're listening to another episode of Hacker Public Radio.
Hey, join me are the team from HIVEMQ. Hi Ken. Hi, you are?
My name is Florian from HIVEMQ. And what's your name?
My name is Anja also from HIVEMQ and the company is also named DC Square.
But HIVEMQ is the product and it's very strong together. So you can say HIVEMQ or DC Square.
Okay, I get it. And you make a MQTT message broker. That's a proprietary application bought.
Yeah, that is correct. Our company developed the HIVEMQ which is the Enterprise MQTT broker is under perpetual licensing.
But you can check out www.hIVEMQ.com slash downloads and get a free evaluation version which allows up to 25 concurrently connected devices.
Okay, so let's take one step back here. What's HIVEMQ? What is the purpose of message broker and what are you dealing with?
Okay, so we are dealing here with the MQTT protocol which is a published, subscribed, based messaging protocol.
It's an application layer put on top of TCP IP as the transport.
And the purpose really is to enable decoupled, scalable messaging for the IoT.
So this is what would be a typical use case for MQTT for?
So the hello world use case is to collect with different sensors, temperature or some data from your, your houses maybe, for example.
And then you can collect them and every message is going through the bogab by publishing this and other clients can connect and subscribe to these topics.
And then you can get the temperatures or get whatever you want and can analyze these data in your business purpose that you like.
So a lot of people listen to this network will be familiar with something like Mosquito where you send it off to an open source message broker.
So would they be, would Mosquito be compatible with your message broker?
As I said, we are the enterprise MQTT broker. So Mosquito is a fine product especially for testing purposes or for private purposes.
But for a large scale deployments and be integration into existing enterprise systems, it is not ideal.
And this is where we were our strengths lie and we don't see Mosquito as a viable competitor.
But on the command line clients, so any client will be able to communicate with you as a message broker.
Correct. Yes, that is correct. The HVMQ is downwards compatible up to the MQTT 3.1 version.
So any client that is also compatible with MQTT 3.1 or MQTT 3.1.1 will be able to connect to HVMQ.
Okay, so can you tell me what a typical message would be that you could see coming from a sensor or something like that?
So just to go a little bit back, MQTT as a protocol is completely data agnostic.
But a typical use case is that Jason is being sent over as the payload.
So for instance, it could be status and then colon and then offline.
For instance, it could be what a client sends before it goes offline.
Or if you are talking about home automation use case and you want to change the color of your lighting, then it could be color colon red for instance.
Okay, yeah, I think that is a shame.
And your expertise then is in large scalable businesses and giving somebody a phone number to read. I'm guessing.
Well, of course the manufacturer enterprise support that we are specifically myself provide is also one of the selling points that we have.
But also we have the expertise in MQTT and in the architecture so we can help you from the first day to the go live and beyond in your large scale MQTT deployment.
Okay, excellent. Now for those of you who listen along, I'll put a link in the show notes.
You have an excellent blog entry with the essentials of MQTT, a 10 week series on your website. I'll put a link into that.
And anything you want to know about MQTT should be covered with there.
But the basic principles should be the same. We're more or less talking about a protocol here.
Yeah.
No, exactly. And we're also happy to to spread the knowledge about MQTT and also if even if you're not a large scale enterprise looking to connect multiple millions of IoT devices.
Please, please check out our MQTT essentials or our blog in general and hit us with a comment and we will try to get to all of those.
And you have a GitHub repositories for the plugins and stuff.
Yeah, we have we have multiple GitHub repositories for so called off the shelf plugins.
Just go to a GitHub slash Hive MQ and that you will you will see a list of all our openly available stuff.
And you can you interface you also maintain a list of the clients that will that you can connect to the brokers.
Yes, on our blog, there's also another series next to the MQTT essentials is the so called client library and cyclopedia, which is where we have a list of available MQTT client libraries.
It's not a complete list, but it's a pretty big list.
So it's a good breakdown of if you want to implement a client and test it against different brokers, this will be a good place to start.
Yeah, and also if you're looking, it's divided into program languages.
So whatever your requirements are, you can find a good starting point there.
Okay, excellent. Anything else that we missed in this conversation?
No, I think we covered it all. Maybe one more note on our behalf.
We recently also introduced a client library for Java. It's called MQTT B and it focuses on reactive Java and on high performance messaging.
So maybe you want to check that out also.
And that's on your website or it's also on GitHub.
That's open is it?
Yeah, it's open.
Okay, excellent.
So good stuff. Thank you very much for taking the time and I'll see you tomorrow in a virtual sense.
All right, thank you.
Bye.
Bye-bye.
Thank you very much.
Bye-bye.
