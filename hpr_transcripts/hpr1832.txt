Episode: 1832
Title: HPR1832: Simplify writing using markdown and pandoc
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1832/hpr1832.mp3
Transcribed: 2025-10-18 09:53:48

---

This is HPR episode 1,832 entitled Simplify Writing Using Markdown and Pannock.
It is hosted by EASY and is about 21 minutes long.
The summary is how I use Markdown and Pannock in my writing workflow.
This episode of HPR is brought to you by an Honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15, that's HPR15.
Get your web hosting that's Honest and Fair at An Honesthost.com.
Hi, this is Bee EASY signing in for Acropeveled Radio once again.
This time I'm going to talk about how I use a couple of things in my daily work, the
two items for the most part are Markdown, Syntax Language and Pannock Program.
Actually, I'm doing something different this time.
I'm recording this on my phone using the Android Voice Recorder just to see how it turns out.
So far, I've made a couple of tests and it sounds pretty good, so I'm going to use this
and see how it works out.
One of the first things I want to talk about is what these things are.
I use Markdown almost exclusively for all the writing that I do.
I'm going to have some links in my show notes to say where to find the different things that I'm talking about.
I use it for taking notes and writing documents of all sorts.
Then I use the program called Pannock to convert that Markdown into other formats, including UDT.X and PDF.
So if you go to the Markdown website, the original one, which is, where is that?
It's daringfireball.net slash project slash Markdown.
He describes Markdown as a text to HTML conversion tool for webwriters.
It allows you to use an easy-to-read plain text format that you can then use to structurally convert it into XH2ML or HTML.
If you ever see anything written in Markdown, you'll see why.
Instead of having a whole bunch of H1 tags and U tags and UL tags and all those things, everything is just written with simple readable texts with just a few minor things to show the converter where to make the highlighting and where to make the formatting changes.
I'll talk about some of the basic formatting and then there's also some more advanced formatting.
I'm going to start with some of those things.
So before I go onto that, you'll see a whole bunch of different types of Markdown functions.
It's been extended to include GitHub flavored Markdown and multi-markdown to name two, but there's other ones as well.
If you ever go to a GitHub page, you see a readme file, you'll see it's written in Markdown and that's the GitHub flavored Markdown.
I've included showing us both links for the multi-markdown and the GitHub Markdown.
But the basic syntax is for making headings, it's pretty simple.
There's two different ways to do it, but the more generic way to do it is to use the hash symbol and the more hash as you put at the beginning of a line.
The smaller the text is in your heading.
So a single hash is a heading one, two hash is a heading two, three hash is heading three, so on.
There's also a format where if you write the first line and then underneath the line, use the equal sign underneath of it.
That would be a heading one and then if you use a minus sign or a dash underneath of it, that's heading two and then there is no heading three, four, five.
But if you use the hash, you can go, I've used all of you up to heading six with six hashes.
The next thing that I want to say is that you can do italics by using either underscore in front and behind the word or a asterix in front and behind the word or series of words.
To do bold, you do two underscores or two asterix for the text that you want on the front and behind it.
There are some other things that you can do like hyperlinks, so to do hyperlinks, you do bracket inside of brackets, you use brackets for whatever you want the plain text to view.
And then just adjacent to that in regular parentheses, you put the hyperlink.
So if I want to reference Google, I would put in brackets, Google.com and then in parentheses, I would sorry, I would put Google in brackets and then right next to it, you put Google.com in parentheses.
For images, it's a very similar format as hyperlinks. The difference is you put a bang in front of it, so an exclamation point in front of it.
So you would go exclamation point, www.example.com, if that's what you want to do, or you'd go, you know, image one as your alternative text.
And you use www.example.com slash food.img for your image inside the parentheses as your link.
Now that's very useful because it doesn't just work in HTML, but it also works when you're creating documents.
If you want to insert an image inside of a document, you can use the same format.
And that's one of the cool things about the pan doc.
For tables, you use pipes to the limit the columns, but for the header column, you go, you know, heading one pipe, heading two, pipe, heading three.
And then underneath of that, you do dashes, then pipe dashes, pipe dashes.
And that way, and if you want to, you can line them up so that it makes it look really pretty so that when it's, when you're just looking at the text file, you can see all the columns lined up nicely.
But you don't have to. That's just something for readability. I usually just use four dashes just so that I know that it's going to work.
Unless I'm going to be presenting the pure text file to someone, then I'll try to make it look prettier and try to line up the dashes.
And then underneath of that, you do, you know, your first row pipe with pipes still emitting in between of the words of the columns.
And so some people, they like to put pipes as a, as a, as a, for to make it more readable.
You can put pipes at the beginning and the end of the entire line as well so that you can have pipe and then heading one, then pipe, heading two, pipe, heading three, pipe, and then do the same thing with the dash lines and all the lines after that.
And it's something that you can't do, but it's not required from, from Markdown.
Another thing is with list, you can either have order list or unordered list.
So for unordered list, you either use a dash plus or an asterisk, followed by a space, and then the text that you want to write.
And usually you leave, well, some, some editors had no, definitely, but to be safe, you always leave a plane, a plane line in between of the text that you're writing before and where you want to start writing your, your order list or unordered list.
Well, like I said, you use dashes and, and for me, I like to use dashes and then I, when I want to go into like a sub list of that one, you always have to use a tab.
So to make it more readable for me, I'll use pluses for my first level and then dashes for my second level and asterisk for my third level as I go tabbing in.
So that's not, you don't have to, all you really need is a, as a tab in between at the beginning, and that will show you where you're, where you're nested, let's go.
For order, for order list, you use a one period and then a space, and you can go to period space, three period space, four period space, but you don't have to, you can use one period space for the entire order list and the editor will figure out that it's an order list and put them.
One, two, three, four, I like doing that because I like to, it's a lot of times I think non-linearly, and so I'll write number one, and then three, and then five, and then seven, and then I'll go back and put in the ones in between.
Or I'll see if I forgot one and put one in between, and that way you don't have to worry about messing with the numbers and having to re-number everything as you do it.
So, you know, it's really helpful to do it that way.
Another thing I want to talk about is the quotes and how you do code, so you can use a backtick to do like a single word, and if you want to say like press the space key, you put a backtick, then write the word space, and then a backtick, or if you want to say press the U key, you can do a backtick, U, backtick, and it'll put it into like a mono space format.
The other thing you can do, if you have a block of code, is that you can, you know, on a new line, you put a tab, and then you start writing the code that you want, and then keep it going down every line afterwards with a tab in front of it.
That will keep everything in that same mono format for improved readability and also to get some other functionality.
You can use three backticks, and this one's called a fence code block.
So, with a tab you can do a regular code block, but with three backticks, and then on the next line, you can start writing all your text just at the beginning of the line without a tab, and then at the end you do three backticks again to say that you're done with your fence block quote.
The cool thing about using that is that in a lot of different editors, you can put in letters at the end of the three backticks at the top, and you can specify what language that's written in, and a lot of editors will do syntax highlighting for you with that.
So, if you're writing something in SQL, you do backtick, backtick, backtick, SQL, and then you write your select statements, and then you can, and at the end you do backtick, backtick, backtick again, and it'll format the select, and it'll format the equals, and the ore, and all that stuff.
And you can, with different syntax highlighting.
So, I've used it for all types of stuff, and I'll get into what I use this for in subsequent lines.
So, the next thing I want to talk about a little bit is the quotes. So, you can do, you know, regular just quotes in that works, but you can also, if you want to just quote something, you do a, I guess it's a greater than sign.
So, on a standard US keyboard, it's the, the second one in from the right shift, and then a space, and then start writing, and that'll put it into like a blocked quote.
And so, that's really useful for nice formatting, for a lot of things.
So, those are the basics. There's other functionality that you can use, and depending on which of the extended formats you're using, you can have more or less of those.
There's ways you can do underline, and cross out text, and make footnotes, and, and make people a contents, and all types of things, and mark down.
But that's just the basics. Like I said, I'm leaving some links in the show notes to, to show you some where to get some more information.
In terms of other things, the, the biggest thing I used to, to translate, mark down is Pandak. Now, there's other things that you can use if you're just going to do HTML, for instance, but Pandak is a way that you can convert a lot of things.
And if you go to pandak.org, it's described as a way to convert documents and mark down, re-structured text, text style, HTML, doc, book, late text, media, wiki, markup,
twiki markup, opml, e-max, org mode, text to tags, doc, docx, e-pub, had a markup, and they can convert those things into HTML, docx, odt, e-pub, text info, man pages, late text, opml, PDFs, and a whole bunch of other things, if you look at the website, it's quite impressive, the list of things that it can convert.
I use Ubuntu-based distros because whenever I try to use anything else, Pandak is always bundled with the entire Haskell suite.
So, if you want to download it for ARCH or for DOR, it'll also, when you say, you know, when you say PacMandas, S, whatever, Pandak, it's going to also bring in all the Haskell libraries.
So you're going to download almost a gig of stuff to get it.
So, that's why I use Ubuntu-based distros, because I think I might get it from IBM, but it's the one way you can get it where it's by itself, without all the dependencies on Haskell.
And I probably only use, like, 10% of what Pandak can do, but I still like that flexibility, that if I, when I'm ready to learn more, and when I want to do some more form edits, it can.
But I use it. My typical workflow is I'll write documents, because for my business, I'd write a lot of different types of documents, and it's the same document that I might want to use for a whole bunch of different clients.
And they might want that, I might be making it for that client, and so I might take that document and just write it once, and then put it, and I'll get their format, and I'll use their format, like their template, and use it.
So, I can have it with red headings, and this one, and blue headings, and this one, and underlines, the underlines will always be gray for this client, and underlines will always be double underlines for this client.
And you know, some of the stuff that Hookah's been talking about, when he talks about his library office stuff, I've been incorporating it into the way I make my templates, using it with Pandak.
It's one of the cool things, that you get from hacker public radio, but also, what I use, what I typically do is I write in them, or another text editor, when I was starting out, I used things that have a live preview of Markdown,
that I could see, if I was writing the syntax right now, I pretty much just write in them, because I'm pretty sure that I got it right nowadays.
And then I either take one of the templates that I already have, or I'll make a new template, and you kind of have to use the templates that, instead of using a template that you just make, is best to take the templates for every style, the default template for every style that Pandak has, and modifying that one,
because it uses different properties, and to make sure that you have them all right, that's what the Pandak documentation says to do.
And then usually, I write at the top, you can use Jamal format, which is three dashes, and then you're like, author, colon, name, title, colon, the title, date, colon, the date.
And it'll make those document properties, it'll make the title, the document property title, it'll make the author, the document property, of author, to make the date, the document property of date.
It's kind of cool, it does the same thing, if you're writing an HTML, it'll make the metadata properties that way too.
And then you can convert it, so I have my own CSS, like for my website, I'll say use this CSS when you're writing it, and when you're going to write something for my website.
So it's very useful to be able to use one language, and not really have to worry about formatting, because I hate spending time formatting documents.
It's like my pet peeve, I hate doing it.
And so some of the stuff that I use, mark down for, as I use it for taking notes, and then creating standard operating procedures for different clients of mine, also use it for creating user guides.
So a lot of times what I have to do is I have to create a user guide for a piece of software, or a workflow, and the cool thing is you can take screenshots, and you can do stuff with this, I use image magic to have like a simple script I use called image magic.
So after I create my screenshots, and I crop them and do the other thing, if I want to put it into an ODT or DocX format, the page is only so wide, so I use the Mogrify command, and I do it for every item in that folder.
I make it a fixed width, or no wider than 600 or 650 pixels, so it'll always fit on the page.
That's one of the things I've packed up to do, because I make so many of these things all the time.
And then, like I said, I use it for making blog entries on my website.
And then some of the tools that I use, besides just using straight VIM, is I use a retext, which is a live preview program.
That you can use on Windows and Linux.
There's other ones that are available for Mac as well, and all you have to do is just type in Markdown on the Apple Store, and you'll see lots of them.
And same thing, and if you just go look and do like an appcast search, Markdown, and Ubuntu, you'll see a lot of stuff too.
But I also use another project called HaruPad, you have to go to HaruPad's website.
I think it's HaruPress.org.
They have another tool that has more, it's more extendable than retext.
There's a really simple command line tool called Discount, which just does Markdown to HTML.
And I wrote a little script that using links and Discount that turn any Markdown, like on the fly, turn any Markdown into HTML and links.
So while I'm in the terminal, just to make it look, see if I got the format right.
Another thing that's a web-based tool is StackEdit.io.
Actually, I'm writing my notes for this right now on StackEdit.io.
You can sync up with Dropbox and Google Docs.
And maybe something else, let me see what else.
Oh, and then you can post it straight to like different blog and platforms straight from StackEdit.io.
I've used in the past, and I still use sometimes Adam, and Adam has built in Markdown Previewer.
And then some of the other things that you have to, if you want to have other functionalities, you have to download text live to get, if you want to go straight to PDF.
So if you know how to write in latex and you want to make a latex template, you can do that.
And then I'll put it directly into PDF that way.
What I typically do is I'll write it in, and I'll put it to ODT and then convert it inside of LibreOffice.
And I have a bunch of them. I use the S-Office headless command to do a bunch of it at the same time.
So I'm not really familiar with latex like that.
So, like I said, those are the things that I use on a daily basis.
Like I said, I write every day, probably 95% of what I do on a daily basis for work and for at home and Markdown.
And I use Pandock for the most part to translate that, or sometimes I just write it and Markdown and just read it.
One other tool I wanted to talk about, there is a Chrome slash Chromium plugin that converts Markdown of any page or you can select text from any page and click the little M button.
And it will automatically translate that HTML into Markdown.
And I use that a lot of times. I do use pockets, but I also, and I only use that sometimes, but usually what I'll do is I save something to pocket so I can later go to the website, copy everything and hit that button.
And then put into a text document so I can have it for a notes later. I do that with like man pages and how two guides all the time.
But yeah, thanks everyone for tuning in to my episode of Hacker Public Radio and I'll see you next time.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the Infonomicon Computer Club and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise status, today's show is released under Creative Commons, Attribution, ShareLite, 3.0 license.
