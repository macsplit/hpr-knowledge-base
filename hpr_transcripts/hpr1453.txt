Episode: 1453
Title: HPR1453: HPR Coverage at FOSDEM 2014 Part 4
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1453/hpr1453.mp3
Transcribed: 2025-10-18 03:19:40

---

to
I've made my way across to the AW building and I'm here talking to, it seems to be a lot
of hardware hacking section, this kind of hardware hacking section, I'm going to talk
to Paul.
Where are you from?
I'm from the UK, I work for Intel and I'm bullied by them to work on the Yorkshire project,
so the Yorkshire project is kind of a bunch of commercial vendors from Silicon and software
that are involved in the embedded Linux sphere, coming together to work with the Open
Embedded project on really the core of their build system, so basically Open Embedded
is a system that allows you to cross build the Linux kernel, bootloader, all of your
applications and put that together into an image that you can flash onto an embedded
device, so anything from a phone to an air conditioning control system to something
industrial or development board, whatever it is, the running Intel devices, I guess.
I'm sorry?
Running Intel chips, I imagine.
Intel is just one of the platforms, I mean we've supported everything from X86 to MIPS,
PAL PC, so because we're using GCC, so anything that GCC can build for we can support.
So I'm just looking at your banner here, it says Open Embedded is a non-for-profit organization
for your own recipe to build thousands of packages embedded on your devices, deployed
to your users, forget about in nitty gritty details, that sounds wonderful.
Eureka Texas Instruments are also involved in this, there would be a competitor I guess.
Definitely, in fact that's one of the interesting things for me working on this project from
Silicon Vendors, quite a number of other Silicon Vendors involved, but the big corporations
may be sort of competing in terms of their products, but all of the stuff that we work
on is stuff that we don't need to differentiate on, we don't want to compete on the version
of grant that we offer in our systems, it makes much more sense for us to sit together
and work together on those parts.
Okay, so I'm looking here at the table, can you, I'll take some photos as well for
in the show notes, can you give me a rundown of what I'm seeing here?
Certainly, so we start here on the left we've got an O-Droid platform with an external display
and that's a Samsung platform.
So that'd be a little box, slightly bigger than the deck of cards, I see an SD card going
in a power supply, on the back there's four USB hubs, network connection, nothing here,
and then there's loads of stringy wires coming out to a tabloid.
So it's just running some direct FB graphical demos, so...
Pretty impressive actually.
I'm sorry?
It's pretty impressive.
Oh, well, yes, it looks like a waterfall actually.
So the next thing is we've got an Intel Galileo development board, so it's X86, compatible
32-bit device, kind of designed for sort of wearables and deeply embedded type applications.
It's got an Arduino shield compatibility, so you can take an Arduino shield and plug
that on top.
And does it support, how can you do a couple of cross-risk sketches for that?
You can use the Arduino ID to develop it just as you would with any other Arduino board,
so...
Okay, so what's the advantage of that then over running an Arduino?
Well, you've got to, like, it's a proper processor with an MMU, so it can actually run
a full Linux distribution.
It's not...
Maybe it's constrained to some of the Arduino platforms that are available, so you can
do a little bit more with it.
Okay, so something like that is this directly competing with something like the Raspberry
Pi or something like that.
I guess so.
I mean, obviously, the Raspberry Pi doesn't have the Arduino sort of plug-on compatibility,
but it's of the same order, I guess.
I think you could probably argue as it'd be more for a professional, you know, where
to be running off physical devices based on this rather than having it powering it by
a Raspberry Pi.
Sure.
Yeah.
I guess the strength of our platform is that you can build for any of these devices
right, and reasonably easy sort of move your...
You may prototype on one platform, and then move across to another for your production.
Okay, I'm just going to lay off on which is that?
I believe it's 69 USD, so.
That's not bad actually, and then you could develop on one device, bring your Arduino's
over, your Arduino Shield's over, and then go with that.
Okay, cool.
Moving on?
Yes.
So this is the MinoGuard.
It's an Intel Atom-based platform, so it's got a little bit more power than Galileo,
and it's got a lot more sort of standard ports that you would expect on that kind of thing.
So extra USB, you've got audio and HDMI graphics, so you've got an actual GPU on the chip
there.
Is there drivers for that open?
So the drivers, it's a power VR core, so the drivers that we supply for 3D acceleration
are proprietary.
Dun dun dun.
Well, there is, in fact, an open source 2D acceleration driver, which has been worked
on by a guy in the community, so we do have that.
That's an unfair kicking because even the Raspberry Pi, they have a proprietary board as well
or an open for the graphics.
Yeah.
Apart from that, the entire design of the board, the bill of the materials, everything
you would need to build your own board, obviously other than the components themselves, completely
open source.
So if you wanted to take this platform, customize it for your application, have it produced,
you could do that.
Where's the advantage for Intel on doing that, other than the components or Intel components?
I guess, just getting the device in people's hands, really let them play around and work
out interesting things to do with it.
Rising tape, results, chips, I guess.
OK, moving on.
What's the next thing?
So, we have, no, I know a little bit less about these, but so this is like an industrial
computer.
I think it's used in vehicles for laying cables.
So when they're drilling, they need to make sure that they are on a straight line.
So this is the control computer that's used in those kinds of applications.
So, it's an ARM-based platform, has sort of just five buttons that you can press to
interact with, stuff that's on the screen, so it's really simple for sort of contractors
or whatever they're doing those kinds of things.
Yeah, I always put logs and the buttons are waterproofed and it looks quite rugged, to be honest
with it.
Yeah, absolutely.
Yeah.
Oh, I see a little command prompt over here on this device.
This is a Toshiba development board, it's slightly older, running a Toshiba ARM chip
on it.
It's got a built-in little LCD display, which is quite cool.
Yeah, I mean, it's one of those all-in-one type development boards.
You can just got everything on it so you can start developing your application.
What next?
Ah, so here we have the UIA console.
Oh, it's Tony.
Typically, it's a supplied, it has Android on it, but we now have some support and some
community add-on layer that provides you the ability to build for this platform.
So, with Open Embedded?
Yeah, with Open Embedded, yes.
So, what is Open Embedded exactly?
Where can I go?
What's the website?
So, you can go to Open Embedded.org.
From there, you can get information about how to get started, how to access our mailing
lists and all that sort of information, everything you would need to know.
Okay.
Fantastic.
Okay.
Cool.
Okay.
Are there any other devices of interest here?
We've got a couple of demos of Internet of Things.
So, there's a demo here in the middle.
I'm not quite sure of the details.
I think that he's been having some technical problems getting started.
You know how it is with demos that shows.
So, using a big ol' bone black.
So, obviously, big ol' bone black is an ARM-based board with lots of IOs.
So, again, that's quite a sort of a common target for Open Embedded.
And right on the end here, we have an example of a commercial product that's been developed using Open Embedded.
So, you can get more details from Alex on the end here, but it's basically a system for kind of getting a measurement of the occupancy or a building for sort of larger companies who have a lot of buildings that they need to manage.
They need to determine whether they're fully utilized.
So, this system will tell you if particular people are in the office where they are and get statistics out of it.
You can book meetings through it and it'll manage the meeting rooms for you.
That's sort of fun.
Well, pretty cool.
Okay, thank you very much, Paul, for taking the time and enjoy the rest of the show.
No problem. Thank you.
Hi, everybody. This is Ken and we're over in the AWS building, I think.
And BS is a free BST.
That's BST. That's an all BST booth because all BSTs like FreeBST, PCBST, NetBST and partly all BSTs, they group together at events like FOSTEM and they do combined booths.
That is very cooperative. You will think hearing what goes on and mailing lists and stuff that you all hate each other.
No, no, no. We like each other and we got as BST family member.
We have a fly here, BST family. We have one kid that doesn't behave that well.
I don't want to go into details.
Yes, likes fruit.
Okay, so just for the one or two listeners who don't know what BST is, can you tell us what it is?
You might know, Unix was founded in 1968 at MIT, Ken Thompson and then Richie developed starting exactly from 1966 and then from 1968 beginning there was C.
And then there was Unix. The first release was official release was 1971 from Unix and six people started to do a free development of Unix because development of Unix in the early beginnings was controlled by corporations like AT&T.
And they provided Unix to the universities but people wanted to have a free software. And then 1973, six people started to develop their own free Unix and the first release was in April 1975 and that was the beginning of BST.
And over years BST was divided into parts like FreeBST, NetBST, OpenBST and Drackfrile BST, SB, now no.
What would you say the strong points of the various different BSTs are?
Three or four points, we have an extremely liberal license, we have a central development, we have a community that's contributing, not companies, not that much like in the Linux world, we have companies that support but not that much.
It's more of a free development. And which BST would you run at home for instance?
Most of the BST guys run every BST. I started with NetBST then I switched to FreeBST, I was the founder of Desktop BST but mainly I used FreeBST but that's only for practical reasons.
That's no political or most BST guys used to BST that's used the best for their needs.
And if you're developing code on one of the BSTs or one of the BSTs, is it portable? Is it going to run on the other ones?
Sure, sure.
And will lots of run on Linux?
Normally you should code portable, at least between the BSTs and better for all Unix systems.
I think there's a moral of that story for everybody as well.
There was some legal issues at one stage which probably caused people to move to Linux over BST.
Can you tell us a little bit about that?
Yes. In 1991, AT&T claimed that BST has misused legal property of AT&T, BST denied.
And it was two or two and a half years. It was a bit of a confused confusion.
And before finishing that lawsuit, AT&T and BST came together and decided there were six files that had to change.
We did that within some weeks and that was the end of that lawsuit.
And it was put to bed after that.
I think a lot of people would cite, I mean, you really can't tell the difference between the BST and Linux machine unless you have to look for it.
Someone would even say it's a pure version of Unix.
Yes, sure.
But from what I've seen the most when talking to BST users, the philosophy is mostly the license.
Can you talk to us a little bit about the difference in the license of why you might choose a BST license?
Sure.
And why it might be more free than the GPL?
Starting with year 1975, people thought about using the shortest license possibly, they started with four sentences.
Then that was kept to free and now we are at two sentences and that's enough.
And we want to have maybe one sentence should be enough.
What does that sentence say?
Do whatever you want but please don't sue us.
And keep our name in there.
That's all.
Okay.
Have you...
Recently there's been a push to develop your own compiler and there's been some controversy, obviously, about that.
No, there was not a controversy about that.
It happened that a new compiler arrived with a lot of advantages over the old GCC that's a bit bloated.
That's not GCC's fault in it but GCC supports a lot of platforms.
A lot of platforms olden, not often used, etc.
And we now have an alternative that's better.
It's faster.
It can compile code that is more compact than GCC.
So why don't we use that compiler?
Competition is always good.
And that's licensed under the BST, obviously.
That's analyzing of BST but that's not the main point.
Because we have BSTs, like NEPISD, they are using the latest GCC with GPR version 3.
I thought there was going to be some compatibility issues with it.
The problem is the NEPISD supports 57 different platforms.
And GCC is the only compiler that supports the old platforms like Microwax and stuff like that.
So it runs on my fridge.
NEPISD has to use the latest GPR version 3 GCC compiler.
There's no alternative because CLAN and LVM support only 8 platforms now.
Maybe that will rise to 10 or 12 or 14.
But there will not develop CCC and LVM for old platforms.
No longer produced for 20 years.
So there's no alternative for NEPISD.
Have there been any other developments in the BST world that you are not coming things?
FreeBC, especially, we have a new lease.
FreeBC 10.0.
We have to switch from GCC to LVM CLAN.
But we have also new platforms like Raspberry.
That's absolutely brand new 4 weeks or 5 weeks old.
And we have a completely new port system that's completely re-event now.
With a lot of improvements.
Because we were a bit behind Debian and DPM.
And now we are glad after four and a half years.
We have a new completely port system that's ports and G, new generation.
And that's the cool stuff.
And is that easy to install software?
Yeah.
So I wanted to install Firefox or what browser in there.
What do I need to do?
Browse the port directory.
You need to get the latest index.
And then you go to the directory.
And you only install it, and that's it.
But you're downloading the source code and the source code is compiling as opposed to that.
Or you can use a package.
So there are a pretty compile packages as well.
But that's management importance as well.
We have the largest collection of free software.
Now we have 24,800 ports.
Yes.
24,800 ports with source code.
And of that, 22,600 packages.
Wow.
You cannot build each port into a package because of legal issues.
And that's not under our control.
OK.
But do you have, are there any obvious gaping holes like, for example, flash was missing on?
No.
That's long, long, long ago.
Flash is available.
For years.
There's absolutely no problem.
So I could grow on the entire desktop.
Yes.
Without any problem.
You heard it here, folks.
Yeah.
I didn't find any problem.
I know who to go to now.
We had some problems in the past because Linux was in front of a sound.
Yeah.
Now we have better sound than Linux.
It's much easier to use a sound than a Linux.
Way easier.
Not using pulsaudio.
Yeah.
We don't have any pulsaudio and stuff like that.
OK.
And let me see.
You can update any machine and it's running after that update.
And if you have a machine that's running for, say, two or three years, is it viable to do an update or not?
Sure.
And freebies here.
You have freebies the update.
Yeah.
You can even use that on a weekly or monthly basis if you like.
You can do a cron job as I do.
I update my machines automatically every four weeks.
And if something would go wrong, it never happened now.
I would do a job back to the previous set.
And it's absolutely no problem.
Updated freebies is so easy.
It's easier than any Debian or any Linux I know.
Yes.
But maybe holding you to those words.
I will show you.
Is there anything else that you want to talk to us about or have I missed?
No.
We had a lot of work to do with compiler basis because when we started to use LLVM and C-Lang,
from the then 23 or 22,000 ports, only 8 or 9,000 worked,
now we have a tremendous work the last two or three years to put that numbers up to 24,800.
And now we can use 99.2% of all applications.
Have you found that any of the people have shrugged off the BSTs or the fact that they can compile
while I'm not going to worry because they're compiled with GCC?
No.
No.
No.
No.
No.
No.
No.
No.
No.
No.
No.
No.
Yes, that are old, really old.
The link, the linker, we switched make to B-make, but we have the old linker,
we have no pre-optimization in the linker, and that's missing.
We can do a lot better.
It's 20 or 30% of the performance gain.
We are expecting from switching to LLVM C-Lang.
It's not there yet, with more work to do, we are faster now than with the GCC, but we can do 20% or 30% better.
That's our goal.
That's going to be impressive.
That will really put the smoke over to the GCC guys.
We are now maybe 5% to 10% faster than the GCC, but we want to be 30% or 40% faster.
That will last at least three or four years.
Could I take them binaries, can I use this on the Linux space system to compile binaries for Linux spaces?
No, not yet.
It's not yet.
You need the complete tool chain to do that.
That's so difficult to change parts of that because the effects are tremendous.
Can you do stuff like the Raspberry Pi is not the most powerful device in the world.
Can you do cross-compiling for the Raspberry Pi?
We are working now on that.
That will be finished at the end of the year.
We are now working then, because from the 24,800 parts, they are not built yet.
We are working on that, and it was machined in October, November, December.
Is there anything else that I...
The guy?
We are working right over there.
That's the guy working on that thing.
Everybody, the actual people working on projects, if anything happened, the comments fell on this.
All the guys are working on that on the task.
They will be the way to get rid of...
Next for them, we have planned to sell those recipes, which we have here at the move one to show.
Next to you, you can buy them, you can buy SD cards.
We are freebies on it and the ports on it.
So you plug in your SD card in your Raspberry...
...or in anyable...
...about a similar machine, and then you are ready.
That's it.
Or you can download a complete image, put it on a SD card or any other flash device you have.
And then you are ready.
That's it.
Fantastic stuff.
Have I missed anything else in the interview?
No.
I don't think so.
You are also here with the SSH guys.
This seems to be a close relationship between BSD and SSH.
Can you tell us the history of that?
Open SSH started as a sub-project from OpenBSD, like OpenNTP, like OpenCDS and stuff like that.
After years, people are a bit segregated between OpenBS and OpenBSH.
The guys are now working on OpenSH.
Only a small part of it are the OpenBSD guys.
Most of the guys came from our projects, from Linux, from whatever.
I think you got to have a feel for that sort of stuff.
From the developers, maybe 20 or 30% from the now OpenSH developers are OpenBSD guys.
Your mascot is the devil.
No, it's not a devil.
It's a demon.
It looks like the devil.
Why do you hate Jesus?
We don't hate Jesus.
Have you had any problems?
I know you've had some...
I've been a bit...
I know you've had some issues.
Some people go to conferences that they've been escondored.
Have you had any issues with that?
No, not in Euro.
Not in Euro.
People are laughing a lot.
Listen, Hack-A-Bubble-Gradio is a always looking for shows.
So, if ever you want to come on either to get interviewed or if you want to do your own show,
feel free to do it for us.
Cool.
Okay.
I'll see you next year.
I'll be there and I'll wait for you.
My name is Zunofan from Olinx, Bulgaria.
Okay, and you're a company here at FastTime?
Yeah, we are first time here, like, exhibitor at FastTime.
And you were saying that you are sponsoring a...
Yeah, it's a hardware hackathon.
We want to show the people who are mostly from software development
that it's not very hard to deal with hardware
and to solve their boards and to see that they work.
Yeah.
And here we have different demo codes with this board,
playing pong game or changing color of RGB led with the win-on-truck.
There is a TV remote control you can see.
I can distance it.
And there is a temperature meter.
You can measure the temperature with a thermocouple
with the same small tinny board.
Okay, hold on.
So, you've got this little tiny board shaped like a penguin.
Yes.
You've got hackers with soldering iron,
such as always a dangerous thing.
Yes.
And they're soldering up the boards.
And how much are the boards?
The boards are free.
You're giving the boards away?
Yes.
We're giving the boards away here.
Because we have some limited space,
they just have to wait somebody to stand up.
So they sit and solder the iron board.
So, if you solder the board, you get to keep the board?
Yes.
And board is actually an Arduino board, is it?
Exactly.
You can work with Arduino today.
You can program it.
They have bootloader.
They have programming blinking led.
So, everybody can check his board.
If it's working here, you can see what smile they will have
on their faces when they see that.
Actually, they did something by themselves.
It's fantastic.
Absolutely fantastic.
We're promoting an hacker public radio.
We've had two episodes by Mr. X and soldering,
which actually work.
So, this is a good thing.
Yeah.
The main key is not to hold a hot end, I understand.
Yeah, it's very easy to solder the stuff.
We specially made this board with the component,
which are easy to solder.
We were talking that yesterday about 100 boards were soldered
and all of them were working.
That is pretty good, actually.
No damaged boards.
And this is for beginners who never touched soldering in Cairo.
I want to, one of our earlier interviews,
I was over at the OpenStreepMap project,
and they showed me this device.
Can you tell me what that is?
This is open source hardware Linux computer.
And made by your company.
Yes.
We make everything public with the cut sources,
so everybody can study how it's done,
modify, create his own board based on this design,
and even sell it.
So, how much are you selling that board for?
This is 30 Euro board.
And what do I get on it?
You get a Cortex A8 processor with one gigahertz,
512 megabytes of DDR RAM.
You have SATA.
You have HDMI, native Ethernet, two USB ports,
and lithium polymer charger.
So, you don't need expensive UPS.
You can create server with just single small battery
and it will run for hours.
Like this one, you see?
Yeah.
Pictures of this will be in the show notes.
Okay, this one is a double cord device.
It's slightly larger.
Yeah, it has one terabyte of hard drive.
A little laptop hard disk underneath.
Connected with a serial ATA kit.
It consumes only two watts of energy.
Two watts?
Yeah, so you can make a torser or torrent server
for your pictures or movies or something,
and put it 24-7 and it will consume only two watts.
And one of the issues that I've had with Raspberry Pi
has been the reliability I can't run it for 24-7.
Does your device have any of those issues?
This device has no USB to Ethernet converter.
The Ethernet is native.
The USB host and everything is designed carefully.
So, there are not the problems with the Raspberry Pi
when you connect many things on the USB ports and it syncs.
And you can run for hours from lithium polymer battery.
So, it's a regular connection.
Yeah, yeah.
Okay, what sort of devices are you powering here?
I see this here.
There's a little strip of LED lights.
It's a fun game.
It's a different.
We just wanted to show what is possible to done with this small work.
And all these demo projects are put on the websites
of people whose other work can download the demo codes,
see the libraries.
What I'm seeing the...
Yeah, this is eight to any work.
It's running two LCDs.
One is running deviant, you can see.
Yeah.
And one is running under it.
Oh, okay, cool.
Yes.
And the video players here use totally open source drivers.
So, the video accelerator here is made by the open source community.
It has no binary blocks.
It...
100%...
100% open source.
Yeah, yeah.
Are you Richard Solman approved?
I don't know.
I don't know if he knows about our existence.
He might do after this.
So, what are the stuff?
Of course, it is still in the very beginning kits.
It supports only MP3 and MP4 formats.
But there is a Linux Sonsi community
which is working to open everything on these chips
and everything to be without binary blocks
when you look at kernel and...
Yeah.
And it's running big book money
without any problem whatsoever.
And the whole table is full of those little penguin devices.
Yes, yes.
On the table next to that part of the group.
The next table is for our college.
The serial...
They're from heckable devices from France.
They're just separate books.
Okay, cool stuff.
Listen, I'll put a link to the show notes.
Do you need any help or assistance from the hacker community?
Any help?
Welcome, sir.
How are you...
So, I could take the designs for this
and just make it myself.
How are you making money?
Yeah.
Well...
The open source...
Many people think that when they open their work
and nobody will...
will buy from them.
Everybody will start doing it by themselves.
But I think in other way,
when you do open source hardware,
you don't have competitor
and you don't have just customer.
You have collaborator because
whoever gets this design
and if he makes something better or improve it,
he sends it back.
So basically, open source hardware
helps us to make better products.
And this is bigger benefit
from this that somebody will copy your design
because somebody will copy your design
even if it's close source.
And we have an example for this.
There are some Chinese companies
which make similar boards.
And everything there is close source.
But when they become successful
in three or four months,
they start being copied
by other Chinese companies.
So, what is your advantage
if you're close source?
Two or three months.
We just skip this.
And then anybody who makes improvements?
No customers appreciate
because they have better documentation.
They can see everything.
They can learn something new.
And basically, you educate your environment.
And helping each other,
somebody who has said that
if you have one apple
and other has one apple,
you exchange them.
You both have one apple.
If you have one idea,
other has one idea.
You exchange.
Everybody has two ideas.
So, this is the best part of the open source.
You exchange your expertise.
For instance, we know harder,
but we are not Linux experts.
There are many people who know Linux.
They help us.
We help them to understand the hardware.
They help us to understand Linux.
So, for these two years,
we learned a lot out of this project.
And this is also very open.
Perfect. Perfect.
Is there anything else that you want to share
or have been covered in everything?
I'm going to go take some photos of this.
Thank you very much for the talk.
Thank you.
Hi, everybody.
This is Ken.
We're down in the W-something building.
A-W building.
Not the WC building,
which I was going to say.
That would be somewhere entirely different.
And I'm at the Pandora table talking to me here.
Exactly, yes. Hello.
Hi.
So, tell us, what is the Pandora table?
What are you doing here?
What is it?
Well, the Pandora basically is a mixture
between a gaming console and a mini PC.
So, it has about the size of the Nintendo DS.
Has gaming controls and a full keyboard in there.
And it's running, of course, Linux.
What type of Linux?
Right now, it's a version of Open Embedded.
Because we only have 512 megabytes of storage in there.
But for all the files you want to have,
there are two SD card slots,
so you can put in right now 512 gigabyte
of additional storage, if you like.
Yeah.
It's a very optimized version,
which supports our hardware,
but it's based on Open Embedded.
Okay, so it's a size of a little launch box, I guess.
And it's got a small phone screen that you might see on a...
Is that a touch screen or not?
That's a touch screen, yeah.
Okay, we've got a touch screen, but we also got analog controls,
which can be used for games or also for mouse usage.
Was this the...
Did you do a Kickstarter or a fundraiser for this?
No, because Kickstarter didn't exist when we started with a project
that was back in 2007-2008.
Yeah.
And it was financed with pre-orders.
That made a lot of issues because we've never done something like this before.
And, well, now it's available for, I think,
about two years since 2012, right from stock.
Because we solved all the production issues,
and production run is now stable.
And, yeah, well, I'm working on the successor right now as well.
Okay, do you have any prototype of that available?
The successor, yeah, you can see it right there.
It looks a bit naked at the moment.
Yeah, right.
The case is not finished yet.
It's just a bit of PCB connected to an EVM.
But it's just got it this week.
We just started with the development.
But as the development block will be open,
so everybody can follow how will such a device be designed and exist.
That's why we start from the very early stages to the final product.
And what you can see is one of the early stages,
but you can already see how fast the CPU will be.
So the original device has got a,
it's about an inch thick, I suppose,
when it's closed a little less.
Yeah.
It's got a full-quarty keyboard.
A, what's, a deep patch, a deep patch.
I don't play games that much, as you can tell.
So, what would I use this thing for?
Well, a lot of people use it for playing games,
for retro games, up to PlayStation, Nintendo DS,
something like that.
For all the Linux games that are out there,
or the interpreters like Jedi Knight, Craig, Doom,
all that stuff.
But of course, you can also use it for internet web surfing,
emailing.
You can run Libra Office on it.
And well, that's where the deep patch is,
because the deep patch actually are the cursor keys as well.
So if you're doing some scripting, compiling, coding,
or just working on a documentary Libra Office,
you've got the cursor keys.
And the buttons function is page up and page down,
so it's also optimized for working.
So, yeah, basically you can do anything with it.
Use it to administer server, play some games in between,
whatever you like.
What sort of connectivity has it got?
More than a Wi-Fi build-in.
Two SD card slots that's mentioned,
and we also have a normal full-size USB port,
so it can connect any USB device, heart disk,
USB stick directly to the system and copy it over.
You could connect a heart disk and run some rescue tools
to rescue data from a defective heart disk.
Okay, cool.
Can you connect it up to a HDMI screen or something like that?
HDMI not yet, because the old version from 2008 was before,
HDMI was really popular.
But you can connect it to an analog TV out,
but the new version will also have an HDMI out,
which is what is currently connected to a monitor,
as you can see here.
I'll have a look.
So, with the new device,
what are we seeing connected?
There's a board, and then a separate board.
Will there be so much one on top of the other in the final device?
Yes, of course.
The final device will be basically the same as we have on the OpenPenora,
just with updated hardware,
and it's like the updated case.
So, we'll have 3G optionally in there.
We have a backlit keyboard,
HDMI out, a new processor, and stuff like that.
That's all on the new unit.
Oh, yeah.
Yeah, so, if you're into gaming
and if you need to do remote support
with a quality keyboard, you're set to go.
So, how did you get involved in this project?
How did you wake up one morning and decide to produce essentially a Linux PC?
Well, I always was a fan of things that's not a big company
with a huge financial funding has,
but things that are putting together by a community,
which are motivated to do things,
which is what Linux is all about.
And I'm always, since I was a little kid,
I always love computer games.
So, there were open source handhelds out there,
and originally I just was reselling them in Germany
because nobody wanted to import them.
And I wanted to have those Linux gaming devices out in Germany as well.
And then at one time,
one of the other distributors had the idea,
let's create something like that ourselves.
He was crazy enough to start it.
I would have never done it.
I have to admit that.
But then I got involved.
It was mainly taking care of the community.
And in 2012, I am organizing the full production run.
Well, yeah, that's now my second main job, basically.
Do you get a lot of help from hardware hackers in the community?
Not from hardware hackers, but because the product basically is already finished,
but from software developers,
the community is really, really great.
And also the successor, what it has included,
is also based on ideas coming from the community.
They have the Pandora,
and they told us, well, it would be nice to have this in that as well,
and then we are looking to,
if we can include it in a future revision.
Cool.
Fantastic stuff.
So the future is the next version.
When do you expect that to be run?
I'm going to have to hold you to this.
Yeah, that's the hardest question.
We had a lot of issues with the Pandora,
so we learned to not give out any release dates, any concrete ones.
What we have is we've got the block open,
so you can follow the development,
and then, well, you can guess how long it will still take.
And of course, we gathered a lot of experience with the first device,
and we have now reliable companies who are producing that.
So it will be a lot faster.
We will finish it a lot faster than the Pandora,
but we can't give out exact details yet,
because well, it depends on so many things.
Sometimes it takes 12 weeks or 14 weeks just to get the parts.
And how much are these devices?
And can we be able to pre-order those?
Not yet.
The pre-order will just go online,
as soon as we have finished prototypes,
so with casing and everything finished.
And the current Pandora is, well, it starts for 250 euros for a smaller unit
with less RAM and less CPU power,
up to 500 euros for the 1GHz version.
Cool stuff.
And can you tell us about the system project, the ecosystem?
Well, yeah.
There are more open source systems using the OMF3,
that's, for example, the GTA-04,
which is basically a PCB for the old OpenMoco phone,
or for the GTA-02,
where you just replace the PCB,
and then have a faster and new updated CPU as well.
I've heard about this, actually.
Yeah, exactly.
And how is that related to the Pandora project?
Well, the one who designs the Pyra board right now
is the same designer who made the GTA-04,
and he also helped me moving the food production to Germany.
So I've been in contact with him,
and he's also working on the new project right now,
which is the Neo 900.
And the Neo 900 will be a PCB,
which will go into the old Nokia 900 phone,
which will also have an updated processor.
Is that a useful project from?
Is there anyone really doing that?
Or are we just hackers?
I think it is useful for everybody who owns an N900.
I've got three N900,
because two of them had the USB port broken,
which is a combination on the N900.
And now I've got the case, I've got the shell,
I've got the screen, and everything.
All I need to do is get the new PCB replacement,
and I've got a new phone already.
Is there anything else that I missed in the interview?
I don't think so.
I think we probably mentioned it everything.
Okay, super duper, thanks very much,
and enjoy the rest of the show.
You're welcome.
YouTube, thanks.
Okay, hi, this is Ken.
I've just finished downstairs in the K-Building,
the AW-Building, and now I'm upstairs at the K-Building,
a FOSTEM 2014,
and the first suckers to get counted in the interview,
are the guys on the part of them both.
Who are you?
I'm Christophe Tumanese.
I'm Hugo.
And what are you doing at the Python booth?
So, one step back, what's Python?
So, Python is a general purpose-priming language,
used in many different domains,
from web services to scientific applications,
and it likes tabs.
It can do a lot of things,
and it can be a lot of things,
and it can be a lot of things,
and it can be a lot of things,
and it likes tabs.
It can do a lot of things,
so easily you can do a system-administration,
also with it, you can do graphical applications,
you can make games, also.
So, for now.
So, I think a lot of people,
everybody listening to Pack-Up with Gritty,
know what Python is,
we've had Python serieses on,
and how to program.
So, what do you think Python and Pearl
have such strong communities?
Well, I think that Python,
the emphasis on readability
and on good principle of Python,
the design of Python,
is a very strong force of the language.
Together with this,
good bindings in C's,
good C libraries,
which make it very performant,
which means that it's usually more performant
to do something in OpenCV,
or doing scientific computation,
using Python and C libraries
than using other languages like Java,
or the whole stack is working in the virtual machine.
You seem to have a sign here
and meet us at the Python dev room.
What's going on over there?
It's a bad room.
There is a lot of presentation.
No, I think there is a presentation
about Python SQL,
we help making SQL queries more easily.
There are also a few presentations
about Python, also Python,
and also what Python.
So, you have several books here.
Do you sell those?
Those are just an example of books.
It's just an example of books about Python.
There are also books available already.
Okay, how would you,
if somebody was new to programming,
you know,
wanted to get into Python programming?
What's the best way to start?
Depending on the person,
if it's an easier process,
maybe making games.
It's easier to start with games,
so you have a good feedback.
There is a spy game for starting.
For other people,
that's already programming.
There is learned Python's hardware.
That is a good book.
One way of learning Python is through books and documentation
and the other one is by doing hand-on.
There are many local Python communities
where you can learn with other people
that can help you.
And Python is also quite useful
using web frameworks.
There are some that are really easy to use,
so you can easily connect stuff you have
running on your computer
to a web interface.
How would they,
how would I put, connect,
sorry, doing web services with Python?
How does that work?
So, there are many tiny web frameworks
called cherry pie,
or flask, or bottle,
or web to pie.
They are really easy to install.
Some of them are just one file or one directory
to drop in your project.
And then you can use everything that's in there.
Some of them include a whole web server
so you can just open your web browser
and you have basically content generated
from the app you've just written,
directly in your web browser.
And these user groups,
where could I find out?
How do I get involved in the community?
What is the advantages of getting involved?
And the Python community?
Well, the main advantage is that
you have people working with the same kind of things
as you are.
The same reason why people come to fuss
is that they learn about other open-source software
they could use.
When you're in a Python community,
you learn about other Python libraries you can use.
And there are plenty.
You can check the website of the Python website.
There is an index of all libraries
that are available for everyone to install.
And there are tens of thousands libraries.
So you need some features, some recommendation,
and what to use.
Do something, and the community helps a lot.
Okay, fantastic.
Is there anything else coming up that people
should know about in the Python community?
Well, with a new version of Python,
there is a lot of work that has been done
on asynchronous programming.
So you can handle these tasks in a very easy and clear way,
much better than a subjectively much better than with JavaScript
or threads.
Okay, fantastic stuff.
Thanks very much guys for taking the time
and enjoy the rest of the show.
Thank you.
Matt, the Jenkins table, what are you talking to?
I'm Kostya Kavagati.
So what are you doing here at Foster?
So the Jenkins community has a large presence in Europe,
so there is a lot of work for us.
So this is becoming a sort of tradition together
and then sort of integrate and then try to
evangelize about Jenkins, the other people in the community.
I have no idea what Jenkins is.
Can you tell me a bit about it?
Yes, so the Jenkins is what's commonly called
as a continuous integration server.
The idea is it sort of helps developers
by detecting regressions very quickly and notifying people.
So as you're compiling code, you check it in
and then it raises the error.
So as the people are committing changes,
sometimes people with cut corners
and not always run the entire test site,
or you know sometimes test that
too lengthy to run the whole thing.
So what Jenkins does is,
typically monitors the changes in the source code repository
and it checks out the code and runs the build and test
and then tally the reports.
So that's when the regressions get introduced
within a few hours you get to know that they're all paid here.
And people turn up at your desk.
Sorry, say it again.
People turn up at your desk.
So tell me what's actually involved
in setting up a Jenkins server
and what sort of programming languages
and commit systems as a support?
So we wonder the things that we spent a lot of effort on
is to make it really easy to get started.
So Jenkins itself is written as a Java web application
but we package it as the Windows installer.
Fabian package, Red Hat package and so on.
So typically all you have to do is like
you know up to get install Jenkins
and then it's ready to run.
And then everything else?
What license is it released?
The code is under the MIT license.
So up to install on them?
Yeah, and then you get the running
and from then on you can configure everything in the GUI.
And in terms of the programming language
and the environment that we support,
that's another thing that's really great about Jenkins
is that it's got this very active plug-in ecosystem.
So we have about 850 plug-ins
that's written by people around the world
and you can install anyone of them
from the updates center built inside Jenkins itself.
What type of plug-in would that be?
What would be a popular plug-in?
So for example, one of the very popular plug-in
would be like a git plug-in
which basically enables you to download things from Git.
Another popular plug-in might be
say active directory plug-in.
You know, you got your corporate
has the active directory as identity parking.
So you want the users to be logging into Jenkins
with a corporate user name in password.
So you can do that with active directory plug-in.
Or another popular plug-in might be a Chuck Norris plug-in.
It's basically showing...
Chuck Norris plug-in?
That's right.
So it shows a funny Chuck Norris slot on the Jenkins UI.
And if you break the build, he will be angry at you.
So those little things to help bring people into the Jenkins.
Nobody wants Chuck Norris on the rest.
That's exactly right.
So what sort of test can you do?
And how do I make checks?
Right, so most of the hotel structures
still need to be written by you.
So unfortunately, Jenkins doesn't write the test for you.
But what Jenkins does is, you know, the most test framework.
They are capable of producing output in machine readable formats,
like XML files.
So you tell Jenkins where those reports are.
And then Jenkins will read them and produce charts
and basically understand what they are.
So you can run JUnit or the PHPUnit or the CPPUnit
or whatever test format that support it,
I think you see the work.
That's fantastic.
Is there anything...
You say this is kind of your...
European or is it global meetup track?
And how many developers are involved in Jenkins?
So in the core, maybe they're the handful of active contributors.
And then if you look at the GitHub Jenkins organization,
there are about 800 people registered
a member of the comm...
I mean, the commuter community.
And then when we look at the number of people
who committed to the repository last year,
there was more than 1,000 people.
So it's a pretty active community that everyone scratching
their little each name, their own plugin.
That's sort of how it works in this.
And it's all written in Java.
So, yeah, most of them are in Java.
There are...
Also, you can also write plugins in Ruby,
to some extent.
So there are maybe like a dozen or so plugins
written in Ruby, but they must be in Java indeed.
And is it quite easy to do...
Would they need to have an understanding of Java
in order to be able to use it?
Or is it simpler than that?
Yeah, so using it does not require any Java knowledge.
But the writing plugin does involve knowing some Java.
You know, if they tend to 50 people manage direct plugins,
I think it's probably not too hard.
Yeah.
Excellent. And do you have anything else coming up?
Do you work for CloudB?
Yeah.
What is the relationship, or is this?
So, the CloudB is a company that I'm involved in.
And we have a number of services around Jenkins.
So, for example, we have a host of Jenkins as a service for people
who are not interested in running it.
They're only times we can do that for you.
We also have an enterprise plugins and support subscription.
That's called Jenkins Enterprise by CloudB.
So, those are what we have tried to help build a run
the Jenkins ecosystem.
Is this your first time at Thostimer?
You've been here loads of time.
I think it's the first time.
So, I really enjoyed the atmosphere of the conference.
I've been here every single year.
It's pretty awesome actually.
It's my first time.
Okay, cool.
Can I get one of these guys?
I wish I could give it to you.
But no.
A picture of the little guy over there.
Where did you get the logo?
Where did you come up with that?
So, you know, we did a competition on the logo.
We lost the original logo because, well, anyway.
So, this is done by one of the designer in Texas.
He's a contributor of Jenkins products, self,
and he came up with this logo and community like this.
So, just for our listeners,
it looks a little bit like a bottler.
And I guess Jenkins is supposed to be a bottler
or somebody who works for you in the background.
And then brings to your attention some bad news that showed up.
Okay, listen.
Thank you very much.
Okay, for the interview and enjoy the rest of the show.
Thank you very much.
Hi, this is Ken here, I'm up at SK2.
And I'm talking to Bert and Eric from the Puppet Project.
How are you doing?
Good area.
So, Eric, you're from the Puppet Labs.
That's right.
I'm the product owner for Puppet.
Okay.
I teach Linux System and Administration at University College GENT.
So, to the people who don't work in System Administration land.
What is Puppet and what's it used for?
So, Puppet's a tool for automating changes
that you might want to make to your systems.
So, instead of having to log on to systems individually
and run the same commands over and over,
you could run Puppet on the systems,
make a change one centrally,
and Puppet takes care of distributing that out to all the machines.
Okay.
And this will be on a higher level than something like a red hats thing.
There's lots of different config management tools.
Puppet's kind of unique and special
because it builds a model of the resources
that you're trying to manage on the system
and actually models the dependencies in between those resources
in a really powerful way.
So, if you say need to manage a Apache service,
we can make sure that the package is installed.
Your config file is set up correctly
and the service is started up in the right order.
And the package fails to install.
We're not going to blindly try to restart the service over and over
because it just doesn't exist.
So, Puppet builds a model internally
and then walks out as if it was a graph.
And you would have support for different types of operation systems.
That's correct.
Yep, runs on all kinds of operating systems,
runs on all Linux variants,
commercial Unix and Windows.
Okay, we've had some interviews with people
from the CF Engine project before.
They have a philosophy of you
of bringing consistency in.
And how would you compare your approach to CF Engine?
Yeah, well, there are somewhat similar in the sense that
CF Engine also builds a list of the things
that you're trying to manage on the systems.
One of the main differences is that the CF Engine model is autonomous.
Each of the systems decides for itself, reads the configuration decides for itself
how it ought to work.
And in the Puppet's model,
although Puppet can run individually on a machine,
you don't need a client server model.
Mostly, people run it in client server mode
where the clients submit the information
that they know about themselves,
what operating system they are,
what their current version is.
Into the master,
and the master makes decisions on it,
and returns them a pre-compiled description
of what their state ought to look like.
Rather than the machine going through
and doing all this computation independently,
and therefore requiring access to the entire configuration
or to figure out what it ought to look like,
all of that logic is done on the master,
and the agents only ever see a representation
of what their state ought to be.
So all of this stuff about what the other systems look like,
all the other branches that weren't walked,
as we were compiling that catalog,
don't ever make it onto the client.
So that provides a nice security model,
as well as the data transfer of the network works out,
works out to be a lot smoother than having
to manage pushing out configuration
individually to the machines.
Is there a functionality to recover from errors
and config files as time goes along?
So config file gets cropped by Admin logging in
on the machine itself.
Is there a ability to push down fixes?
Sure.
Oh, you mean if the puppets configuration itself gets corrupted?
Or somebody logs on to server web server one
and then adds a new virtual host and makes a typo
rather than controlling it essentially?
Yeah, so absolutely.
We generally call that drift remediation.
People making changes on the systems manually
is drift from what the desired state is,
from what they ought to look like.
And absolutely, puppet has a really intelligent set of algorithms
for figuring out whether the system exists on the,
whether the state is it exists on the running system
is the way it's supposed to be or not
and then bring in line if it's out of line.
Cool.
So you're what sort of licenses have released under?
It's all a patchy license.
And you're the Belgian puppet user group.
So what's the benefit of having a user group at all?
Yes, sure.
So we started last year, about a year ago.
And now we meet every now and then every month,
every two months with a couple of people
that are using puppets or starting to use puppets.
And we exchange experiences, talk about what we've learned
and where we still have some trouble.
So we exchange information and get better.
And how do you make a profit on this open source system?
Yeah, so puppet labs manages a bunch of open source projects.
We've bundled those projects up into one commercial product,
which is puppet enterprise.
And puppet enterprise not only has like long-term support
instability, has a great performance tune installation
out of the box.
We have them having a cobble together.
This sort of really pretty complicated stack of
the right Ruby version, the right web server.
We put all that together, make it so it's super easy to install.
It's highly scalable and provide long-term support for that
platform and get it running on the main target operating
systems that our enterprise users care about.
So in addition to all of that, there's some cool value-added features
that are only available on puppet enterprise.
Some more GUI functionality for helping less advanced
administrators get started really easily and consume pre-made
content on the forge, which is our community site.
And use that to configure the systems,
instead of having to write everything from scratch.
And is that released under a proprietary license?
Puppet enterprise is a renewable yearly software license.
So it's not open source.
Most of the projects are dual license in the sense that you pay us
for software license to continue to use puppet enterprise for a year.
So what's coming up in the near future?
Oh, there's lots of great stuff coming out.
One of the speaking specifically about puppet enterprise
with completely revamped the installation mechanism for the
next version, that'll be out of March.
There's to make it really easy to build a scaled-out installation
right from the start.
There's a bunch of stuff in the individual projects that the
open source stuff upstream that have been moving really fast.
You have it a lot of great new innovations that have come out
like a new parser and evaluator for the language that's way
more powerful and flexible and also faster.
We have structured fact support, so you can have rich
data structures that are returned up from your agents.
So instead of having to have an individual fact for each one of
the network interfaces, say all those interfaces get bundled
in a big nested hash that is keyed off the interface name,
so it makes it a lot easier to get out your data around them.
Sorry, what's you called them thoughts or facts?
Yeah, so the fact is a little bit of information about the system
that, as I said at the beginning of that lifecycle,
the clients discover all the facts about themselves,
whether a program called Factor, FACTR,
it's kind of like a little pun, I guess.
Very little pun.
But yeah, then all those facts are things that either
systems administrators write themselves in order to, say,
teach Factor about their application and about how their
systems are configured or just are generically available
and synced down to the agents for modules that you download
or included in Factor out of the box.
Okay, so I guess the whole point of this is somebody gets
a rack of new servers and you turn them on and the pixie boots
and then you should be able to auto-deploy them
is that sort of what your budget is?
Yeah, yeah, everything after, I mean puppets squarely
and like everything after that base OS installation gets on,
what needs to change on the systems in order to make it so
that you can actually get some value out of them.
Okay, cool.
Listen guys, thank you very much for taking the time
and really appreciate this and if ever you want to come back
or do your own show hunt and hack up public radio
feel free to do so.
Sure.
Thank you.
You have been listening to Hacker Public Radio
at Hacker Public Radio.
We are a community podcast network that releases
shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by
a HPR listener like yourself.
If you ever consider recording a podcast, then visit our
website to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dark Pound
and the Infonomicom Computer Club.
HPR is funded by the binary revolution
at binref.com.
All binref projects are proudly sponsored by linear pages.
From shared hosting to custom private clouds,
go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released
under a creative commons, attribution, share a life,
lead us our license.
