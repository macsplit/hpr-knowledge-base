Episode: 3410
Title: HPR3410: Operating Systems
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3410/hpr3410.mp3
Transcribed: 2025-10-24 22:51:15

---

This is Haka Public Radio Episode 3410 for Friday, May 27th of August 2021.
Today's show is entitled Operating Systems.
It is hosted by AYUKA and is about 14 minutes long and carry a clean flag.
The summary is here we look at what an operating system is and how they developed historically.
This episode of HPR is brought to you by archive.org.
Support universal access to all knowledge by heading over to archive.org forward slash donate.
Hello, this is AYUKA, welcoming you to Hacker Public Radio and another exciting episode in our DOS series.
This one we're going to be talking about operating systems.
Again, I just remind you this is largely based on material I wrote over 20 years ago.
But you're going to see a little bit of that as we go through this.
But still, I'm talking about an operating system that was more than 20 years old.
I thought I would start off by talking about what an operating system is.
As an academic one of the things you learn is define your terms.
I put some links in the show notes.
For instance, WebOpedia has a definition.
The short one is basically the software that sits between the hardware and the applications.
Now, we'll be expanding on this in the rest of this episode.
Now, the earliest computers did not have operating systems.
The earliest computers were programmed by changing the wires that connected different vacuum tubes,
which functioned as bits in the days before transistors and then integrated circuits.
To run a different program, you would have to move and reconnect many wires, which was a very laborious task.
Still, it was something that you would do if you were highly motivated to do so as in World War II.
We know that, for instance, some of the very earliest computers were used in code breaking at Bletchley Park,
and also for calculating artillery tables.
If you wanted to know how to proper way to set your cannon so that it would hit the enemy,
you would use artillery tables to help do the settings.
You were basically doing the same thing over and over and over,
so there wasn't that much reprogramming going on with those kinds of things, so it was practical.
After the war, computers developed further, but they were the mainframe computers that were developed
were these big room size monstrosities.
Thomas Watson, who was the CEO of IBM, said that he only saw a market for maybe five computers in the world.
That's because what he was looking at had a very limited market.
What he didn't realize was how rapidly things would change as the technology advanced.
Now, the next change that we want to look at comes when people were looking at these big mainframe computers
and realizing we've got a problem here, these things spend most of their time sitting idle.
The reason is they can only run one program at a time.
The way you would set it up, you could load a program using punched cards or punch paper tape
or some of the things that were commonly used.
But then, you know, you'd be flipping switches on the front of the computer,
and all of that setup was really what was taking so much time,
and it was taking longer to set up a program to run than it took to run the program.
So they started looking at what were called time sharing systems.
And I think time sharing systems are probably the first operating systems as we know them today.
Now, one notable one was developed at MIT, and it was called Multics,
which is short for multiplexed information and computing service.
And this was very influential.
In fact, it influenced a couple of Bell Labs researchers, named Ken Thompson and Dennis Richey,
who looked at it and said, well, you know, this is a big complicated program.
Could we do something that's somewhat simpler?
And so they did, and they called theirs UNIX instead of Multics.
And when they did that, originally, they spelled UNIX UNICS,
and it was a very deliberate pun on Multics.
And of course, UNIX is still around, and is basically the granddaddy of Linux,
and BSD, and other modern operating systems.
Now, what about personal computers?
Well, the first widely used PC operating system was something called CP-slash-M from digital research.
And that was developed for early computers that used the Intel 8080 processor.
Now, when IBM was looking for an operating system for their first personal computer,
they got a recommendation from a guy named Bill Gates,
who was head of a small software company that basically produced and sold basic,
the programming environment.
And IBM was interested in purchasing basic from Bill Gates' company, called Microsoft.
And Bill Gates said, well, you know, if you want an operating system,
you really ought to get CPM from digital research.
But the head of digital research could not come to an agreement with them.
The story is that he was flying an airplane and refused to take a meeting,
but I think really had more to do with non-disclosure agreements
and what things he was willing to do or not do.
In any event, Kildall turned them down.
And so Bill Gates jumped in and said, his company, Microsoft,
would sell them an operating system.
Now, he didn't actually have one at that point.
But what he did is he went to another company in the Seattle area called Seattle Computer Products,
licensed their program, which was 86 DOS, rebranded it as MS-DOS in the rest of his history.
Now, the 86 DOS program from Seattle Computer Products was basically a clone of CPM,
but it did have a few improvements.
And this became the DOS that we all know today.
Now, in theory, we do not need operating systems,
though computing would be much less efficient without them.
Now, for example, users of the old WordPerfect for DOS, which I do remember.
That was my first computer was running WordPerfect for DOS.
And this Word Processing program came with its own printer drivers.
And without a printer driver in the application software, you could not print.
So every program that you ever wanted to print from would have to have its own printer driver.
Now, today, users of Word Processing Packages never think about this.
The operating system loads the printer drivers and makes the printer available to any application.
So the first principle we can discern about operating systems is that they can make applications easier to create and run by relieving them of certain tasks.
Now, the next characteristic of operating systems is that they control access to and allocation of resources.
Imagine if your printer received print instructions from two different programs and began printing from both of them simultaneously.
The resulting document would not be useful.
On a more fundamental level, the normal desktop computer has a single CPU that handles all operations the computer does.
Now, I said single CPU over 20 years ago. Of course, nowadays, our CPU might have multiple cores.
But still, basic principle still applies.
The operating system determines which programs will have access to the CPU and under what conditions.
Similarly, the operating system controls which programs can write data to a disk or draw something on the screen.
Now, the third characteristic of operating systems is that they create a user interface through which the user interacts with the computer.
In the earliest computers, the interface consisted of things like punched cards and paper tape created by specialized keyboard devices.
Then, monitors and other terminal devices were added.
Though input was still achieved largely through the keyboard, and information was in the form of text.
Doug Engelbart at Xerox's Palo Alto Research Center showed the way to a different interface, something called the graphical user interface.
Generally, the acronym is GUI, and we pronounce it as GUI.
In a famous demonstration in 1968, which employed a three-button mouse and a clickable bit-mapped screen image, and has become famous as the mother of all demonstrations, remarkable effort.
This interface became the Apple Macintosh and Microsoft Windows to name the two best known heirs of the park research effort.
For more on this, take a look at the book Fumbling the Future, how Xerox invented and then ignored the first personal computer by Douglas Smith and Robert Alexander.
Now, it is quite likely that future interface design will take us away from mouse's and monitors to things like voice interaction, maybe to direct brain connections like cyberpunk writers have hypothesized.
Now, for a fascinating discussion of interfaces and related matters, I recommend reading an article by Neil Stevenson called, in the beginning was the command line.
Now, what about DOS as an operating system?
Microsoft's DOS, and that stands for Disk Operating System, in case you didn't know what that meant, is an example of one kind of an operating system, a fairly simple one, which first appeared in 1981 on the IBM PC.
The interface is what we call a command line interface, meaning that there was no mouse, no menus, or any graphical components.
Text commands were entered from the keyboard, and the computer's response appeared as text on the monitor.
Now, DOS controlled some aspects of the computer hardware, particularly disk access and basic CPU operations,
but it was still common to need to configure the video display, the sound card, the printer, etc, for each application that would use them.
DOS was a single tasking operating system, which meant that only one program could be run at a time.
Again, a big difference from what we have now.
So, in many respects, DOS was a primitive OS. It was based on previous systems, of course, and echoes of Unix and CPM can be seen in it.
But if you read Steven's article, Stevenson's article that I mentioned, you will realize that it had hidden power as well, because you could interact more directly with the components of the computer than you can with some more modern operating systems.
It is this power that makes it valuable to know DOS today.
The majority of computer users today use graphical systems, but users of Windows, for instance, have the ability to interact with the computer through DOS, or in the case of Windows NT, with a DOS analog.
Again, a reminder that I wrote this over 20 years ago.
But it is still worth noting that if you are in a Windows environment, and currently the version of Windows is Windows 10, there is a command line you can access, and if you're going to be an expert at Windows, you need to know how to do that.
But it is not exactly the same as DOS, and there can be differences that will trip you up. So just be careful about that.
And the reason that someone who wants to be a Windows system administrator would need to know about that command Windows, it enables you to do things that are difficult or impossible to accomplish through the graphical interface.
So familiarity is important. In any event, I think it's worth learning a little bit about DOS, and that's what this series is all about.
So this is a hook-up for Hacker Public Radio signing off, and is always encouraging you to support free software. Bye-bye.
You've been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the Infonomicon Computer Club, and is part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the creative comments, attribution, share a life, 3.0 license.
