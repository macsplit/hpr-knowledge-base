Episode: 3349
Title: HPR3349: Linux Inlaws S01E31: Interview with Paul Ramsey FOSS aficionado and entrepreneur
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3349/hpr3349.mp3
Transcribed: 2025-10-24 21:23:30

---

This is Hacker Public Radio Episode 33494 Thursday, 3 June 2021.
Tid's show is entitled, Linux in Los S0131.
Interview with Paul Ramsey Foss aficionado, an entrepreneur and as part of the series Linux,
in Los it is hosted by Monochromic, and is about 65 minutes long, and carries an explicit flag.
The summary is an interview with Paul Ramsey, Foss entrepreneur and Open GeoFame.
This episode of HPR is brought to you by AnanasThost.com.
Get 15% discount on all shared hosting with the offer code HPR15.
That's HPR15.
Better web hosting that's honest and fair at AnanasThost.com.
This is Linux in Los, a podcast on topics around free and open source software,
an associated contraband, communism, the revolution in general, and whatever fences your tickle.
Please note that this and other episodes may contain strong language, offensive humor,
and other certainly not politically correct language you have been warned.
Our parents insisted on this disclaimer.
Happy mom?
Thus the content is not suitable for consumption in the workplace,
especially when played back in an open plan office or similar environments.
Any minors under the age of 35 or any pets including fluffy little killer bunnies,
you trust the guide dog, a lesson speed, and QT Rexes or other associated dinosaurs.
Welcome to something called Linux in Los, season one episode feeling like 215,
but I reckon it's slower than that.
Tonight we have a very special guest, a chap called Paul Ramsey, but why Paul don't you introduce
yourself?
Well, sure. I'm Paul Ramsey. I'm an open source developer in the Postgres ecosystem,
and really most closely associated with the spatial extension to Postgres called
Postgres. Postgres is Postgres as Oracle spatialist oracle. It adds a geospatial type and
all the required functions and index bindings are necessary to make that type useful.
So it's kind of like this gets used by companies and governments that have information about the
world, about land, about where things are, and want to, in the same way that relational databases
are used for ordinary data, want to organize and query that data quickly.
Excellent. Before we go into it.
Yeah, sorry, sorry, sorry, sorry, go ahead.
I think what you said about Postgres is the most popular Postgres extension out there.
This is the most popular. It's certainly the one that people point to most often when they
point Postgres and say, Postgres has got a huge or a cool extension of the Postgres system,
and the coolest extension is this. I don't know if it's necessarily the most popular,
probably most popular. There's some of the smaller extensions that live inside of Postgres
Contrib, you know, PG stat statements, probably I guess you use a lot more.
It's a very utility, but in terms of being like the marquee extension, I would say that we've
locked that down about 15 years ago. Oh, my god, something.
Cool. Sorry, please.
Yeah, and before we go into the nitty gritty details of the implementation works, maybe we can take
a step back. Yeah, and Paul, when prepping for the show, I came a very interesting presentation of
yours that you gave at what's called Fast4G or something like this in 2019,
where exactly where I noticed that when when watching this presentation, it's not so much about
the subject matter at hand, namely, um, Geo spatial databases, but rather something
about the greater force ecosystem and mid-life crisis and so forth. Given the fact that, yes,
we are all old, and we're going to die eventually.
Exactly, and this is a listener, it's the listener, so you will find the links in the show notes,
both with what it goes without saying, but Paul raised a very few interesting observations
in this presentation, and for the very few listeners who are not familiar with the presentation,
maybe you can give a quick recap of what you said and why you said it, because I think that
presentation is a very fascinating, interesting one. Yeah, so I've been talking, I was invited to
give a keynote for the first time at Fast4G in 2009 in Sydney, and at the time I chose for my topic
business models for open source software companies, and I keep visiting it because it's a very
interesting problem-slash topic is like how does open source the economy of people giving software
to each other and an exchanging value for, you know, no economic tokens interact with the larger
economy of people exchanging services and goods for monetary tokens, and it's been this sort of
repeated theme has been helped by the fact that every few, this feels like the world flips on
its head and changes, and there's always a new, a new facet to look at the problem from, and
at the time I gave the first talk 2009, the dominant model for commercialization of open source
was the idea space was really dominated by Red Hat, and the idea of some form of enterprise
support, and that has very much changed in the 10 years since, and while I covered a bunch of
different bits and pieces of open source in that pocket, it finished off with what I consider
like the current big economic challenge that open source spaces, which is this new ecosystem in which
the organizations that are extracting the most monetary value from open source software are
the cloud providers, and there's other companies sort of on similar metrics that perhaps
have better excuses or reasons for their model, or can provide, you know, better examples of the
value they provided the customers, cloud providers are taking more or less on altered open source
software and spinning it in the cloud, and charging a premium above their raw compute
costs for this open source on a compute cluster service, and because the cloud is taking off my
gangbusters, their revenue from open source now easily exceeds even the largest
former companies that were doing open source, so you know, Red Hat is a 2 billion company, and AWS
is like a 20 billion, I'm making these numbers up, but at this point Red Hat has gone from being
like the biggest thing in the open source economy to very, very much also ran in terms of revenue
numbers, and that's like just like it everyone else is up looking at, you know, Azure and Google,
and the other main cloud providers, so
if you want to interrupt me, I kind of want to back in to why that's important.
And no, definitely, yeah, that's a very interesting discussion about licensing, but we're going to go
about the next question, one that after, after Martin's question of corpus,
yeah, I mean licensing is part of it, but I think it's almost like a science show,
because even before you get to the open source, you're living in a digital economy, you're working
with software, right? And software's digital good has, you know, a zero replication cost,
so unlike, you know, any other, like even intellectual goods like books, you know, they
always had a replication cost, which served to allow sort of a marketplace of scarcity to exist,
you know, in order to get a book, you had to be able to make a copy of that book, and there's a
limited number of copies, there's always some scarcity there, but digital goods don't have any
built-in scarcity, you can make as many copies as you want, it doesn't have any effect on the
source material. So if you're going to build a business around digital goods, you have to have
some way to impose scarcity on the economy. And the initial model, this is, you know, the Bill
Gates Microsoft model, it goes all the way back to the letter to hobbyists, you know, in 1977,
he has sort of intellectual property around his digital goods, and he used his control of legal
control that intellectual properties away to impose a false scarcity on what is fundamentally a zero
cost good. And that worked for a long time, in terms of generated money, it also generated a
cleavage in communities of software development. This is why folks like Richard Stalin reacted,
it's one of the reasons I assume, Richard reacted so strongly to this change. He was working at
an open software community, and as proprietary software being and taking over chunks of that community,
he was effectively locked, those chunks of development are effectively locked at his intellectual
universe. And that was profoundly dislocating. And we see it, there's one of the things with the
open source research software community has put back together. Now we have these community intellectual
communities which can function without this artificial property fence building, which is great,
but we've now come back to the same problem which Bill Gates solved for himself, which is there's
no scarcity there, or rather you have to choose where the scarcity is. So if the intellectual goods
themselves are not scarce, the question when you're trying to build an organization which can generate
revenue to support the continuing evolution of these goods is what are you going to, what is scarce,
what can you actually put a price on? And the most obvious piece, the most tractable piece is
expertise. There is a limited number, a limited supply of expertise, or at least it's not a supply
that you can grow quickly. There's limited supply of expertise around these pieces of software.
There's only so many post-GIS experts, there's only so many post-GIS experts. You can make new ones,
but it takes a long time. So there's a scarcity of expertise and you can sell access to that
expertise in various ways. And this is sort of the Red Hat model. What are we going to do with this
expertise? Well, the thing that enterprises have gotten used to paying money for is support. Another
way of thinking of it is insurance, but the question of when things go wrong, how do I make things
not wrong? Obviously, answer to that is I need immediate access to expertise. I need fractional
access to expertise. I don't want to hire a whole expert. That's expensive, but I want to
occasionally have access to 5% of an expert who's going to give me that. Oh, I just give Red Hat
$2,000 a year and then I get that back. That's a great way to do it. I'm getting access to the
scarce resource expertise and Red Hat has monetized that and build a whole very successful business on it.
There's similar models. My personal career was built around consulting in the geospatial space
which started off consulting and proprietary products and eventually moved over to open source
tools, including tools which we as a company built. And we used our position as the commercial
experts and the things we built to leverage our consulting business, you know, building new
features. I'm getting people training on how to use the software. So again, scarcity around
expertise, we sell that. That works and it works pretty well. It doesn't work necessarily at scale,
like one of the complaints people had or criticisms they had with Red Hat was like Red Hat is the only
companies ever managed to build a sort of enterprise size business around the packaging and selling
of expertise. You know, all the other attempts have been very, very small and no one has really
ever achieved the Red Hat scale at that model. And while that is true, it also really undervalues
or understells the large ecosystem of small companies that have in fact managed to make that
model work. Nobody, however, is getting Bill Gates rich on that model and nobody ever will get Bill Gates
rich on that model because while expertise is hard to grow, it's not impossible to grow.
And so the pools of expertise, the pools of expertise do get bigger as the ecosystems are
out software get bigger. So one one can only monopolize so much expertise and sell it as a scarce
resource. But the model of selling expertise only works as long as the customer base of
people who want to buy expertise is big enough. And that's where the growth of the cloud providers
makes me go, whoa, because when there's 5,000 or 50,000 enterprises all spinning Postgres,
then there's 6,000 petal customers, all of which might pay us, you know, $2,000 a server to have
us on call to help them with their Postgres problems. When the population of organizations that
are spinning Postgres collapses down to four cloud providers, there's no one to sell to you
anymore. And that, you know, can just sort of decimate this existing ecosystem of small scale
experts selling their expertise. And that's what I see coming down the pike. And it's coming down
the pike simultaneous with, you know, the observation that a lot of these cloud providers don't
invest as much in the software they're spinning. And the most obvious sort of like hits you in the
face of the baseball bat example of that. It's the one that I was excited about, which in Postgres,
the Postgres community, Postgres is a database that everybody knows about because it's really
popular and widely spread. This is not a niche piece of software. It has a contributor community
of hundreds of people, a committed base of a couple dozen. That committed base in terms of who
employs them to work on Postgres is dominated by what at the time it gives a talk with three and
is now two enterprise support companies built them sort of red hat model, one of which is
country data who I work for and the other which is enterprise DB, which recently merged with
second quadrant, which was the third ones are now down to two. Two thirds of the committed base
are people who work for those two companies. These are, you know, successful companies,
country, country data has over 100 staff enterprise DBs bigger yet, but you know none of them
are multi billion dollar Venus. They make way less money off Postgres than AWS does for sure,
but they bear most of the development load. Now if things flip around for some reason in some way
in the future and the cloud providers start contributing to the software they're spinning at a level
which is commensurate with the revenue that they're generating from it, then things will be fine,
although you kind of worry about the stability and I don't know the correct decision making power
of communities that are dominated by commercial forces. If you have small numbers like commercial
forces, it's fine. It's just like the smaller the number of enterprises which are involved in
the development of a software, the more likely that the direction of that software will be bent in
ways that are not about servicing the people who use the software, but about servicing the people
who maintain the software. And that I think is bad the same way that you see proprietary software
companies doing user hostile things all the time because it's revenue positive. You really don't
want to get in that space and that's where diverse communities are good communities like Postgres,
like Linux, Relox and lots of companies are doing stuff. So as that sort of
collapsing phase as fewer and fewer organizations are providing the development could be a bad thing,
but I'd rather have more development in fewer organizations than no development like if
as these cloud companies stop out the other contributors by slowly munching up their marketplace
without contributing and filling in the gaps. They're being taken away than things get bad.
And I don't like that. I don't like the sense that the only customer for open source developers
will increasingly be a few cloud providers who then in turn sit between the developer and the
actual end user. I mean, instead of most of the cloud providers, such as social companies along
the way, there have been some acquisitions along the way. I mean, I'm surprised the extent to which,
and I'm again, I'm speaking mostly about the Postgres ecosystem because of one of my face all the
time, the extent to which cloud, the cloud companies have not, from a marketing point of view,
attempted to leverage their relative expertise in the underlying open source project.
And I don't know if that's because they feel like it destroys their sense of differentiation
from the community project. But yeah, Microsoft acquired Citus DB, which has a member of contributors
and just want to sort of the more active, innovative members of the community over the last five
years. They acquired them two years ago, year and a half ago. So that's a big company with
deep expertise, which now are Microsoft employees working on Azure's and Postgres deployments.
I don't know of any similar acquisition on the case of Google. It was acquired, might
handle the name. I think it was open SDG, not primarily a group of developers, but a group of
fairly skilled consultants. So they're required that mostly in order to onboard new customers onto
their Postgres, but not. So that's good for, you know, moving more people from Oracle to Postgres,
but really didn't do a great deal for in terms of Amazon's contribution to the overall
development, or the development of the community project.
So I mean, you raised that question right now. So that's obviously easy to replicate.
And so you're, most of the, you know, like the enterprise DBs, like the medicine ads,
they employ a lot of staff similar with them, they do companies in their day, they pretty much
all the core committers, they tend to work for those companies. For Postgres, there was
it being a lot on all the project and more involvement. There is a much diverse, let's say,
based off committers. But I mean, all these, all the developers for the software, they have
their own living rights. So however you see this as a solution going forward, because it's kind
of against a lot of the principles that most of those sort of developers have, that software should
be free and you don't want to restrict and want to be available. So how do you see that as a solution
good? So a lot of the, a lot of the noise in the last year around commercial resource has been
concentrated on a few companies. A lot of them, ironically or interestingly in the day-to-day
space, like you mentioned Redis, Mongo, Elastic, right, and there's been this wrapping of these
companies wrap themselves in the flag of open source while saying mean things about the cloud
companies. And while I do exactly the same thing, I wrap myself in the flag of open source and I
say many things about the cloud companies, I come from a very different space and have very
little time for these large venture-packed sort of single vendor projects, because I don't believe
they're fundamentally about open source or to the extent that they were from this
dark, like say Redis, the very act of taking on a major venture investment and then concentrating
all expertise in one corporate entity and then increasingly concentrating copyrights. So you
can then begin to control IP and do a Bill Gates on your software and your community. I feel like
that's exactly the open source ethic and then gravitational force of venture capital money
is to try to create a situation of scarcity so that you can make it that investment worthwhile.
And we know in terms of DC investments are not returned us 10% a year, it's returned us 50% a year.
It's really crazy hockey stick growth as a kind which no one has really managed to extract from
open source communities while keeping them open source. So yeah, it worries me to know in,
to see these folks claim in the matter of open source because they don't, some of them are very
clear about it, you know, they say in open source, we're not an open source company or a software
company and open source is just the sales funnel, it's how we get leads, it's not how we operate
or how we intend to generate revenue. And if that's not really the core of the core, then why?
Coal themselves open core, right? So so yeah, that's exactly well. And the question then,
I mean, the trouble of open core, of course, that was great, right? From like you just stand far
enough away from me, say, that's perfect. That balance is the two things just right, you know,
you got this open thing in the middle that everyone can collaborate on and it's sort of like the
big engine and then the open core company just sells widgets around the edges. But particularly when
the open core company controls the IP all the way from the center to the edges, they're immediately
in a huge conflict of interest with respect to where that boundary lies. And because they control
the copyright, they actually have the ability to move that boundary in and out. And that's what we've
seen happen with elastic, just like they have decided, I guess it read us as well, they've decided to
move the boundary unilaterally in a way which the other people who thought they were contributing
their code to an open source project find like like you're expropriating my work for your for your
gain. That's just that's not that's not good or fair. That's not the way open source communities
are supposed to work. It felt like a way to make the balance, you know, everyone can work together
in the middle and then we'll get enough money from the edges to keep the middle going. The other
thing aspect of the sort of the way this provides perverse incentives is like you're making lots of
money from your stuff around the edges as a proprietary as an open core company. Where do you invest
your money? Do you how much how much do you money do you spend on that core which makes you know
money at all? It's like over time it feels like the incentives all go the wrong way either to make
the closed things down and squish out the open core entirely or to just under-invest in it and
put all your money into the stuff around the edges until eventually you can just jettison or not
care about the so-called core anymore you built yourself a business based around again IP scarcity
unlocked in a bunch of customers and that's the part that gets me I mean I started in consulting
and there's there's two kinds of I found there's two kinds of people in the IT consulting world
there are the the tinkerers and these are people who if you come up to them and say wow that's a
that's a really cool solution to my problem you did they will not be able to help telling you
exactly which widgets they put together and how they put them together and why it's really
cool that they pick the particular widgets it's it's it's just so fun technology is a lot I'm
a tinkerer the other kind of people are the wizards and and they will say well you know it's it's great
it's it's it's technology it's magic I try to explain it to you but it's really it's really
quite complex and all those people made me so mad I hated the wizards because they're only they
always them the only reason you play wizards so you can screw your customers and that that kind
of ethic you know the wizards live in proprietary world they don't want you to worry your sweet
little head about the detail yeah I just kind of solve your problem for you and all you have to
do is add money and there's a spectrum of large chunk of the customer market who's like thank god
I don't have to think about the details just take my money please um but that only sort of works
in the long run as long as you're dealing with I don't know ethical wizards I've met more than my
fair share of deeply unethical wizards and uh yeah it's I'm still like this is a corrective to
the half yeah it's not just in consulting right I've also had stories of customers that mentioned
to vendors come in and say oh yeah how does this came in with oh it's magic keep them to that right
Scott um now I mean it's it's interesting that you mentioned that let me jump right in here uh because
I just you see I have a vast network of companies that I talk to in terms of technology progression
and kind of um open source ideas technologies is all the rest of it uh so there's this company
called Terminus DB I don't know if you're if you're if you're familiar with that is essentially
graph to be sitting on top of a git like storage engine and funny enough what they did is actually
they changed their licensing model from a pharaoh gpl to I think Apache 2.0 last year and get this
we want to make it easier for for for companies to incorporate our attack in their stack
hence the move to a more liberal licensing model and the and the only monetization what the
model that they have is essentially a very gift hop like thing where they operate a hop like structure
where you can commit all you want but if you want to have your privacy you pay for it
right and it's also this I'm not sure what they get out of making their core free then um they might
get some I mean if they're if they're lucky they get independent community that that builds
and elaborates on their core and then that's that's great no this is all right it's not the
core that that's free it's it's the old stack that's free yeah the whole thing as I mean I mean
their core what what they what they would call their intellectual property the things which
which they built they're so okay everyone can have that but we make money by operationalizing
and making it super easy for end users um that seems to work semi-okay um
um and it depends a lot on sort of whether how flexible the core is or how how easy it is to
stand up stand up that core um like how much value does they provide um to an end user with their
uh with their hosted service versus being able to stand it up and run it on your own um it feels
like for for those those plays they end up playing in a potentially in a narrow space so at the
bottom of the space there are individuals and individuals they want access to the to the capability
but they're not necessarily they don't have an ops team they don't want to run things themselves
um if the if the product is sufficiently difficult to run then they won't know be very happy
just to come and give you their incremental check of money um but there's not that
just being unless you're in a really great consumer space there's not that many of those people
that population at the price point they're going to pay is um
facing uh the next level up you get to like businesses are willing to pay pretty better dollar um
but still you know it's not their business they don't want to spend discs you can spend
discs for them great here's a here's a bigger hunk of money um and then the next level up is
like organizations where you know you would charge them a million bucks a year from the privilege but
they go oh we want this facility and all I need is a little bit of options expertise
to run it out run it myself and pay you nothing except maybe I'll contribute some patches back
when I find broken stuff great I'll do that so they get kind of caps basically they they're
working this cap to market and again incentives um at that point there's a strong incentive to
not make it easy to deploy because the easier it is deploy the the lower that ceiling of what is the
largest what is the largest organization we can sell to you lower that ceiling falls um I before I
moved crunchy data which is sort of a pure red hat model um I worked for a company called
Cardo which is very much the model you're talking about um their software is built around post-JS
and post-gress um a mapping engine called map nick um those are like big hunks of cc++ code that
do the core work and then around it they arrayed a bunch of web services and a cool web UI to solve
the problem that people actually wanted to solve which was I have some facial data and I want to see
a pretty map on the web um and then they've done the same thing that that your uh your company
example did everything is open source from bottom to the top and uh they're uh they started off
you know trying to sell the individuals and there were lots of individuals who wanted to do it
um they're a freemian model but most of those people prepared to free to the young um they were
able to get some sales to individuals was never enough to really get that uh lovely venture capital
hockey stick growth um and have been increasingly selling to to large enterprises and uh and
they said they've been successful and popular it's driven this aftermarket around their software so
you can um spin carto db on amazon without giving carto a dime and I think that tends to push down
the threshold of enterprises to which they can sell it's it is it's a good model I think but
you know it's it's not a good venture capital model um because it doesn't I don't think it is
a good venture capital for model for open source but basically all of these models have by virtue
of this act they're dealing with um model out of scarcity they have very relatively low ceilings
on how much revenue they can generate and I don't think that's a bad thing um
I just think it results in perverse expectations in the marketplace for what open source we do
one of the things um you know this is a year the next desktop right this is a year the
next desktop again right again it's like a new desktop right where does that you know where does that
come from that comes from the deep like heartfelt sense you know in 1998 that my god you know if only
we could the people would see the light and we could get rid of this Microsoft e-commerce this this
demon squid that's wrapped around our faces um and all we need is the Linux desktop and the same
thing you know has occurred in terms of people's perception of open source in the geospatial field
where I work you know there's this company called Esri they control like 90% of the marketplace
and people are always talking about open sources if like it's going to come and
muscle out Esri and everyone will be there anymore it's like you know no that's not that's not
the way it works it finds its place in the niches and it generates some value and people take some
of that and are able to put it back into the software and it's a shame it's a crying shame that it
can't or doesn't extract as much value from the economic marketplace as licensed IP does um
but it seems very hard to build models that have that extractive capacity
and do not break the open source thing the thing about open source like at the same time
I mean in your presentation you you mentioned a possible solution to this right you want to
maybe talk a little bit about that one well let's consider the idea that
um that this software which you know it increasingly is everywhere right it is the crazy thing
about you know Google or any of these you know multi-billion dollars huge organizations
or governments or anything now like to to an extent that no one in this is making capacity really
appreciates they're all built on open source software and you know it feels like you know when
someone in a sharp suit comes around with a with a brochure about the you know the latest
web-based technology for managing your lessons so um that it's it's it's the private sector and
you know busy busy busy companies you know building and selling software to each other that's
the economy the reality is you know 98% of this iceberg is open source software and
it really is the fabric on which our information economy runs it is the highways and the sewer pipes
and uh and we don't value it or invest in it in the same way that we do the other you know
key pieces of armatures of our economy like we recognize that if you let the highways fall into
disrepair long enough your ability to run a modern industrial economy will fall apart and so we
don't let the highways fall into disrepair we build new ones and we make sure the ones that we have
our page and kept up to date and we recognize that we are because we're enabling other people's
private profit we're going to take some of that private profit from them and use it
to keep that infrastructure up and running and we do not have at this point a system to move the
money from the places where it's being made to the place that where it needs to be spent in the
software ecosystem um I think it's worth analogizing infrastructure spending every time we talk
about open source software at this point because open source software is so infrastructural to
everything we do in a technology world and it's very weird that we outsource the maintenance of
this key infrastructure to a bunch of folks organizations that appear to look at it as a form
of charitable giving the open what is it the it's called the core infrastructure initiative
it is a branch at the Linux foundation and it was spun up two and a half years ago three years ago
maybe more um after the heartbleed incident I don't remember the heartbleed incident
oh yeah oh yes so I should just explain it um no no no well maybe for the one for the one or two
listeners who do not know what heartbleed is so every web browser um when you're uh when you're
doing online commerce you see the little little lock in the top of your web browser it means
that it's established a secure socket slider connection between your browser and the vendor
which means that in between those two points no one can read it it's a cryptographic networking
library um called open SSL provides um the uh the support for that for that protocol and it's used
in everywhere every piece of software that that does that which is to say all web internet commerce
is built on top of open SSL and open SSL as of four years ago prior to heartbleed he was maintained
on a part-time basis by um a couple folks who you know ran a side business um selling open
SSL consulting which basically meant they would occasionally add a feature um for folks
and they didn't have a lot of time to uh do the work and uh at a fairly important bug slipped in
which I don't know if anyone actually managed to use it before it was discovered but it was
discovered and it turned out that it was you know every SSL connection was potentially um
which was the openable which meant all that private data credit cards and so on was potentially
in the clear for anyone who could uh crack open unpassed servers so the whole internet basically
everyone who ran and even that server spent I don't know a frenzied couple weeks um trying to
patch every single server they owned uh to get rid of this to get rid of this bug and you know
everyone can calculate about billions of dollars in aggregate effort to uh to fix this thing
and in the aftermath you know the big companies who depend on this the Googles and the
microsoft and the amazon's um all agree that that you know this some of this stuff is important
and uh and maybe it's worthwhile to spend some money on the things that we consider important
so they created this open infrastructure initiative and eats through a couple million bucks into it
and they picked a few projects SSL being well open SSL being one of them that received grants
so now open SSL is somewhat that are maintained and uh and people's either a little bit opened
to the fact that they're built on infrastructure which might be poorly invested in
but but not really and in fact it feels like if you go back go and read the activities of the
core infrastructure initiative it seems to be pretty much a defunct um project or the Linux
foundation people seem to have gotten past that and forgotten about it again and it will not be
until we have our next big big breaks that people once again realize that they are building
incredibly valuable bridges on top of foundations that are made of un mortared sand and that
that really needs to be regular comprehensive investment and the trouble is this is a super
national problem right this is not a problem which ends inside national borders um but it feels
very much like a governmental problem like it's a problem where there should be someone taking taxes
from the rich that is to say the folks who are making money off this infrastructure and sending
those taxes on making sure that infrastructure is maintained um so far it's not happening and uh you
know the result is we'll have more heartleads over time um and you know we'll have as we would have
if we were living in a country with broken down water systems and falling apart roads we won't
have a less effective less efficient economy as a result of our under-investment in this infrastructure
I think this is a subject very close to this is not because he's very much a communist
and a communist country called Germany with a working healthcare system and someone crazy
government at the moment anyway but that's another story for another time no it's an interesting
perspective because at the very core I think what you just kind of elaborated to describe was at
the very foundation when guys like Richard Storm and other people thought about that ideas
must be free and hence this term free and open source sorry Richard if you're listening free
software not free and open source software to which I totally subscribe but at the end of the day
fully storage I worked for an open-core company called Renners Labs um yes so did Martin by the way
yeah yeah he now moves I think to more propriety what I was actually at enterprise DB before that so
it's really another open-core company yeah yeah yeah although I don't know it's an interesting one
the the evolution of enterprise DB I don't know how open-core they are these days and they
certainly were start off as with very much that that principle but it feels like the actual marketplace
for just pure on good old supportive pure can you post for that seems they've been a place they've
been pulled just by market demand I have been fully disclosed that I'm a true communist at heart
I can see actually as a matter of fact jokes aside as he both sides of the coin you got to make
some money somehow and it's the right business point that you get that you got to pick and I find
this move of terminus DB quite an interesting one and when I talk to folks quite a while back
they said our final monetization strategy still remains decided upon I think they are after the
third round of easy funding or something like this but they're coming from an academic background
because yes full disclosure it's a 20-coldish dubbing project at the at the very at the very school
where did my PhD about 30 years ago or almost so it's it's interesting basically to see where
these folks go because essentially what started out as a pure research project now is taking its
first steps into into the commercial realm and as I said the people made the the conscious decision
basically to move away from a ferro gpl type model to what's Apache 2.0 because they want to foster
the adoption of the attack in more closed source text and as we all know some people consider
the gpls of the world especially the agpl isn't the ferro gpl to be quite toxic when it comes
on to particular use cases because what this what this gpl essentially mandates that you have to
publish every change that you make the code base and the ferro goes that one step further because
it doesn't stop at modifying the code base but rather competency you actually communicate with also
um open that you have to also open source so this is the reason why it's also known as the
cloud gpl because essentially what cloud providers would have to do if they would use agpl
license models a license components rather they would have to open source the surrounding ecosystem
of course over over simplifying things but that's essentially the nutshell of agpl and friends
and I totally get this uh move from terminus to be to say now look if you want to take our code
pretty much like reddisk actually in the old days and still is because it's it's license
under three closed bsb just take it do whatever you want with it because we do not restrict the usage
rights and we especially do not mandate opening up your code base like gpl and agpl do yeah that's
good certainly in my experience it's been easier to grow communities that are based around
fairly non-restrictive open source licenses um you know it might be in bsd communities and
you don't have to deal with all the questions um post-disk for for reasons of strange historicism
ended up with a gpl license even though post-grass is a it's a Berkeley the Berkeley license
and it's resulted in no good as far as I can tell it's not it's not it's not saved us from anything bad
happening and as a result in me having that answer questions about the implications of it being gpl
quite frequently over the years and then you know it's always like don't worry just use it
it doesn't matter because you know you're packaging it with the database which are not modifying
anyways and it's all fine um but yeah there's a lot of twitchiness and not I don't know it's it's not
well earned twitchiness are on the gpl i think gpl's reputation is so much worse than its reality um
but it does open interesting question like it is i guess the next boundaries of the open source debate
which uh these uh these open core companies are now forcing us to grapple with which is um when does
a quote-unquote open source license stopping open source i mean you've got OSI to tell us i guess
officially with trademark we should trademark um yeah sorry but uh uh uh when does it when does
it change right i mean we don't we recognize the gpl is quote-unquote more restrictive um then you
know an MIT or a BSD license um and we use that term more restrictive because we recognize that
you know in addition to providing freedoms it also provides you constraints in that freedom right
absolutely um and i think the open core companies as they come up with their one of they
call them community source whatever it would say it's like oh it would still open source we're
just adding a few restrictions just like the gpl does why are you saying that we're not open source
anymore and i don't know there's there's something to that and i think that's the something really
comes back to like it's not it's not even a licensing question it's like the fact of the matter is
that when you are running a core-unquote community where where all the contributors are all the
major contributors you know all the patrodewers are employed by the same company and there there's
not a community mechanism you might be open source de jure you know by the by the fact of your
license but the facto you aren't this would be like the same um criticism that people say apply
to android and google right yeah android is open source but you know try to get a painter change
in that google doesn't want it's not going to happen right so is it open source or not well it's
open source but you can't participate in the community on equal footing with the primary developer
of it so is it open source and that's the question the question is like do you have a collaborative
community well you do well you do because the aosp project is not exactly tied to google
sorry um android open source project okay the foundation upon which
zygote and and friends build yeah okay so zygote being basically the link between the kernel
and the and the um ecosystem on top but this is not an android podcast
Martin why don't you take the next question then yeah we that was a great
discussion about download from the mental open source and but i'd like to if you could
spend a little bit of time on on how you run pushiers project and i guess how it came about in
this place we've seen a lot of different models of how open source projects are managed
to know a better word or controlled in terms of contributions and so on service curious how
you do it with us so as i mentioned i started my my IT professional life in consulting and
geospatial consulting and in that in that role doing projects for the British Columbia government
i live in British Columbia Canada um big geospatial data processing projects um building these data
data pipelines like using the database in the middle to manage the process made a lot of sense
turns out post-cress was that database we were doing geospatial things um so within the company
you kind of got this question like you know it would be so much easier if we could when we were
storing geospatial objects in the database and we were stuffing them in as blogs um it would be
so much nicer if those blogs had some smarts about them we could ask questions about them they
were just in their place of bites that would be much more useful um and we had a guy on staff who
was fluent in C and kind of looked at the post-cress code-based and extension framework and said you
know what i think we could do this um so we had some free time during a down cycle between contracts
and he he got out to uh see compiler and and banged out the first version of post-cress over the
course of a couple months and you know we tried it almost like oh it's just as fast as it would
be and even with only four fly functions it's actually kind of useful um we've enjoyed working
with post-cress as open source database rule published this thing as open source and um it was the
first open source spatial database option at the time which was 2001 was like there was not
nothing else there so it sort of attracted an immediate audience of folks who needed the
capability um and we're excited to have it um and it ran as sort of a fully dependent project
of my consulting company for the next six seven years so all the the community was small it was
niche all the development was done by people um in our employee the roadmap development was more or
less um well we need this functionality for the next project somewhere what can we do though make
this project better oh this function would be nice to have and initially by uh by folks in
house with with me in British Columbia and then um with the fellow we hired um who had started
was like one of the first major community contributors like he started contributing patches and changes
on his own remember what work he was doing at the time that caused him to want to do that but regardless
when um when the guy who'd done the court development for us left friend of the jobs like
huh we don't want to stop development on it and uh yet we had no one on staff to do this so we
contracted out to uh to this developer in Rome um and he worked for us part-time for a couple
years and went on other things and then came back um he's still in the member of the community um but
at that point there was you know more than more than a handful of folks doing work in contributing um
and in 2008 I got tired of running a company and decided what I wanted to do was be a programmer again
um so I left the company and decided I'd make myself into a post-JS expert and we moved the uh
project into the open source to a spatial foundation which is sort of a lot of the Apache foundation
um like a holding foundation very low overhead um and at that point one of the uh requirements for
entry into the foundation was to have a written down government's framework so we moved to like
an Apache style project steering committee at that point um which is still the way we run um
we've got a PSC of five you know maybe a dozen active contributors and uh
no it's it's very much a consensus process um the core of the development
communities we're working together really since 2001 um PSC member is myself
Santos and to like use that Roman contractor Regina Obey who was like
patient zero she was like one of the first folks who came in and used it for a real project she's
working for the city of Boston at the time she started using post-JS and post-gress for
city of Boston projects she was like oh holy cow like real real institutions using this software
um and she uh she continued on both as a power user and increasingly as a developer um over the
years she's written um really the wow the canonical book on post post-JS post-JS in action
and um this sort of like uh the face of the face of the project it lots uh lots of conferences as well
so it's been uh it's been a nice ride i gotta say yeah i did i think the
it's right there i don't know if you can hear my echo i don't know if it was that my echo um the point
you can be very advanced about you're being a consultancy and people working on it on their
downtime it's something that is a good model because it's something that has also saw when
those pivotal is obviously contributing to a lot of all sorts of projects but it's it's really when
you have that kind of model where you have consultants that are you know could have a patient
governor's role and if they have doubts on why not contribute to open source projects that you
use in the supply of the services so that's definitely a it's uh it's it depends a lot on the community
and how again on the good and the good intentions of the consultants like consultants are great
because they are at the rock fence um so they're they're right up against the customers what
the customers need so they tend to come back with realistic and useful feedback in terms of what
useful new new features are needed or where the sore points are um the downside with consultants as
sort of like the armature of your development community and this is something we see in geospatial
because there's really it's very difficult to build up a company which is big enough to afford
to do core investments um what you get up with sort of Christmas tree featureitis um every
every consultant hangs a new feature onto the outside but doesn't really have the
um resources to sort of do full-time maintenance work or to do um core development projects that
exceed a certain size um that that kind of big investment is still is it's hard to it's hard to
coordinate getting all the money into one pot at one time it's like I have a hundred thousand
dollar problem it's like I've got I've got ten ten thousand dollar clients it's very difficult
to get those ten ten thousand dollar clients to all give you ten thousand dollars simultaneously
and do the hundred thousand dollar project and as a result the hundred thousand dollar projects
just often don't get done and then the project just sort of limps along from stage to stage to stage
adding new bits around the edges but getting kind of crusty in the middle okay uh it's so sorry
this um I've given what you said about uh uh uh all the small sound business malls around it I
take it you don't see a post-channel commercial company emerging at any point uh seems unlikely
just just again as a matter of scale and the amount of uptake in post-channel over the past five
years means that actually maybe it's it's possible now to run a fairly small company just around
the basis of providing uh you know things like training and um and through the your performance
consulting side um maybe some sort of a subscription support model those it's very hard to to make
that to make that work um because people suddenly support is basically selling insurance um
it has to be either like deeply socialized like my house has never burned down
and yet I hold fire insurance like what why um you know and why because everyone does
like everyone gets fire insurance this is what you do right um and we don't really have that
socialization around you know getting a support contract for the open source software you use
and the only reason people do it is because they're used to doing it because they were forced to do it
by their former proprietary vendors um not because they've really internalized the idea that
buying the insurance means that when the house burns down they will in fact not be let homeless
yeah it's it's it's a little bit more than just insurance right it's also that um yeah
a lot of organizations they they don't really want to be in the business of or
um say if there is a implementation part or the uh finding bugs over there is that they come across
when they're using software they're in the business of selling books or whatever it is right
that's kind of yeah um it goes a little bit beyond and this I think you know you mentioned
it happens that's why they're doing so well it's um uh it's taken away a lot of the um over
head off of running the United Department to some degree right um because it's not the core
business that we're doing so yeah and hopefully and well how do you see the uh the future of
those GIS DEC I mean does it's very complete in terms of functionality or I would say
uh some people consider it even uh prefer over say Oracle geospatial. Oh yeah that's pretty fair
um feature-wise it's it's got Oracle beat now um I think the answer is sort of on the on the
boundaries of what you can do with spatial and database there's always there's always more things to
add um so more spatial algorithms um and then I feel like there is uh there's a big opportunity as
sort of an orchestration point um put people don't talk about this aspect of Postgres enough to
think about oh that's a relational database sort of full stop right um but with things like
foreign data wrapper extensions um with things like language extensions Postgres is it's not like
you know it's not like Python or Perl it's an integrated station environment it's a place where
you can pull a whole bunch of capabilities together in one spot um so I one of the things I'm
experimenting with and I blogged about it recently is accessing large corpses of raster data
that's it outside the database how about using SQL inside the database um and then reaching out
to those raster uh raster files in the cloud and querying them in the database and bringing that
those answers back into the database for further uh to for further the calculation okay that has been
a more more than an interesting discussion Paul yeah thank you thank you very much for for being
here uh it is a say yeah before we forget of course the tradition legacy and we do always something
if I if I can't remember that is something like the pox as in the picks or picks of the week so
anything that you've come across not necessarily within the last week but maybe in the last
fourth or something maybe even in the in the last month worth mentioning now now's the time there
can be anything Martin normally basically focused on movies I focus on TV yeah I just finished off
a book called The Price of Peace it is a biography of John Maynard Keens and the exploration of his
life and thoughts and if you're at all interested in economics and history and the intellectual
career between the first and second world wars um it's well worth the read and I found that
brace in both for the history and also for a reminder it is a belief that the Keens very much
held and has been lost in our understanding of him we think of him mostly in terms of like
technical manipulations the economy around interest rates and unemployment but really you know
his philosophy acknowledges around the fact that it we do not exist a sort of economy as
economies exist to serve us and the goal of economy of an economy should be to provide a good
life for everyone um and that's that's what we should be looking at when we're trying to take
over their economy that same that same thing runs through you know our sense of software
in the open source world I think people who do have in source probably enjoy the book and enjoy
the philosophy excellent Martin anything from your side uh we only did some yesterday
for me now I haven't done anything for each other people we are recording now every single day
so yeah we we intend to basically fill the backlog onto 20
32 within 2021 yes no jokes aside no it's just against that sometimes recordings are pretty close
to each other that's really why Martin can't think of anything but maybe I can I can venture
epoxy myself venture epoxy myself I'm full disclosure as most of the listed probably know I live
in Germany and now the federal government has decided to ease some of the lockdown to what I'm
looking for uh lockdown lockdown just right for whatever yes so yes we can go now into DIY stores
and pick up shovels and whatever and plants and so forth and of course Barbos I'm sure you're
looking forward to that one absolutely and Barbos have been open since Monday and I think if yes
if the current um news coverage is anything to go about for the UK Martin is still looking forward
to that but it's time when Barbos are open once again no no it's okay I bought a set of clip
as at the start with the last one so Martin's anti-pox are reckoned with the still the
ongoing UK lockdown okay okay jokes aside uh Paul thank you very much again for being here
yeah thank you uh looking forward to having you having you around in a fortnight when we record
when we record episodes uh 256 to be aired around 2025 well it's not then then in another two years
I can guarantee you might thinking about open source and the economics will have evolved in
other two years I'll have a whole other point of view to bring this is the Linux in-laws you come
for the knowledge but stay for the madness thank you for listening this podcast is license
under the latest version of the creative commons license type attribution share like
credits for the entry music go to bluesy roosters for the song salute margo to twin flames for
their peace called the flow used for the segment intros and finally to the lesser ground for
their songs we just is used by the dark side you find these and other deities license
under creative commons at remando the website dedicated to liberate the music industry from
choking corporate legislation and other crap concepts
and
and
uh we go almost
Can you miss the queue where Chris has rolling?
How easy it really is to find out how easy it is to find out how easy it is to find out how easy it is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy it really is to find out how easy
to find out how easy it really
