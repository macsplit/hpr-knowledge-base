Episode: 3399
Title: HPR3399: Linux Inlaws S01E36: Open Source Licenses
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3399/hpr3399.mp3
Transcribed: 2025-10-24 22:45:28

---

This is Hacker Public Radio Episode 33994 Thursday, the 12th of August 2021.
Today's show is entitled, Linux in laws S0136, Open Source Licenses, and is part of the series Linux,
in laws it is hosted by Monochromic, and is about 56 minutes long, and carries an explicit flag.
The summary is, the ultimate show on Open Source Licenses, or how to fall asleep without chemicals.
This episode of HBR is brought to you by Ananasthost.com.
Get 15% discount on all shared hosting with the offer code HBR15, that's HBR15.
Better web hosting that's honest and fair, at Ananasthost.com.
This is Linux in laws, a podcast on topics around free and open source software,
and is hosted a contraband, communism, the revolution in general, and whatever fences your
tickle. Please note that this and other episodes may contain strong language, offensive humor,
and other certainly not politically correct language you have been warned.
Our parents insisted on this disclaimer. Happy mom?
Thus the content is not suitable for consumption in the workplace, especially when played back
in an open plan office or similar environments. Any minors under the age of 35 or any pets including
fluffy little killer bunnies, you trust the guide dog, a lesson speed, and QT rexes,
or other associated dinosaurs. This is season something, episode 30, whatever.
It's time to begin the end of the episode.
Great spirit. Welcome to the episode on Floss Licensing.
Martin, how are things? Oh, I'm very much looking forward to tonight's episode.
I see. Why? Well, it's a favorite topic of a friend.
So you're looking forward to using it as a, what's what I'm looking for?
For medication, if you can, if you can, if you can, I can see.
I'm sure we can make it far more interesting than that.
Yes.
But before we go into the details, a little bit of banter and as marketing normally
subscribe and prescribes.
In terms of, so what's the weather like these days? I mean, the summer is not there quite yet
in the UK. Oh, no, it's coming. It's coming. There's a heat wave coming.
Like what? 17 degrees?
I heard it. It hasn't arrived yet, but it's been in the Daily Mail, so it must be true.
Daily, you're really, if you're still reading the Daily Mail, I thought you can
so that subscription. Ah, reading isn't really, it's been going too far.
So what you're trying to say, a member of your household is availing of that subscription.
I see.
Yeah, this is something our dear friends at Google decide that I need to know as in my
news feed, it pops up with snippets from the Daily Mail for some reason.
I see you want to have a work with them just in case.
I'm sort of got the algorithms wrong now.
You see a button that can be fixed if you just talking to the live people, so no worries.
Aha, excellent. And what about yourself and the currently I'm looking at something called
CuffedVerk. It's an IPA fun enough. It's a band as well.
Yes, but yes, but you see it's it's it's it's it's all right.
But it's got to make him be here instead.
Craft is not spent with a C instead of a K.
Yes, but you see it's a beer. It's not a band. There's a difference.
Okay, but it's quite good.
Tempted to reach out to them.
Cufffag, if you're listening, the email address is sponsored at linuxinlaws.eu.
Are you sure the email address is being manned because it's not working.
I'm positive Martin.
And yes, we do take payment in kind people if you're listening.
Of course, only use only the gem post address. Do not worry about the UK.
That's a waste of time.
Because as we all know, all ordinary ordinary mail takes about what four months to get
from the UK to Germany and back.
Wow, this is just based on one day's point, right? Which is your?
No, actually, too.
Oh, okay. Well, I mean, I can't yeah.
I mean, you said two two deliveries of forbidden goods.
What do you expect?
I wouldn't call it a paperback and some and some much required food stuff.
Continental. No, far from it, actually.
Right, you see this is what you must take is because clearly that is very
suspicious of someone's going to send the paper back in this day and age.
Okay, why?
Well, I can't imagine that many youngsters read books anymore.
Martin, I'm old.
In case they didn't know.
You're sending yourself a book, okay?
No, no, no, no, I'm all right.
From a second hand bookstore in the year,
it's going to happen.
And that took about three and a half months to get here from I think even Birmingham,
if I'm not completely mistaken.
And that's something from Frankfurt to London and that took about four months to get there.
Okay, it doesn't sound very useful.
No, but you see, Brexit is rubbish because before Brexit, it took a while and we get most.
It still takes a week to get to Ireland from Germany for that matter,
as in packages and stuff.
Okay, well, so the trick is to go by Ireland.
No, the trick is basically to invade Great Britain or what's left of it anyway,
and to make it part of Europe again.
Scotland, Wales, Northern Ireland.
And what's there?
Is there something missing?
No, anyway, if you're listening.
No, no, Ireland's really.
Just what I'm looking for, diverge?
No, it's not diverge.
It's the sect.
No, leave, leave the United Kingdom.
Apply for EU citizenship.
You will create a second Switzerland within no time.
What's this is done?
Why don't you look why I'm happy in Switzerland?
Switzerland is surrounded by European membership countries.
Did I kick it again?
Once, yes, well, they are almost Europe.
Anyway, once this is done, where Scotland's Northern Ireland
just surround Britain and send food for thought.
Let's put it this way.
Brussels may be able to get your weapons.
Just reach out.
But hopefully it doesn't have to come to that.
Maybe Westminster,
Slusher Brockingham will have insights.
I think we have to cut this out, right?
Because otherwise, am I six hundred and
mergers or something?
I wouldn't worry about it too much.
But yeah, I don't, I mean, I think I'm sure the Swiss are pretty happy there.
And there are something called Esther, if not a completely mistake.
It's almost Europe.
But without the, without the union bit attached,
there can avail of pretty much many of the advantages in terms of commercial stuff
and economic stuff and so forth.
But they're officially not a member of the European Union,
but it's like an association, that sort of thing.
Yeah, so they don't have to implement the banana rule and stuff like that.
What's the banana rule?
Oh, you can't call it a banana if it's not
50 degrees rounded or something.
It's interesting because I don't know of any place in the, in Europe that grows bananas.
Yeah, it's some countries do.
Not even, not even the Dutch do this.
They grow something else, but that's a different story.
In this, you see, Martin, there was a time basically when I was traveling from Shippell down to
downtown in Amsterdam and whenever I took the train,
this kind of past residential areas where in the middle of the winter,
all the rooftops were actually clear of snow.
Oh, they all grow bananas, right?
You went down half of my brother and there was of course snow on the rooftops.
You didn't numbers.
Oh, maybe they need to do something about their insulation.
Yes, I'll choose a different type of agriculture to grow.
You never know, but it was quite a fun side actually.
And the couple, the couple of almost years that I did this actually,
all the rooftops actually frequently changed.
Rumor has it that there were kind of raids or something on these days.
It must be a lot of going there.
Oh, yeah, you're looking at about at least 13, 14 years of some places.
If my knowledge of Dutch and the first count is anything to go by,
yes, there were actually raids being, being, being done in, in, in, in these places.
Good choice paper, by the way.
Exactly, but the Dutch agriculture is not the subject of tonight's episode.
Oh, no, it's not funny enough.
Is it micro kernels?
No, it's not actually.
No, the Dutch, no, the Amsterdam agriculture scene is planned for, what is it?
A season 13 episode 12, I think, if they're completely mistaken.
But tonight's episode is actually on something called Floss licensees.
Mm-hmm.
Oh, yes, you did mention it, so it's not very good.
I did, yes.
Okay, and people, if you are, yes, if you are not, if you're, if you're, if you're listening to this
late at night and you cannot get to sleep the worry, you'll be asleep in about five minute tops.
Pretty sure of this.
Okay, for this, for this total people, Martin and myself are not lawyers.
As a matter of fact, Martin had to give up that, that job.
Never mind the, never mind the hourly fees when the coke habit just became too expensive.
Um, let me just kind of hand the organization for this.
There is, Martin, you know more than I do.
No, no, no, you're on licensing there.
Okay, so Martin used to be a lawyer.
I'm making things up as I go along, but because of of of a drug crisis here to give up that
profession, so he's now, what are you Martin?
A database person, right?
Oh, that's true, I know such a thing, but, um,
Okay, and I was never a lawyer in the first place.
So the bottom line is kids, people who have us listening.
This is not a legal show in terms of if you have any legal questions surrounding your open source
project and the associate licensing, you please do conduct a licensing lawyer.
There are, or the, um, the OSI, right?
They can, or the OSI, yes, but, uh, the OSI doesn't compensate for a lawyer.
Um, they give advice, but this advice is not legally binding.
This is the important bit.
So if you have any questions about the next search engine, as in if you want to kind of put
Google in the payload, some from others or some other stuff,
please do yourself a favor, consult a, um, a, a license lawyer,
and he or she can talk you out.
This show is merely meant to give an overview about the licenses and any surrounding topics.
So Martin, why don't you get us started?
Sure, sure.
So, um, okay, let's start with why would you be interested or worried about the licensing
your open source software?
A very interesting question.
Since you asked that Martin, why don't you know I'm going to take this?
It's the, um, how can I put this?
It's essentially about the fact where you want to take the code base in terms of
how about you want to do with it.
Different licenses have different aspects and they mostly regulate the use of the source code.
And that already takes us to a very important subject.
Two main distinctions.
There are copy left.
Oh, no, no, no, no, no, no, no, wait, wait, wait, wait.
Why, you haven't explained why people would be wanting me.
I thought I did.
Well, you said where do you want, where do you want to take it?
What does that mean, right?
Okay, Martin, what does Fluss mean as in free,
free open source software?
Oh, there's a whole bunch of definitions, right?
But, um, let's go for it.
Oh, there's freedom to distribute, freedom to modify, freedom to combine.
What else is there?
There's about 10 or so, I think, in the other side.
Martin has done his homework apparently full marks,
Mr. Visor.
I was, I was not exactly getting to that kind of technical level, but rather
Fluss software, as in free and open source software,
is all about code reuse and other people using your code?
Yeah, and that's exactly the purpose of me.
Okay, well, okay, sorry.
Um, it's not just by using, but also about, uh, contributing, isn't it?
So I was just getting there before my calls interrupted me.
Thank you, Martin.
Let's find it.
Speed things along, will it?
Thank you, Martin.
Thank you, Martin.
Okay, let me, let me, let me target this.
Um, free and open source software is all about reusing code, right?
And of course, contributing the changes back again.
But, and there's a very important, but with the capital B,
it boils down how, in what way you want to do this?
As in, do you want to force, for example,
anybody taking your code and modifying it to publicly, to publish these changes?
Or are you rather
satisfied?
Maybe happy if somebody takes your code and does something completely
proprietary with it without having the need in place to
publish the changes back again to the community.
And this is the main distinction you see.
And when, when you say need, there is, um,
only a need from, this is from the licensing perspective,
or otherwise you'll get sued kind of scenario, right? It's not.
Um, that's what you really mean.
Well, I mean, licensing, licenses are legally binding contracts.
So if you violate a contract, you can take, you can be taken to court as it has happened
in the past. The link will be in the show notes.
There was actually a case where we embray
uh, violated the GPL.
What the GPL is, I'm, we're going to get, we're going to get to in a minute
of something called the Linus kernel and somebody in Hamburg took them to court.
So yes, if you're not adhering to the license requirements, you can get sued.
That's exactly it.
Okay, back to the, um,
I'm going to see more relevant is someone is VMware than just
Joe corner, but anyway, wait, you see, if Joe were on the corner, basically,
it does the next big thing.
Just makes a couple of billions of from it.
I'm sure that you have people scrutinizing his or her source code,
if it is available or what components he may have used.
Hmm, and what licenses they're under.
Yeah.
Okay, okay, going back to the original argument,
there are two main distinctions here between permissive, so-called permissive licenses,
and so-called copy-left licenses.
Do you want to give us an overview before I put the rest of the audience to sleep
with the technical details?
Sure, sure.
Um, I think the biggest difference is that, um,
um, uh, with copy-left, you have to put the, um, uh,
all the changes or modifications have to apply to the same licensing rules as the original.
Um, so it's really, if you start doing stuff with, uh,
or building on top of it or making, um, changes, then you,
uh,
well, there's a permission one you can, it has, you know, uh,
like the, I don't know, Apache or whatever, BSD ones, they, um,
they allow you to, you know, copy it, modify it, and, uh,
without too many, kind of, uh, uh, restrictions around it.
Well, it's part of Mr. Visor, yes.
In, in a nutshell, this is, these are the main differences.
And we came up with the term copy-left, by the way.
You know, I, I, I don't, I don't know.
I reckon it goes back to the original MIT,
plays where I got called Richard Armstrong, and he came up with something called the
new popular license, GPL.
And of course him being almost a communist, like we are,
hence the name copy-left rather than copy-right.
Yeah.
Pun intended.
I reckon this is where it comes from.
Of course, this is pure speculation.
If somebody knows the deeper meanings, Richard,
if you're listening, please do get in touch.
Especially once you step back from the
FSF board, once again, you may have more time
to listen to podcasts and to contribute also to the community.
If not, don't worry about it.
We'll make do.
Okay, get in, get in back to, get in back to the main difference.
Okay, Martin, as Martin right, he pointed out, yes.
Copy-left licenses do require you to publish any changes
of a code base that is, that is a license under a copy-left license.
The most important copy-left licenses are the GNU
public license family, like the GPL2, GPL3,
the FROGPL and all the rest of it.
They have varied different meanings,
make sense to give a very short overview,
and before we go over to the permissive licenses.
So essentially the GPL and the successors of the GPL
as in the different versions just require you to
publish any changes.
So-called derivative works of a code base to the public.
So if you even kind of take the code of a library and link to it,
you're creating actually a derivative work.
So that means you actually have to publish the code that is linked
into the license, to the library, back to the public and to the public domain.
Hence the subset of lesser GNU public licenses that do not have that requirement.
So you can simply take a component,
link against it and create a derivative work without having to publish your source code.
There are of course more stringent versions of the GPL.
For example, the FROGPL.
Essentially this requires you to publish any source code.
I'm simplifying things.
Of course, the link to the corresponding Wikipedia page will be in the show notes.
The FROGPL basically requires you to publish any source code
that a FROGPL license component is talking to on the network.
Again, as I said, I'm simplifying things.
It's not even more difficult.
Imagine a web server.
Imagine a web server that is issuing HTML.
So if you are implementing a REST API,
if this piece of code is licensed on the FROGPL,
essentially any component that talks to it, especially your REST API,
your REST base client,
has to be published as well as in the source code of it.
This is probably the most stringent.
And rigid member of the new family of licenses,
because any component that talks to an FROGPL license component has to be published
as in the source code of it.
The idea when the FROGPL was originally designed was
to ensure that any cloud software under the FROGPL
or that is used in the FROGPL context would have to be published again.
So meaning that this,
I'm almost trying to say that this viral GPL notion spreads across the network,
which is probably the most communist for one of a better expression.
License, you can think of.
Well, interesting enough, the usage of the FROGPL is pretty low, right?
Why would that be modern?
I'm just wondering.
Any thoughts?
Well, I think as you just mentioned,
any component you speak to your own network, that's kind of...
That's exactly it.
You see, there are two sides of the story, right?
The more restrictive, and the open source license is, the more restrictive,
the use cases, because if you're linking against a copy-level license to a GPL, for example,
anything that you create with that code base, you have to publish.
Now, if this is not on your alley, your alley, please stay away from copy-level licenses.
So the more restrictions you put on a code base in terms of licensing,
the more restrictive your usage gets.
Because quite a few people are reckon.
Let's use the example of a startup.
I mean, if you just give up the SQL source that will render the likes of Google and friends,
obsolete within five years' time, you don't necessarily want the public to have a gander at it.
So in that case, any component, license in a FaroGPL or another copy-level license is
probably not for you. On the other side, if you have a permissive license, and Martin just mentioned
MRT Apache and the BSD licenses as three examples, this is the opposite of the spectrum.
You can do pretty much whatever you want with it. There are certain differences.
For example, the Apache licenses, the Apache license requires you to put a little bit more
prose into your source code. The BSD license basically says, you're not finding a patent on
the source code and you mentioned the author. Probably one of the better new examples is
something called Redis, as in the remote dictionary server, which is license under three
closed BSD. So you can do pretty much whatever you want with it, assuming that you mentioned
7000 for lipo as the original author, and where it comes from, and that's pretty much it.
So you can incorporate that component, the server side, as in Redis server, in your code base.
You just have to mention that you basically took it, but you are free to use that code base
without any restrictions as long as you adhere to the license, to the permissive license conditions.
So if you want to wrap this up in your text stack, that does the next big thing. Just go ahead.
Yeah, yeah, it's permissive is definitely way to go.
Funny enough, then also the last adoption. As you already mentioned, and I think I mentioned
terminus to be already on a few occasions, but terminus was under I think even the
about a year ago. And as you rightly said, the adoption was pretty low, that code base.
Sorry, terminus to be your front of English phone notes, is a combination of a Git storage
packet with graph database in front of it. The reason I'm mentioning this, it comes from an old
ITAVA matter, namely Trinity College, where it's a PhD, and terminus I think went live last year,
so it's a brand new project, brand new code base, you're from the good help.
But they last year, they changed from a pharaoh GPL to something called Apache,
for the for that exact same reason, namely they found the adoption code pretty low because of
the restrictive, I'm licensing requirements. So they changed this to Apache and voila,
the adoption went, I wouldn't say sky high, but grew significantly because now people were able
to incorporate the code base in their in their tech stack without having to publish any any
derivative work. Yeah, mid-year, well, intern drives innovation and improvement.
Well, you see, it has its two sides, right? I mean, if you're going for a couple of license,
people have to publish any graph work, as in just our derivative work, meaning that, of course,
if you are going for that license, that you have an example of a project that is used in that way,
and people have to publish their changes. Can you compile a collection?
That's example. It's probably one of the best C compilers on the planet,
because about 20 years of development went into it, but it was our first license on the GPL,
so any modifications had to be published. And if you had to see a commercial compiler,
it was on par with our collection. Yeah, it's not just modifications, it's also if people use it as part
of their code base to do a compile on release or something like that right, because when they
build the software, it's probably the most used compiler collection as a component of the planet.
Because every Linux district has it in their repositories. Of course,
CLAN is making strides for enough, but as I said, a lot of innovation went into the compiler tool
chain, and it's probably one of the most mature tool chains, as in seek compiler tool chains on the
planet. Okay. Yeah, but it's not really comparable to an open-source product that's monetized
like a Redis or a Postgres or whatever it is these days. It's modern cars, okay.
Oh, it's modern cars. It's like an open-source company, but the source code is not the word for it.
Yes, man, pretty much like enterprise DB if my research corrects it.
I said, the word isn't monetized. Ah, okay, okay, you've got that wrong. Thank you for in late.
You're more than work, man. No worries, no worries. No, as a matter of fact,
Postgres has its own nonsense, right? It does, it does. So this is permissive or more
or more like copy left? It's similar to MIT, it's very permissive, which is why you find it in lots of
applications that people ship out, right? It's part of this, many many many many
you know, if people building an application and then they're basically using other
MySQL or Postgres and just... Well, Maria DB stays. Yeah, Maria DB is probably a better choice.
If you're still kind of a member of the old guard looking for SQL technology,
not that many not that many people do it apparently because no SQL seems to be the range.
Of course, that's the shameless tease of an upcoming episode where we will have the great
bachelor between... You've heard about hypotheticals, right?
Yeah, SQLs was about 30 years ago.
No, it's still in on the way up where's no SQL is. Apparently Jeff Bezos mentioned that he managed
together a last Oracle instance about a year ago. In something called Amazon, I don't know,
it's obviously bookshops because he doesn't want to pay them any money, yeah.
But we digress. Indeed. We do. Okay, permissive licenses as a matter of fact. Okay, so either of course
there are derivatives of offset licenses. So for example, yes, the conundrum of course is basically
that Martin already mentioned the OSI. Can you shut down that on the on the on the open software
initiative? Well, there's a whole episode on over this. Yes, indeed.
No, the open the open source initiatives and time if you're listening, this upcoming show is for you
because we have that Nicholson on the show. No, the OSI is one of the vetting bodies of sets
open source licensing. Quite a few companies have tried to get the license to get the licenses
vetted, but not all of them have have succeeded because some of the restrictions or some of the
attributes that Martin already mentioned are quite restrictive when it comes down to the vetting
open source licenses by the OSI. So for example, you cannot restrict usage rights. We are recording this
episode somewhere in July of 20. What and what date is it? It's 8th of July 2021. Thank you very
much. You're welcome. For those of you who haven't heard there's something called out their
called Audacity, which fun enough we use to edit this podcast. Now, Audacity, as in the project,
was acquired by a company called Open Use about a month ago. And as probably the quite a few of
you know, Audacity is under the GPL. And what Muse actually did of is to acknowledge whatever the
company is called, you're from the wing of the show notes, actually tried to restrict the usage
of Audacity to people above the age of 13. Funny? Yeah, Muse, you cannot use Audacity unless you are
older than 13 years of age. What? It doesn't Martin, it doesn't. The links are on the show notes,
but in this chapter B, of course, that violates the GPL left right and center, because that's exactly
the thing you cannot do with the GPL code base, you cannot restrict usage rights. Very important.
Funny enough, quite a few people that didn't know have an open source license lawyer.
Funny enough, quite a few people got upset about this and forked the code base left right and center.
Hmm. They also tried to put in some telemetry code into the
garbage, but that's a different story. We won't go into the details. Just check your local
favorite open source, news outlet for the details. But suffice it to say it didn't go down
well with the community and as expected, quite a few forks happened. Over the last couple of
weeks, and not surprising, by the way. Going back to the original discussion,
quite a few companies have tried to restrict the usage with limited success. Let's put it this way.
So, for example, there was a, there's still is a company called Redis Labs,
will the stores are working for them? That put out something called the Redis Labs source
available license in 2019. Yeah, it was, it didn't MongoDB do something similar before them,
or I'm the same time. We agreed into Mongo in a minute when we, when we're going to discuss
something called, yes, the servers are public license, sorry, I'm a little bit slow tonight.
Because these are two exact opposite sides of the coin, but let's, let's discuss our SAL first.
The idea behind the RSL was to restrict the usage of the so-called modules that
demand the Redis, the original Redis code base so that it cannot be used by
funny enough hopper scalers. When Redis Labs came up with the original idea for the RSL,
AWS and friends were already making billions of dollars with elastic cash and other
derived offerings of the, of the BSD license. Redis opens those code base because what these
hopper scalers essentially did is, or what they're still doing, or what they're still doing,
they take the open source code base, package it for their cloud environments, and then sell it
as a managed service. So Redis Labs is putting a lot of money, I think, into the development of
the RPs because it's, the server itself is licensed on the three,
under three clause BSD, so people can do whatever they want with it for fair enough,
and that won't change, and make money from it. And the intention
behind this RSL was to not repeat this with the modules, with the source code of the modules.
The modules are essentially a server extension that's transformed Redis into an application,
or more specific, or more application specific database, like a graph database,
a termsage database, like a document DB, that's all right. So the idea was basically to restrict
the usage of these modules to non-cloud environments. The source code is still available,
you can look at it, you can compile it, you can slot it into your own text deck, no no big deal,
but you cannot deploy it as a managed service being half a scalar. That's the most important
difference here. There was quite an appare about this, there was a project called GoodForms,
funny enough, by somebody, I can't remember the name, Chris Lam. Yes, Chris Lam and Nathan Scott
forked this in 2019, if I'm not completely mistaken, links on the show notes. But
nothing happened much after they forked the module code base then and there. The contributions
died down, and you can take a look at the stats on GitHub, nothing much happened afterwards.
I mean Chris got a first and second one of it, about contributing code to a Redis Web
control code base, but that was pretty much the end of it. Okay, but then aren't the modules
predominantly developed by Redis now anyway, as in the contributors? Well, probably the standard
modules basically that are available on top of Redis are developed by Redis Labs, yes,
but of course the module SDK is published, so you can do your own module if you want to,
nobody's holding you back. Yeah, but I mean the modules code themselves, the projects,
those are pretty much maintained by Redis Labs employees, no? Oh, yes, like terms here,
like registration, document to be, like always government, all the rest of it, yes,
and direct apps is also putting a significant amount of money, I suppose, into the development,
into the RPs of that code base, or of these code base, let's put it this way.
So, I mean, yes, so this is an example of why people are coming up with different licenses,
right, or adding restrictions to licenses that already exist. I mean, there's always, of course,
the other side of the flip side of the coin, you have something called the server,
the server's our public license is essentially a different approach to the same problem,
because what the server's our public license actually mandates is if you,
what's what I'm looking for, incorporate such a project, run it, or I think?
No, it's a derivative of the GPS3, and it says basically that if you incorporate a code base
license under the server's our public license, in an environment that controls your infrastructure
that controls the environment that has an orchestration thing around it, you have to publish
any surrounding components. So, in that regard, it's pretty close to something called
an referral GPR, meaning that if you are a cloud provider, like a hyperscaler,
you would have to publish your infrastructure code that runs set code base.
So, imagine if you want to take Mongo is probably the best example of a server's our public license
license code base. If you want to deploy a Mongo code base in your cloud environment,
you would have to publish your orchestration stack, your monitoring stack, and all the surrounding
components that control and execute the Mongo code base. So, essentially, it's not comparable to
the RSL, but it's rather, it doesn't have the coin, right? Because...
Yeah, well, they serve the same purpose, right? It's to stop the hyperscalers from using them.
That's exactly it, because...
The likes of Amazon, Microsoft, and Google, of course, won't publish the hypervisor code that
control that orchestrate that monitor these environments. And that's exactly the purpose of
the server's our public license thing, which is pretty interesting when you think about it,
because they simply say, of course, you can take our code, but if you want to do this,
you have to publish your own stuff as well. As the RSL simply says, sorry, you cannot use this code
being a hyperscaler, which is different from the code, of course. But the result is pretty much the same.
Okay. Should we mention common clause before we close off the show?
If anybody is still awake?
Just in case.
Creative Commons is not a set of licenses. It essentially is mostly applied to
creative content, like songs,
shows, podcasts, books, magazines, whatever you want to articles, whatever you've fed, whatever.
Tickets are fancy, and the idea is essentially to just give credit.
Yes, it's attribution, and it also mandates how you can share the content, for example,
if you can modify the content or not. And these are probably the most important attributes of set
license. Okay, but not so relevant for software release.
Well, I mean, it's relevant if you publish content that is not necessarily technical.
True, true, yes. Okay.
Like blog posts, still not having.
Hmm. For example, this podcast is licensed under CCR CC Creative Commons
attribution and share like, meaning you have to go for credit, and of course you can take
the content and modify it to your content, but you still have to go for the attribution, meaning
you have to credit the links and laws for coming up with this not so content in the first place.
Yes, it's pretty unique, obviously.
Attribution must be done. That's reason for why why we're kind of, well,
you see funny enough basically, it was kind of mandatory, but the problem will be in touch.
Yeah, but by the HPR, you see funny enough basically, when we first discussed,
when we were the hostess, the HPR of course came up as in the Hacker Public Radio,
but they kind of mandate that the CCI buy SA as in share like, and this is basically what you
have been using ever since. Fair enough. Exactly. So we're still only on the platform. Can you
listen for credit? Thank you very much for one and a half years of great service almost.
Is there anything that we have missed?
Well, has this cleared the whole licensing scenario for anybody also of a new project out there?
Maybe we'll start off the cat videos, but please check your local video platform for sure.
Sorry, they're on CCI, right? I suppose that depends on license, okay.
Right then, okay, excellent. Well, thank you for that great description and
Well, it's a little bit philosophical, never mind, communist,
attitude, and that takes us nicely to the boxes, Martin.
Well, what about the feedback? We do have feedback, yes.
We do. You want to read this out? I can do this. So, there's this feedback on
episode 33 by Kevin O'Brien, who says, I loved the show. I found this discussion fascinating,
and I also noted that Linus had mentioned the possibility of using rust for a Linus kernel,
and that it is not something you hear every day. If some talented programmer out in HPR land wanted
to do a series on programming and rust, I think it would be a big hit. So there you go, talented
programmer on rust. That of us was the show where we had the Linus contributors on the table,
the virtual one. Was this not the rust one with Steve? No, it wasn't.
Anyway, it doesn't matter. On this particular subject, if 514, as in the release kind of,
is anything to go by, rust is making great strides into the kernel in terms of the kernel
credit is finished. If I'm completely mistaken, and people and people are looking at,
seriously, are looking at using rust beyond driver scope for the kernel. And that's it.
Okay. Detailed on the change block of a set kernel as in 514, and with that, it's now really time
for the boxes. Martin, what's the box? My box is something called, I think it's called the farm.
It's called the farm. It's written by Josh Orwell, right?
No, not that one. It's written by...
The question. What was it written by?
Well, he was produced by Amazon, obviously. Marker of Texture.
Marker of Texture.
No, I don't know. Why would it be written by Marker?
I'm confused. I'm confused. It's sorry, my, my, my.
Yeah. Anyway, oh, sorry, it's not called the farm. It's called Clarkson's Farm, I think.
Anyway. Okay, so what is it about?
It's about a guy's TV presenter. He's earned lots of money doing TV shows. He's bought a farm
and he started doing some farming. That's just quite amusing, especially because he's hopeless,
I think, obviously. Why would you buy a farm? Do farming? Do not live in a city to...
What's the point?
People need food, and so farmers produce food.
The rest comes from genetic labs or something from a, from a few genetic labs. I know,
maybe I'm wrong, I don't know. I don't know. Maybe it doesn't, Germany, but not over here.
We still have farms. I see. Okay. My epoch of the week is a movie called Taking Lives.
Taking lives. It goes... Yes, it goes back to 2004. It's a
fuss with Angela Julie, and if you have a chance to get this on Netflix or something, don't miss it.
It's one of the better ones done by her, and it's really riveting with regards to plots,
psychology behind the whole thing, and acting. Ah, it's not because she gets a kid's off more or something.
I can't remember any movie where she did, actually. Can you?
No, no, I'm not that familiar with your words.
No, the same words, okay.
That's a checking.
No, this is not really a bust, or this is Angela Julie.
Okay, now I mean, if you're interested in Carf Suspense,
thriller, that's a movie to watch.
Okay, that was good. What was it called?
Taking lives, exactly.
Right, so presumably you can find the links will be in the show notes or the link rather will be in the show notes, exactly.
Okay, and this is the end of something called season one episode. I can't remember.
There is a mic, microkernels, yes.
Yeah, the jury is still out on the episode, but it's definitely season one.
Ah, as usual, Microsoft, Google, Amazon, if you're listening,
the email address is sponsored at Lennon's in-laws or are you?
We'd like to thank Kent Fallen and HNHG Public Radio.
Thank you. Thanks, Kent.
For hosting the show, and needless to say,
Kent, yes, we do apologize for not showing up on the monthly HPR reviews,
but let me teaser this.
Each and every month, HPR does a monthly review of the shows.
And if you saw in class, please join this slot and give feedback,
because HPR is a community living from participation,
living by participation, living on participation, anyway, it doesn't matter.
The more you contribute, the more vital this platform gets, because otherwise,
shows like the ones you find in the HPR are including,
Lennon's in-laws would not be possible.
Definitely.
And thank you for listening.
Yes, and next week we will have...
Next, finally.
In about two weeks' time, Martin, we only publish every two weeks.
In case, Martin didn't send the memo.
Oh, I used to send them.
Can we get some new ones together?
And I'm afraid there's something in between called an interview,
so it'll be four weeks' time.
Yeah, I don't know what I mean.
That's the thing.
Exactly.
People don't worry about the schedule.
As you can hear, we don't know that thing.
And thank you for listening and looking forward to being with you soon.
Exactly.
This is the Lennon's in-laws.
You come for the knowledge.
But stay for the madness.
Thank you for listening.
This episode of Lennon's in-laws is sponsored by Linus Torvoltz.
Linus creator and, to use his own words,
Linus kernel grant master flash.
Unfortunately, Linus was not able to deliver the following message in person,
so we had to resort to a voice double.
Due to budget constraints, we had to avail of bargain-based metallic,
which may sound slightly different than the usual quality you have come to expect and love from the in-laws.
No, I don't want to deal with this fucking political say longer.
If your mother would have used proper contraceptives,
I wouldn't have to face this fucking shit anymore.
Get alive and learn to properly code and see for a start.
Or, if that's too difficult for you to admit it in intellectual capabilities,
just use rust going forward.
If you're smart enough to master a learning curve, get shit!
Oh, sorry.
This is not the Lennon's curly menu list.
This is a person message from Linus Torvoltz.
Also known as the kernel grant master flash of something called Linus.
All the operating system I advised about 30 years ago.
For some odd reason unbeknownst to me,
this pet project has been the rage for the last 20 years or so.
Even more important, as Linus is approaching world domination,
also partly due to a fabulous podcast that links in us,
choose your license wisely.
Let me emphasize this.
Choose your license wisely.
And I want you as the first member.
Linus would not be where it is today, without that initial decision to put the code
base under the group public license, also known as GPL back in 1992.
That move fostered innovation big time.
For example, two years after that decision,
I'm support and of the kernel mainline.
And the rest is history.
Even waiting for Andrew,
came to the conclusion that Linus was the way to go for his mobile operating system,
named after some cute plasher robot.
Before some scriptkitties, with a revolutionary approach to such engines,
came to the conclusion that Andrew's outfit might be a good addition
along that path toward domination, but I don't agree.
Just make sure you choose the right license for your endeavor.
Now I'm off to my anger management therapy session.
12.
Breastman meds.
This podcast is license and the latest version of the creative comments license,
tab attribution share like.
Credits for the entry music go to bluesy roosters,
for the song Salute Margot,
to twin flames for their piece called the flow,
used for the segment intros,
and finally to the lesser ground for the songs we just
this used by the dark side.
You find these and other ditties license
under creative comments at your mando.
The website dedicated to liberate the music industry
from choking corporate legislation and other crap concepts.
You
You are currently the only person in this conference.
The only person in this conference.
There's the Hermes guy again.
Don't we meant annoying guy.
Oh, Hermes is on Linux studio.
I'm just going to get myself another cup of another cup of beer
exactly or other bottles so we have to cut this out anyway.
Doesn't matter.
But for the people who missed out on this.
That hasn't gone out yet, has it?
Oh, will miss out on it.
Does it come out before?
Yeah, let's check with marketing.
Let's check with marketing because there might be the show if you haven't filed them yet.
There has been a certain re-shuffling of episodes going on.
Anyway, that doesn't matter.
You've been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast and click on our contributing
to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dove Pound and the Infonomicon Computer Club
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly,
leave a comment on the website or record a follow-up episode yourself
unless otherwise stated. Today's show is released under Creative Commons
Attribution ShareLight 3.0 license
