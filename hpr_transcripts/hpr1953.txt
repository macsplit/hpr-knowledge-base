Episode: 1953
Title: HPR1953: An Interview with David Willson of the Software Freedom School
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1953/hpr1953.mp3
Transcribed: 2025-10-18 11:49:27

---

This episode of HPR is brought to you by An Honest Host.com, get 15% discount on all shared
hosting with the offer code HPR15, that's HPR15, better web hosting that's
honest and fair at An Honest Host.com.
I'm a listener of HPR, I don't listen to every episode but I listen kind of and fit some
starts I listen for a week and not listen for a week and my strangely my favorite episodes
are the ones that are entirely impromptu and full of background noise and you can hear
the person's daughter come up and you know he takes care of her question and then goes back
to whatever it was that he was talking about there's something very organic about those
sorts of shows and I really like them as a matter of fact one of my favorite shows
didn't have any talking at all it was a guy that sounded like he was hiking alongside a highway
and going to work and there was something artsy about that that I just loved.
Yes some of my favorites are the ones where guys are using their Dremel tool to fix a pump house
and other things but I really do enjoy the technical episodes also because I feel like that the
internet provides a really nice learning channel. Yeah totally agree as a matter of fact I'm
going to be doing more online stuff with SFS we have done a few things that are kind of online
using our big blue button server but it's always been challenging to get big blue button to behave
and to have all the students be ready at the same time and so I think we're going to move that
to maybe more screencasty approach where we just go voice and then do a recorded screencast so
that everybody can just get on to you to or or on to download an OGB file or something but OGB
files can even be challenging for Windows users. But I understand and go I think we
ought to start by introducing ourselves and I'll introduce myself and then have you introduce
yourself in your project so that and I like to have you do that because I know my name and I think
I know your name and but sometimes I goof it up so my name is David Whitman I'm from Oregon in the
US and I'm talking to David Wilson and why don't you introduce yourself in your project David.
Very good. My name is David Wilson and I am the founder of the Software Freedom School in
Denver Colorado. It's a project where we try to teach free software and free software way.
The primary difference between what I see
IT schools doing that teach whatever software happens to be popular or marketable and what
I want to do as software freedom school is keep the software freedom
philosophy underpinning everything that we do so literally everything that we make and everything
that is made for us is creative commons in somewhere and other either it's to be able if it's
code or it's creative commons if it's material it isn't code so documents and media everything
that we make is is reusable so there's no restriction on anything that a student or participant
might get they can take it and remake it into something else and then if they want if they want
to do a class and even charge for the seats then we're not only allowed that but we encourage
it and help them. Before we go any further I think it would be since I'm quite disorganized at
times I think it would be good for you to give your contact information so if people want to contact
you or check you out on the internet they're able to do that so why don't you do that now tell us
how to contact you and the any other information you want to share. That's a great idea.
When we start with my mobile number and I share it because I actually do mobile calls
about anything that I do with my exorpories up where or just shouldn't look who are helping
helping with the school. That's 720335267. My primary email address is dl will soon with two
else at the gig.nu and the schools url is a lot simpler than either though it's
it's simply so free.us. We try to keep the website up to date with all of the things that we're
doing for the next six months and I try to keep at least one event per month for six months
ongoing. You share with us then your qualifications your education and or just how you got into
free software and so that people have kind of an idea of what your skill levels are.
I'd love to. The short version of my and how I got to Linux is that a friend of mine
showed me red hat 5.2 and I was unimpressed because I was a completely uh completely windows guy
at the time and I said I don't understand what's the point of this thing that you're showing me.
It um it has windows and it has a command line but what does it do that windows doesn't
already do and it wasn't until a few months later when I wanted to put up or for my friend's
and family and kind of provide a smaller less expensive ISP that I found out that you couldn't
do a lot of things affordably within proprietary software and that led me and I didn't know the
terms proprietary and free software at that time but um I didn't know that I couldn't find a male
server that wasn't going to cost me an arm and a leg or suck um and so I found a university of
Washington's IMAP server and decided that that's what I was going to use but that was going to
require me to learn that strange thing but my friend and Chris Lee said show me uh Linux and so
it took me two weeks to become conversant enough to get a uh a basic IMAP server put together
but after that I was hooked and I started to discover the philosophy of it and the things
that Richard Stallman teaches and uh really fell in love uh not just with the software
which is fun and awesome but with the collaborative um permissive way of dealing with the code
and developing the code and sharing knowledge back and forth and just it's it's really good science
and good humanity nature not to be too romantic about it but that was when I started to go
wow this is really great this is what I want to get into well around the same time I was getting
into training because my manager at uh MCI wanted us to start up a training department because we
trying to get our technicians you know a little bit sharper and so most of my efforts were
varying Microsoft Centric at that time but that ended up being a recurrent theme in my career and
so I got a Microsoft certified to teach in 2000 and have been teaching
I've been swinging my career into now all I did was Linux and pre-software all the time
um when I'm at work I do Linux Linux systems administration with a specialization and automation
so DevOps without actually saying that work out loud um and very up centric DevOps um I don't work
on the application so I only work on infrastructure for the applications
and teaching is uh all the night that's that's I do all my teaching now through SFS but I used to do it
professionally as well um I did a lot of uh I did a new thing uh six or seven years as an MCT
um it's gonna be more than that uh 2000 is one of you came in MCT
and 2011 so it was an MCT for about 11 years uh Microsoft certified trainer that is
I finally let that go in 2011 when I started getting more into the uh Linux side of things and if
they're I'm weep for a way to become a Red Hat certified trainer so that I can um have some sort
of a certification that says that I know how to do this stuff um that I can uh keep doing me out
keep on but it doesn't make sense to maintain MCT and be teaching Linux. I have a question about
the Red Hat certification and what I'd like to know is how difficult it is to obtain that and then
what has to be done to keep the certification up? Sure. The three sort of they're actually three
certifications or three kind of certification camps so that I keep track of right now and I'm
very Linux centric and so they're probably programming certifications and things that I don't keep
track of. The ones that I do keep track of are LPI's certifications uh they help pick one and I'll
pick two and I'll pick three um and my uh Linux camp was very geared toward the ultimate one
certification uh this year I'm going to go through a big re-write and I'm going to target the
Linux foundation certified administrator instead because that's a hands-on exam and I think that
hands-on exams are absolutely the way it goes which brings me to Red Hat um and Red Hat's got two
certifications that I keep an eye on uh Red Hat certified systems administrator and Red Hat
certified engineer. I have the they're let's start with they're both practical exams the way
that you achieve the certification is by taking a practical exam where you sit down
out of computer and you actually accomplish some list of tasks uh it's it's it's a well-known secret
that the Red Hat exams start out and where you're sitting down at a computer that you don't have
a password to and so the very first thing that you have to prove you know what I do is take over
administrative duties from someone who's no longer there or for whatever reason.
Administrative password is gone um
so have are you still there? I just want to make sure because I just got it
signed. Yeah I'm here I heard your chime it was kind of interesting actually you sound clearer
right now than you have in the past. Oh good well I can't think of any good reason why I haven't changed
location but uh but that's fortunate. I'm going to go back to what I was doing then and actually
I'm going to dismiss that prompt because otherwise it will re chime in 10 minutes there we go.
All right so let me come back to where it was we were talking about Red Hat and I'm saying that
I prefer practical exams um all of the certification providers are moving to practical exams
because they do a much much better job of measuring the actual capabilities of the engineer.
They instead of getting certified that you know some trivia about editors you are certifying that
you can actually make some changes just on text file instead of certifying that you know some
trigger Apache's web server stack you have a challenge that you actually have to permission some
websites within Apache's web server stack and that ends up being a much more accurate meaningful
certification than the multiple choice exams. So everybody's moving to that one of the biggest
providers in that space is we've got the uh true ability and true ability is providing virtual
machines for testing for Susan and just recently took one of their practical exams and that was
a lot of fun very challenging. So Red Hat has their two certification levels they actually have more
but I only keep track of the two. Their beginner level is the Red Hat Certified Systems Administrator
which is a challenging exam and a good practical exam and then they're certified engineer which
requires that you're already an essay assessment and then you take another exam and that gets you
their intermediate level certification then they have other exams that give you certificates of
expertise and I think that they have one where you have six certificates of expertise and then you get
our Red Hat Certified Architecture or something like that but I don't track that very closely.
Go ahead and finish your thought there and then we'll I want to kind of jump to another subject.
The maintenance and cost are more in time I would say than the time spent studying is the biggest
cost to maintain a set of certifications. You have to re-certify with most of the certifications
every couple of years or every version or every couple of versions. It really depends on the certification
CompTIA has their Linux plus certification and they expect to re-certify every every two years
I think it is with them. Susa ties the certification to a particular version so you might be a
Susa certified Linux professional on version 12 and then you keep that certification forever but
since it's tied to the version it will be more or less relevant depending on what you're talking to.
Red Hat Certification is title-centric and it expires every other version so right now I'm at
RHCE but I need to refresh for version 7 because I'm on RHCE on version 5 and I'm on RHCSA because
I did refresh that certification on version 7. You don't technically have to refresh the
system one part of it but I chose to because I want to stay in touch with the content of the SAA exam
so that I can help people to get their system and credential and be more focused in my approach.
The reason why a person would want to get certification at all is that it just gives you a quick
kind of button approach of saying yeah I know what I'm talking about and I'm certified on this
and then if that person that you're speaking with knows what that certification does
and is familiar with its quality then it gives them a quick metric of value with regard to your
experience or at least expertise. Okay on the 10th of or the 21st of October on 2013 an episode
that was Hacker Public Radio 1361 you were interviewed by I don't really remember who it was
and it was an SSF and Linux camp and you talked about your project and introduced the community to it
and I noticed when I relish into the episode this morning and I noticed that the teaching method
that you use apparently in Linux hamper at that time you did was pretty much along the lines of
this certification method that you've been talking about just now.
I always like to target some certification in all of the training that I do
I prefer to sometimes there's not a certification available and then I usually stop short of
developing my own past failing exam because I coming from the IT training background I saw that
certificates of attendance didn't really weigh very well with people that were interviewing
because all that certify was that you could hold a chair down for a day or three days or a week
and so I'm really big on exam-based certifications or an in particular performance exam-based
certifications so whenever I have a topic that I want to present I try to find a certification
that applies to it with Linux camp that's going to be the Linux foundation certifies
this admin but I've also done and I'm doing actually right now study groups around Red Hat
and maybe someday I'll do something in the classroom with regards to Red Hat
and then I don't want to do all of the teaching of course I want other people to be able to get involved
and so what I'm trying to do for that is develop a framework that will make it easier for someone
that's a subject matter expert to also become an effective teacher so I've tried to boil
15 or 20 years of experience in teaching into just a few pages of recommendations that are
simple and direct that will allow a person to take their particular subject matter expertise
and then by a process of just answering some simple questions develop a curriculum for a class
and then what I haven't done yet and want to do is hopefully allow that same subject matter
expert to be able to present in a classroom environment the classroom environment
like interviews requires a lot of thinking on your feet and so it can be hard to become quickly
good at classroom teaching but I think translating a broad base of experience into
teachable moments is not impossible and can be methodized and so I did develop a little short class
called the SFS method which the 32nd version of it is only spend about 25% of your time talking or
maybe maybe 30 or most 40 because what you want to do and what turns out to be very effective
to help people learn which is what teaching is about is not to just fire host them with information
but instead present them with a piece of very important information put it into context
demonstrate it and then allow them to to do it and ideally to do it in a pair scenario
because doing it in a pair scenario increases accountability and it increases retention tremendously
because it puts the student into the position of teacher with
relationship to their partner in the pair so the the very very short version of SFS method is this
do a show and tell because some people learn by listening some people learn by saying actually
we all learn all these ways but some one of the ways will be particularly applicable to a student
and we all learn very well by doing so by it's seeing hearing and doing and then what it
turns out to increase learning retention massively is teaching, re-teaching what you've been taught
and that is not a new principle it was discovered way back when and they call it the nursing
school that C-1-2-1 teach on and what we try to do with or what I'm trying to formalize with
SFS method is don't just talk talk briefly then to show so take take some feature of the what
said that you're teaching about a product take some feature of your product put it into a context
and say okay the the place where you would want to use let's say I'm teaching software rate today
the place where you would want to use software rate is in a situation where you have a file system
that's very important and you want that file system to always always be but even if a disk should fail
that's where you might deploy software rate so now let me show you a situation where I have two
hardware disks and I'm going to use software rate to one of those disks into a more reliable
collection of disks all the rate and so then I would demonstrate that so now the student has
heard the thing and they've seen the thing and then one of their usual requirements for
SFS sessions is everybody brings a laptop and that laptop is running virtual box and then
usual we will recommend a particular distribution of legs for the virtual machine on which the
student operates to be running and then I'll say okay now you do it take the virtual machine
that you were provided or that you built in preparation for the class and build up a
array rate and what I'd like you to do is partner up with somebody else in the lab and each of you
take the position of novice and expert and I understand that you're not expert yet in software
rate but you're going to pretend that you are because this will increase your retention and it will
also give you twice more through this process this common process of setting up a radar rate so
one of you is going to operate the console and set up the radar rate and that person will pretend to
be the novice and the other person is going to advise it or you can just regard it as per admin
either way you're going to go through it twice one person operating the keyboard the other person
watching what that person is doing and perhaps advising them and helping them remember the bits of
what I did that they have forgotten so this is the basis that I was going to say this then is the
basis for the essential basis for all the classes that you teach is for someone to be shown and
then actually demonstrate the ability to do that that's exactly right and it's what I call
SFS method and it's it hopefully is a framework in which a subject matter expert can present the
thing that they're expert in without create without committing any of the usual subject matter
expert faux pas which are interesting to another subject matter expert in the same subject pattern
but are uninteresting to the beginner and 80% of classes are sold to beginners the beginner is the
one who's interested in learning about software rate the person who already knows software rate
is not so interested in learning about that maybe he wants to learn about performance and so
in a way every class is sold to a beginner because if you already knew the thing you wouldn't be
in the class so even though let's say software rate may be old to you performance with
them software rate or performance within rate may be new to you so to that extent your beginner
there the secret that SFS tries to or SFS method rather tries to make into a simple formula is
don't dive into history this the beginner doesn't care about history the person that's intermediate does
the person that is intermediate or advanced within a particular topic they may be very fascinated
by how they hate arcane origins of parole or Python or Linux or this philosophy of software for
you but the student generally only wants to know how to solve the problems that they're
the beginning student wants to know how to solve the problems that they might need to solve tomorrow
and so if we can take a subject matter expert and say if you're going to take these students after
your class and actually use them in your shop to get real work done we're using them in your
project to get real work done and they're going to be your assistants one of the foundational
things that you want them to know before they start assisting you one of the things that are
really important that the basic tactics and the basic techniques to be functional with your
particular technology and unsurprisingly that never turns up to be the esoteric details of the
history of Linux or software rate or whatever this object is the subject matter expert never
wants the beginner to know that tomorrow they want them to know let's take Python as the example
this time they want that that learn to know how to use an API and understand how APIs are typically
laid out they want them to know how to write a loop and when to use a small collection of variables
versus when to use an array or a dictionary object and so on so if we can teach that to a subject
matter expert and a subject matter expert can become an effective teacher now I'm sure some of our
listeners will want to know how to learn about the sfs method so do you have a document on that
everything that I have is posted on GitLab right now some of the classes that we've done in the past
are not presently posted on GitLab because I wasn't diligent about making sure that we take a copy
of how that repository works or looks rather at the time of the delivery of the class but I'm getting
better at it every class has a Git repository associated with it and we we're trying to make that
into a routine now everything that I have is on gitlab.com under this looks so free us without the
or URL is so free.us our slot is so free us and so gitlab.com slash so free us and I think I have
sfs method not broken out into a separate class yet I believe it's under the main kind of
grab bag of things that haven't yet been turned into a formal class so that will be so free us
just so free us so free us and I think sfs method isn't there but I'll be breaking it out into its
own thing relatively soon because I'm planning to teach it and probably July or August.
So I'm looking on at right now a thing called the sfs linic camp two dashes master document which is
CC by essay document that actually came up when I clicked the link on the hpr 1361.
Yeah that was our first run of linic camp with 2013 was we have run it twice since we did it
into 2014 and 2015 we've pretty much settled in running it in August every year and up until
next year or up until last year or through let me try that again 2013 14 and 15 all targeted the
LPI certification level one 2016 and until it's no longer interesting we'll target the linic
foundation certified sys out that's the certification that we're talking and that's a four day
retreat format that's the only one that we do that way it's our that's our big that's our big
shell okay so this document though is really interesting and I think it has a lot of good material
and I was just wanting you to refer whether that's the things you do are still in that document or
is in fact I enjoyed reading it and so do you recommend people grab this and take a look at it?
I'm not sure whether you're looking at the flyer which has the picture of the moose or whether
you're looking at the document that actually drives the class which has every lab phrased as
you have some some privilege and then to try this it actually has a bunch of practical notes about
how to run a class and you know I'm talking about and like it says for Wednesday August 21st
in the evening drive right after work and set up the test equipment so it has good practical
information like that I was kind of I thought it was a real good outline of the practical part of
doing a camp yep yep and that's exactly what that document tries to be I think that particular
year I hadn't broken it out into two separate documents where one document is the class material
and the other document is how to run the class so that one probably has the class material
and how to run the class in the same document and yet it makes great reading especially if you're
trying to build something like that yes I want to thank you for putting that out because sometimes
this information the basic stuff you have to work on it on your own and as you probably know or at
least I learn this in life that doing it right isn't always what you have happened when you do things
the first time so having a framework is really nice to have and we're my goal is to get better
out that into present present and use a better framework as time goes by so that anybody that wants
to build something similar to SFS can simply look at what SFS is doing and then build one of their
own with their particular flavoring I do have for action but I'm certainly not going to sue
anyone ever but anything so so it's it's an ask not a tell yeah and so I want to kind of summarize
here or I'll just say it this way that during the day you work and then at night you put on the
teacher's cape and you do classes is that what I'm hearing from you that's that's exactly right I am
currently working for apex consulting on a contract to come guest doing Linux automation and so
I go and do code things and manage servers all day one and then I come home and work on SFS
at night and um so sometimes that means putting together the ways that we do things and sometimes
that means teaching classes um and sometimes it means thrilling parties and teaching classes and
during parties are my favorite but uh but documenting how will be you know the like you said the
step-by-step how to do this is also important because I can't teach off the classes I'm just one guy
and there's lots and lots and lots of folks out there that want to learn the things that we know
so when you give a class you in this master document it talks about zero to two thousand cost
level so do you charge for your sessions and that you do I always have an ask and I always have
a pay what you can so my intention is to build a sustainable model and what I've found is the models
that are purely gift-based where one puts out a class and then asks for gifts turn out not to be
sustainable and I'm sorry to say that but they don't for me and other people may have a different
experience but um the gifts don't match the costs of providing the class and the cost of um
well paying the instructors rent and so on um so in order for something like the sustainable um
I think that it's important for an individual or an organization to have an ask price and to say
I really want everybody that comes to this class to give 64 dollars for or in the case of Linux
camp to give um right around two thousand dollars um and then to provide a way for the person that
can't pay money to come to the class um and I call that pay what you choose I don't call it
that I got it from somebody else um and they actually call it pay what you can and I prefer pay
what you choose because I think it was more self-directed um so what we will do is we'll say for this
event the price is this much um and eventually we're going to get to member prices as well so
that we can go to an even more sustainable model where we have a consistent membership and that
membership maybe pays for our building wouldn't that be great um and then um and then we have gifts that
cause that to a very but um we also always want to create an opening for someone that doesn't have
an income that allows them to pay for a class so maybe they're retired or maybe they're a career
switcher or maybe they're just coming straight out of high school and they haven't got their first
job yet um we want to create a way for that person to come to the class because the um
that's one of the people who is very very important to me personally and so we'll always create a
pay what you can so that people that don't have money are able to get to the classes as well
I want to be sure to um voice my opinion here and that I think that having a price for a class
or a they do cost money it's important for people to pay and sometimes we think that
things should be free but actually nothing is really free so and I think that what you're doing
looks like it's adding value to someone's life so there needs to be a cost there like you say
to sustain that and I support that and um in fact I'm really pleased when I look back you know from
2013 to you spend um over two years now that your organization has been going and it's you have
sustained it so that makes shows that that model is successful and I don't think a freebie model
necessarily can be because then it relies on you know people actually volunteering so much that
people burn out sometimes that way and you so your ability to hire or to pay people is important
it allows flexibility for them also yep and then so what I'm trying to do is get to the point where
um we can have a small space of our own uh so instead of running the thing out of uh out of my
wonderful basement uh and renting spaces um I'd like to get to the point where we have a
home away from home uh for the software green school and that will allow us to build a consistent
studio and stuff like that but uh that's a long-term plan and then maybe someday I can even do
daytime work for us of us that would be really great so the um original software
freedom school was held like in the woods is that correct or at um outside and that's part of
what I read in his master document can you explain about that yeah Linux camp we do uh snow mountain
ranch in August every year and it's our biggest event um we haven't made that one pay what you can
yet everything else we've done has been um this price or pay what you can or or frequently we've
done events where it's just pay what you can which as I like I said it turns out not to generate
deep revenue and so that's not going to be a sustainable model for us um the uh Linux camp is
the one that we haven't figured out how to make it pay what you can um yet uh we will um but it's a
four-day geekery tree we rent a cabin up at the snow mountain ranch in uh YMCA Colorado YMCA
the Rock East Pacific home yourselves that anyway it's a beautiful beautiful spot and so we go
up there for four days uh with about a dozen junior Linux assessments and we try to get them ready
for their certification exam and also teach real world skills but primary job is to teach the real
world skills and then the secondary job is if we can get them past the exam and get them a certification
as well and that's great too um we're up there for solid days we uh get up and my beautiful wife
makes a delicious breakfast and lunch and dinner and keeps us fed all day long um I start teaching
at about nine o'clock a lot of guys go out and do a sunrise bike ride or a sunrise hike um the
late start list let's get ready to do whatever they want to do in the morning including sleeping in
um and like I said she keeps us fed um we work hard for a few hours doing laps and learning
about various side of many things and then usually we'll do a walk at lunch at around lunch time
and go out and enjoy the beautiful scenery and then we come back and work hard in the afternoon
to do more laps uh and then around six o'clock or sometimes seven o'clock I'll knock off
uh stop teaching for the day but it is so exciting and fun and immersive and I'm not quite sure why
but I'm glad that it happens and it's wonderful um two or three of the students will always end up
hacking on this the materials that we learned that day until nine or ten o'clock at night
and that's really thrilling and satisfying for me as an instructor that my students have become
so excited by what it was that we learned today that that they played with it even after a hard day
of training um and and but you know most of us uh decide to knock off with the technical
and play four games or go for an evening or whatever but it's great it's four days away from
everything and uh sometimes you come out of it with new friends you've definitely come up with
new knowledge so what would the average age be of the students there and what average or what age
group is welcome um all ages are welcome absolutely um from 13 to 133
I would say that our average age is 35 and that's a guess um but I know that we've had guys in
their middle 20s and gals in their middle 30s and guys in their middle 40s um
so we've definitely hit all of those decades uh I don't I don't know if we've gotten anybody
in pre 20 or after 50 yet but uh I would forward to that the the only the only thing that you
have to have is uh curiosity and um well for that particular cost uh good cost of entry
so in next year what would the cost of entry be for the um software freedoms
class or what uh the Linux camp Linux camp Linux camp okay so software freedom school is the
it's the whole thing is the whole price Linux camp is this particular show that we do
in August uh for four days uh the full price is around $2,500 but what we do is we discount that
in various ways that make life easier for David Wilson at the school um so we discount it
from people that sign up early because we really want to know way before the class how many people
we're gonna have and so we give a discount for that we incentivize that so that we know what size
cabbage are meant for and how much food do I have stuff like that um we also prefer that people
bring their own very strong laptop and so we give a discount for that uh and the overboard I
forgot them with the last discount it emigrate there is another discount um and so the goal is
always to get the price down to like 1995 for the people that do all of the things that they're
really want them to do bring their own laptops my up early um and then the other thing what
the other thing is it actually is probably in that document that you're looking at
yeah I I can't pick it out right now but the um I was going to ask you can you um tell us
some success stories from people who have attended the Linux camp um I can't name names but I can tell
you that one of the ladies um got her dream job shortly after coming to the Linux camp um another
they constantly hear people tell me how fun it was and that's great um and I you know I love that um
and that those are the two things that I always ask after any event whether it's four days or four
hours is did you have fun and did you learn something and as long as both of those things happen
as an instructor I'm very satisfied um so we had one doubt who who definitely told me that she
got her dream job um I've had people uh say that they were able to change how they were doing
particular things at work um because of something that they learned at the Linux camp they were
either able to automate away some part of their job or they were able to um change their strategy
and had a lot of a lot of people um decide to get involved with sfs more closely after the
Linux camp and um you know teach for us or whatever I was going to ask what would be the minimum
requirement for someone skill level that you would want for them to attend this Linux camp
so this is my recommendation and it's it's not a requirement but my recommendation is that
uh anybody wanting to come to Linux camp has one thousand hours of using and administering Linux
before they come to Linux camp um that's this that's the experience level that is going to get the
most value out of the Linux camp person with less experience but uh high aptitude and high
interest it is going to be able to get out of the Linux camp also but they're going to get worked
a little harder and um and there there's no way that they're going to be able to draw less
much out of it because they're going to be um pay more attention to the trees instead of the
structure of the forest so to speak it explain what administering Linux the thousand hours of
that would be um so if you if you're running your own system and building your own systems and
maybe put up your own web server or you put up your own database server or you put
up your own file server or you do this at work um that's the thousand hours that I'm looking for
it doesn't necessarily have to be professional it certainly doesn't have to be professional systems
administration uh volunteer systems administration that's good and home systems administration
is also fine the point is that you have built the machines um you've built some machines
and managed some machines that were Linux based yourself or at least you help someone else to
build and manage Linux machines because that's what systems administration really is is the
building management um the building and ongoing management of Linux machines and worst
sessions are are similar enough to servers that uh you know if a person if all they've ever done
is um built to manage their own Linux based laptops but they've provided some services from
those laptops and that's that's going to be another experience um yeah okay um I was trying to see if
there's anything else that I wanted to ask you I want to say I really like your project and I think
it's a real um interesting and innovative project and oh I just I just don't have any other
questions for you right now let's see I guess you have a g plus page correct
and then do you have twitter and facebook uh we have it yeah we've got uh google plus page
we've got a facebook group um and we just started our twitter account um and we're on we just
got on to meet up as well uh so and then we're i'm in the process of breaking our own web page so
is a little bit dorked right now but um we're so our online presence could use an online presence
manager so if someone out there listening to this is uh skilled in such things come and take
this out of my incompetent hands um the uh we're at least uh teach mine incompetent hands uh to
do these things better like I said we have a facebook group um we do have a google plus page
we just got our twitter we just got our meet up and um but our home and where we really want people to
put the web page so free.us the two places that uh I I'd like to have people join us um is if they
want to join a conversation please get on our mailing list uh there are links on our website
if they want to get involved in a higher speed conversation you can join us in IRC um and there's
a link for that on our website on the mailing list I send out a newsletter every week um or
or actually I won't be doing it I'm transferring that to jubbery skills uh
one of the volunteers is taking over on the newsletter thank you out for him because there's only so much one
guy can do. I really have appreciated the efforts you've put into this and I hope that your um as
your plans are to expand into um you know still identify things goes good and I think you've got a
good model and I want to thank you for joining me today to talk to the hacker public radio audience
about this thank you for interviewing me it's really going to pleasure I do want to point out to you
and to the audience that hacker public radio is a technology podcast where the listeners are the
contributors and I just happen to be a listener so I do make some contributions and the um so if you
have a subject matter you want to get online or share with our listeners you anyone that's a listener
can make an episode up and you can find all about that at hacker public radio dot org thank you
again David Wilson you've been listening to hacker public radio at hacker public radio dot org
we are a community podcast network that releases shows every weekday Monday through Friday
today's show like all our shows was contributed by an hbr listener like yourself
if you ever thought of recording a podcast and click on our contributing to find out how easy it
really is hacker public radio was founded by the digital dog pound and the infonomican computer club
and it's part of the binary revolution at binrev.com if you have comments on today's show
please email the host directly leave a comment on the website or record a follow-up episode yourself
unless otherwise stated today's show is released on the creative comments attribution share
light 3.0 license
