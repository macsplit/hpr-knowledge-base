Episode: 847
Title: HPR0847: FSCONS, MeeGo and the story of Tizen
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0847/hpr0847.mp3
Transcribed: 2025-10-08 03:27:07

---

This is Hacker Public Radio, and you're listening to the episode F.S. Kong's Meego and the story of Tizen. Enjoy the ride!
Hello, I am Kenneth from the All-in-I.T. Radio Podcast.
Hopefully you will hear more from me in the future.
Let me tell you a little story about a Linux-based operating system called Tizen.
And there are a lot of organizations and Linux distributions in this story, so try to keep up.
It all started when Nokia created Memo, which was based on Debian, and it was created around 2005.
Intel created Moblin, which used the Red Hat Package Manager somewhere closer to 2007.
And these two companies thought it a good idea not to work on their own, so Intel and Nokia merged their projects and created Meego in February 2010.
They developed it together under the banner of the Linux Foundation who managed the project.
After some meddling from Microsoft, which we all know about, Nokia lost interest in the project.
So in September 2011, it was announced by the Linux Foundation that Intel and the Meego developers had joined up with the Lemo Foundation instead.
So, Meego and the Lemo Linux distribution will merge and become Tizen, which is to be released in 2012.
And Tizen will be everything for everyone, the embedded Linux distribution for the future, for everything from phones and cars to TVs.
Or at least that's what they want you to believe.
Meego's interface was based on Nokia's QT libraries, and as far as I know, QT will not be in Tizen.
Although Wikipedia says that Tizen is to be compatible with current Meego applications and allow to use them directly.
How they hope to achieve that without supporting the QT libraries I do not know.
There are hobbyists trying to port QT to the Tizen platform, but nothing official yet.
But the main interface in Tizen will be HTML5, so it's another system that will be very internet friendly.
Backing Tizen right now are a lot of companies, you have Intel, NEC, Panasonic, Samsung Electronics, Vodafone, LG Electronics,
Casio Hitachi, Orange Telecommunications, Verizon Wireless, Ericsson, Hawaii, Mozilla, Motorola, Opera Software, Texas Instruments, and so on and so forth.
It's a rather hefty group, and that is about where we are today, so far in the story.
But it is not where I was a year ago.
You see, last fall I went to an event called FSCONS in Gothenburg Sweden.
FSCONS described themselves by saying,
FSCONS is the Nordic country's largest gathering for free culture, free software, and free society.
The conference is organized yearly with 250-300 participants primarily from Northern Europe.
The main organizer is the society for free culture and software.
And I mean, come on, of course I would not miss such an event.
But to that, to this story we have to add that I did day before had received a recording device.
So, of course at the conference I met some interesting people and I managed to get a few interviews.
The quality is not the best, I hope you will forgive me for that.
I am a bit new at this interviewing gig, but still.
The first man I got a hold of was named Knut.
He is from Norway.
His talk at FSCONS had the title cute on me go.
So this man Knut Irwin is a community manager at Nokia and also for the cute development frameworks.
Irwin has worked in various businesses from Telekom to consultancy and education.
He is also one of the board members of EFN, which is a Norwegian version of the Electronic Frontier Foundation.
So I had a chat with him about me go cute, cute, quick, Katie, and some other topics.
I just had a couple of questions about me go.
Well, the elephant in the room.
How many me go devices can I buy today on the market?
I think one of those, first of all, you can buy a 900, which you can run me go today.
Which doesn't come with me go.
That's right.
So you have to do flashing yourself, which developers should explore.
And it's always fun, of course.
That's always fun.
We also have this ViTab tablet, which is just recently our launch.
You can see it on Linux devices.
It's already out there.
What else you imply is that the platform is in its start.
It has started just half a year ago.
It's not new.
It's that new.
So when you go to 2011, we will see more and more devices.
All right.
There are quite an impressing number of companies and organizations supporting me go.
Is it too late to launch this kind of operating systems today?
On the contrary.
It's the right timing.
All right.
And I will explain you why, because people now have experienced the fragmentation in the Linux area,
which every embedded developer encounter where they have to put together the Linux stack
with a different system for sound, for video, for network, and those different parts.
And many have to make their own drivers.
But with me go, you can actually have a sanitized Linux experience,
and you can then concentrate more on application development.
Everything today is about the application, HTML5, and user experience, and Qt.
All right.
Interesting.
On that note, when you're talking about Qt, you mentioned Qt Quick.
I'm a teacher in secondary education in Sweden.
And I have a couple of pupils who are doing advanced programming,
and they are taking a course in C++ and Qt development.
Should they continue doing that, or is Qt Quick something that should be more interesting?
They can do both.
You don't exclude anything from doing more with Qt Quick.
You introduce an ease to make a touch screen, touch based application,
or animation, or those things, which make it much easier to make user interfaces.
And then you can still use your C++ knowledge when there, that's appropriate.
You have a lot of C++ around there to support you with hardware,
and the good thing about C++, if you're learning C++, then you can program everything.
Because it's the toughest thing to start with.
But with Qt Quick, you can also call it really fast, get a good user experience.
And you can work much closer with designers.
Designers themselves can make an application, and they can also integrate that with the hardware,
with the C++ software.
But what does it remind you of what kind of programming language is Qt Quick?
It's a declarative language.
It's different than an imperative language with C++.
Interesting.
So it's another way of thinking.
You declare what you want instead of having to follow through the whole animation sequence.
You can actually declare that this will animate from one point to another,
from an animation point of view, it's much, much simpler.
Having the declarative language is much easier when you're going to do those things.
So I would do both.
And the students will love to do both.
Because they get so far through results.
All right, well, that's true.
Yeah, I saw you slide about the bling.
It is interesting, and it's nice to see quick results.
I just thought about one thing.
You showed pictures from the Qt Conferences,
and there were some talk about this afterwards that there were nothing from Nokia about KDE.
And I noticed your head's a little gnome icon regarding me go.
So you use the gnome tool kit.
And why?
You used empathy, which is GTK technology.
Gnome develops, well, kitty is Qt.
That's right.
Through and through.
And why not only Qt?
Why not concentrate on this technology that you already have?
Since you have an extra where you have a little legacy application,
which people consider to rewrite to Qt,
or having a new user interface.
And a me go project was also inherently coming from the memo project
using GTK.
All right.
What they now do is to change the whole graphical experience to Qt.
That's the default support that it was told at Grand Canary Desktop Summit,
how they want to change.
But we still support GTK.
GTK applications, so we don't remove that support,
the community support of it.
All right.
So from the development point of view,
what we put developer resources on to,
and the future generation application is built and made with Qt.
And it's also much faster to make applications with Qt in general,
compared to any other tool in the market in the free software space.
So that's one of the reasons,
in addition to the, of course, APIs and such,
which is much bigger than any competitors.
All right.
Will you leave X?
You can do that with Qt.
And we have, you know, the sample of that's the most reasonable thing to do
because X uses a lot of memory and more resources.
So it's a lot of things we investigate to,
not only to investigate,
we have four years with Qt.
Qtopia, we have support framework for it.
All right.
Thank you.
You're welcome.
Unfortunately, the situation is more or less the same one year later.
Nokia has released the N9 with me going some countries here in Europe,
as well as the N950.
I believe it's the name of that phone,
something like that,
but not in the rest of the world.
It was a huge success.
The N9 was sold out immediately.
It didn't even reach the shelves most of the time.
But that won't affect Nokia's decision to leave me go behind.
And by the way, regarding that interview,
I know GPL is the GIMP toolkit.
My bad.
Sorry about that.
But still, there is one organization left,
which we haven't talked about yet.
And that is the Geneva Alliance.
They want to create a standardized IVI
and in-vehicle infotainment system.
That is to speak plainly,
an operating system for cars, planes, and such.
They chose me go.
And I have still not heard anything official from them about their stands on the Tizen project,
but many of the companies backing LIMO,
which you remember are now apart together with me go of the Tizen project.
Many of the companies backing LIMO are also part of the Geneva Alliance.
So, some of the names you might recognize are Intel,
ARM, BMW, Jaguar Land Rover, Hyundai, Mitsubishi Electric,
Nokia, Nvidia, Renault, Bosch, Samsung, Texas Instruments,
TomTom, Garmin, GM, IBM, Nissan, Pioneer, and many, many more.
If you want a complete list, you have to visit the Geneva Alliance homepage.
And there was one man at the FSconz conference that knew something about this.
His name was Jeremiah Foster.
His talk had the title, Geneva Alliance,
and how business can adapt FOSS.
Jeremiah Foster is working for the Linux Foundation in the Mego IVI project group.
He develops for Debian and Pearl and has been a software designer for Ericsson.
His many side projects include software design and development, system administration,
automated testing and web development.
I got the chance to ask him about the free and open source software way to develop software for companies
about his thoughts on Microsoft and Ford's IVI system Sync.
And, well, here it is.
There's no proprietary way to compete with open source software.
Ford Sync?
Yeah.
Exactly.
And they're out there selling it now?
Yeah, I know.
I was just at SAE Convergence, which is a huge trade show in Detroit.
And I've seen Ford Sync.
It's a big deal, isn't it?
It's a...
Sure.
It's software.
It runs on cars.
There's some problems.
All right.
And there's a reason why a lot of other companies are looking for open source.
Interesting.
Yeah.
I mean, there's problems with all software.
I mean, Ford's no different from Microsoft's no different from any other company.
But the problems are different.
I mean, the question is, can you scale a desktop operating system down to an embedded operating system?
Sure.
And how much support do you have for that platform?
Because you're not just moving from a desktop system to an embedded system.
You're also moving from one chip architecture to another.
So it's a significant change.
And that's a challenge for anybody.
With Nigo, both the chip makers are already deeply involved.
The Silicon manufacturers are deeply involved to make this a success.
And then you have the licensees of the various technologies at the next level.
So you have a complete stack from bottom to top.
With Ford Sync, it's just one company you're getting.
True.
You're just getting Microsoft.
And Microsoft, you know, that will tell you they have everything you need.
And they very well might.
But I think that, you know, it's healthy with competition and marketplace.
And it'll be very interesting to see what happens going forward.
Who wants a blue screen of Jeff on the call?
Yeah, exactly.
Even if it's just for watching.
That's true.
What else is the object of this technology?
I mean, it's infotainment.
So it's what movies, weather, GPS, navigation, traffic updates.
Traffic updates, you know, downloading any kind of apps.
I mean, car makers want an App Store too.
And you could imagine, for example, toll points.
You could be done through the car or other types of payment.
Or remind customers that this is a one-year service occasion, you know,
saying that your car is going 30,000 miles.
It's time to bring it to the garage.
Or, you know, you've got all those sensors available on the car.
And they're becoming much smarter.
It's easier to mine that information.
So you can say, look, you know, we've detected a higher than normal oil usage.
You may want to look at that.
I mean, instead of just sort of a light coming on that says oil,
you can have very specific and clear diagnostics that may save the car owner a lot of money.
There wasn't talk this spring about some sensors checking the tires,
the pressure and the tire, which someone hacked,
and managed to get into the car system through those sensors in some way.
Aren't there a danger in when it's tying up these sensors into this kind of powerful system?
Anytime, yes.
Yes, there is.
Anytime you have a network, that network can be hacked to gain access to the chip itself.
So yes, there is a significant and clear danger to that.
There are also significant and clear technologies to prevent that kind of hacking.
All right.
But this is a problem that extends not just to cars,
but to all computers that are on the internet.
You know, you're exposed.
And that's just the way it is.
The only way to really guarantee any security is to take your computer off the internet.
And that's just not realistic for a mobile platform.
So there's going to have to be significant work being done and invested.
And there already is.
There's a very clear scope for doing security work around this.
And Linux has a different security model than a lot of other operating systems.
So we do think that there's a great opportunity there.
But yeah, that kind of hacking of tire sensor pressure, et cetera,
that's well known and being carefully looked at.
It's interesting to hear you speak about this,
because on one hand, we have Microsoft and their sync technology.
And they say, we have everything just trust us.
That's right.
But the companies that are behind this me go ivy,
and well, they seem like the same sort of companies, many of them.
But still, this is the free and open source.
That's right.
Mythology and mentality, because what it seems like they have given up.
To somewhat, they shrug and say, well, we can't cover all the bases
because this is a new thing in cars.
We need help.
We need to come together and do it together.
Collaborate to find all the flaws.
We won't find everything, but at least we get help from each other.
Is this the thought behind it?
Oh, definitely.
Definitely, it's a clear thought.
And first and foremost, you want interoperability.
I mean, if you can sell a car with a stereo that adds $3,000 to the sticker price,
that's what you want to do.
If that car is being sold, and then later, the aftermarket stereo is being put in,
you've lost $3,000.
That's a significant amount of money.
We're not talking about actually $120 for an app.
We're talking about $1,000.
So there's a huge impetus to make sure that the customer buys the stereo that comes with the car.
So it has to be good.
And you have to work with other companies.
It has to work with your phone.
So now on the sudden, you have to talk to Nokia, Google, Android, Samsung, etc., etc.
So you need this interoperability.
Now, if you have a closed ecosystem, you're going to have to compete.
So Android's going to say, no, Microsoft, we're not going to tell you how to work with us.
You can go out and find your own with three reverse engineering.
But we're not going to share from the beginning so that it just works when we release it.
We will do that for those who collaborate with us.
And that's what the open and embedded or open handset alliance is all about.
So doing that, these customers get the latest software.
They know the APIs beforehand.
And their software automatically works when the device is released.
Migos gone one step further and saying, no, you can specify what's going to happen on device beforehand.
So this gives interoperability a huge boost.
And Nokia has already said, here, all our Nokia phones will just work.
So Nokia has a billion customers.
That's a lot of fonts.
And that means that a lot of cars that automatically will just work.
Will that work with Microsoft's sync?
Well, I don't know.
It's not released for Microsoft's platform.
It's released for Linux.
Can they port that code?
Yes.
But they're bound to the GPL, which means that they have to give their changes back.
True.
So, you know, and Microsoft has done that.
They have contributed GPL code to the next kernel.
So there's no reason that they wouldn't do that.
But it's a significant challenge.
You said Nokia guarantee that their phones will work.
But that's their smartphones.
Not the feature phones.
Any phone that does terminal mode.
All right.
The ending there is a little abrupt.
But we had to leave that room rather quickly, unfortunately.
If you want to hear more about Migos and its plays in the FOS and business world,
you can listen to me and two of my co-hosts on the all-in-IT radio episode 007.
That link will be in the show notes.
And hopefully you will be able to join me at FOS cons this year.
You will find information about that conference at fsconz.org.
I hope I will be able to give you some form of interviews from that conference.
I will also link to the talks that Knut Irwin and Jeremiah Foster gave
at last year's fsconz in the show notes.
Thank you for your time.
Live long and podcast.
You have been listening to Hacker Public Radio at Hacker Public Radio.
We are a community podcast network that releases shows every weekday and Monday through Friday.
Today's show, like all our shows, was contributed by a HPR listener by yourself.
If you ever consider recording a podcast, then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the Digital Dark Pound and the Infonomicom Computer Club.
HPR is funded by the binary revolution at binref.com.
All binref projects are crowd-responsive by linear pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released under a creative comments,
attribution, share a line, read our own license.
