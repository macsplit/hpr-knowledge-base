Episode: 1429
Title: HPR1429: Debian sources.list
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1429/hpr1429.mp3
Transcribed: 2025-10-18 02:13:07

---

I'll see you in part.
Bye.
Evening, and welcome to another episode of Hacker Public Radio.
My name is Honki Magu, along with me tonight is my friend Kevin Wysherr, Kevin, what's
going on?
Not a lot tonight.
Honki, how are you?
Not bad.
Not bad.
So, tonight what I wanted to do was, I had written this out a while back.
It's a whole explanation of Debian, canoe Linux's sources.list file.
And what I want to do is just kind of sit down and explain everything that's in the sources.list
file.
The many ways you can set up your sources.list file, and the different avenues you can also take with
it, which is, you know, you can add the multimedia, repose to your sources.list file, and adding,
you can try at pinning, which is where you use, you can choose something like your Debian
stable and pull packages down from a Debian testing or a Debian unstable repository and
have them all still work together.
My reason things for doing this is because I had initially Debian install and somehow completely
screwed up my sources.list.
I had my Kev5 connector plugged in wrong and in the middle of the install, it's asking
me where I should choose which country I'm in to be able to choose which repository to
pull from.
I had it was out and I just figured that something was wrong and didn't realize about midway
through that it was the whole reason why I was running into the problem was the Kev5 cable
wasn't fully in right.
It's what I got plugged in right.
I finally got everything working, but I'd wound up choosing a country that wasn't, it
was too far away and I wasn't being able to pull down packages like I wanted to.
So I had to go into my sources.list file and try and edit it to the way it's supposed
to work.
In doing that, I've kind of picked up on the many different ways that the sources.list file
can be used and how you can change it to suits your specific needs.
I could probably sit here and ramble on for a while, but I invited my friend Kevin Wisher
along to kind of help me to make this.
Why don't we start off with Kevin?
What was your been your experience in running devian systems?
Well, mainly at home, I've never really installed stock devian and built up a system from
there.
I've always used the first experience I had with a devian derivative was Linux Met devian
addition, and I used that for quite a long time until they kind of, I don't know, it
took, it went for a long time without getting any updates, and that's when I started
distr-hopping around because it just seemed like it took forever for them to get to update
the repos and get up more current at the current level of the, what is it, devian testing
repos, is that correct?
I believe so, I mean, the most current I believe is the unstable ones, but then I believe
that the, I want to say I heard from somewhere that Linux Met devian addition was pulling
from the testing repos.
Yeah, and they kind of, I think they, they pull in from testing and then they do some,
they must do their own apt pinning of some sort, or they test things before they release
it to, toward you actually get the updates through their normal repos, because if, if you
look at the sources.list from LMDE, it's totally different than what you're about ready
to go over.
So they just kind of pull down and make their own, that sounds, that sounds interesting,
that's the way.
Well, it's supposed to be, you know, it's, I think their explanation is that it's a rolling
testing devian release, but yet they, they, they test all, everything coming in before
they actually release it to the user base through their, through their repos, is the way
it's supposed to work, I believe.
So testing, testing before it becomes LMDE.
Correct.
Yes, they, they do some type of, you know, in-house testing to make sure everything's working
correctly before it breaks anything.
Now, you've never had any experiences with even on like a server machine working with
a, just doc devian.
Yes, at my nine to five job, I, I run two or three devian, just plain vanilla devian
servers.
I'm, in fact, I'll, I'll, I'm at a K, K through 12 school system, we're on Christmas
break right now.
I'm going to actually undo some apt pinning I did on a current, our ticketing server.
And it is stuck right now on the squeeze release, and I'm going to upgrade it to weasy over
the break.
And we had to apt, I actually had to, I looked at the same document that you have in your
notes on about apt pinning, because this was the first time I'd used it, because we had
to hold back the version of the ticketing system, which is called request tracker, and it's
in the devian repose.
So we had to hold back the new version that was being, was in the repose, so that it wouldn't
break anything.
So I'm going to over the break here, I'm going to unpin it, let it do its updates, and then
move all the sources list over to weasy and do a full, just upgrade also.
That sounds interesting.
When we get to the, to the app pinning part of this, I want to, I want to go over that
a little bit more in depth, because I've only had a very limited experience with the
app pinning.
I mean, I'm going to talk about some of the examples that I found online, but I also did some
app pinning myself where I used it, a Debian testing, which I pulled down some unstable
packages for test to kind of flesh things out and get my version of testing where I wanted
to be.
So I'm saying that you were using pinning to go to backpore as opposed to moving forward.
Correct.
My coworker is been guy that's been pretty much in charge of the ticketing system.
Once I got the server up and got it initially installed, he's, he went in to some of the
HTML files and PHP files in there and did some custom modifications to him.
So in order to keep the modifications, he's done from breaking because a new version of
the request tracker software was in, was ready to be installed by a normal app get update.
We pinned that to where it held the current version we were on, and it wouldn't update,
you know, when we didn't, when I did normal, you know, system updates to it.
Very cool.
And it's worked out very well for, I don't know, it's been over, I think that ticketing
system got put in place, maybe two years ago, two and a half, we're on about two and a
half years of using it.
No.
Wow, that's awesome.
All right.
So I think I'm going to jump through the hard part, which is the explanation of what
the sources dot list is.
This is going to be the hard part because it's just kind of, I don't know, very long-winded.
You ready?
Sure.
All right.
First off, where do we find the sources dot list file?
The sources dot list file is, well, first to be able to update or make any changes to
it, you have to have root permission, and it's at slash ETC slash APT, and then sources
dot list.
That one file is, all right, let's go with them.
What is a sources dot list?
Well, it's a key component of the advanced packaging tool, also known as APT.
APT is a software upgrade slash install slash removal program for Debian, GNU, Linux,
distributions.
It is used mostly in the command line.
APT uses the sources dot list file to tell it where to go to get software packages
and their dependency files.
All right.
So a stock sources dot list file that as soon as you make a fresh install of Debian, what
it's supposed to look like is the first line is DEB, space, HTTP, semicolon slash slash
FTP, dot US, dot Debian, dot org slash Debian slash wheezy, space, main, I told you it
was mouthful.
All right.
So the second line in a stock system is Debian, space, HTTP, semicolon slash slash security,
dot Debian, dot org slash space, wheezy, slash updates, space, main.
This is where you would get some of the updates.
And then the last line would be DEB, space, HTTP, semicolon slash slash FTP, dot US, dot
Debian, dot org slash Debian, space, wheezy, dash, updates, space, main.
All right.
Now let's break this file down line by line.
The first section, DEB, space, HTTP, semicolon slash slash FTP, dot US, dot Debian, dot org slash
Debian, slash space, wheezy, space, main.
This is the base repository.
This is basically where you would get all of your applications from.
Next is simple.
You choose how you want the packages to be downloaded, either you want them to be downloaded
by FTP or by HTTP.
It may sound odd, but that first line can read a DEB, space, FTP, semicolon slash slash
and then FTP again, dot US, dot Debian, dot org.
It looks odd, but it is, you are able to do it that way to download either through HTTP
or through FTP.
Then you choose which mirror you wish to download from.
The idea being the closer mirror, the closer the mirror is to you, the faster the connection
speed will be.
If you need help, thinking one, head on over to HTTP, semicolon slash slash www.debian.org slash
mirror slash list, this is a full list of all the Debian mirrors, just all of them.
It will show all the Debian mirrors.
It is a full complete list and it will actually show that there is the FTP and the HTTP.
From here, it is just slash Debian and then after that you choose which version of Debian
you want to use.
As of right now, the current version of stable is weasy and the current version of testing
is called Jesse and Sid is always Sid, Sid is always unstable.
So you can choose either whether you want to follow weasy or Jesse or Sid and basically
when once Jesse becomes stable, then you will be following the stable version of Debian
and actually once Jesse becomes weasy becomes old stable, you can follow that and you can
be using the old stable system or you can just choose to go with stable testing.
That is pretty much the way I have always understood it.
Yeah.
Do you have any idea why Sid is just Sid?
What is the point of having Sid giving at the name Sid and giving at the name unstable?
Why don't they just have unstable and give the names to Jesse?
Why have Sid always just be called Sid?
I don't know.
Of course, their names are based off of the animated movie Toy Story.
So I think it has to do with Sid being the unstable character in the movie.
So I think that is why they keep it at Sid.
That is just my guess.
Man, I think I have to watch those movies again then.
Alright, so once you choose that which version of Debian you want to be following, you can
then choose, you can specify which archive you want to be choosing from.
Like you can still have the running on the main archive and then choose to do main and
contribue archive and then the main contribue and non-free archive.
Let me try to do my best to explain that a little bit better.
So the main archive is comprised of software that doesn't require packages outside of
the main archive and all of the packages comply with the DFSG, the Debian Free Software
Guidelines.
What are the Debian Free Software Guidelines you ask?
Well, number one, the first, the software must be free redistribution software.
This means the software must not restrict someone from selling or giving away the software.
I think there's about 10 rules that are the rules of the DFSG, and that was rule number
one.
Rule number two, the software must include the source code, also allow distribution in
both source code and compiled forms.
The third, the software must allow for modification and then redistribution under the same license
as the original software.
The fourth is the integrity of the author's source code.
This means the license may restrict source code from being distributed in modified form
only if the license allows the distribution of patch files with the source code for the
purpose of modifying the program at build time.
The license must explicitly permit redistribution of software built from modified source code.
The license may require derived works to carry a different name or version number from
the original software.
This is a compromise that Debian project encourages all authors to not restrict any files, source
or binary from being modified, holy crap I hate for.
Number five, is the fifth is the software must not discriminate against any persons or
groups of persons.
Six, no discrimination against any fields of endeavors.
In other words, the software should be able to be used by anyone for any reason.
Seventh is distribution of license, which means that no new license must be issued to
a new user.
One license is good for all.
Eighth, the license must not be specific to Debian.
It needs to be licensed so that everyone, anyone can take the software and use it wherever
they like.
Nine of software must not in any way restrict other software that is distributed along with
that software in its license.
Ten, finally the license should be all under the GPL, BSD, artistic license or any license
that's considered free.
That's mouthful.
So in addition to having to follow all the guidelines established in the DFSG, the software
in the main archive must not require or recommend packages outside of the main archive and
not be so buggy that Debian refuses to support them, which happens to be my favorite
line and all that, because it's repeated in every other version, because then you move
on to now you can also add the Contribar archive to your sources.list.
The Contribar archive is comprised of supplemental packages that are made to be used with the
Debian distribution, but you software from outside of the distribution.
These packages must still comply with DFSG and also be not so buggy that Debian refuses
to support them.
The non-free archive contains packages intended to work with Debian, but do not follow the DFSG
and may have other problems that may make the distribution problematic.
Still the packages cannot be so buggy that Debian refuses to support them.
Woo!
Now these are all added to the end of your lines and your sources.list.
So if we go back to the matter of which version you're using, that first line will always
be Debspace, HTTP, semicolon slash slash, ftp.us.debian.org slash Debian, and then you would
make your decision of which version of Debian you want to choose.
Let's say you want to just stay with Weezy, you go with Weezy, and then you would choose
which archive you want to choose from, whether it's the main contrib, or the non-free.
Even if you want to be able to use them, you can't just put it in like non-free and expect
it to be able to get all of them.
You'd have to just put down, it'd have to read slash Weezy and then Space Main and then
Space Contrib, and then Space Non-Free.
It's also fair to point out that when using the Weezy or Stable, you're going to be using
all three lines, the ftp.us.debian.org and then slash Debian, which is just your normal
package repository, and then the next line, which is your slash security.debian.org, which
is only used by testing in Jesse and Weezy and Stable.
In the last line, which is the ftp.us.debian.org, which is for, it's been the next time being Weezy
slash updates, and then it would either be Weezy's dash updates, or it would be Stable
dash updates, only the Stable or, in this case, Weezy would use that last line, which
is for updates.
Yeah, the second line being for security updates and testing can use it as well.
If you're using unstable or said, you would just put in that first line and then have it
as ftp.us.debian.org slash Debian and then, let's say, unstable and then main space,
trip, space, non-dash free.
I hope I explained that thoroughly enough.
What do you think?
I believe you've covered it very well.
It's a mouthful.
I don't know, after hearing all that, do you think you at least understand the point
I'm trying to get across as to what it's supposed to look like?
Yes, and I believe you can also find some examples on the interwebs also for a proper formatting
of your sources file.
Right.
Yeah, and I actually have several in my show notes.
I'll have a couple of places you can go to find out where I got all this information,
so it'll give the examples as best as I can.
I don't know.
Do you have any questions?
Just from my ramblings, do you have any questions?
It's anything I can explain a little bit further.
I know it was kind of bounced around a little bit there, but I think I covered everything
fully in the very base of a sources.list file.
Yes, and is this system something that you're currently running?
Yeah, I'm actually running both a, on my laptop, I'm running a version of Unstable, and
the machine with a desktop that I'm recording on right now is a version of testing that
I have done some app pinning and set it up, so it's running testing and pulling down
and also being able to pull some files down from Unstable.
Which would be, give us an example of something that you found that you needed to pull in
some newer packages with the Unstable.
Well, my whole reasoning for doing this, well, let me first explain.
What I did was I first installed it on my laptop and I set it up for Debian Unstable,
and I had started setting things up the way I wanted it to be set up.
I think it'd be fair to point out right now that you can also, just real quickly, before
we get into the whole app pinning thing, one thing that you can add to your sources.list
file is the Debian multimedia codexes and files and stuff, and the only way you can do
that because it's not part of Debian is you have to add your own lines to the sources.list
file.
The best way to go is just go to www.dev-multimedia.org.
If you go all the way down to the end of that main page, it'll give you all of the proper
lists that you should put into your sources.list file.
I can scroll down all the way down to the bottom and find where it says for SID slash unstable
for your I386, your just a regular systems, and if you go further down, it'll tell you
exactly how to put it in.
It'll say Deb, Space, HTTP, semicolon slash slash, then www.dev-multimedia.org, and then
Space SID, Space Mane, Space Non-Dash Free, and then you put this into your sources.list
file, do an app-gip update, and that updates what your app repository list.
Once you do that, if you read at the very top, it says the first thing you need to do is
do download and install a program called the Deb, that multimedia, dash key ring.
So you just do an app-gip install, Deb-multimedia, dash key ring, and then that kind of adds this
repository into your repository list.
Well, at least it gets it working right, and then you can go and you can download all
of your different multimedia codexes so you can play like DVDs and I believe MP3s as
well.
All right.
So, going back to my other point, which was the app's pinning.
Yeah, so I installed SID onto this, or unstable onto my laptop, and I was getting it all
set up.
I put my multimedia, put the multimedia repos in there, got it all set up, downloaded, mumbled,
gimp, and everything else that I normally use, and I went to install a program called OpenShot,
which is a video editing program, and so when I went to go install it, it said that it
basically OpenShot was available in the repos, but some of the files that were meant to
work with it weren't available in unstable, something along those lines.
And it was very confusing, but after doing some searching, I found that it was available
on testing.
So I'm like, all right, what I'm going to do is I'm going to set this desktop up with
Debbie and testing, and I'm going to have it with OpenShot, I'm going to have it with
Mumble, I'm going to have it with, I like to run E17 Enlightenment as my desktop manager,
window manager, however you want to call it, and I was going to install those as well.
And so when I installed testing, I installed OpenShot, it installed without any problem,
and then I went to install E17, and E17 was unavailable.
I went, huh, okay, maybe I just use XFCE then.
So then I went and I tried to install Mumble, and lo and behold, Mumble, it's available
in stable, it's available in unstable, not available in testing, which absolutely floored
me.
I thought, Mumble, this thing that we're recording on was, would be available for just
about everything at this point, but that kind of surprises me.
Yeah, I mean, I can kind of understand E17 because you know, a lot of people don't necessarily
trust E17 because it hasn't had a good solid release in a while, but to not have Mumble
on there, that's just freaking floored me.
So I figured what I had to do was I kind of played around with the idea before of doing
app pinning, but I've never actually like fully tried it on a stock deviant system.
I tried it before on a DSL damn small Linux, and that was just, that was horrible, but
I kind of got from trying it on that, I kind of get the basis of how to use app pinning.
So I was kind of able to know where to go and define all the information I needed to set
up my system that way.
So what app pinning is, if I haven't explained it already, is you have your system in my
case, the testing.
So I have it set up with, you know, the regular testing repos, the HTTP, FTP, that us.debian.org
slash devian, and then slash testing, space main, space contribus, space on dash free, and
then the the next line being the HTTP, somebody calling slash slash security dot devian.org slash
testing slash updates main space contribus, space on dash free.
And then what I did was I also added in the devian unstable line in there as well for the,
it's the same as the, is the very first line.
So it's the dev space HTTP, semicolon slash slash FTP dot us dot devian dot org slash devian
slash unstable space main space contribus, space on dash free.
And after I did that, I, you have to set up a file called preferences.
And what you add into that file is kind of a way.
So you can choose which file, kind of give it a priority of which file you want to download.
So the first line of my preferences is, it goes, you will, when you do this, you want
to set it up, get it all set up.
And then if there's one available, you edit your preferences file.
If not, you just kind of create a file called preferences in your ETC slash app, FET slash
and then create a file called preferences.
And then the first line being just package semicolon space and then star.
And then next line pin semicolon space release space a equals testing.
And then next line being pin dash priority semicolon space 700.
And then go down to the next line and then give it a little bit of space.
So the next line package semicolon space star next line pin semicolon space release space
a equals unstable next line pin dash priority semicolon space 650.
What this does basically is it gives proper priority to which file.
So automatically if you just do an app get install of that file, it'll automatically
just go to the testing unless you want to specify which file you want to, which repository
you want to download from.
So let's say you have this all, I have this all set up and I want to install for a sake
of everyone.
Let's say mumble.
So I go pseudo app get app dash get install space mumble slash unstable.
So that way it'll pull the all the mumble files from the unstable.
But what are you doing it this way?
This will install the unstable version of the packages and try to meet any dependencies
from the testing repository.
This may not may not always work.
So if if it doesn't work, which you need to do is you want to try app dash get space dash
t unstable and space install and then your package name, which would be mumble.
What this does is it will install the unstable version of the package and try to meet any
its dependencies from the unstable repository.
This might this might improve better results if the first one doesn't work.
You might want to stay with the first one, as much as you can because that way you're
keeping a lot of the original testing like in my case, the testing repository's files
as opposed to doing a lot of mixing and matching that can cause some confusion if you will.
What a lot of other people like to do is set up pretty much the exact same thing, but
they'll they'll add all three, they'll set up their system as a stable.
So they'll have all of the those those stable lines that I was talking about the the updates
and the security updates line and then they would do they would put in the the two lines
for the testing and then they would put in the single line for the unstable and then they
would set up their own package priority with the preferences file and then set up their
own package priorities with everything I was talking about before where you would set
it up.
So your pin priority would say let's say what for stable would be 700 or testing would
be like 650 and then for unstable would be 600.
So kind of the highest priority for packages that you're trying to pull down would be the
stable and then the second highest being testing and then the second only if that being
your unstable.
I don't know it's it seemed to everything worked fine for me because obviously I'm running
on mumble running mumble right now and I was able to get enlightenment installed on this
as well.
So it's it seems to work.
You were saying before that you had you were using app pinning as back porting.
Now how did do you know how the the preferences file is set up for you?
No, I'm not quite sure it's been so long since I've done it.
If I had to guess I would say it would be somewhat similar where your system would just
be you would just kind of set up the priorities so that either that or you might be able to
instead of setting up as package package semicolon space star set it up as that specific
package and then have it pulling from you said it was from squeeze so set it up as just
package semicolon space whatever that program was and then pin release a equals squeeze
and then pin priority and then set its priority that at least makes sense from what I'm
looking at.
I don't know what you think.
Yeah, you'd want to give higher preference to the repositories before what you're currently
on.
Right.
Huh.
I got to look into that at some point.
Do you feel like this was worth all the effort to do or do you think just getting a Debian
derivative is that's based on the repositories that have, you know, the, I know there's Debian
derivatives that are based off of a said and you can get ones that are specifically tailored
for testing and then there's ones that are based off the stable branch to where you know
the normal person wouldn't have to go through all this is is this worth to in your in your
mind all the all the efforts that you've poured into it.
I think now that I have all this information, I'm going to say yes because I can pretty
much go into I can pretty much just make a straight Debian install and I feel like I have
a much better knowledge and a much better control of where things are coming from and what
things are doing it and like I said, I've I've stuck with what's it on both these machines
for some time now and I've been nothing but happy.
I mean, I pretty much just install the programs I need and I get just to be able to get everything
running the way I want it to be running and then just kind of go from there, you know,
and I was able to this I was able to set up this machine and have it running the way I
wanted it to be running and I did it, it's I guess I don't know, maybe it's just control
issue, you know, I know I have control over where I'm pulling things from and what I'm
doing and how it's set up and with the app pinning, I can pull exactly where I want
it to be pulling from even if it's not like the unstable repositories, I know I can like
the whole idea we're talking about backporting, I wanted to use OpenShot with this version
of Unstable, maybe I'm going to sit down and have to look into how to backport into do
exact same thing as this but kind of flip some stuff around and get it so I can run
download OpenShot from the testing repository and run it on my unstable system.
So yeah, I mean could I probably go find another system and just run it that way?
Yeah, but I like I've run other systems and they've kind of I don't remember which one it was
ran recently, it was a Debian multimedia distro that had a whole lot of of their own, it was a
kind of older, I don't think it had been updated too recently but they had done their own little
pinning and stuff like that and some of their stuff was a little bit older and some of it worked
the way I wanted to and some of it didn't work the way I wanted it to and looking at the way
they had it all set up was just I mean they had all sorts of things odd things pinned like
they had pan I want to say handbrake was pinned to something and I wanted to update that and
update some other programs in there and if they had it all pinned and messed up and I'd put in
there and try to fix it and change things around and wound up just crashing the whole
other system yet I use stock system and like I said I put in my own multimedia repos and I
was able to kind of bounce things around to which Debian repository I chose from and I got
everything running and just find the way I wanted to I mean I don't have a GUI for handbrake but
I've been running it in the command line and it's been working beautiful for me so I don't know
yes to answer your question very quickly and simply and precise yes I feel a lot better for doing
it and I feel a lot better about the systems I'm running have you experienced any system
breakages by what modifications you've done not yet but I'm kind of concerned about that I'm not
sure I heard somewhere that I need to unpin things before I do a updates on this testing box
and be honest I haven't done an update in a little while because it kind of goes up I do some DVD
ripping with it I got two internal and one external DVD ROM drives that I've been using to
the rip stuff so I'll just kind of set it up and I'll set up a command line thing where I just rip
all three from all three drives and then just kind of walk away so other than that I mean I haven't
been doing too much with it I just kind of yeah that and mumble here so I don't I've been updating
doing any updates on the machine for any reason but I heard it's supposed to if there's a
possibility that if you have the unpin it or it'll break the it'll might break the system but like
I said I haven't tried it with the version the machine that you guys were updating you said you
were back for pinning one program did it when you guys just did regular updates so that you know
if that did anything to the system no just doing normal updates I've not experienced any any
breakage yet there's kind of kind of shine away from doing the desktop grade well I have I
you know since it's a you know a production system and it's our ticketing system I don't
do them daily or weekly even I'll check it you know every few months and if it I'll look at the
stuff it's gonna be upgraded and if it doesn't look like it's gonna do any harm and I'll go ahead and
do it and I've so far I've not experienced any any you know major system breakage yet oh very nice
all right that that may change this week this next week though because I'm gonna say I'm gonna
do a full move from squeeze to wheezy on it well keep me informed I'd like to know how that one
goes yeah luckily it's a it's a VMware virtual machine so I can take a snapshot of it and it's
current state before I do anything and then I know the key folder directories that contain the
uh system files that are you know the best it's basically a web GUI for this for my SQL back you know
back in for this ticketing system and I know where the files are that some copy those off also
make a system you know do a VMware snapshot of it before doing anything so I can always
if something does go horribly wrong I can fall back to where we were
now do you have a set up so you can take a snapshot of it and then open up that snapshot in a
different area and then test out whether it's gonna break or not and then you'll know what you
uh what to do or what not to do when you update the other one um I don't think I'm sure you
probably can I don't know how to do that at the moment I may be learning about that next week
at the same time but uh I'm just gonna go forward I can say I'm gonna make a snapshot of it back up
and then copy off the key folders where these files for this program are located and just you know
change the sources list file and let her eat and see what happens take a snapshot break it
and then load it reload it back up right that sounds like fun though I'm kind of looking forward to
I would be too all right so what do we think is there anything else we can uh we can talk about
or we beat in this horse to death I think you've covered everything that you know everybody needs to know
about uh doing a custom Debian install I hope so I hope it wasn't just uh long-winded manness I hope I
can uh help some people out and that uh anybody who wants to run a Debian system or even runs a
Debian derivative might have a little bit more of an idea of what they're looking at if they want to
try to customize their own system um you know one thing people can do is they want to try this out
on their own just do it on a VM and then you can play around all your all you want and see how it
goes absolutely nothing but a good time on a VM all right I guess we're gonna call it a night so
for uh great PR my name is honky magoo and um with me is Kevin Wischer good night everybody bye bye
you have been listening to Hacker Public Radio or Hacker Public Radio does our
we are a community podcast network that releases shows every weekday on day through Friday
today's show like all our shows was contributed by a HBR listener like yourself
if you ever consider recording a podcast then visit our website to find out how easy it really is
Hacker Public Radio was founded by the digital dog pound and the infonomicum computer club
HBR is funded by the binary revolution at binref.com all binref projects are proudly sponsored by
linear pages from shared hosting to custom private clouds go to lunar pages.com for all your hosting
needs unless otherwise stasis today's show is released under a creative commons attribution share
and life he does our own license
