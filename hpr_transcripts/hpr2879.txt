Episode: 2879
Title: HPR2879: Describing how I listen to podcasts PART 1
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr2879/hpr2879.mp3
Transcribed: 2025-10-24 12:40:59

---

This is HPR Episode 2,879 entitled, describing how I listen to Podcast Part 1, it is hosted
by MrX, and in about 31 minutes long, and carrying an exquisite flag.
The summary is, this episode hardly covers the console or the OPLAYER mod.
This episode of HPR is brought to you by archive.org.
Support universal access to all knowledge, by heading over to archive.org, forward slash
Donate.
Hello and welcome Hacker Public Radio News. My name is MrX, and welcome to this podcast.
I'd like to start by thanking the people at HPR for making this service available to us all.
It's really an invaluable service. They go to a great deal of effort to streamline the service
and make it as easy as possible to use. Just pick up a microphone, record something, and send it in.
You must have something interesting to say, I'm sure. It's really quite easy. If I can do it,
anyone can. So this is going to be a series about how I consume podcasts, basically.
I recorded a whole pile of stuff before this, and I realised that I'd previously covered a lot of it
in my old home server episode. That's HPR 2112, so you can always look at that back to
because it always basically started using, I started with podcasts using a Windows XP machine,
and then transferred to my home server and running mock music on the command line player.
I covered that briefly. Also, at that time, tended to use an MP3 player to listen to shows.
This was a jelly bean type MP3 player with a rubbery outer casing, and it was a bit awkward to
navigate, and the screen was very small. I've still got it, I think, but I think the rubber coating
started to come off and got a bit sticky, so I've stopped using that, and I used the wonderful
Sansa Clip, which I'm sure you'll know all about. It's a very popular player, but getting
hard to come by these days. They're charging silly money for them. If you can still get a new one,
I'm not even sure if you can. Second hand, there'd be a quick spence of two, but that's by the buy.
My home server now has really been replaced by a Raspberry Pi, but the server still used to
download the podcast, but that's all it's used for. My Raspberry Pi runs all the time and is used
to play the podcast back, and the audio player I chose was the one that I use on the server,
and I basically put it on every machine. It's mock-p music on the command line player.
So I recorded a wee bit about that, to give a bit more detailed overview of mock-p, so I'll
I'll join this onto the end of this wee introduction, and hopefully it all makes sense and
doesn't all bore you too much. So without any further ado, here's me earlier on.
Okay, so I've recorded this wee bit out of sync, so I don't know how this will fit into the whole show,
but I'll start to talk about the the music player that I use. It's called mock,
and it's one of these commands, one of these sort of programs that that's installed
about first on every machine I've got in the house. mock, it stands for music on the command line,
I think. If you got the man page up here in the description, says mock is a console audio player
with a single encursus interface, so with a simple encursus interface. It supports og, wolf, wolf,
it supports og, wave, MP3, and other formats. Just run mock-p, go to some directory using the menu,
and press enter to start playing the file. The program will automatically play the rest of the file,
rest of the files in the directory. Go to the terrible job of reading that, didn't I? Yeah,
it's a bit confusing, it's called, you know, the command is mock-p, but to actually install it,
the package name is mock, and we'll see. So, you know, it's a debing type distribution,
to do that, dash, get, install, mock, you know, and that installs the audio player.
As far as I can say, with no options and no file arguments, the program begins in the current
directory or in music directory. If the start in music, their option is set in the configuration file,
I guess there's the configuration file, obviously, you can see all sorts of plethora of things,
and it's quite, it's, last of our memory, it's, it's, it's, well commented in, easy to understand,
if you give a directory on the command line, mock will try to go there. If a playlist is given,
then it is loaded. With multiple files, playlists or directories, everything will be added to the
playlist recursively, including the current, including the contents of any playlist given.
Note that relative paths and playlists are resolved with respect to the directory of the
playlist or of the simlink being used to reference it. And you can, you can actually have multiple
playlists set up. The way a mock works is that I want to understand it to work, is there's a server
back end and a front end. And so when you run a few type mock and hit a turn, and you start,
you select a file, start playing it. If you do, if you type Q to quit, the front end
disappears, you get back to the command line, but the, you know, the file can then
use to play because there's a mock server running in the background. And there's a command, I think
it might be dash P. I'll just let me just check if it is dash P. Yeah, so here we go. So there's
you can have multiple playlists set up using the dash M command. So for example,
there's a default one that just works when you type mock P. But if you run it, the command line
you say mock P dash M and give a different directory. There's different default directory.
It's almost like you have two instances of mock running and you can have a playlist set up each.
So for example, I have the default directory. It was how I first started using mock and I use that
to play podcasts and I've got to mock P dash M and then I've got a folder for audio books and I've
got a playlist set up for that. And they're both sitting sitting loaded at the same time and I can
access either one either by using the dash M command and a directory or not and I can do a toggle
between them and control them completely independently. So that's that's a really nice feature.
There's so much to mock P. I really don't know where to begin. I'm
just going to run mock P just now. It loads up and you, by default, if you're not doing it in
clever, you just run it for the first time. You end up with a split panel. It's a bit like
midnight commander, same kind of colours as well. It encurses screen and on the left hand side you've
got the directory listing and currently mine is my home directory and I can pick a directory and
find a file, hit the tournament starts playing. On the right hand side there's a window for a
title called playlist and there's nothing in it because there's no playlist loaded as such.
And if you start playing something, I don't think the playlist actually looks like a ticker.
Something here.
There you go, nothing comes up on the playlist. So that's fine. But if you want to add things to
the playlist, you just either highlight whether up and down at cursor keys, the directory or the file
you want and you just hit the A key and that then adds items to the playlist like where you can
delete things by hitting the D key. You tap between the two panels and I think I tweaked the
configuration for a slightly so that I can have multiple layouts. So the default layout has the
file directory on one side and the playlist on the other. If I type the L key, it's all driven
by the keyboard, great. Never need to touch a mouse, it's fantastic. Anyway, you type the L key
and it's now jumping to a full sized in your terminal, a full sized window that just shows you
files and directories, which was originally in the left hand side. I type L again, it jumps back
to the split panel. Now actually I think I've tweaked mine so that it goes, this is just a default
installation I don't think about it. But in most of my machines I have it set up so that I type L
and first of all it goes to the file directory, I type L a second time and it jumps to a full screen
playlist and that's how it normally sits on the playlist window and when I open up against members
where I was. So for example, if I hit the Q command to quit that, it just quits and the
the terminal window comes back with a flashing cursor and whatnot. But the mock server is still running
and if I was playing something it would continue to play and so if I type mock be again, the window
loads and remembers the layout, I think, is it? No, it doesn't, always forgets the layout, that's right.
But I tend to access it via a screen session so if you read attached to the screen session
to it remembers it's this poop sort of thing. So yeah, it sounds very, very, very low resources,
it uses very little resources, really powerful. And of course you've got extensive command
or thing, I mean some of the commands I use, I've got I use dash, g and capital G toggle so that
can toggle between play and pause, you can script all this obviously. Dash R for previous,
a small dash R, small dash F for next, a dash, a small dash I for info.
Let me see what sort of some of the interesting things you've got. You've got a
a dash S command that runs only the server and exits so you could just come up bring up the server
without actually showing the front end. I've never used that but you could do it.
Well here we go. That thing I was talking about about the dash M to have multiple playlists,
I'm going to read the comment it says is capital dash M uses a specified mock directory instead of
the default. This also causes the configuration file from that directory to be used.
This can also be specified in the configuration file using the mock directory option.
If you've never, I think if you run it for the first time, it generates all these things.
So if you create a directory like I've got a directory from my audio books,
if I use a dash M option and then to the path where that audio books are, then it creates a folder
in the dot mock I think from what I remember. I've got a folder in there called
audio books and if I go into that, yeah, mock generates a number of files. I've got a cache,
I've got a config, I've got EQ sets for equalization so you can set up files for,
as I can graphically close up which you can run with presets and that file I've added that.
Last directory in my key maps, I've got a key map that tweaked some of the keyboard bindings
and whatnot. A playlist dot M3U. So if you add files to your playlist, that file gets generated
and files get added to it, you don't need to create it, it does it itself. Obviously you can
use a playlist from something else because these dot M3Us are standard and it's recognized
obviously so you could use a playlist from another bit of software I guess.
So yeah, that's inside audio books, but if I come out of that inside mock, then the same
some more sort of files are in the actual base mock directory. So it allows you to have multiple
multiple playlists so it's quite handy. This has been all over the place I haven't
thought this should have a, let's say, on the cuff. So apparently the A command is a dash
of pain further. Well actually you can give a command dash A and then a directory and that will
append recursively all the files in that directory to a playlist. I've got a handy to add
the whole pile of files and it doesn't start the interface. That's the thing you can have
like multiple interfaces running so you could have a screen session running on one computer
or it doesn't need to be a screen session you could just be a normal terminal and you can type
mock p and then you could open another terminal, type mock p again and that will it will appear and
you can determine whether the two are synchronized or not. I think maybe by default they are.
So if you move the cursor in one window it moves in the other and likewise if you're running mock
p on multiple, you know, I get a multiple machines logged into a server for example, you know,
you have your laptop and a whole host of different things, all linked into a central server and you
know if you move from room to room and you move the cursor then all the windows update with that
to information. So it's a very convenient way of controlling the music player sort of thing here.
From multiple screens you can access that same player and multiple front ends sort of thing.
So it's very flexible. Dash see, include the playlist, dash p or dash dash play,
dash f or dash dash next, dash r or dash dash previous, dash s or dash dash stop, dash x or dash
dash exit. That brings down to the server that the backend sort of thing, dash capital p I think
and dash dash pose, if it poses it obviously, dash u, capital dash u I should say, dash dash
unpause, dash g, capital g or dash dash toggle pose that allows you to toggle between playing pose.
I have a funny feeling this, you know, I haven't really said this but I think what could be
is possibly an active development, I think. I seem to remember when I first stumbled across
a mock b, you know, it was a bit quiet there wasn't much going on but I think other people have
gotten involved now and I think it's a bit more active development on it. I think I'm on version 2.5
I think there's a latest one I've got here. I think I was going to say there's an option here
to use a call if a dash k seek forward position or backward negative by n seconds in the file
currently being played. So I've a funny feeling that wasn't originally, that option wasn't originally
there but it is now so yeah there's there's active development going on, dash t, you can theme it
give a theme file and I mean it's just like changing the, it's named curses window so there's
only a lot of things you can do color wise but yeah you could make it jet black and white if you
if you like it or green and black if you like that, that's that kind of color, you like the
that sort of thing, dash c or dash dash config that you can specify where the configuration file is
if you want to put it somewhere else apart as opposed to the default location. The default location
I didn't know I made it very clear but mock stores its files by default in the dot mock directory
and the dot mock directory is stored in your home directory so yeah um what else
well yes I dash y or dash dash sync this copy this this copy of the interface will synchronise
its playlist with other clients. This option is called sync playlist in the configuration file
I'm sure I didn't use that option and yet they do all synchronise so maybe that's the default
them up that's what happens in default because there's another one option here is dash n or
dash dash no sync this copy of the interface will not synchronise its playlist with other clients
see above dash a or dash dash asky use asky characters to draw lines this helps on some terminals
I see if you've got a a cake old terminal something like that that allow it to to work properly
well funny feeling I had an old versal annex or something I didn't have to use that at one point
so yeah kind of handy dash i dash dash info prince information about the file currently being played
dash q dash dash format prince information about the file currently being played using a format string
replace string sequences with the actual format so you've got the um so if I again I think that's a
new uh a new uh option I think originally you just did dash i and it just blurted out everything
but if you wanted a specific piece of information now you can do dash capital q at space I think
say per say the percent state and then it'll it'll return what state mocks in another words
as it playing as it paused what's it doing you know or percent file and it returns the the
file name being played so that that that's quite neat um it's also possible to use variables
from the format string configuration file option uh dash e or dash dash recursively
alias of dash a for backward compatibility does that mean dash e was originally what was used
I'm not quite sure dash a sure dash dash help uh that's kind of obvious prince list of options
with short descriptions and exits dash capital v or dash dash version lack of j versions
um uh dash v lower v and you can and then with a number plus or minus and that adjusts the
mixer volume level that's quite quite handy uh dash j lower ks j our dash dash jump jump to some
position in the current file uh n is a number of seconds when followed by an s or percentage of
total file time when followed by percent example dash j ten s comma dash j 50 percent examples
alright very good so that's yeah that's good files um so you've got files stored in the dot mock
directory um uh mock directory for the configuration file socket the p i d file and other data
uh uh that's near home directory dot mock uh for slash config configuration file for mock this
format is very simple to uh to see how to use it look at the example configuration file config dot
example distributed with the program the example file fully describes all the configuration
options and so is a useful reference uh when using the dash o option as this file can specify
commands which invoke other applications mock will refuse to start if it is not owned by either
root or the current user or if it is written by anyone other than its owner um home directory dot
mock for slash themes that's where you store your themes obviously uh slash user slash share
slash mock decoder plugins default directories for audio decoder plugins um so it must be plugins
available for our presume uh yeah i think that's probably about it um just see some of the
um some of the keyboard uh commands i use now the i'm not sure i think i want to change that
change a little but i didn't go daft with it with the with the changes i did but let's just see if i can
see the default tim keeping the exact if i can find it so yes so if you're in if you've got mock
be uh loaded um you can if you hold the shift key down and whether the on my keyboard the
the question mark until the shift key down so i'll do that i'm got the question mark
to activate and um there's quite a few commands um
um i'm not going to go through them all but um uh q that's at lowcase q detach mock from server
such as closes down the program enter starts playing at the this file or goes to this directory
uh down and up page up and down home and end or these are kind of obvious uh
uh oh capital q quits so that presumably quits the back end and the front end and stops playing
everything uh s stops playing everything uh n play next file b previous file p or space for pause
um i use that these commands quite a bit uh tap the tap between the two windows as i'm only picking
the ones that i tend to use i'm not going to go through them all because there's far too many
um else switch between layout so that's quite handy does i say switch between um file list or play list
or whatever um i say it might just set up so i've got it as i say before the L switch between
the file uh list i'm on one side in the playlist on the other or if you have L again it goes to
full screen playlist or L a third time it goes to full screen um playlist and i did to leave
it on the playlist as i said um a add a file capital a add a directory recursively um the
greater than sign and less and sign increases and decreases the volume that's quite handy um
um by 1% or command dot this by 5% uh left and right uh key seeks forward and back um i think i
tweaked that a little bit so that i can i've got two levels of seek i've got a slow seek and a fast
seek but that's probably more detail i need to want to know um what else is uh what else is uh
well and there's the square brackets opening closed square brackets uh square brackets i
uh seek forward by five seconds are you actually you can jump faster um if you want uh
uh
at the side okay what else do i tend to use um
you can actually execute commands uh that's going to be quite powerful uh with function keys uh
i think i did did the what i played about with that wee bit but i can't remember i don't
use it these days i think i had the odd command that i ran um
what uh the um the f command i missed that uh f command says toggle toggles reading tag options
so that's very handy so you you're you're in the in either the playlist or the directory list
and if you hit f it'll by default it i think it it reads id3 tag you say oh what the exact
file name so you hit f f key um and it toggles the um uh reading the tag it goes
and it says it goes to reading the file i think if the f command is going to file view but it's
no really it's it's switching between reading the tags and not reading the tags of the mp3 file so
that's very handy just to get you know you're you're playing a track so what's that actually calls
what's what's the file name just type hit f and that shows you the file hit f again and it goes
back to the what the actual id3 tag is and that that's that's quite handy um yeah so so uh so uh
so mockpeats fantastic little audio player i highly recommend it and i i don't actually
i i i think i i first i used to the um interface quite a lot but actually i run it through um
through scripts and stuff which i'll cover i may already have covered or cover after this
when i talk about the project that i uh pulled together um so yes this is completely
disjointed and all over the place so uh i must apologise anyway i hope you enjoyed this and uh i
i recommend you give a mokka a go it's it's a as a smashing we uh a command line audio player and um
a lovely piece of this software really nice um it's my favourite audio player on Linux
by far it's just a joy to use well it's going to say about it just use it
okay i hope you enjoyed this didn't find it too boring um if you want to contact me i can be
contacted contacted at mrx at hpr at googlemail.com that's mrxATHPR the at symbol googlemail.com so until next
time thank you and good Bye. Listen listen, listen listen to me. Listen to me, listen to me. Listen to me. Listen to me. Listen careful. Listen careful with this
In this situation, it is your duty to memorize
You've been listening to HECCA Public Radio at HECCA Public Radio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
HECCA Public Radio was founded by the Digital Dove Pound and the Infonomicom Computer Club,
and is part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment on the website or record a follow-up episode yourself.
Unless otherwise status, today's show is released on the creative comments, attribution, share a light, 3.0 license.
www.HECCA Public Radio
