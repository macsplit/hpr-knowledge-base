Episode: 3022
Title: HPR3022: FOSDEM 2020 Stand Interviews
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3022/hpr3022.mp3
Transcribed: 2025-10-24 15:24:15

---

This is Hacker Public Radio Episode 3,022 for Tuesday 3 March 2020.
Today's show is entitled FOSDEM 2020 Stand Interviews,
and as part of the series Interviews, it is hosted by Ken Farloon,
and is about 93 minutes long, and carries a clean flag. The summer is
interviews with some of the stands at FOSDEM 2020.
This episode of HPR is brought to you by An Honest Host.com,
get 15% discount on all shared hosting with the offer code
HPR15, that's HPR15.
Better web hosting that's Honest and Fair at An Honest Host.com.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
And I'm at the Coder Dojo Belgium Group and I'm talking to.
Valerie Jeanon.
Hi, and tell me what is Coder Dojo for those who don't know.
Coder Dojo is a worldwide organization that sets up a club for kids to learn how to program.
It's all free and it's led by volunteers that come once a month for three hours and do workshop with the kids.
In our own company, we are doing this as well, which is really cool.
So I have a question.
I have, say, hypothetically three children who none of them want to do coding.
So how do I get them interested in coding?
Well, if they really don't want to, then you should not force them because you're going to do worse damage than anything.
But if they're a bit enthusiastic, they could come over with our coaches.
They'll learn how to make their own program, own game or animated stories or whatever.
And it's usually a lot of fun.
But some kids don't like it and that's okay.
You have to just try it once.
As I said to them sooner or later, you will be sitting in front of a laptop, so yeah.
So if you have a, so how does one go about getting a Coder Dojo into your school or into your business?
How does that happen?
Okay, we're usually, we already have Dojos in Belgium.
We have about 140 Dojos running.
But in the world, there's about more than a thousand Dojos running.
And you just have to check either on Coder Dojo Belgium or CoderDojo.com to see if there's a Dojo in your neighborhood.
And then you can go over there.
If there's none, you could start one.
It's really not complicated.
In Belgium, just contact us and we'll help you with all the steps.
Finding a place where you can have a Dojo and finding volunteers that help you out.
And then we help you with the material and everything and the logistics.
And then you're going.
Okay, so what described to me a typical day that I walk in with my kids and then what happens?
Usually it's weekends.
It's Saturday on Sundays.
But we have some Dojos running in the Wednesday afternoon.
But it's mostly weekends because programmers do work during the week.
And then so they're free on over the weekend.
Okay, and what can you expect to happen as one of these events?
Well, people, it's usually when they come in, they're like, oh my god, everything is so quiet.
And there's like 50 kids around here because they're all into the programming mode.
It really differs from one Dojo to the other because they differ with the volunteers that come and what technology they want to use.
Some of them use embuts robots.
Some of them use microbeads that we have here.
And other use scratch or python or sea with arduinos.
It's very, yeah, it really varies from one Dojo to the other.
Okay, thank you very much and enjoy the rest of the show.
And I'm at the Eclipse Foundation booth and I'm talking to Michael Barbaro.
I'm Michael and what is the Eclipse Foundation and why do I care?
The Eclipse Foundation is a not for profit organization.
We started as the host of the Eclipse IDE project.
But today we have many more of them.
We have 275 projects.
Hosted at the Eclipse Foundation.
And the scope of those projects are very large.
We have some projects dedicated for cloud-native Java.
Like Jakarta, we have of course the Eclipse IDE still to do Java development.
But not only we also have CDC environment, PhD environment,
trust environment, web development environment.
And we also have project around the IoT from the age to the gateway and even to the dashboard and controllers.
And we also have project around the automotive industry.
Okay.
And what are you hoping to achieve here today by having the booth that first end?
So we are there to evangelize about our project.
So the foundation itself, we don't participate actively in project, we don't code.
We just provide infrastructure processes, development processes, IP processes for the project.
So we are there to talk about what we provide to projects.
So if some new project want to come to join the foundation and also evangelize about the project
that are already there.
Okay.
Fantastic.
Enjoy the rest of the show.
We're here at the GitLab booth and I'm talking to David Poonela, Director of Community Relations
at GitLab.
So I know what GitLab is because we host our source code in GitLab.
But for the listeners can you tell them what GitLab is?
GitLab is essentially the single application for the full DevOps cycle.
So in that regard, we have many different stages that we offer in one single product,
where you can control the whole lifecycle of your application, essentially modernizing your DevOps workflow.
So even though you're not going to say it, this will be a more free version of Github.
Kind of.
So GitLab is essentially an open core project, meaning that it is, we have two versions,
one that's completely open source and an open source license.
And then we have the, what we call the enterprise edition, which is available with two paid customers.
Even then though, all of the source code that we release is public.
The only difference is the line sense between them.
So what license do you release on that?
It's a modified version of the MIT license.
And for the, so for the proprietary part is a proprietary GitLab license.
Okay, what are you hoping to do here today?
Oh wow, to meet lots of contributors.
Lots of people who are interested in GitLab get some good stories.
And then essentially get, let people know that they can use GitLab for free.
They can use GitLab paid for as well if they need the, the extra features.
And we're also meeting quite a lot of projects or project leaders who have been migrating to GitLab
or who are continuing to migrate to GitLab.
We've been talking to Debian, to GNOME, to KDE, to the Clip Foundation.
And it's also good to see people in real life face to face, honey.
Obviously.
Thank you very much, enjoy the rest of your show and thanks for taking the time.
Hi everybody, I'm at the GNU Health booth and I'm talking to Axel Brown.
And what is GNU Health, am I, is it here?
Actually, GNU Health is free as in freedom, health and hospital management system.
It contains basically all components that you need to either run a practitioner's office
or even run a hospital with hospital management, with bad management,
with operation rooms, professional, inpatient management, outpatient management,
with pharmacy, for example, with a laboratory management system
and in the back, of course, financial accounting and everything that you need.
So basically it's full flat ERP system that you need to run a hospital or a practice.
How long has it been going?
GNU Health is now, I think, 11 or 12 years old.
And is it deployed in many places?
Well, we have, yeah, it's always the issue with free software project.
You don't know who is really using it because they don't have to phone home.
But we know of a couple of implementations in South America.
This is where the project originally started.
South America, Middle America, we have currently many projects going on in Africa,
partly together with World Health Organization and local Ministry of Health.
We have implementations from small primary care stations in the rainforest,
which work really under rough conditions.
We may only have a couple of hours electricity per day.
Up to the largest hospital in Asia,
you're all in the Institute of Medical Science and located in daily
with about 3,500 beds, who's currently implementing new health as well.
And what sort of license is it released under?
It's under GPL version 3.
And this is one of our core values of our philosophy.
It has to be a free software package without kings and borders.
Okay, very good. And where would I find out more about the project if I was in the confel?
With it on our website, gnewhealth.org or join the mailing list,
which is healthatnew.org.
Gnew Health is an official gnew project.
Okay, very good. And have you had any issues getting it approved by bodies like the FDA or such?
Well, that's the point.
It's used in many areas where you don't have high legal regulations.
For example, we have a couple of implementations in Germany as well,
but none of them is allowed to build with the public health system,
because you need certain certifications for that.
And as long as not somebody is stepping up to say,
hey, we're doing the certification, then we're issuing it in the market.
It's not being made. That's the full story behind it.
Okay, well, thanks very much for taking the time and enjoy the rest of the show.
Thank you.
And Amat, the JavaScript stand, and I'm talking to?
Marta.
Okay, so what is the JavaScript stand, please?
Yeah, so we're doing this together with the community of JavaScript developers in Belgium
that we have as part of our company Hacquities.
So we are just...
So your company is Hacquities?
Yes, our company is Hacquities, and we do all things JavaScript,
a lot of community events and trainings.
So we decided to do the JavaScript dev room last year already
with a few people from the community, and we repeated the experience this year.
And you're just here to get some star of some interest in JavaScript?
Yeah, so the idea, we have a little quiz with JavaScript questions
to put a little bit of knowledge of the people to the test,
and we have...
that is also connected to the schedule tomorrow,
and then we have stickers from a lot of JavaScript technologies,
and a lot of JavaScript conferences,
just because people love stickers,
and we want to share it with them.
Exactly.
Post-end runs and stickers are record.
So what do you hope and do achieve here today at the table?
But we just want to meet people who like JavaScript,
and maybe people who would like to be engaged in our community as well,
and just spread the word about tomorrow's dev room,
so it's full, and it's a success like last year.
And if somebody wanted to start learning JavaScript,
to be honest, I've always wanted to,
but I couldn't find somewhere just to kick off,
to do the low world program.
Where was the best place to go?
That's a tricky question, because we normally do JavaScript
for people who already know how to code,
so I think you will have to go it.
You already know how to code.
Okay, then we are all in for face-to-face trainings,
short periods, for us it's much more helpful than online,
but okay, it depends a bit to obviously we do it at Hackages,
but we know all the great partners all around Europe
and the world who do it as well.
And that's Hackages.
Yeah, so Hackages, we offer trainings for professional developers
on JavaScript, but then BUDS React, Angular,
all things JavaScript, and the community events,
which are also a way to get started on these technologies
and give it a try for free.
And what's your website?
Hackages.io.
Perfect, thank you very much.
Enjoy the rest of the show.
And I'm at the Jenkins, Jenkins X booth, and I'm talking to.
Laura Delama.
And can you tell me what Jenkins X is?
Yes, Jenkins X is a complete rebuild of CI City on Kubernetes.
It's written in Go.
And what it provides for you is in a very opinionated workflow
which has best get-ups practices built in from the start.
And your pipelines are there, opinionated,
but they are extensible as well.
So you can customize it to your use case.
When you're using Jenkins X and you install it on your Kubernetes cluster,
it will set up your pipelines for you,
including dev, staging production environments,
that map to Kubernetes namespaces.
It also spins up Git repos for you that, yes.
So it gives you, exactly, it gives you best get-ups practices from the start.
So the entire state of your system is in Git.
And any changes to your system, you put them in Git.
And everything comes from there.
So in addition, when you make a change to your system through Git,
and your CI test pass, your changes will be automatically promoted to staging.
And what's spun up for you is called the preview environment.
It's very similar to spinning up your application on localhosts
and seeing the changes except it's done for you
and you're given a link within your PR.
And anyone on your team then can click on that link,
and see your changes.
It's a great way to be able to very quickly get fast speed back on changes
that you're trying to make to see exactly what those changes will be,
to collaborate with your team.
It works beautifully for a team workflow.
But surely this will completely decimate the Jenkins box.
Oh no, as you see, we're together.
We're very friendly.
We collaborate all the time, and they're very different projects.
So Jenkins X is for CI City on Kubernetes.
And Jenkins, as we know, it's a much wider user base.
It's much more sensible with its plugins.
And it does have a Kubernetes plugin as well.
But Jenkins X is completely made for Kubernetes from the Git Go.
It is complete reconception, rebuild, from scratch.
And because the two projects are actually quite different,
it's very easy for us to collaborate and work together.
So what would the migration strategy from a traditional Jenkins pipeline be
to go into Jenkins X?
We have now just with Andrew Baer has just made a tool
that will help convert your declarative Jenkins pipelines to Jenkins X pipeline.
So that really helps people move from Jenkins to Jenkins X to do so.
Okay, thank you very much and enjoy the rest of the show.
Great, thank you.
I'm at the Copano booth and I'm talking to Brian Joseph, co-founder of Copano.
What is Copano?
Copano is 100% GPL compliant open source collaboration,
which means groupware, email, calendar, task, and context.
And also a full web RTC implementation accessed by a progressive web app
for mobile desktops and tablets.
Let me guess on the back end, you're using standard open protocols.
Yes, definitely.
We are compliant with standard open protocols.
At the same time, we implemented very challenging Microsoft protocols
like we open source an open MAPI implementation for optimal advanced calendar usage
and also ActiveSync, which is a very close protocol.
And with the project ZBUSH, we made an open source server site,
ActiveSync implementation also used by other groupware solutions.
Okay, we've already done this interview before.
So you were saying that it was already in Debian?
Yes, we are in Debian Buster.
So that was very important, very good to see.
That's also why we are here to work together with all the developers
and to ensure our packages get in right way in Debian repositories.
And how difficult is it to set up this server?
It is for the good thing is that we integrate seemingly with existing MTAs
like postfix or send mail.
So that makes it very easy for people with linux knowledge to implement it.
At the same time, we have darker images of our solution,
making it also easy for people with Kubernetes clusters, for example,
to easily roll out and maintain dissolution.
Perfect. Thank you very much.
Oh, we were talking about the video chat earlier on.
You support video chat. How does that work?
It works. It's a WebRTC implementation.
Maybe you can, you can even show it, which is not visible all day, of course.
But it is, it's an implementation where we have a so-called progressive WebPap
where you can easily interact with people in your organization
which also with one click invite others.
And you see here right now not visible for the listeners,
but you see our video solution where you can make so-called groups, rooms,
and you can easily send people invite to connect to public groups or to private groups.
And how many simultaneous users can you have in the meeting?
We have right now, if it's just a one-on-one course,
we, you can do it easily with, let's say, eight people.
If you want to do really big, and that's all p2, p2, and corrupted, that's very important.
When you want to do webinars, we have a server-side solution
where you can connect with way more people.
And that's using matrix or technology.
You can integrate that with solutions like matrix.
We are right now busy integrating this solution together with the matrix team.
Okay, very cool. Can I have a look at this network diagram on, I know,
describe it to people.
So what we've got is a MySQL MariaDB layer with a server on top of that and connecting in.
We have MTAs connecting to Spoolers and Agents.
And then the gateways connect to IMAP and pop-3 clients.
CalDav connects through the, sorry about that, the OpenViews guys next door are,
sorry, MuseCore guys next door are making noise.
Then on the web server with PHP 5 and higher,
we have the Copano web app and the Z push client.
And the Copano web app is going up to standard browsers and the Copano desktop.
Whereas the Z push is going to act to sing protocol and outlook 2013 and 2016.
And then on the right, we have all the bindings for various different,
various different backup solutions, presences and APIs.
Pretty, pretty textbook open sort of project by the look of it.
So thank you very much for the seconded view.
And CERN has switched to Copano Mail Server for its 40,000 users.
Awesome. 40,000. Excellent.
Now I'm distracting myself by reading this one I should actually be recording.
So I'm going to put that away and say thank you again for the excellent interview and enjoy the rest of the show.
I'm at the CubeVirt and Metal 3 stand that I'm talking to.
Daniel Hiller. Hi, you're Wazquez.
And what is CubeVirt and Mods Metal 3?
CubeVirt is an extension to Cube and Eddies to run your virtual machines inside a Cube and Eddies cluster.
Okay, that seems very obvious. Mods Metal 3.
Metal 3 is an implementation of the cluster API for deploying Kubernetes clusters on top of our metal.
Okay, very good. And why would I do that?
And what is CubeVirt and Eddies just for a start for people who don't know?
CubeVirt and Eddies is something a service to make your development hassles for developers easier, right?
It's like it's always the infrastructure which is a pain for developers to have to set up, for example,
like when it comes to out-of-scaling deployments or something like that, which CubeVirt and Eddies is very good at automating this for you.
Yeah, so bringing up Docker containers and popping them in and doing the networking stuff.
If something is not working anymore, CubeVirt and Eddies is detecting it and starting a new container, for example.
Why specifically, so you run Kubernetes on bare metal? Why specifically bare metal?
Yeah, so we think that running Kubernetes is right on top of bare metal, it's a good idea because Kubernetes is already in charge of managing all the infrastructure.
And running next to the hardware, it's really useful for some applications like, for example,
machining learning workloads and these kind of things that you need to be really near to the bare metal or real-time kernels, these kind of things.
Okay, very good. But how do you deal with so many different types of hardware and how do you take advantage of new cool stuff coming up?
So in Metal Cube, what we have is we communicate with the different bare metal providers, this in IPMI, so you only need your hardware to have a management interface card that supports IPMI, like iDRAC or ILO or whatever.
So where can I find out more information about your projects?
It's a cubeber.io, for example, or you can have the mailing list also, and it's
Yeah, it's metal3.io, and as well we have a mailing list, then we have a Slack channel in the Kubernetes Slack, which is a cluster API bare metal where you can find us.
Perfect, links in the show notes. Metal Cube, I imagine, does then a big sense. Okay, great, thank you very much and enjoy the rest of the show.
The MicroPython and S3 in everyth. And your name is Gordon Williams. And your name is?
Tastina Spindler. Okay, so who wants to start?
So can you tell me what S3 is?
Yeah, it's a JavaScript interpreter for microcontrollers. And so we're actually sharing a booth because we're both trying to do the same kind of thing which is
to run a scripting language on a microcontroller. And S3 knows a completely open source project that targets reasonably low end microcontrollers, sort of the sweet spots around the 64K of RAM side of things.
And it's basically just trying to make them much easier to program than they might have been if you used to see.
So I guess a good example of that's Bluetooth, where learning Nordic semiconductor Bluetooth stack is a kind of really steep learning curve.
So if we can take that and we can abstract it away and allow you to make a Bluetooth keyboard with a few lines of JavaScript, then that's going to allow a lot more people to use the hardware than would have previously been able to.
Okay, and what's your relationship with the project?
So I'm the guy that started it and that also worked kind of full-time on it at the moment.
So what we do is I try to be entirely open. The software's open, all the hardware I design is open.
And while the interpreter will run on a bunch of different hardware, I sell hardware that has it been installed.
And it's basically the sales of that hardware that funds the continued work on it.
What license do you read a really sure hardware and software under?
We use MPL V2 for the software and it's just the created commons for the hardware.
Okay, very good. I might move over to you just for one second. And you're trying to do the same thing for MicroPython.
Yes, MicroPython is Python for microcontrollers, so you don't need an operating system to run your Python code, you run the Python code bare metal.
And what's your relationship with the MicroPython project?
Well, I'm responsible for manufacturing the hardware and so I run all the logistic processes and coordinate all the manufacturing.
So do you sell a particular board or something? Are you developing separate hardware?
Yes, we have the, well, the nice thing about it is that the software and hardware comes from one vendor, so we actually design our hardware to fit the software with our software needs.
So I'm reasonably familiar with MicroPython, but more in the sense that you take an ESP32 board and put MicroPython on it.
But this seems to be different. There seems to be a hardware. This is something new for me.
Yes, well, there's an official MicroPython hardware, which is the STM line with STM32, and now the new board is running an F7, an ARM7 controller.
And yeah, most people are familiar with MicroPython through the ESP, which is also supported by us, but we fund basically the open source project through selling the hardware.
Is this a profitable business? Are you making enough money to continue as a project?
Well, I would say we never make enough money, but we love what we do, and we still keep it going, yes.
And we definitely want to have MicroPython open source, because we think that's how we grow.
I think the same question will be for both of you. I don't want to ask you the question more from the MicroPython point of view.
Is this not kind of bloatware, having Python running on a device when you should really do an assembler or save something like that?
Well, it depends, because the MicroPython controllers get more and more powerful.
So sometimes you struggle, but that's how I was when I did my electrical engineering degree.
I was most struggling with getting something working in the first place, and that was not even targeting my main project, like keeping something really low power for example.
So if I have my special target, I can focus still with assembler or see nicely embedded in my MicroPython, but I get my SD card reader working and everything works around.
And that's the nice thing about it.
Okay, yes, that makes a lot more sense.
Are you selling stuff here today? Can you walk through some of the stuff that's available at your website, which is?
You can find everything online on MicroPython.org.
And you're supporting a great community. So let's do the sales picture and see what you've got.
Well, at the moment, we still sell our original PyBot, which is from six years ago now and still sells.
And we just released just last year our PyBot D, which is more targeted towards industrial customers, which build them already in their product.
So the engineers, I would call them like to have an up and running system that's already, they don't have to worry about the brain of their devices and can just focus on their actual surroundings to develop their own PCBs.
Excellent, awesome stuff.
Can I ask about your earrings? Do they run MicroPython?
Not yet, no. They're just playing PCBs because they're so nice.
Absolutely awesome, my daughter's a little bit.
Thank you very much for taking the time and enjoy the rest of the show.
Thanks to you.
Yeah.
And I'm at the new spell booth and I'm talking to you.
Sandra, can I go over?
Why Sandra, all of a sudden?
Yeah, pretty much.
So, new spell is a spell checker. What is the spell checker?
A spell checker is more than just looking at words in a long list to see if they're spelled correctly.
A spell checker looks at a dictionary which contains a lot of rules.
I saw those called affix file rules, which capture conjugation of verbs, for example, or how you can concatenate words into compounds.
And that makes it much more smart to do spell checking than just looking at a long list of words.
But that also opens the door for a lot of complexity, challenges, how to do that quickly.
And not only checking words, but also coming up with suggestions if you made a misspell.
And that is quite a challenge, but that's the task of a spell checker.
So, you see this spell checking libraries on your computer, on spell and other ones.
So, what is different with new spell?
So, the dictionaries are made for each spell checker that was out there.
So, if you go back in history, first you had spell, then you had ice spell, then you had ace spell, then you had mice spell, then you had pun spell.
Now you have new spell, and there are also more specific checkers for example, only Hebrew.
And each spell checker has an engine which needs to be fed with language specific support.
And the language specific support which is made for Hun spell is also usable in new spell.
And it's like 90 different languages are being supported by different dictionaries.
And these 90 languages cover about almost 200 different regions or countries in the world where people speak a certain language.
But why would I install this?
You would like to install this because it's much quicker.
And you might not notice it when you do spell checking on a single word.
But if you check your entire document, you have a large document, and your language is more complicated.
So, it uses a lot of compounds for example.
Then it is CPU intensive.
And with new spell it's going to be much quicker.
Shiny are faster better.
And is it available in all the distros? Or do I need to compile it from scratch?
Well, since yesterday we brought out Debian packages for Debian and Ubuntu.
It was being packaged for free BSD.
It's not available yet in those distributions, but we're working on that.
You can also compile it from source code. It's with CMake if you know that.
And what do you hope and to achieve here today at the show?
We hope to find more people to let our community grow, especially on the language binding part.
We hope to find people because it's implemented in C++.
So we have the C++ on C API.
But we're looking forward for all the languages like Python, Java, JavaScript.
You can name it that there is language binding so people can use it from their environments.
Okay, thank you very much and enjoy the rest of the show.
I'm at the OpenHab booth and I'm talking to Thomas.
Hi, Thomas. Can you tell me what OpenHab is and why you're here?
Simply OpenHab is great, but I'm sure that's not enough.
Well, it wouldn't be enough. It has to be great to be at FastM.
So let's move on.
Let's do OpenHab is a platform to integrate several smart home systems.
For example, Phillips U and Z wave systems or CikB so that they can interoperate to each other.
Those systems that you've mentioned are known for being not the most open in the world.
How do you get around that?
That depends on the system.
As far as I know, I'm the typical user of OpenHab.
Some guys reengineered the Z wave protocol, so that's there.
Other protocols like Phillips U, they have an API that can be accessed freely and open it.
So what have we got here on the table in front of us and can you walk us through what the demo set of this?
Yeah, it's our demo set up. Unfortunately, it's not working at the moment.
Well, nobody would have known if you hadn't said it now you've ruined it.
No, but we have a better thing.
We have a live demo of my home automation system.
So if I click on the PC and switch the light on, my wife will call me and say,
what are you doing?
And then you're in Brussels, another home, stop it.
Yeah, a typical set up, OpenHab is designed to run on small systems like the Pine or Raspberry Pi.
But it also runs on Windows systems or virtual machine.
What ever is capable of running a Java system?
Yeah, so it's written in Java.
And there's a web front end there.
We have different web front ends and we are currently in a process to combine them all together
and one really nice user interface.
And you can develop your own interface.
You see here mine, it's very straightforward.
Other people do other things with the predefined interfaces.
Do you have Android apps and iOS apps?
Yeah, I can show to you.
It looks awesome.
Look at that.
Completely build free and working perfectly.
Excellent.
People who can get more information on your website, which is...
www.openhab.org.
Perfect.
Thank you very much and enjoy the rest of the show.
And I'm up the Foupoon Stack Foundation booth that I'm talking to.
Jeremy Stanley, I'm on the staff of the OpenStack Foundation.
I've also been on the Voluntary Village Management team for OpenStack for a very long time.
A maintainer of the Zool Open Source CI-CD system.
So one step back.
What's OpenStack?
OpenStack is basically...
We like to refer to as a cloud operating system.
It's a framework for managing infrastructure at scale to provide elastic resources on demand
for users who want to be able to have a self-service sort of experience with infrastructure management.
Also scaling that type of thing?
Yeah, auto scaling and providing consistent APIs across a variety of different kinds of hardware resources.
Okay, would this be kind of like Kubernetes or...?
So think of a layer below Kubernetes.
What are you going to install Kubernetes on?
Yeah.
You want to have the ability to control all of the systems that you're running your Kubernetes on top of
through some sort of API that you can plug into your automation systems or configuration management.
Okay, what's the reason for being here also?
Well, I'm here as a representative of the OpenStack Foundation and we in turn represent a number of different open free software projects
that basically have come together around management of infrastructure.
Okay, very good.
Okay, thank you very much and enjoy the rest of the show.
I'm at the OpenTap Boot and I'm talking to Michael.
Hi, I'm what is OpenTap?
OpenTap is a test automation platform which is enabling people to do test automation for physical devices or virtual devices.
And how do you go about doing that?
So it's an open source project, so it started from a commercial product which is sold by Keysight,
where it's deployed today in a commercial solution where we are running manufacturing tests in many, many places.
Manufacturing can be of a cell phone or a base station or a physical device.
And basically what we did was to open source the core of our products such that people can connect their own device or their own instruments to it.
So it's an architecture where the core is open source and the people are basically developing plugins to connect to it.
Okay, but how far would they need to go before I start using proprietary code?
So you can basically go all the way without proprietary codes.
So the open source can be used as such the core and you can develop your own plugin completely open source.
We have a set of reference plugin as well, which are open source on the website that can be downloaded as well.
And then you can create whatever you wish around that from an infrastructure perspective.
And what's the website for your project?
So OpenTap.io.
That's the website.
Thank you very much and enjoy the rest of the show.
Thank you.
And I'm Matthew, OpenUK Boot and I'm talking to Amanda from.
Hi Amanda.
Given the day that it is, one day, Brexit minus one, I heard the OpenUK Boot here at Foster.
We're here to make sure that we don't get forgotten.
So the UK has an awful lot of people who work in different areas of us and open technology,
whether it's hardware, software, or data.
And we're not really recognised by our geographic publication.
What's happened is that we've engaged massively, globally in projects, and we don't know each other.
So OpenUK is trying to bring everybody in the UK together.
Don't all have to like each other, we just have to get along enough to work together.
And once we're together, we create a voice for OpenUK.
And that voice is one of the three obvious slides and hopefully we'll be able to engage and collaborate with everybody in Europe and New York.
And within.
So is the global list the world within UK?
What do you mean by political?
Pushing for open standards, open duck and informers, open governance.
Yeah, that's interesting.
If you mean that by political, it's an extent it is.
And we've already managed to get quite a lot of engagement with UK government across different departments.
We're really a very new organisation in our form with the Open technology remit,
has only existed since the 50th of January.
We had our first main board meeting then and we came up with our purpose of vision and our mission then.
Already we've got I think four or five government departments engaging with us looking for us to help advise.
So we're really keen to get everybody in the UK talking to us,
not so that we can keep them in touch and make sure that the right people are speaking to the right people to influence government.
There are already quite a lot of open organisations that I'm aware of,
even something like odd champ in the UK that is a podcasting,
there's new podcasting event that's near and dear to my own heart.
So would the idea be that that organisation will come and become friends with you guys?
I couldn't have put it better.
So we actually have a space on our website for friends.
And we have a very short agreement which is not only the idea that everybody will cooperate,
we will let you use our logo, you'll let us use yours.
But more it's about making sure that if you're looking into the UK,
there's a central place that you can find all those great organisations.
Everybody's doing good work, sometimes they're hard to locate,
sometimes people don't know what they do.
So we display their logos with a click through to their sites.
We've also got a calendar being built that should launch in the next week or two.
And the calendar has our event, so it has the UK events we know about
and the major international events we want to share.
So if you have an event in the UK and you want to list it,
there's going to be a contact box in there for you to send us the information.
And actually we had a little bit of on-camp which you mentioned a few months ago.
It's definitely going to be on there once they've got their day.
We're waiting for Simon fix to go today.
Excellent, thank you very much and enjoy the rest of the show.
And I'm at the Open Wi-Fi booth and I'm talking to you.
Sian Junjiao, which is the main developer of the Open Wi-Fi.
Open Wi-Fi, it seems fairly explanatory.
Actually, that explained nothing.
That's a puzzle name.
Okay, actually what is the Open Wi-Fi?
In one sentence, Open Wi-Fi is an open source Wi-Fi chip design.
So what does that mean?
Is the protocol itself open or is it hardware project or software project or both?
You can call it FPGA project because FPGA you know when we take out a Wi-Fi chip.
FPGA is always an intermediate step before you take out a real Wi-Fi chip, right?
Because it costs lots of money, you don't want it to be failed.
So you do FPGA first.
Currently, we have open source our Wi-Fi chip design in the FPGA phase.
That means you have access on GitHub to all the FPGA codes which is in very log.
And we also develop our open source our own Wi-Fi chip driver in Linux.
Because most of the Wi-Fi chip, they work in Linux, right?
In your cell phone, in your laptop, they need the driver.
Then your Linux will recognize your chip as the network interface.
Another sentence, Open Wi-Fi project, the open source,
all the code from a tenor to Linux application.
Away from the hardware and the whole way up.
Yes, full stack.
Actually, before that, because you're open sourcing the designs right to the hardware up today,
kernel.
Sorry? What's the best?
Well, by releasing the code for the designs of the chips, you're actually even before the hardware.
Actually, well, that depends on how you define hardware.
Currently, our hardware is used up to show FPGA development board from Scylinks and from analog device.
They offer development boards for people to try their FPGA chip or the front end chip.
You know, FPGA is a programmable chip.
By our design, we turn this FPGA to a Wi-Fi chip.
So, with that, I could take your code and I could make a Wi-Fi chip then, could I?
Yes, that's one of the use case.
If you are a company that are trying to build your own Wi-Fi chip,
maybe for special use case, right?
For drone, for train, for aircraft, you have some special use case.
You want to tailor the commercial Wi-Fi chip for your use case.
Then you go for big company, boardcom, boardcom, cocom.
Would you please customize a Wi-Fi chip for my application?
Then the first question you get is, how big the volume per year?
Then you will get rid of the customer list because your niche market, your volume is quite low.
In that case, you can build your own Wi-Fi chip, start from our design.
Because our design is white box, right?
And all you want to build some open source hardware for some open source computer, like open source phone,
open source laptop, open source computer.
Computer, you need CPU, no problem.
You have Linux there, but you always need to access internet via some connection chip.
Could be Wi-Fi chip, currently, or commercial Wi-Fi chip.
If you want to build open source Wi-Fi chip, then start from our solution would be ideal.
Okay, fantastic.
But it's not some legal requirements that you're not allowed to broadcast that the chips need to go to validation
and then they need to adhere to Wi-Fi or they need to adhere to radio spectrum.
How do you get around that, or is that the problem of the manufacturer?
Yes, that's true. That's the problem of the chip vendor.
We position ourselves as a solution or reference design vendor, right?
As you know, all the software-defined radio platform, they are capable of violating any FCC or radio spectrum rule.
Everyone knows that, but for research or development, you need that kind of hardware.
But how hardware run, it depends on developer.
In this case, if you try to tap out your own Wi-Fi chip based on our design, then it will be your duty to align with regulation.
It will be your duty to test your Wi-Fi chip in the Wi-Fi Alliance.
Completely gathered. Thank you very much.
So what are we seeing here on the table?
On the table is our reference design running on the off-the-shelf FPGA development board.
In this design, the black thing is the system on chip.
Siling zinc 7000 chip, FPGA chip.
In the chip, there are two parts.
On processor and FPGA.
On the on processor, embedded Linux is running.
And AP software is running in Linux.
Our Wi-Fi driver also running in Linux.
On the FPGA part, our Wi-Fi chip design is implemented.
So basically, the board is currently configured as a Wi-Fi router.
Without any commercial Wi-Fi chip on board.
So 100% open source.
Yes, yes, yes.
But our code, 100% opens us on the ATPL V3.
But you should realize, as a complicated full solution,
we don't deliver everything, you know.
We have to rely on some IP from other companies.
Like we start from analog device reference design.
We start from Siling's reference design.
Where there are many essential infrastructure IP, right?
Yeah.
Like the Siling has the DMA controller.
And the local device has the IP to control their R frontend.
Yeah.
We rely on those infrastructure IP.
Yeah.
On top of that, we deliver the basic Wi-Fi IP.
Okay.
Thank you very much for taking the time and enjoying the rest of the show.
And I'm at the OWASP boot.
That's the open web application security project.
And I'm talking to Antonis Manaras.
So what is this project?
Essentially, I was in an organization.
Global organization, nonprofit organization.
And I'm talking to Antonis on secure coding.
How the developers can learn to code in a secure way.
So we have a lot of projects under OWASP.
That could be a tool that could be any kind of project.
With focus on web application security.
We also have conferences in US, in Europe, in Asia every year.
Local chapter meetings.
Because there is a big community from volunteers that interact with each other.
And OWASP has a lot of resources and guidelines online.
And it is considered to be the state of the art.
If you are a developer and you want to learn about secure coding,
you will visit OWASP material.
It's very popular on that.
So regardless of what type of coding you're doing.
Web application.
That is the main focus and mobile application coding mainly.
Not infrastructure that much.
Do you offer any sort of code review services or those?
No, OWASP doesn't offer any kind of service.
It's just the open source, the open community, let's say.
So that both developers and in security professionals can come together
and interact and help each other.
So what's the purpose of being here at FOSTEM this weekend?
Yeah, we came here as we are up in open organization.
We came to promote this openness to invite people to participate
in both a developer place or the security professionals.
And everyone that wants to learn about security in general.
Web application security.
Okay, thank you very much and enjoy the rest of the show.
Hi, I'm at the Perkana boot and I'm talking to you.
You've got any Patlin, Builder List Engineer in Perkana.
Hi, and you say you're an open source database expert.
What makes you to say that?
Well, yeah, we provide support and consulting for all of available databases.
My scale, MongoDB, PostgreSQL.
We provide our own distributions, our Fox.
And so on.
And why are you here as FOSTEM?
Because all our software is open source.
All your software is open source.
Yeah, we provide everything we do as an open source.
Where can I get more information on your project?
Well, you can get it from our site, Perkana.com.
And in our booth.
Perfect, thank you very much.
Enjoy the rest of the show.
Hi, and I'm talking to Koon.
This is Koon Berksand at GitHub and in a lot of places.
And I'm writing firmware for the fine time.
What is the point time?
The fine time is a fine 64 smartwatch.
It's open, hardware.
It's available right now.
I think development kits are available.
And the fun thing about fine time is that you can program it yourself.
You receive it with a stock firmware image.
Which appears to be some kind of Chinese stock image.
And people are doing all kinds of stuff with it.
It's possible to program it yourself.
There are debug headers exposed.
And you hook it up to your computer and you can start programming.
Can I have a look at this?
Yes, of course.
Let me just describe this to the listeners.
It's a watch.
No, it's a watch with a...
Yeah.
He turned it over.
At the front, it looks like a watch.
Like an ordinary watch.
When you turn it over, it's got two soldering pads.
What are the...
Just describe this to me.
This is the power.
So it says you have this cradle where you can plug it in and it's well charged.
So like Pogo ports.
Yes.
Yeah.
A bit comparable, I think, to Pebble or your regular smartwatch.
In the middle, we see the heart rate sensor.
I don't have it working yet, but it should work fine, theoretically.
And then there is my modification to the fine time.
I must say your modification is a bit...
It's interesting to know.
Yes, yes.
It's a bit crude.
The issue with programming is that you have to pop off the back of the fine time.
Yeah.
There are four small pads exposed.
You plug in your programming header and it's all finicky and well...
So you basically put two wires out the back that you can plug into...
Okay.
So now I'm going to...
Oh, and that's why the installation tape is around the side.
So I'm now going to describe the phone without the installation tape.
It looks quite nice.
How do you get it to work?
There's a button on the side.
So you press the button on the side?
It turns on.
Show you the time.
Excitingly.
Show you the battery level and the battery voltage and the date.
So it's an OLED screen.
It's a TFT IPS panel.
240 by 240 pixels.
Rather simple.
It's efficient, I would say.
So what do you do with this?
My main idea was...
My main goal is to have it functional.
To wear it around my wrist for a day was to have it show the time.
Yeah, good plan.
I know.
And I don't want to enter the time manually on the tiny screen.
So I started to run playing with Bluetooth.
First time playing around with Bluetooth.
And I managed to synchronize time over Bluetooth.
Gives you the time.
There's a standardized...
NGB service.
Yeah.
Send that way.
Implemented.
Got the time on there.
That's it.
For example.
Excellent.
Yeah.
I'm working on the battery level.
I'm working on applications.
So you can add applications to your firmware.
So people can design their own applications, compile a new firmware,
and there's the application on it.
And maybe it's a stopwatch, maybe it's a heart rate graph,
maybe it's a step counter.
Oh, cool.
Just it opens it up.
How difficult does it get the firmware on?
Now, well, how difficult would it be for me?
And non-techy, cool, hardcore developer like yourself to get firmware on it?
There are a number of blocks out there that describe the whole process.
It's not as easy as an app install.
You're software.
But if you read the guide, if you order your programmer online, then it's doable.
It's even possible to grab a Raspberry Pi, hook it up to the Raspberry Pi TPI,
and start programming it.
How much is it?
It's hard.
It's medium.
Well, thank you very much for taking the time.
And enjoy the rest of the day.
Thank you.
You're welcome.
Oh, you want the bag?
And I'm at the Pulse Graphile booth, and I'm talking to...
Benji.
Hi, Benji.
What is Pulse Graphile?
So, Pulse Graphile will build a GraphQL API for you automatically
by inspecting your Postgres database.
So, I have a Pulsegres database.
Can you tell me what that graph is?
Sure.
So, we'll look at your tables, your relations, indexes,
your permissions, functions that you have in your database,
and other such things.
And we will then turn that into a GraphQL API.
GraphQL was opened source in 2015, managed now under the GraphQL Foundation,
which is under the Linux Foundation, used industry-wide,
and it's a new query language for APIs to query from, for example,
a web or mobile content.
So, this allows you to put parameters upon parameters upon parameters?
Yes.
So, you can effectively specify exactly what fields you want whilst you're in your mobile app.
Say, I need to know information about this user and their friends,
and their friends' interests.
And you effectively write a query that describes everything you need,
and then you send that to the server.
What we'll do is post-graphable, is we'll interpret that with GraphQL,
and then we'll send it onto the database, and write a very efficient query
against the database, which will give you back just that data that you need.
And then that goes back through the chain, and you get it back as your front-end developer.
And it's very, very optimized for front-end developers to be able to use easily,
and for the database to be able to execute very efficiently.
Sounds almost too good to be true.
I like to think so.
So, yes.
And what sort of licenses are released on there?
So, post-graph file is under the MIT license, very, very liberal.
Okay.
And what are you hoping to achieve by being a post-end this year?
Just a raising awareness of the project, really,
and also making connections with other interesting open-source people.
And where would I go to to get more information on the project?
So, you can go to graphio.org. That's g-r-a-p-h-i-l-e dotable.
Okay. Thank you very much, and enjoy the rest of the show.
Thank you.
I'm at the techkids.ev booth, and I'm talking to.
And Niels.
Niels, thank you very much, and thanks to your father for giving permission to record this,
because how old are you?
I'm 15 years old.
And you're at a booth here in Fostem.
Yes. So, we are an organization based in Germany,
and we are trying to bring free and open-source software into schools.
Okay. Good luck with that. How are you planning on doing that?
So, we are developing different tools.
For example, like Alexis or Adogut, Debbie and Adoo.
And they are basically offering everything a school needs
to manage their everyday school life.
So, for example, timetables, substitution plans, and everything.
And the advantage of this is that the schools don't have to change
to fit for the program, but that the schools are able to change the program
so that it fits to the school.
So, this is a bit like in the Netherlands, we have Magister,
which is an online closed-source application that you need to log in
and they have your timetables, and if somebody is free and vacant.
Who come up with this project?
So, it was the idea of Dominic Georgus,
so it's our leader of the organization.
And he created this organization.
And so, we have different teams in our organization,
which are all doing different stuff, for example,
like administration, organization, and so on.
And our tools are being developed by miners,
so by children and so on.
And just like those tools.
So, it was a team idea, basically.
Wow, that is absolutely awesome.
And yeah, are you having much success?
Have any schools adopted it?
Yeah, so we had a school in Vopatal in Germany we worked with.
But because it was a private school,
and the people who sponsored the school didn't want to pay anymore and so on,
and there were a little bit of conflict.
So, that school didn't or isn't working with us anymore,
so we're trying our best.
But it worked pretty well there.
So, all the teachers were blown away by our tools,
and also the students were very glad to have these tools,
because it's open source.
And currently we are working with a school in Lübeck,
it's in the north of Germany, and yeah, it's running pretty well.
So, do you have an Android app, or is that just a mobile version of the website?
Yeah, so we have an Android app for Alexis and here.
Okay, great. What license is it released under?
I think it's, so everyone can contribute to this.
So, it's open source, everyone can contribute,
and we're doing this over EduGit,
because yeah, it's an alternative to GitLab,
because as you may know, as GitLab,
also miners need to accept certain terms of use,
they are not allowed to.
Okay, very good. In fact, I had to get permission from your father to do this interview.
So, well done, and enjoy the rest of the show.
Thanks.
I'm at the Techno Ethical Boot, and I'm talking too.
The value to Vorano.
So, this has Techno Ethical Free System Compatibility Hardware
for GNU Slash Linux, Replicant and Libre Boot.
What does that mean?
Well, what we do, this is a free software-oriented project,
that deals with hardware.
So, what we do is research devices that are compatible
with these operating systems and firmware,
and then we source them, we refurbish them,
we work a great deal on refurbishing.
We test them very well, and then we sell them to customers
that want to use readily available freedom-respecting devices.
So, this is 100% free.
This is 100% free operating system devices,
but in terms of BIOS or bootloader,
only for the computers like desktop computers and laptops,
we have the possibility to install free BIOS while for the phones.
They're still running proprietary bootloader.
The main operating system is free software, completely free software,
but the bootloader, which is the equivalent to the BIOS,
still is proprietary, or even if we can liberate,
we can't liberate all the stages of this proprietary bootloader as of yet.
We are working with a community on solving those issues as well.
So, this is a technical goal for the future,
is to be able to get 100% free.
But even going back to the laptop,
you're seeing every piece of code,
when something turns on, the whole way through is free software.
That's an overstatement.
I want to close on the phones to say that it's impossible for now
to have completely free, freedom-respecting phone,
because we still have to figure out, besides the bootloader,
also the Wi-Fi that needs, for now, most of,
if not all, of the chips inside the devices,
the mobile devices, use proprietary blobs for Wi-Fi,
Bluetooth, and GPS, and so on.
For the Wi-Fi, we've been able to figure out how to support external Wi-Fi,
that we're also selling.
On USB, we connected with a device called OTG
for being able to use Wi-Fi, connect Wi-Fi without the need of proprietary blobs,
without using the internal one.
So, we're just connected externally.
But that's inconvenient.
And for the laptops, we still have some parts that are not free software.
For instance, what bothers us is the embedded controller,
which is the one that controls the power in the laptop,
the keyboard, and so on.
Well, it's a journey.
How are the free software foundations thinking about your project?
Well, our project is the one that has the most devices,
approved by FISOF Foundation, under the respect to your freedom certification.
We also have the newest models certified.
This here display is the T400S Slim version laptop.
It's built in with the next to 20 keyboards.
And this version is also with a display that has finger touch capability.
So, we're really proud. This is our flagship product.
It's covered in drool from all the people go, all the engineers go and pass.
So, not really, not really.
How much is that going for? I hate to ask.
Well, it's around 1,000 years.
People might ask, be curious why it costs so much for an all laptop.
But, well, when you buy a laptop, you have to figure out what is more important for you.
It is performance or is it freedom?
And for us, freedom is more important.
And we work very hard on refurbishing these all devices to look like new.
And, you know, be your partner in business and your projects for years to come,
not just break in the next year.
Well, I think sometimes you've got to walk the walk.
If you want to walk the walk, you've got to take out your wallet and talk the talk.
But, a thousand euros is not that bad for a freedom respecting laptop.
I'll tell you though, if you were to do this yourself and sit down and count the amount of time
and effort that would be needed to refurbish a laptop and put all the code and do all the debugging.
A thousand is not too far off the mark.
I'm really interested in anything that you have in the phone section, even if it's as free as you can possibly get.
Can you talk to me about that?
Sure.
So, we have three phone models supported that we also sell.
This is a replica running on them.
The community is very active these days.
They have released the version 4 of replica 6,
while they are with security patches updated to 2019.
While they are still working in parallel on replica 9,
they are based on the latest version of Android.
So, we are pretty happy about the collaboration with replicas.
Such support have troied a lot.
After it, I think it has been dropped for it because they were not removing some software
that they were labeling as problematic in terms of freedom and privacy.
And the free software guidelines of the free software foundation and the GNU project
recommend that these software applications don't stay in repositories on the same server.
Absolutely excellent.
What else have you got on here that you can show me?
Sorry, I didn't get that.
What else have you got a big motherboard here as well?
What's special about that?
Well, this is a server board or a workstation board that has a lot of horsepower.
It has two AMD processors with 16 core each and up to 128GB of RAM.
It's been, the Liverpool support has been developed by a company that also makes a server board
based on open power architecture.
And what is our part in all this is that we source test very well, refurbish the server boards.
We complete them with case and graphic graphics cards that are compatible with free software.
We test them and we ship them completely with the Triskil operating system
and Liverpool would firmware with sources and instructions on how to modify and flash Liverpool yourself.
So fantastic.
So basically you are the company to go to if you want to buy ethical hardware.
We are proud to be the company that has largest catalog so we provide a lot of diversity.
If you are interested in freedom respecting devices, I think it's good for you to stop by
and see if you find something interesting.
Okay, well, thank you very much for taking the time and enjoy the rest of the show.
We're standing outside of a conference in New York.
I am dead program, aka Ron Evans in the real world, but on the internet I am dead program.
And I am one of the contributors and maintainers of tiny go.
What is tiny go?
Tiny go is a go compiler that is intended for all the small places, microcontrollers, web assembly,
all the places where the traditional go language is too large, meaning executable files are too big.
Okay, so why would a programming go in the first place?
Well, go is a very appealing language for a number of reasons.
One is that it's a very simple language, which is only I believe 26 keywords.
Also, the reason why people use go is generally for concurrency programming.
It uses a model that's known as CSP, which is created by Tony Horr.
It's basically a way of writing concurrent code in a very simple way using channels.
So most people who write go code, who use the main go interpretation, that's on interpreter,
but implementation, that's what I mean to say.
If you use this main go implementation, you're using go because you want to run very efficiently on multi-core machines while using all of the cores.
So that's one of the primary use cases, but the language itself is quite appealing and its concurrency model is quite appealing.
So we thought, why can't we run go on the smallest of chips, microcontrollers?
I mean, if you could run Python or JavaScript on a microcontroller, you certainly should be able to run go.
Well, of course, those are famous first words that start a whole adventure of software development.
Tony Go originally is created by my colleague, Ike Van Laptom, who is a very gifted programmer out of the Netherlands.
I discovered the project about a year and a half ago, and I guess I'm like the first crazy dancer.
Never mind all those thousands of lines of code I also wrote. That was my alter ego.
So Tony Go uses the go compiler to then compile go into LLVM.
LLVM is a framework for creating compilers, and it's what's being used by a few languages that people might have heard of like Swift,
or Rust. So it's a very robust and mature set of tools for building compilers.
So we take the go compiler tool chain, we parse the go code, and we turn it into what's known as the SSA or single static assignment form,
which is what's most reduced form as a language.
Then Tony Go takes that and converts it into LLVM intermediate representation or IR.
That's what LLVM uses to then compile for whatever target architecture and process.
That's why we can compile our code for even the smallest of microcontroller, which I think at this point is an AT tiny 85.
It's an AVR microcontroller that has an 8-bit processor and only 8K of RAM.
So how would that compare to say something written and see using the ID given by the...
Well, nobody ever got fired for choosing C to do embedded systems.
But let's just say that C is a language that is definitely showing the stress of being morphed into way more things than I think it was originally intended to do.
You know, UNIX system 5 programming, basically.
Sidebar, I have a first edition currently in the Richie book that I did not buy brand new.
It was not used, whether it was new, but I didn't buy it when it first came out.
Like, you could buy those books new in bookstores for years after it came out.
No one cared. You know, it's amazing.
Now, of course, the world runs on C, you know, if you're talking about embedded systems.
But there's a lot of easy mistakes to make and see that have resulted in some fairly spectacular exploits and some really, you know,
tragic dysfunction as far as the internet infrastructure we all count on.
So, you know, C is a language which I think teaches us some of the next things to do, but, you know, so-called modern programming,
modern software engineering involves certain types of practices as well.
Things like continuous integration, you know, things like code analysis, easy programming of concurrency, garbage collection.
These are all things that it's actually quite hard or maybe even impossible to do in C.
So, that's where more modern languages like Go, for example, have come along.
But speaking purely from the efficiency of the codes, the ones and zeros running on the microcontrollers,
how would they compare an equivalent small program written in C versus?
Tiny Go. Micro Go, tiny Go. So, it's a very, very small Go.
So, if we compile our code, that is Go, and we turn off the garbage collector,
then we can compile code that is pretty equivalent to the compiled executable size in C.
Even turning on the garbage collector, which is one of the main reasons why you want to use Go in the first place.
One of my demos, I'll be showing in my talk here at FostM tomorrow, is I'll be showing on that same AT Tiny, an 8-bit 8K processor,
and I have a program that will be controlling a bunch of NeoPixel WS2812 lights and an LED.
And that program is 768 bytes.
Oh, nice, nice stuff.
Thank you very much for the interview and enjoyed the rest of the...
Hey, thanks for talking to me, and everybody, please check out Tiny Go.
I'm at the XCP-NG, that's X-Ray, Charlie, Papa, Dash, November, Golf, Booth, and I'm talking to you.
And you are? And Oliver.
So, tell me, what is XCP-NG?
So, basically, XCP-NG is a virtualization platform, like, for example,
Proxmox or VMware, if you aren't in the open source world, and the goal is to deliver something that just works out of the book.
So, it's a Linux distro, but bundled with Zen inside, and a tool stack, an API, and then you can add a web UI called Zen Orchestra on top.
And you have a full usable stack out of the books.
And is this just for hobby use, or is it used in production?
Okay, so, historically, it's a fork of Zen Server, edited by Citrix, but Citrix decided to remove some features in the free edition.
So, we weren't happy about that, so we decided to create the projects two years ago, and since it's used both for home labors with one machines,
but also in production with big players with more than 1,000 hosts.
So, it's pretty scalable, and it's both used by a lot of different users.
And it's completely open source in the way that all the features are accessible directly, there's no paywall or hidden features,
and the business model is pretty simple, it supports only.
Okay, very cool. What sort of licenses is available under?
So, mainly, XPNG is because of all the components inside, so it's not trivial, but Zen is GPLV2, for example, Zen Orchestra is AGPLV3,
so we try to get to the better license as we could, you know, because with AGPL you have more protection,
but you can't change the license, for example, for Zen, which is a no open source project.
But also, the thing that we like to do inside XPNG project is to contribute to all this project upstream first,
because this is the way you can succeed in an open source project.
Fantastic. Okay, thank you, and enjoy the rest of the show.
And I'm talking to?
Yeah, Romeo.
So, what are you doing here at Foster?
I'm meeting old friends, meeting new friends, and hanging out mostly in, you know, the networking in the community,
most of the videos I can look at them mostly online.
And yeah, it's a good meeting point, I'm getting a shower of smartness from anyone I talk to,
you can literally start any conversation with anyone here, you know, just ask like,
what's the shell that you're using, and you're going to have fun.
What project are you here talking about today?
I use ZSH, by the way, and yes, we are launching a new project, a software, which is free and open source,
it's called ZenRum, it's a virtual machine, it processes human language,
it's ready to process malevolent code expressed in human language,
it bales out if this code is not authenticated, and executes it if it's authenticated.
And execution is about cryptographic transformations, so you can do from basic Diffie-Hellman encryption and signature,
AS, you know, FIPS compliant sort of things, and also you can program new cryptographic schemes,
with a language very similar to Mathematica, which is something I crafted out of Lua,
so it's a subset of Lua, I use Lua as syntax, direct syntax parser,
and it executes elliptic curve operations, that cryptographers are very acquainted with,
because it's like Mathematica, or Synasophic.
So then, you can work with a cryptographer, and with an applied cryptographer, I'm an applied cryptographer.
In parallel, it becomes a sort of template for cryptographers.
It's useful, because you see templating brought a lot of freedom to web development,
when you can change the code without changing the design, no, I'm extracting those parts.
So we're trying to do something like that for cryptography, that cryptographers can express very simply their formula.
So this is purely for the cryptographic community?
Yes.
Like a normal humanist can go to be used in this, are they?
Yeah, we want lawyers to be able to read code, because, you know, in Europe, we had the GDPR,
the general directive data, yeah, protection regulation, thank you.
And so that creates a liability in most organizations in terms of data protection officer.
And often these people are responsible, they are a senior, let's say, in their organization,
but they don't come from programming, and they have to activate in order to verify really,
they have to activate a wall department of ICT, just to understand what's going on.
That's a huge overhead, and actually also a huge responsibility.
So we want, and also, at least, I mean, were we researched a little bit in Italy, France, Netherlands?
Most of these figures are lawyers, or people that know the law, that are able actually to play the bridge between the law and the code.
So why not making that closer together?
Because we want to facilitate these people to verify the systems that they need to.
And, yeah, so we're writing, how is encryption going to help us?
Encryption is what you need to do, like, you know, classifying certain documents,
signing them, spreading them, making a shared key to access a certain lock.
So that serves these sort of purposes.
It's an architecture. You can build architectures of trust within encryption.
Then, on the other side, what we do is putting a human language inspired to behavioral driven development.
So it's a sort of prologue. It's known during complete.
And it's very secure. It can accept my level of code.
So, yeah, that's the other part that we add to the possibilities that cryptography gives you.
Okay. Your website, ZenRum.org?
Yes. And our organization is Dine.org.
Yeah.
It's a foundation based in Amsterdam.
Yes, so.
I am familiar with the project, just.
Cheers.
Thank you very much, and enjoy the rest of the show.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
What?!
Nah.
Bye.
Bye.
Bye.
Bye.
Join us now, we'll share the software
You'll be free, I guess you'll be free
Join us now, we'll share the software
You'll be free, I guess you'll be free
Join us now, we'll share the software
You'll be free, I guess you'll be free
Join us now, we'll share the software
You'll be free, I guess you'll be free
Join us now, we'll share the software
Join us now, we'll share the software
