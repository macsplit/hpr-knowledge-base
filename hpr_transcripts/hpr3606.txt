Episode: 3606
Title: HPR3606: Infinity is just a big number and other proofs
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3606/hpr3606.mp3
Transcribed: 2025-10-25 02:05:05

---

This is Hacker Public Radio Episode 3,606 from Monday the 30th of May 2022.
Today's show is entitled, Infinity is just a big number and other proofs.
It is hosted by Ken Fallon and is about nine minutes long.
It carries a clean flag.
The summary is, Ken proves mathematically that programming is not easier with maths.
Everybody, my name is Ken Fallon and you're listening to another episode of Hacker Public Radio.
Mathematical joke for you, taking from Ian Stewart's concept of modern mathematics.
An astronomer, a physicist and a mathematician are on a train in Scotland.
The astronomer looks out the window, sees a black sheep standing in the field and remarks.
How odd, all the sheep in Scotland are black.
No, no, no, says the physicist.
Only some Scottish sheep are black.
The mathematician rolls his eyes to companions, muddled thinking and says,
in Scotland, there is at least one sheep, at least one side of which appears to be black,
from here, some of the time.
Concept of modern mathematics.
So, when we're bringing this up, it's in response to popcorn,
episode 2, programming mathematics and asymmetric literacy.
A mathematical proof, folks, is according to Wikipedia,
and a referential argument for a mathematical statement,
showing that the stated assumption logically guarantees the conclusion.
Okay, and if you wanted to know what that was, I refer you to that joke earlier.
Black car kernel put out on the matrix, saying,
you don't need to know maths to do programming,
is like saying you don't need to know how to read in order to write.
Technically true, but it makes it way easier.
Now, let me simplify that down in the best mathematical way that I can.
Knowing maths makes programming way easier.
So, if we rearrange the problem, there are no humans that ever existed or will ever exist,
that will not find programming easier, having the knowledge of maths.
And in response to that, proving he is incorrect,
I can fall in exist. I do not find programming easier
despite my knowledge of maths. QED, I have proven my point mathematically.
Thank you, thank you, thank you.
I never ever thought I would be standing in front of a mic,
giving a maths podcast of all things I absolutely hate is maths.
I have only started to enjoy or even tolerate maths recently
due to a statement that's tattoo made that maths
is a paper form of computer programming.
Now, that's what I thought black carnal will say when he met this show.
But in actual fact, he went on to talk about the about programming.
But, okay, let's not be pedantic about this and ignore the 19 other different forms of programming
that there are. But, you went on to talk about asymmetric literacy and that is where
in Chinese writing there's a common writing but not a common language.
So, you understand the text and not the language.
So, distilling a showdown, smidgen for you, for those of you who haven't heard.
Computers CPU has a bunch of instructions sets and it tells the computer what transistor operations
to perform. There are logical extensions of the instruction sets.
There is nothing in programming that is not covered by the instruction set.
The same way, maths depend on axioms and I caught it.
They are the same thing, the exact same process and I'm going to quote again.
Because there are the same thing under the hood, if you understood how to,
if you understood how to do maths, you'll understand how to make your programs better.
Because you can write programs in a way that reflects the underlying instruction of the computer
which will make the program run more effectively as giving you insight into how errors
may be occurring, et cetera, et cetera.
Now, that may have been true. So, that is the tenant of his argument here.
And I will go on to say that when I heard him say that statement, I believed
that familiarity with things like functions, familiarity with variables like x plus y equals
blah. Therefore, all that holds similarities, I thought was related to the syntax of programming.
But what he's actually talking about is the axiom of programming.
And even though he was wrong with my understanding, if he was arguing, as I understood it to be,
that programming computers are similar because they share the same sort of functions or procedures
and variable replacement and arrays, et cetera, et cetera. But what he's saying is the instruction
sets are the underlying instruction sets are the same as the axioms of programming.
And that's so ridiculous. I mean, we might have been true back in the day when you're
you've got an assembler and you're programming a chip. But nowadays, you are so far away on all
modern computers from from any layer of hardware abstraction that it's the idea that your program
into one instruction set is just ridiculous. Programs run on systems that run on Java virtual
machines, which have on top of the earth, which run on Docker containers, which run on virtual
machines and sell it themselves spread across multiple clusters, finally hitting different
processors, each having their own different instruction set down to running on multiple cores.
It's it might help programming a specific chip somewhere to do a specific task. If you've got
an Arduino and your and your programming using bare metal programming, but nobody programs bare metal
now using the old nobody programs, therefore I don't. So therefore nobody else does. But the majority
of program as I know do not program at that level and never will. A far better analogy is the real
world examples that you may have. So I really do not agree with that that you need maths in order to
program. And I definitely don't agree that understanding the axioms of mathematics in any way
would help you understand the logic of a of a instruction set. And also gone through those axioms,
the axiom of infinity is ridiculous. The whole the whole concept of infinity I have come to
realize is ridiculous. Just because we as humans cannot understand the concept that there might be
a very, very big number. We assign it the incorrect conclusion that there is infinity. There does not
I'm not saying that there isn't, but the proof that just because adding another number to what do you
get if you know there add another number to a big number, you get a bigger number. What if I take
two big numbers and add them together, then you have two big numbers. But if I keep doing that to
the end of time, well start. And at some point time will end for you at least and you will have a
bigger number, but that's it. You will just have a bigger number. So the proof for infinity in my
humble opinion is there is no such thing. You I haven't yet not seen a good proof that infinity
convinces me like you would a seven year old. So that's my next, that's my next
poking black hurdle with a stick or anybody else, Benny looking at you, prove to me infinity exists.
And it's it's just actually so ridiculous. In fact, there is something that computers are
perfectly fine at doing. Go divide a number by zero. What do you get infinity? No, you just
don't get the response back because it's a stupid thing. You have people arguing about all the
length of the coast of Great Britain as infinite so it can never be done. Yeah, right, course account.
You just get a rope and people around the coast, you set criteria. You say, okay, where is the
coast at what point? Over talking about high tide, spring high tide, the high tide that are low
tide on the summer day or whatever you agree on that. And then you go with a rope, they'll
wear out. Oh, but what if you had the thinner rope? Yeah, you think you agree on the size of the
rope because we're engineers. We're living in the real world. Don't give me started. Really,
I've been looking up YouTube videos to find out about infinity actually. And the all,
all of them have the explanations. Yeah, that if you keep adding another one number to another
number, then it goes on forever. Yeah, now I'm not convinced.
June and tomorrow for another exciting episode of Hacker Public Radio.
You have been listening to Hacker Public Radio. Hacker Public Radio does work.
Today's show was contributed by a HBR listener like yourself. If you ever thought of recording
broadcast, you click on our contribute link to find out how easy it really is.
Hosting for HBR has been kindly provided by an onsthost.com, the internet archive and our
sync.net. On the Sadois status, today's show is released under Creative Commons,
Attribution 4.0 International License.
