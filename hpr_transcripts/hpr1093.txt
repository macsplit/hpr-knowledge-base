Episode: 1093
Title: HPR1093: Separate Presentation from Content - 2 Office Software
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1093/hpr1093.mp3
Transcribed: 2025-10-17 18:48:47

---

Hello, this is Ahuka, welcome to the next part of our discussion of the separation of
presentation from content.
In the last one we took a look at what that means in the context of the web, which is where
I first ran into the concept, frankly.
Then I discovered that it's a much broader concept, and I want to talk about basically
the same thing, but now from the standpoint of office software.
Okay, now what I'm talking about is just office software in general, so everything I'm going
to say applies equally well, whether you use Microsoft Office, WordPerfect Office, open
Office.org, Libra Office, or indeed any Office Productivity Suite, or Word Process,
or Presentation Package, what have you, it's all the same because we're operating here
at a more of a theoretical level of understanding how to use this stuff properly.
Now I have worked with all four of those office suites, and in fact I have trained people
in several of them, and I have some experience of just how powerful these techniques can
be once you start applying them in your day-to-day work.
Back in my academic days when I was at a certain small university, I developed an 18 hour
course for our college students.
Now these were older students, this is what we call a degree completion program, so typically
people who had maybe two years of college and hadn't had to stop for whatever reason, and
now they're in their 40s and they've discovered, oh, I'm never going to get anywhere with my
career unless I finish my degree, and so we created a program specifically targeted
for people like that.
Any as part of it, we made the decision that they had to demonstrate a certain level of
facility with computers, and with all of the software that you typically use, which they
could do by taking a test, or they could take the 18 hour class that I developed.
Well, a lot of them either didn't want to take the test, or were unable to pass the test
for whatever reason, so then they wound up taking my class, but for many of them it was
something that they didn't want to do, and they weren't able to see right away the point
in doing it.
You know, a lot of people were probably thinking, ah, I use this stuff every day at work.
What am I going to learn?
But it was a requirement.
So generally towards the end of their program, it was, ah, all right, I got to take this
or I won't graduate, so they would take my class.
And then something very interesting happened, because in almost every case, the reaction
I got from them was, hey, why didn't you give me this stuff at the beginning because
it was useful, you know?
That's very gratifying if you're the one who devised the course.
But it illustrates that what we're talking about are ways to do things better and smarter.
So you know, this particular class that I created was covering the basics of Microsoft
Office, so we were talking about Word, Excel, PowerPoint, and Access.
But I've used the same approach to training and other office suites.
It's been equally successful because the principles here really do apply.
Now the other thing that happened, something happened to me earlier today that I think
illustrates a useful point, ah, I was on a webpage and I clicked a link to a PDF file.
Nothing terribly unusual about that.
File open, I read it.
And when I was done, I went, I clicked the close button on the upper right to get
rid of the PDF file.
I mean, I was done with it.
Isn't that what you do?
Ah!
Okay, I had just closed my browser and all of the tabs that I had opened.
There it is.
Now, side note, this is why the first thing I do with a new browser is I always set it
up to open the tabs I last had opened because I've done this before.
Now the point here though is that my browser automatically opened and displayed a PDF file.
That used to require calling a separate program.
Apparently that is no longer necessary.
I find that rather interesting.
And I suspect we're going to see more of this.
For instance, Google Docs is starting to bring all your office documents into the browser.
At some point the technology is going to treat any piece of data, text, whatever as raw
material and display it.
In other words, all of the Word Documents Excel spreadsheets or other spreadsheets, all
of the presentations you make, what have you, in essence, are just going to become web
pages.
And when they become web pages, everything we said about web pages is going to apply with
some equal force in constructing office documents.
Now that's not all.
In my day job, I am a project manager.
I have a need to manage large numbers of documents.
In fact, documentation management is a real concern for me, and I'd have to say that most
of the places I have worked do not do a good job of it.
Now there are some tools out there.
I will say Microsoft SharePoint, if used properly, is probably a real good step in the right
direction.
There's also open source tools that are available.
One of the best ones I know of is Alfresco, and I've put a link to that in the show notes.
So you can take a look at that.
I tend to prefer open source solutions.
If it were up to me, I would probably prefer Alfresco.
On the other hand, in many of the places that I've worked professionally, and it's been
a Microsoft shop, so promoting an open source solution is not always possible, but if I
can get them to use SharePoint, then they may go for that.
And frankly, it works very well with all of the Microsoft Office programs, and so it's
a reasonable solution.
As much as I like open source, there are times you just have to be practical.
But when you're doing this again, whatever document management solution you have, you still
have the issues of semantic encoding, and finding the document you want, which is a needle
in a very large haystack, and semantic encoding is a great way to help with that.
Now semantic encoding, as it applies in office documents, is a little bit different.
Not a terrible amount.
I'm going to tell you another story from my academic days at that university, as I was
the expert on everything involving office software, I was given the task of putting together
the college catalog one year.
Well, what that meant was I was combining a large number of documents, each one from a
different department, into something that could be considered a unified whole.
And these departments did not make the job easy.
No two of them used the same convention for laying out their information, and as I recall,
none of them used proper semantic tagging at all.
Everything was done using font changes, the space bar, inconsistent lists.
If any of them used tabs, they did it the wrong way.
So I had a situation where all of these documents were constructed with assumed visual cues,
but they couldn't even agree on what those visual cues were.
Elements were used inconsistently and improperly, and I had a mess.
So the first thing I did was go through each of these submissions and put in the semantic
encoding to tag these things.
Now, in word processing programs, this is done by using what are called styles.
And when I use the word style, you might think, oh, style, style sheets, yeah, there's
a correspondence.
They're basically the same idea, just applied in different domains.
So the proper way he is a word processing program, and again, this applies to Microsoft Word,
WordPerfect, LibreOfficeRite, AbbeyWord, any word processing program out there.
The proper way to do that is apply a style to each element, just the way you apply a
tag in a web page.
So when we talked about web pages, we said, the title of a web page should always be an H1
tag.
The equivalent in word processing, the title of your document, should be given a header
one.
Major subsections of a web page, we said that gets an H2 tag, major subsections of a word
processing document that should be called a header two.
Now a word processing program may take you in the wrong direction at first, because they
will have an appearance already assigned, or they'll ask you to specify an appearance
when you use the style.
You must resist the urge.
The point in creating your document should be to get the semantic encoding done correctly.
Once that is done, you can assign an appearance to each element and achieve a unified look
and feel to your document, or even to a whole group of documents.
Other illustration, you know, in my academic days, I remember when we were first bringing
in computers.
So I'm telling you something about how old I am, but the very early days of personal computers,
they were adopted by universities as a tool for their students and faculty.
There was some interest in trying to figure out, okay, how is this affecting education?
Are we improving what we're doing with the use of computers?
You know, there's a lot of money involved in putting all this technology in, and you
wanted to have some sense that you were getting a good benefit and you understood how this
was paying off for you.
So I read a study that was done at a reasonably large university in the eastern part of the
United States, where they were looking at computers that were used for freshman composition
classes.
Now, in the U.S. at least, these classes are pretty much universal.
Every university or college has freshman composition, it's always required, and the reason
is that the faculty, every one of these institutions, want to make sure that all students can
write papers at at least a minimal level of competency.
So at this particular university, they had set up courses using computers, who was still
fairly new at the time, and they had set up different and in large universities, you
will often have a course that might be taken by a total of two, three, four thousand students,
so they divide them up into sections.
The sections are taught by graduate teaching assistants and all of that, but, you know,
in these sections, some sections were set up to teach the course using Macintosh computers,
and other sections were set up to teach the course using DOS computers that were running
Word Perfect, and then they did a comparative study.
What is the work product from these two groups?
How does it compare, and when they did that comparative study on how these students wrote
something very interesting happened?
The DOS Word Perfect group were consistently writing better papers with superior content.
Now, this was a surprise.
They looked for any possible correlation that might explain it, but the two groups of students
seemed to have comparable grades coming out of high school.
They had comparable test scores on the standardized tests used for admission, and in general
on all measurements, they could think of the two groups were in effect identical, except
that one group used Macintosh, and the other used DOS computers with Word Perfect.
Well, they finally decided the most likely explanation lay in what each platform allowed
you to do.
Macintosh computers were the first to have graphical user interfaces, and they came with a variety
of font tools, graphics tools, and we're, you know, in general, the first personal computers
with a graphic design capability.
You could do page layout with these.
You could do a lot of good stuff.
That is one reason why Macintosh got such a big head start with all the graphic designers,
and is still the preferred tool for all graphic designers to this day.
They got in there early with all the tools the designers wanted.
They've kept developing them, and they have a very loyal audience there for Macintosh computers.
DOS computers running Word Perfect were very different, and I know because I had one.
In the mid to late 80s, they ran on monochrome screens.
When you opened up the program, what you got was a black screen with a blinking cursor,
and that was it.
A few years later, they started to get color monitors for these still DOS with Word Perfect.
And at that point, what you got was not a black screen.
You got a blue screen that was blank and had a blinking cursor.
In other words, the only thing you could do with those computers was write.
It didn't really give you any other options.
On a Macintosh, though, you were presented right away with font choices, with graphics
choices, page layout considerations, etc.
The conclusion of the researchers was that having all of these choices available to the
students distracted them from the main point, which was to write good compositions.
Students using DOS in Word Perfect.
No distraction?
Wrote much better compositions.
Now, I don't think this is just applicable to Word processing.
Another place where I've seen this crop up is with presentation software, like PowerPoint,
impress, what have you, this number of these.
Most of these presentation programs will try and start you off with a choice among graphical
templates and pick the way you watch your slides laid out and the colors and the backgrounds
and similar distractions, and again, resist the urge.
To make a good presentation, your first concern should be to logically organize your information.
When I'm creating a presentation, I frequently start with an outline.
Many programs will let you take an outline and turn it into a presentation with a few mouse
clicks.
And once you've done that, you can apply the template that you like to give the presentation
the graphic look you want.
It's not a big deal.
The point is to focus your mind on the main point first, and the main point is usually
not what kind of color background I'm going to put on my slide.
The main point should be the story that I want to tell in this presentation and getting
it logically organized.
Now that's not all about properly using semantic tagging and separating presentation from content.
One thing is that it becomes a real time saver.
So coming back to word processing, for instance, suppose you had a long document with a number
of sections.
Each time you came to a section, you could set the appearance of your section header by
clicking on the font you want, what size it should be, whether or not it should be indented
or numbered or what have you and so on.
You probably find yourself scrolling back through the document and saying, okay, how did
I do the last one?
It's a payment neck or you could do it properly by just saying this element is a header
two or this element is a header three.
And then you can simply set the appearance for all of the header twos in your document
or all of the header threes in your document to be whatever you want.
In fact, there are some very powerful techniques for tying them together into, you know, doing
numbering and all sorts of things, but only if you do the semantic encoding properly.
Furthermore, if you need to make a change for whatever reason, you don't need to go page
by page through the document looking for all the places that need to be changed.
You just change the characteristics of the header style once and then the whole document
updates.
In that respect, it's an awful lot like the example we used in the previous, the CSS Zen
Garden where you could change the entire appearance of a website by simply swapping one
style sheet for another very similar idea here, you can change the entire appearance
of a document by just making one or two changes to the style declarations.
So for all of the reasons given proper semantic encoding and separating presentation from
content is just as important in office software applications as it is in building web pages.
In fact, I would call it a fundamental principle of good information architecture.
So at this point, I just want to remind all of you that Ohio Linux Fest is coming up
and that is coming at the end of September, September 28, 29 and 30, Friday, Saturday, Sunday
and it's going to be wonderful.
Follow us on the various social media if you want to keep up on all of the news.
We have a Google plus page, we have a Facebook account, we've got Twitter, Identica, LinkedIn,
all of these places and that's really if you want to get up to the date news, that is
the best way to do it.
It's just follow us on the social media, we usually post about once a week some information
as we're coming up, I'm expecting at the time I'm recording this, which is July 1st,
I'm expecting within another week or two we'll probably have registration open.
When this is, it might be the end of July or beginning of August before it actually goes
out in the hacker public radio feed.
So chances are registration is already open as you're listening to this.
So please go there, take a look and I've got some websites in the show notes that I've
mentioned here that you can take a look at all of this and until next time I'm Ahuka
signing off for hacker public radio.
You have been listening to Hacker Public Radio or Hacker Public Radio does our, we are
a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR listener by yourself.
If you ever consider recording a podcast, then visit our website to find out how easy
it really is.
Hacker Public Radio was founded by the Digital.Pound and the Infonomicom Computer Club.
HBR is funded by the binary revolution at binref.com.
All binref projects are crowd-responsive by linear pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting
needs.
On list otherwise stasis, today's show is released under a creative comments, attribution,
share alike, free dose of license.
