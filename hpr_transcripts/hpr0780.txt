Episode: 780
Title: HPR0780: NovaCut
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0780/hpr0780.mp3
Transcribed: 2025-10-08 02:25:00

---

Hi everyone, this is Kwatu and I'm on the phone with Jason DeRose from a brand new project.
Well, I guess it's not brand new, but a new to me project called Nova Cut and Hey Jason,
how are you doing?
Great thanks, how are you?
I'm pretty good, so Nova Cut, first of all, give me a rundown on what exactly it is.
I mean, I know that it's a video editor, but what's special about it?
What's unique about it?
The most special thing about it is it's a collaborative editor, but that way you can work
on the same edit with other artists in real time who are, you know, in remote locations
with all inspired by basically distributed version control tools and what an advantage
they've been for, from open source in terms of, you know, making it very competitive
in the market.
It's important to bring the same kind of tools to artists, and plus, you know, we didn't
actually realize this when we started the project, but there have been a lot of artists
that have been asking for this sort of thing for quite a while.
So when did the project start, because I've read online that it's actually not as new as
I think it is?
About a year ago, the idea formed and actually procrastinating on finding a new job pretty
much, and just kind of, you know, all of a sudden the pieces clicked and just like, you
know, we can do this and the time in the market is right.
So we were pretty much broke when we started it.
So we tried to kickstarter campaign, but you know, like we were totally unknown and, you
know, had a hard time there for sure, because turning out to start is work that way.
Not a magic button that you just put your project on and suddenly you get funding.
Nope, not even a little bit.
Okay, so right now, where is the project?
What have you got?
You've got a kickstart campaign going on now, but I guess what have you got to show for
the project?
The past year, well, not, it hasn't been a year of development, so I've been a little
over eight months of development, over nine months of development.
So the first piece we worked on, we call the distributed media library, and so with
how we do our collaborative editing, basically we're really lazy and we get it free just
because we're storing that in CouchDB, and that there's a few details I can get into
later on that.
But the hard thing that we can't, don't get free is we have to get files back and forth
between users.
And we also have to support offline versions or proxy versions, basically media asset
management, but it's a, as far as I know, a really unique solution in that it's very
simple, it's peer-to-peer, and really was designed to start to finish for a certain
user experience.
That piece is basically done, and now we're moving on, and during that time we've done
very extensive UX research for the editor and are just getting into UI design work.
Okay, so let's take a step back for a minute.
First of all, it sounds like this distributed media thing was actually probably the hardest
part.
I mean, maybe I'm wrong because I'm not a programmer, but that part seemed actually, I mean,
if that's done, it almost seems like you've got a pretty major chunk done, is that right
or am I wrong?
Definitely right.
I mean, that's kind of the reason why we took it on first, because that was the highest
risk part in our opinion, and it's still, you know, it's definitely a lot of work
on keeping it simple, and because of the way we're leveraging catch-to-be, it does a
lot for the number of lines of code, for sure.
Yeah, it sounds like it.
Okay, so let me just take a step back.
So I mean, if you and I had shot some video or something, just to make sure I'm understanding
this.
And then you go back to wherever you are, and I'm here, wherever I am.
We could, in theory, both we could start up NovaCut on our local computers, and we could
essentially be collaborating back and forth on my K, how about this cut for this scene,
just back and forth as if we were sitting right next to each other.
Is that correct?
Yep, exactly.
The first thing that has happened is, you know, each person has to have at least a low
rise version of the video to look at.
Sure.
Once that happens, it's basically like a Google box where, in real time, from, you know,
sea changes.
Oh, that's amazing.
I mean, it just seems like to someone who I've been kind of using Linux for a while now,
and I've been looking for a video editor for a while now for Linux, and it's just been
very elusive.
You know, we've seen projects come and projects go, we've seen projects get really, really
close to where they need to be, and we've seen them kind of not get there, and just a lot
of, like, frustration.
So it's pretty exciting, and it seems like this is a pretty big leap.
Am I overestimating what NovaCut could mean for, for Linux, or...?
Well, we hope not.
I mean, you know, I think the, I think honestly making, just getting a video editor working
isn't that hard, because there's been, you know, 30 of them or so, different open-source
video editor projects.
We were very opinionated about the artists who are trying to help, and, you know, it was
only for pro-use.
We ourselves are not filmmakers, and so we're going to have to spend a lot of time talking
to filmmakers to make sure we have our priorities, right?
Right.
Okay.
So it almost sounds like the, I guess, the frameworks sort of exist by now, but what
people maybe haven't been quite getting is the way that a real filmmaker is going to
want to use the software that sort of uses all those frameworks.
Yeah, I think so, because we're leveraging G-String, which is on the mention online of
the day, that's, you know, a couple of million lines of code, and people say, like, oh, you're
making a video editor, it's like, well, no, we're, we're using a couple of million lines
of code, very solid mature foundations to build on.
So it doesn't sound like you're going to be necessarily copying the interface design
and stuff like that of other editors, like, you're, it sounds like you guys are trying
to develop your own style and let the artists sort of work in a specific way that I guess
the artists right now are kind of helping you understand what they need.
Yeah, exactly.
And I guess one thing I should say on that, you know, we're not trying to make it different
just for the sake of being different, but what we tried to go in with a pretty clear
mind, I mean, like, I personally kind of avoided using FCP the last year, because I wanted
to really think through the problems before kind of having my, my idea about how you should
do it color too much, but at the same time, you know, anytime we see something that's
when else doing well, and we can't think of ways to do it better, we have no problem
just copying what they're doing.
Yeah, right.
Well, no one in the programming business usually does, so I think that's kind of status
quo.
So it uses G streamer, what else, what other technologies that people would sort of be familiar
with?
Are you using on the backend?
Yeah, G streamer is the, you know, the way we can avoid the multimedia backend problem,
and then CouchDB is a really, really central to the design.
It's like a database kind of thing, like a really quick database or something.
The big thing about CouchDB is it does this kind of crazy bidirectional R-sync pretty much,
and you know, that's the future that we needed.
We, you know, we thought it the advantage of a collaborative editor, but if we had no
idea to do it, how to do it, and it just seemed too hard for a problem, and then actually
learned about CouchDB from DesktopCouch.
He basically gave a per user CouchDB launcher that, um, Stuart Langerich was the mastermind
of, um, and looking at that, he realized, like, oh, hey, if we store the edit in CouchDB,
we kind of get collaborative editing for free, um, assuming the, you know, the file side
of things is taking care of.
And then, I guess another advantage of CouchDB is, so it's a document oriented database.
Um, it's almost like you have one table, and each row in the table can be totally free
form.
Like, you know, it doesn't have to have the same number of columns, or, um, but it turns
out it's a, it's a really nice way to model and edit a lot of what I have to do is, you
know, just the way to model the edit, there's some way to save it to disk, there's an API
for changing the edits tape, there's some kind of event system for how the, the render
backend updates those changes, and CouchDB was such an elegant solution there.
I mean, that saved us so much work.
So it sounds like a lot of this, I mean, it's not actually such a big, it is a big deal
that it's distributed, but I mean, in terms of what information you're actually sending
from one workstation to another, whether it's in the same, same local network, or whether
you're doing this online with someone over the internet, it sounds like you're not actually
sending like that much information.
You're just sending like, I want to cut in here, cut out there, is that sort of thing?
Is that, is that accurate?
Exactly.
And CouchDB actually sends pretty much a stream of disks, so, you know, I'm having
to send across like the entire document, but yeah, it's very little data once you have
the files on each end.
So I'm just curious, like, how did, what, what made you guys think of doing a distributed
editor of all things?
I mean, that just seems like, I think I would have thought that everyone else would have
been still trying to tackle, oh, let's make an iMovie clone.
And here you guys are doing something that, frankly, I don't even know of an editor that
really has ever done right in the first place.
I mean, avid unity kind of does it, final cut server, with a horrible failure, so, I mean,
where did you come up with this idea of what, what need were you trying to fill, or what
was happening?
Also, the other part of NovaCut is distribution platform for direct-to-fan stuff, and so,
it was kind of noticing like, you know, because of HDSLR, especially, there was always a little
production spring up that were very high quality, I mean, you know, often looked, you know,
better than what you'd seen on TV, for example, and we're pulling it off on really low
budget.
HD-FLR, just being like those high-end sort of digital cameras that take HD motion captures
as well.
Right, right.
Yeah, so the, like, the Canon 5D Mark II was, you know, the first real cut lot of shake-up,
you know?
Yeah, yeah.
Sometimes usually you're, you know, they just distribute direct-to-factor fan to your
line crowdfunding, and we say, like, well, if you can give those productions a central
marketplace where, you know, there's a lot of entertainment you can get, and it's easy
to discover new entertainment, you know, kind of Netflix rating and ratings and reviews
kind of things, you know, we could help get these productions over that ledge where they're
actually profitable, and they can keep doing this.
So, you know, that's what we wanted.
Exactly.
Have you approached any of these projects about NovaCut?
I mean, are they aware of it yet?
Yeah.
Yeah.
So, Tara, our community manager and our display is on, has spent a lot of the last year doing
just that.
Just, you know, networking with these artists, touching base with them, telling them what
we're doing, getting feedback.
So, anyway, I mean, that's where a business model is, but then, you know, we were thinking
that, especially for these productions, you know, saving them time is so critical, because,
you know, it's like, they reduce costs so much that time is kind of the remaining thing
to try to optimize.
And I don't even think that you need to, to these kinds of productions.
I mean, you hear that at all the TV studios and everything, I mean, it's just faster, faster,
faster productions.
Yeah.
True, true.
Yeah, maybe we actually don't have our ear to the ground enough in other areas, because,
you know, there's certain sort of artists that we're really looking out for and want to
try that, you know, help.
So, we started thinking about, you know, helping build them tools from one is just a really
great way to build relationships with artists.
I mean, we wanted to have, I don't know, you know, to put something serious on the table
if we could in terms of like, you know, we were really rooting for you and we're building
us for you.
And here's kind of a gesture along those lines.
And then I guess we were just realizing that we could build something that was a lot simpler
than what the industry's building and could do something that none else has done yet,
which makes it exciting.
And it's usually been the editor's side of things that gets you excited about it.
Right.
Right.
What part do you, what do you do for NovaCut?
I know we'd developer and Alpha can be credited or blamed for having the idea, but the
other two NovaCut co-founders, Jeff Balla and Terrelfield, you know, at this point it's
on my idea anymore.
It's a group effort to shape it and polish it into what it is now.
Now, I saw the first thing I saw of NovaCut that I could really sort of get my mind around
was an online demo that someone had shown me and it's sort of a clip editor and it was
really exciting because it was in a web browser and it wasn't using Flash.
So how is that, it's obviously a significant thing that it can be happening in a web browser.
Is it going to be a web app or what?
This is actually a point we need to be clear on, I think, so technically it's not a web
app.
We're using a lot of web technologies because it seems a really good fit.
So in Possible, we're going to use WebKit to do all the UI, but it's going to be embedded
with WebKit running in a local application.
And then WebKit talks to catch-to-be, but because of that architecture, we can then basically
kind of accept the locality there and make it available in an any like HTML5 browser
and the other components are running on a server.
We don't think that's going to be a practical way to do a series editing, but, you know,
for example, if you're trying to show a client a bit of what you're working on and you
could pull up an edit and not just show like a render of it or whatever, but actually
you can show the edit, even if you wouldn't really want to work that way, just having that
accessible like that is we think of a really cool option, or another use case for that
is if you were like working on set and you had a workstation with the server components
running on it and you have a tablet.
And so, you know, you're basically browsing to the edit and because it's kind of a local
network, you're going to have that's going to be a nice response and just kind of like
a workflow tool on set.
And we're trying to use HTML5 for the UI, it's just a very plastic tool, so nobody
other to need fairly free form kind of canvassy user interfaces and, you know, I think at
this point, it's honestly a lot easier to do that with HTML5 than it is traditional
toolkit.
When you say it's HTML5, does that mean just HTML5 or you also say HTML5 plus like CSS3?
Oh, yeah, yeah.
And then JavaScript and yeah, using it in the way you're not supposed to, so.
Okay.
Again, I mean, I'm not a programmer, but like probably most other geeks.
I mean, I play around a lot in HTML and CSS and a little bit in JavaScript when I can.
So, I mean, it sounds like almost, I mean, I could theoretically sort of do some customization
of my environment or will that all go away once you get it into its own little UI and
everything?
Nope.
You hit the nail on the head.
So, yeah.
Your perfect example of why we think it's important because like, you know, like you said,
you're not a programmer, but you do know some HTML, you do know some JavaScript.
I think it's important for, I think especially with this kind of thing, you know, professional
artists and storytelling, it's very time-consuming.
And you might be doing some oddball production where just kind of a weird workflow, eccentricities
that your project has, it's worth it for you to build a little step custom or, you know,
try to, you know, ask some web developer to do that for you.
So, we think it's hugely important to make that as accessible as possible in terms of,
you know, something as many people as possible know and relatively easy thing to work with.
So, is this mainly geared toward Linux or is it going to be a multi-platform or what's
it running on right now, I guess, is it even better first question?
Right now, about Tuesday or primary target, we're going to play it by year as far as
where else to take it.
When we first started this, you know, we gave a serious consideration to having OSX, you
know, either equal partners as far as the platforms go or even the primary platform.
But I had a, a nervous feeling about where Apple was going with things and I wanted
to make sure we had a platform where we weren't going to get blindsided when, you know,
we knew it was coming and then also where we can get involved in the shape of development
direction.
And yeah, it's been a, it's been the best decision we've made, I think.
So, you know, to pay on how things play out, we may port it to OSX, but we may not
also.
But we feel that having, having a bunch of the primary platform is a really important
safety.
Yeah.
Well, I mean, I personally, I think that was a great idea, you know, in my dream world,
Linux would finally get some killer video application and everyone using OSX would migrate
over to Linux.
So, yeah, it's fantastic that this is a Linux-y project right now.
Although that said, I really do like multi-platform stuff as well, because, you know, it's just really
nice when you're stuck on some other platform, you can still use the application that you know
and love.
Right.
And I guess nothing I should say on that too, the hesitation to connect right now to porting
like the render back end to OSX is, as far as I know, G-Streamer is not exactly ported
to OSX right now, and that could be a, you know, a pretty big piece of work, but I think
we will definitely port the media to OSX.
It's Python, um, catch it, it runs OSX, so it's not a very big hurdle.
So, the, the media, that's the distributed media component of all this.
That was right.
Right.
Python.
Wow.
Yeah.
Yeah.
I keep thinking of Python as not a, I don't know, you know, the cliche about it not being
fast or whatever.
Yeah, it just depends on what you're doing at the, I mean, the only, um, really performance
sensitive part is the, the content hashing that, you know, that's actually happening in
C code anyway, so, um, and over time, you know, we could, we may, we write some components
of it in C, but right now, getting a protocol finalized is, you know, the most important
thing.
So being able to really iterate quickly is a lot more important.
And the media be useful for other types of media, I mean, just thinking about, I mean,
I guess it must do audio and video right now, correct?
Yeah.
Um, it actually work with any files.
Okay.
Our hope is that, you know, especially on Linux, we would love to have other people build
on the kind of core collaborative stuff we've made to step up to build some, some really
first class, uh, pro creative apps.
I don't have that much, I mean, I'm not that clear on what all about, about, about
how cut pro plug-in has access to and how easy it would be to make Final Cut talk to
the media, but that's something we'd love to do too, because, you know, it would help
artists, uh, right now, and then, you know, kind of get them away to start migrating parts
of their workflow, I guess.
Very nice.
Yeah.
Well, I mean, that actually, that, that kind of leads me to something I've been wanting
to ask.
So, um, how, how much of a, an application is no that cut going to be like, how big of
a beast is this?
I mean, is this going to be everything from like, editing to, um, you know, color correction
to compositing to rendering or, or is it really just kind of like a, here's a nice way
to cut some stuff, put it into a sequence and then dump it, dump the edit decisions out
and, you know, stick it together with some other thing, I mean, like, what, what's the scope,
I guess?
Initially our focus is making it just a really fantastic cutting tool.
Long-term goal is to make it a end-in solution for the productions we're targeting, you
know, everything from like, script writing to logistics, if the goal is to save them
time, we have to kind of look at everywhere we can do that.
And it's not that, of a cut, it won't become some boarded super application, but it's basically
that we save information in the same database and then we build workflows in top of that
that are pretty much, you know, to, to view their, it's going to seem like a standalone
application.
But the great thing is that these workflows can draw the information created in other
workflow steps when it makes sense.
Yeah.
That's, that's really cool.
I was getting really excited about NovaCut, just kind of like where I am in the independent
film world is just, you know, being able to tell people I work with, or my friend, that
Linux is a valid option without having to, you know, spend five years getting to know
Linux first, that kind of thing.
So I mean, I was really excited about it and I thought maybe I might be the only one,
maybe I was like getting excited about it or whatever, but I mean, I actually started
to see some, some pretty, I mean, you've got people really kind of interested in it.
I mean, there's one guy, I don't remember his real name, but he's, each in IRC who's
like done a compositing work for Harry Potter, for Clash of the Titans.
The guy who did four-eyed monsters, Aaron Cromley, I think is his name, he's, he's kind of
interested in this.
So I mean, you've got some people really looking at this, it sounds like, as a serious solution.
Yeah.
And we're still so lucky to have that, but, you know, it didn't just happen magically,
you know, the reason that it happened is the very first thing we did, it started talking
to these artists.
And the first artist, we started talking to, tended to be people that, you know, we're
pursuing pretty far out business models or, you know, by some standards, pretty far out
business models.
So like the, the Pioneer One guys just started talking to early on and Aaron Cromley and
people like that were, they're willing to hear us out, even when we, you know, sounded
like just some crazy hippies at first.
And then, and then over time, it's been interesting that more and more serious industry people that
are working in the, the very, not far out business model into the, in Hollywood are, you
know, starting to talk to us and, you know, give us feedback and especially after the FCPX
issue.
I was going to mention that.
Yeah.
Yeah.
All of a sudden the conversation's gotten a lot easier.
Yeah.
So I mean, there was no way for you guys to anticipate that.
And I don't know how, how much of a general knowledge it is, but Final Cut Pro recently
came out with a brand new version, complete rewrite of what really has become an industry
standard video editing platform.
And it's really upset like a lot of people and there are online petitions, there are people
really, really upset over this redesign of Final Cut Pro.
And it's not backward compatible with the previous version of Final Cut.
So people who are, who are updating aren't able to open up their old edits in this new
version.
And then you come along and announce that, oh, by the way, we're going to have Final Cut
X and L compatibility.
It just seems like, wow, how perfect was that?
Have you been getting a lot of response from Final Cut Pro would be bailout?
We're starting to, you know, it's taking a little time to spread our reach there, you
know, because initially we really relied a lot on kind of the open source community to
kind of, you know, get excited about this and because it was a, an easier step for
them.
But it was actually talking to Aaron Cremley recently about FCPX and he said something
like, well, you know, you pretty much have a diaspora situation.
So you should definitely do a Kickstarter right now.
And we're like, yeah, you're right.
So your business model sounds like it's really kind of targeting the idea of a community
creating content and sort of consuming that content as well.
Is the, is the future of the application?
I mean, it's completely free software right now, right?
It's open source.
Right.
People can download it and modify it and all that other stuff.
Is that pretty much your, your goal to keep it that way or are you going to change that?
Yeah, it absolutely is.
And, you know, a lot of the reason why I guess to clarify a little bit with the exact
business model is so, you know, we're a distribution platform and when artists make money
we'll take a cut.
And we made a really deliberate decision to only make money when an F artist make money
so that we're, you know, we're lining our priorities.
You know, it's like, okay, we want to make more money.
How do we do that?
Go make artists more money.
And so we deliberately don't want side channel revenues, but you know, another option
we could do to say support.
And I think especially, you know, we could have traction in Hollywood.
That's a place where that makes sense.
Oh, yeah, absolutely.
I mean, if people set up a NOVA cut server, you know, and had a room full of editors working
on different projects, different segments, whatever, they would obviously, I'm sure they
would want support for that just to have someone to call just in case, you know, there's
a question or whatever.
Yeah.
Yeah.
It seems like I keep hearing about Linux, you know, in the movie world, like in applications
like Shake or Smoke and studios like using a bunch of Linux on a back end so they can
do their own custom software solutions.
Do you think this could take advantage of any of that or might be well received by places
that already use Linux?
I think so.
Have you talked to any of them about that yet or I mean, I know they don't just, you know,
you don't just call them up, but I mean, have you been contacted by anyone of that sort?
Well, we haven't yet, but we do have a friend who, not long ago, finished a couple of
your contracts at a special effects shop, they did more 3D animation, but some special
effects also.
And his entire job was basically to try to glue the tiny bit of FCP workflow they had
into their Linux workflow.
And I think you said there were like four or five contractors on this.
So, you know, a five-bronk of money over a couple years was spent just, you know, as a
bandaid pretty much.
And he was saying that, you know, people that run those cap studios or run post houses
would, you know, people me at the mouth for a Linux editor that was, yeah, yeah, through
it's not the career option.
Yeah, yeah.
It often amazes me when I go to a studio or to a production facility and you see them
paying out so much money for multi-seat licenses for Final Cut or trying, like you say, trying
to sort of force sit their Final Cut piece into an otherwise Linux based, and it might
not even be open source Linux stuff, it might be stuff that they've built in-house and kind
of keep themselves, but it's still Linux based.
And you're just like, why don't they just take a chunk of money and invest it in a group
of programmers to write them a proper editor, like what's the, what's the hold-up?
Yeah, it's actually a pretty good question and I think it's an interesting opportunity
for us because if we can, you know, do a lot of the work and kind of bring the leadership
and design focus into it, that's needed, you know, all of a sudden, it gets a lot more
attractive for them to, you know, think, okay, here's something that's liable, why don't
we throw money at the few features we need to use in our workflow?
Yeah, I mean, that's, I guess, the classic argument against, certainly Final Cut and of
course, it's, I think, kind of been the traditional one against Photoshop, is that there's so
many features in these things and then you look at a, you know, the real people actually
using the applications in a professional environment and they like, they use like 15 of the
features, you know, just, they don't want the fancy transitions or the, you know, the funky
little title animations, you know, they just use the, the, the real parts.
Yeah.
What's your background in, in Linux and end programming for that matter?
Mostly Python programmer, and that actually done a ton of little projects with DStreamer,
so it was, you know, part of the reason it was an obvious choice for me, it was also done
a lot of database stuff, although I'm pretty new to the, the, no SQL world, and I'm
pretty new to CacheDB.
I worked at Red Hat for a couple of years before, before this, no other cut craziness.
Oh, wow, that's cool.
Yeah, yeah, great company.
And that kind of, that shows that you're pretty familiar with like heavy lifting kinds
of stuff.
I mean, Red Hat you think of really serious networks, really serious environments, so I could
kind of see NovaCut fitting in pretty well with, you know, with a studio where time was
money and reliability mattered, all that of the good stuff.
Well, another strength of Linux, you know, because I think modern video editing needs a
strong server foundation.
People are starting to get that from Apple, you know, I mean Apple doesn't run OSX on their
new big data center, and there's a reason why.
Yeah, yeah, exactly.
So how far along is NovaCut in terms of, I don't know the timeline or whatever, I mean,
how, how, how much of it is built in terms of the stuff that someone like me who would
want to cut video, I mean, how far along is that part?
It's getting really close.
One of the things I've, I've spent a lot of work on the last year designing how to edit
or store it in CouchDB.
The emphasis there was really making it as easy as possible for UI designers to work with
that, because the schema is basically the, the API, you know, they're rather than having
like an API, you basically like manipulate the file format to just a way to think about
that.
It's very simple, very direct.
And with the way it's designed, it's also really easy to map into a, a geostemer pipeline,
which I'm, people have been whining about the fact that we don't have that yet.
But, you know, the geostemer, very like the, the, the genome-line API is actually very
high-level in, in my opinion, and because we have a graph-based way of describing the
edit, turns out super easy to build a graph-based pipeline.
So I just started working on that this week when I was really tired.
Great time to start programming.
Yeah, yeah.
And, and, and I almost have it being able to render Cuts basically, so, you know, no
transitions yet, no, uh, volume adjustments and like that, but just, um, rendering cuts.
And so I'm going to try to finish that up, it, it's hard to do doing Kickstarter because
it's subtracting, but I'm going to try to get that finished during Kickstarter to kind
of prove the point that it's like, hey, you know what, when I said this wasn't a lot
of work, it's because I had done some background research and realized it wasn't a lot of work.
And then on the UI side, we're prototyping with kind of regenerated canned video files
and like metadata in a totally separate repo, and we run it in a browser just because
we want to go through a lot of variations and basically major how fast they were to use
before we picked the ones that are worth being full implementation of.
But then because we're using WebKit for actual live UI, you know, it's not a ton of work
to move the exact same UI onto the live backend.
So we think, uh, you know, Kickstarter works out and kind of like stay afloat financially
and, um, I'm happy to rush off and get a full-time software gig, um, that we can probably
be doing the first full-on collaborative edits in about two months.
That'd be really cool.
We think so too.
So in terms of, um, and this is probably getting way ahead of everything,
but it's just stuff I'm really curious about.
So in terms of like compatibility with other editors, I mean, I know you were saying maybe
down the line there would be some way to hook into or have Final Cut hook into D media,
that sort of thing.
But let's say I start my project in Nova Cut and then for whatever reason,
I have to get it out and take it over to, I don't know, Blender for some compositing or,
Final Cut for whatever I would want to do in Final Cut.
Uh, is that sort of thing going to be, uh, possible or, I mean, I guess it would probably be an
edit decision list of some sort, but I mean, is that, is that pretty easy to do as well?
As far as I know, yeah, um, it seems like the, the XML support is the most important, um,
just in terms of kind of feedback I've got so far from people.
And, you know, I haven't looked too much into how the, their schema works,
but the nice thing is on, on our end, how we describe it is very simple.
And so, you know, something on the other end, it isn't too crazy.
It's going to be pretty easy to go back and forth between the two.
And what's, what, why did you guys choose the HD SLR format?
Was it simply because that was the equipment you had or do you just see a lot of promise for that?
And, and do you plan on supporting other, uh, formats?
Or, is that all going to just be falling on G streamer anyway?
Um, good question, but I guess maybe I'll answer the last part of it first.
So, okay, it, it is all falling on G streamer.
And so, you know, in reality, it's going to work with a bunch of cameras, um,
right from the start.
As far as the HD SLR, the things they're special about is,
it's going to be a full metadata support.
So, I'm not sure if you've ever noticed that there are these little,
uh, dot THM files corresponding to each video.
Um, so they actually have the, the same exit data that you'd normally have in the still.
And there's a lot of handy, I mean, you know, I personally think having like the
other speed and aperture and ISO and that kind of stuff is, is priceless in terms of learning and
shoot good video.
Yeah, yeah, yeah.
But then there's also nice stuff like we know the white balance and, um, the camera serial number.
And so, there's a lot of workflow automation opportunities with, with that metadata.
Yeah.
So, the reason we started there, I mean, Terri's a photographer, so, you know,
we do have the equipment, but the real reason we picked it was that probably 75% of these
kind of recent direct-to-fan web serials and, and movies and shorts are being shot in HD SLR.
And that's a part of what's enabling them to make something high quality for the list as they are.
Okay, well, in that case, you've probably already started tackling this.
I, I was going to try not to ask those questions.
I thought it'd be, again, just way out there, but maybe this is something you guys have already
experienced and accounted for.
But obviously, for one of those cameras, I'm probably not getting the audio, you know,
into that camera.
I'm probably recording it on some separate device, like the H4N or something like that.
How do you get the audio and the video to be associated?
Or is that going to be all on the editor's job?
We want to automate it whenever possible.
So, one nice thing about the file import workflow that we have for DeMedia is, you know,
you can, you can shove anything into it, and you don't have to have the editor open, actually,
to import stuff. So, you know, it takes care of, you know, audio, video,
photos you happen to take, whatever other things might be on the cards.
And because, typically, you're importing the audio and video that go together
near each other in time, as far as when you do the import.
It's an easy way to narrow down which files go together and then going to work on an audio
sync, like, pluralize, basically. So, since there's no time code, we can just take the
crappy in-camera audio and then the good external audio and, you know, find the alignment points
and line up the clips that way. So, we want to make that totally automated.
So, when you open the editor, you see the clips are already grouped and lined up.
I wonder, I guess, I mean, specifically on the H4N and I'm only using that as a reference point
because that happens to be the one that I have. You could go into the menu and, like, name your,
you know, you can change the default file name. So, I guess, if there were some way to sync up
on set how you're naming the audio files and what you're naming the video files, I guess,
that could be something, too, I don't know.
True. Yeah, we have an H4N, also, just because it's also focusing on, I mean, we want to kind
of have a standard equipment recipe that we actually have. We can test it all the time.
And it seems like the H4N is what people are using more than anything else.
So, that's what we got one.
And what camera are you guys using then?
The 5D Mark II and the 70s.
Okay. Cool. And how are you just out of curiosity? How are the rigs?
Are you got nice lenses or anything or any of the nice shoulder mounts that they're coming out with for those?
Or is it pretty much just the straight-up camera? I'm just curious.
No shoulder mount, because we, you know, we're out of money about time to start this.
But from turrets, you know, photography side of things. She has quite a few, you know,
like nice Canon lenses. And then we do have, my brother has a Merlin study cam,
that we borrow pretty often to be able to play with, you know, bit of stabilization, too.
Very cool. Okay, cool. So, are you guys looking for, or I imagine you might be looking for help,
what kind of contributions aside from going over to kickstart and putting down some money,
which, believe me, is well worth it. And I think people who are into this kind of thing,
independent art and independent software should do that. But is there any other kind of help that
you guys are in need of right now? One of the easiest places to get involved is with the UI
prototyping, you know, with the media, partly because a lot of those just in my head. And it was,
you know, I couldn't get it out fast enough. Right. But it, you know, is a little hard to divide
and conquer there. But now, like with the prototyping, especially, you know, we want people just to run
with it. And so, you know, we're trying to make that easier to get involved with. There are a few
hard places we need to help. And one of them is we need sort of a, basically a special web kit plug-in
so that when, so you're doing, you're scrubbing through video or you're, you know,
color correcting and you're applying it, applying it that you want to see the result in real time.
That's one case where we don't want to have to go through CouchDB to get like a preview. So we
basically need the render server to build a draw onto the HTML canvas directly. There's a
hashing library we need ported from Python to, or from Python 3 to Python 2, that's stuff like that.
But I'm actually, I need to make a page somewhere where I kind of list all these things that,
you know, we need some outside help with to try to, you know, get that more widely known.
Yeah, actually, and I guess we should mention the website. What is it? I don't want to say it wrong.
So go ahead and tell me what the website, the main website for NovaCut is.
Um, so it's, it's NovaCut.com, you know, VA, CUT. It's just kind of a placeholder right now that
looks really pretty. It's designed by James Raymond. Not not much there, but all the codes hosted
on Launchpad. I think about five products on Launchpad that have the different components.
There's stuff on the Ubuntu Wiki and then our IRCGL's hash NovaCut on free node.
And what about the kickstart? How can people get there? Kickstart or a page?
So the easiest way to do that is, well, go to NovaCut.com, there's a link, or if you go to
Kickstarter and search for NovaCut, the kickstart URLs are kind of long and not worth trying to say,
probably. Right. What's the goal of kickstarter? Like, what's your monitor? What are you trying to raise
and what's the cutoff date for people to get in and give you money before the whole thing?
I guess gets rebooted or whatever happens at the end of a kickstarter.
So we're trying to raise 25,000. Actually, the same amount we tried to raise a year ago,
which we went on without it for a year, but we really can't do that anymore.
Yeah, exactly.
And it ends July 29th. We're looking for investors, but we kind of got to cut up working on
the code and talking to artists and working on the UX design that we haven't
been pursuing investors enough. So we're really backed into a corner. So the goal is to get us to
the point that we're demonstrating real collaborative editing. You know, it's just going to be
cutting. There won't be a lot of features yet, but it's going to be good cutting and just to really
make that tangible so that then it's it's easy for us to engage with the best investors and
determine that they're favorable. One of the reasons we've been hesitant about begging for
from any random investor is we've put a lot of work into really doing what's right for artists,
and that's what Archdemon is to, but I can get turned around really quickly with the wrong
and wrong investor. Right, I see. Yeah, that's a good point, and that's very cool. I certainly
respect and appreciate that myself. Short story of why we started this is Box Canceled
One Too Many, Joss Weed and Shows, and that was it. And we're like, and we're going to do something
to help artists. We're going to take them to our own hands. And so, you know, it really is
truly a labor of love because we want to see artists telling their stories. We don't want to see
them jerked around by networks or so. We're computer companies in terms of the apple final cut,
the Asco. Yeah, yeah, exactly. Really? Exactly. I don't understand how much they are sort of at the
wind of all these larger entities when they have no control or no say over the tools that they're
using. So this is a huge deal. I think I just wish artists realized that, but maybe they are
starting to see that. Yeah, I think so. I mean, you know, a month ago maybe we would have got a lot
more eye roles, but all of a sudden it's making a lot of sense. Yeah, yeah. Well, very cool. And,
yeah, I mean, great luck on the project and on the Kickstarter campaign. Great work on what
exists so far. I'm just floored by it. I'm just really, really impressed. Very exciting. And,
yeah, thanks for talking to me.
Thank you for listening to Hacker Public Radio for more information on the show and how to
contribute your own shows. Visit HackerPublicRadio.org.
Thank you for listening to HackerPublic Radio for more information on the show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show and how to contribute your own show
