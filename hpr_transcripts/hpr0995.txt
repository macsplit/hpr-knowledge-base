Episode: 995
Title: HPR0995: Do the four freedoms extend beyond software ?
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0995/hpr0995.mp3
Transcribed: 2025-10-17 17:05:54

---

Today in Hacker Public Radio, do the four freedoms extend beyond software.
On the next for the rest of the episode 74, the Legislative Sessions, Mr. Gadgets, and then the following feedback.
So the important question I'd adore, I would like your opinion of it, okay?
I'm sitting in a barley fruit club, like I pointed before, with these four people that I better know of.
And we were talking about the four freedoms.
And I put forth that the only way to contribute to open software was not just to work on the code,
and the people that did not have programming skills could still contribute to open stores through documenting,
through testing, and through actions that were revolved around open stores that weren't directly coding.
And a person, like I said, who I met the first time in real life, but knew from podcasting before,
a person who's opinion I value, and that's why it hit me so hard.
Current to me, and kind of that our faculty said, no, the four freedoms only cover programming.
It's only the code that is covered in the four freedoms.
So now I feel like I am stealing from open stores because I don't have the ability to contribute to the code.
And if I don't pay somebody for writing the code, I'm stealing it.
And that's the honest opinion that I have at this point.
And I'm being honest with myself because I've been saying for years that I'm going to learn a new modern programming language,
and I've decided pretty much that's going to be Python because that's the one that has the most breadth of resources as well as capabilities.
And I'm being realistic because I'm old enough that I've only got about, you know, one more language that I can learn really realistically.
And if I do that, I guess I can contribute to that open state project you talked about, and some other Python kinds of things.
But how do I justify the fact that I can't look at the code and I can't modify the code, and how can I contribute to the code?
So I'd like your opinion on that door, and I'd like your opinion of the other listeners, whether they think that's how the four freedoms work.
Because this has become such a fundamental thing that has hit me to the core that I've seriously given consideration to just giving up on the whole idea of the four freedoms,
because I'm never going to be able to code, and therefore I cannot contribute.
So I'd be interested in your opinion on that.
And like I said, you guys wrote great show notes, and I love the shows, and door I still will get that beer by now.
Just in case you didn't get that, what the person said was, and I called the four freedoms only cover programming.
It is only the code that is covered in the four freedoms.
So first of all, let's get a definition of what the four freedoms are.
And for this, I went to GNU.org philosophy, free-software.html, and the article is entitled, the free software definition.
For those who don't know, these are the people who maintain the four freedoms.
Freedom zero is the freedom to run the program for any purpose. Freedom one, the freedom to study how the program works,
and changes to make it do what you wish. Freedom two, the freedom to register your copies, so that you can help your neighbor.
Freedom three, the freedom to improve the program, and release your improvements, and modified versions in general to the public.
So that the whole community benefits. For the remainder of the article, it continues to basically expand and expound on these four freedoms.
However, I want to continue down the exact same page, down to the section that's entitled, Beyond Software, which states, and I quote,
Software manuals must be free, for the same reason that software must be free, and because the manuals are in effect part of the software.
The same argument also makes sense for all the kinds of work for practical use, that is to say works that embody useful knowledge, such as educational works and reference works.
Wikipedia is the best known example.
Any kind of work can be free, and the definition of free software has been extended to the definition of free culture works applicable to any kind of works.
So I think in summary, the free software definition has indeed extended beyond software alone, and extends into additional works.
So Mr. Gadgets, your shows were an inspiration to a lot of people including myself.
Thank you very much for all your contributions to Hacker Public Radio, who releases its work under a copy-left license that respects the four freedoms.
Okay, with that, before I wrap up the show, I would very much like to have our text to speech synthesizer read you out the article that was linked about why software manuals must be free.
And this of course comes directly also from the GNU.org project, and remember that not everything you hear in a pub is true.
Why free software needs free documentation?
The GNU free documentation license.
The biggest deficiency in free operating system is not in the software, it is the lack of good free manuals that we can include in these systems.
Many of our most important programs do not come with full manuals.
Documentation is an essential part of any software package.
The important free software package does not come with a free manual, that is a major gap.
We have many such gaps today.
Once upon a time, many years ago, I thought I would learn Pearl.
I got a copy of a free manual, but I found it hard to read.
When I asked Pearl users about alternatives, they told me that there were better introductory manuals, but those were not free.
Why was this?
The authors of the good manuals had written them for a Riley Associates, which published them with restrictive terms, no copying, no modification, source files not available, which exclude them from the free software community.
That wasn't the first time this sort of thing has happened, and to our communities' rate loss, it was far from the last.
Preparatory manual publishers haven't asked a great many authors to restrict their manuals since then.
Many times I have heard a GNU user eagerly tell me about a manual that he is writing, with which he expects to help a GNU project, and then had my hope smashed, as he proceeded to explain that he could sign the contract with a publisher that was restricted so that we cannot use it.
Given that writing good English is a rare skill among programmers, we can ill afford to lose manuals this way.
Free documentation, like free software, is a matter of freedom, not price.
The problem with these manuals was not a Riley Associates charge the price for printed copies, and it itself is fine.
The free software foundation sells printed copies of free GNU manuals, too.
But GNU manuals are available in source code form, while these manuals are available only on paper.
GNU manuals come with permission to copy, and modify. The pearl manuals do not. These restrictions are the problems.
The criterion for free manual is pretty much the same as for free software. It is a matter of giving all users certain freedoms.
Redistribution, including commercial redistribution, must be permitted, so that the manual can accompany every copy of a program, online, or on paper.
Permission for modification is crucial, too.
As a general rule, I don't believe that it is essential for people to have permission to modify all sorts of articles and books.
The issues for writing are not necessarily the same as those for software. For example, I don't think you are obliged to give permission to modify articles like this one, which describe our actions and our views.
But there is a particular reason why the freedom to modify is crucial for documentation for free software.
When people exercise their right to modify the software, and add or change its features, if they are conscientious they will change the manual too, so they can provide accurate and usable documentation with the modified program.
A manual, which forbids programmers from being conscientious, and finishing the job, or more precisely requires them to write a new manual from scratch, if they change the program, does not feel our communities needs.
While a blanket provision on modification is acceptable, some kinds of limits on the method of modification pose no problem.
For example, requirements to preserve the original author's copyright notice, the distribution terms, or the list of authors, are okay.
It is also no problem to require modified versions to include notice that they were modified, even to have entire sections that may not be deleted or changed, as long as these sections deal with untechnical topics.
Some GNU manuals have them.
These kinds of restrictions are not a problem because, as a practical matter, they don't stop the conscientious programmer from adapting the manual to fit the modified program.
In other words, they don't block the free software community from making full use of the manual.
However, it must be possible to modify all the technical content of the manual, and then distribute the result through all the usual media, through all the usual channels.
Otherwise, the restrictions do block the community, the manual is not free, and so we need another manual.
Unfortunately, it is often hard to find someone to write another manual when a proprietary manual exists.
The obstacle is that many users think that a proprietary manual is good enough, so they don't see the need to write a free manual.
They do not see that the free operating system has a gap that needs filling.
Why do users think that proprietary manuals are good enough? Some have not considered the issue.
I hope this article will do something to change at.
Other users consider proprietary manuals acceptable for the same reason so many people consider proprietary software acceptable.
A judging purely practical terms, not using freedom as a criterion.
These people are entitled to their opinions, but since those opinions bring from values, which do not include freedom, they are no guide for those of us who do value freedom.
Please spread the word about this issue. We continue to lose manuals to proprietary publishing.
If we spread the word at proprietary manuals are not sufficient, perhaps the next person who wants to help you and you by writing documentation will realize before it is too late, that he must of all make it free.
We can also encourage commercial publishers to sell free, copy-lifted manuals instead of proprietary ones.
One way you can help this is to check the distribution terms of a manual before you buy it, and prefer copy-lifted manuals to uncopy-lifted ones.
Note, we maintain a page at least free books available from other publishers.
Copyright free software foundation.
Think. This page is licensed under a creative commons attribution or the RIVS 3.0 United States license.
You have been listening to Hacker Public Radio at Hacker Public Radio, those aren't.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR who's sneered like yourself.
If you ever considered recording a podcast, then visit our website to find out how easy it really is.
Hacker Public Radio was founded by the digital dot pound and the economical and computer cloud.
HBR is funded by the binary revolution at binwreff.com, or binwreff projects are crowd-responsive by lunar pages.
From shared hosting to custom private clouds, go to lunarpages.com for all your hosting needs.
Unless otherwise stasis, today's show is released under a creative commons attribution.
Share a like. He does own license.
