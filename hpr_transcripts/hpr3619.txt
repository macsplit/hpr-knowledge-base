Episode: 3619
Title: HPR3619: Linux Inlaws S01E58: Kubernetes and Friends and Sarah
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3619/hpr3619.mp3
Transcribed: 2025-10-25 02:19:08

---

This is Hacker Public Radio Episode 3,619 for Thursday the 16th of June 2022.
Today's show is entitled, Linux in Law's SIE, Cubernicus and Friends in Sarah.
It is hosted by Monochromic and is about 68 minutes long.
It carries an explicit flag.
The summary is, the fun continues with a discussion of container orchestration, frameworks,
the death of containers andâ€¦
This is Linux in Law's.
A podcast on topics around free and open source software, any associated contraband, communism,
the revolution in general and whatever else, fans is critical.
Please note that this and other episodes may contain strong language, offensive humor
and other certainly not politically correct language.
You have been warned.
So our parents insisted on this disclaimer.
Happy Mum?
Thus the content is not suitable for consumption in the workplace, especially when played
back on a speaker in an open-plan office or similar environments.
Any miners under the age of 35, or any pets including fluffy little killer bunnies,
your trusted guide dog unless on speed, and Qt-rexes or other associated dinosaurs.
This is Linux in Law's season-something episode 59 of Martin Reminds the Correcting.
Martin Hall thinks.
Yeah, not too bad.
Well, it could be not worse if you're living in a certain part of the world, so all good
over here.
How are you?
Ah, well, surviving this post.
All limbs attached still.
All limbs attached here.
The last body count.
From what body count?
I'm sorry, I'm sorry, I'm sorry, I'm sorry, I'm sorry, I'm sorry, I'm sorry.
This is something in your cellar that we shouldn't ask.
No.
Martin, you shouldn't.
Anyway.
So how's the kingdom doing these days?
The kingdom, the Dutch kingdom.
Yes.
No, no, no, no.
That used to be called the United Kingdom, or sorry, United Kingdom, anyway.
Ah, that's actually not a good name, is it?
Because we have a queen, so it should be the United Kingdom.
That's there.
I suppose they didn't.
United.
United is probably kind of.
And what I'm looking for is an exaggeration these days.
And then I don't know.
It's.
Little Britain, that's not completely.
We still have some.
Some.
Some Welsh people and some Scottish people catch to the UK.
Well, from the bottom of the.
Yes, talking about countries and stuff.
How is your.
Have you?
How smelly are you?
Smelly.
Am I?
Well, surely you've stopped taking showers and using gas and stuff like that.
Mark love course is referring to.
The second world war, but I'm not that old, Mark.
No, no, no, no, no, no, no.
I'm okay.
I'm okay.
Then I'm referring to York.
Yeah, the need to use less gas.
This one I was over in Holland.
They had that for saying, we had to take shorter showers and.
Ah, because of the Russian.
Yes, I see.
I see.
I'm still living there.
I'm still living with.
I mean, what's what I'm looking for?
Highlife, exactly.
So.
Somebody.
Somebody has to support Putin.
No.
Yeah.
Well.
That's the bait bull way.
Does anybody.
Does anybody actually support?
That's a good question.
That's a very valid question indeed.
No, no, as a matter of fact, I haven't seen these ads that.
People.
I mean, is it really rolling in the internet?
Yes.
You should cut down on.
Yeah.
On energy consumption.
Okay.
No, these not here in Germany.
Okay.
But then this whole thing is quite cool anyway because on the one
side, we're paying Russia billions.
I think if on a given day, maybe in a week for gas and to some
extent, also oil.
But at the same time, apparently, we are funding the crazy, the,
the, the, the, the, the, the Ukrainians.
Ukrainians were an elaborate scheme of weapon exchanges, but probably not quite to the same
monetary amount.
I don't know how much the federal government has committed in terms of billions being
poured into this, but apparently the deal is that the Ukrainians get Russian heavy artillery
from some other countries.
And in turn, Germany gives these other countries modern stuff as modern kids.
Which is having trade-in deal, because trading your tank deal, because the existing kid
is of course of Russian origin.
Right.
This is the irony of things.
Which is clever because you see the Russians in that case do not know who they are, who
are Russian.
What if it's our Russian kid?
What the hell?
Yeah.
Yeah.
True.
Have they still have plenty of spares as well?
Yes.
But of course, this is not the current affairs broadcast.
No, it is not.
No, this is actually the, what's the word, what's the name I'm looking for, Linnett's
Indos podcast?
That's the one.
Yes, yes.
One of the leading.
I know it's been a while.
Yes.
Podcasts.
It's the podcast.
It's growing.
One, surely.
Exactly.
Exactly.
Hacker public radio stats or not.
Can you feel the thing?
Thank you for hosting us.
What are they doing stats now?
No, they're not.
No.
I was just helpful for a moment.
Yeah.
Yes.
As we all know.
As we all know.
No, no, no.
And the website includes our food anyway.
So, no sweat.
Indeed.
Indeed.
So today's episode.
Exactly.
Today's episode is on one of Martin's favorites, hipster subjects, mainly containers and also
orchestration.
I thought we could play more.
Exactly.
We actually, as a matter of fact, we did operating system level virtualization of which containers
are an important part.
Yes.
Speaking of which much.
You want to give a short recap of the of the of the previous episodes.
Well, we talked about operating system for tradition.
Excellent.
I didn't even have a very short recap.
Yes.
Yes.
Of course, that's a that's a very bold teaser to download the series episode.
I think it's 50, 50, 52 or something.
We did it.
Maybe in general.
It's 58.
It's the previous one.
Yeah.
I don't know.
I can't remember.
It was one of the things.
Exactly.
And the long and short of it essentially that we kind of gave an overview of the different
operating system level virtualization approaches.
Of which containers are probably the most recent addition to that zoo.
And probably odds the most on both ones.
Because everybody's using containers.
You actually see this.
If you take a look.
Well, you say everybody, but you mean my hips to developers, right?
You see if it which is funny because if you take a look at any viable, any any popular project on GitHub.
Database whether it's a midway software or something else that requires a little bit of installation.
Therefore chances are that as part of the quick start, you have a Docker file that you that you can use to set up your container.
Yeah.
You have to install the stuff.
Many on the on an individual machine or something like this.
You just don't know the Docker file.
Then you invoke it.
You build the image.
If it's kind of regularly available on on Docker on the on the Docker hub.
And then you have a running container and then you can start to play around with.
Redness, mongo, couch base, and other knows you could there.
They are probably the most prominent examples in this space.
Not to show if you if you followed redness content.
Martin.
No, no.
Does it still exist?
Yes, it does.
Okay.
And redness really something called redness stack.
Yes.
Yes.
Marketing blue from some.
Exactly.
And that is of course available as a as a container.
Okay.
A very small stack.
Okay.
Kind of.
Yep.
It's however.
Yeah.
Yeah.
It's easier.
It sounds good.
Working for redness.
You mean you mean marketing plug not a tease.
And people just use the favorite search and the redness stack essentially is a combination
of open source redness as you find along GitHub plus all the modules that come with redness.
But enough of marketing.
But enough of the marketing thing today's episode is not just for containers, but rather
about orchestration approaches on top of containers.
Yes.
Because as we all know, containers being the hipster right this is in the virtualization approach
of today of rather recent times running containers in themselves is not enough because essentially
the idea is to have that goes hand and have with this whole micro services thing because
the idea is to have a container per market per micro service.
So the idea is to package any supporting infrastructure that you need like middleware databases,
queues, and other components that make up your ordinary or normal app stack as containers.
So you need to probably quite a few containers over time, depending on how you structure or
restructure your existing application stack.
So in contrast to previous times, we simply had a code on the list like you have a few gigabytes
of compressed Java virtual machine byte code executable.
I wish you that would simply put out a computer and then pray that it would work.
These days you have about a hundred million little containers all doing their own thing.
But they of course need monitoring deployment.
You maybe want to scale these deployments up and down depending on your workload,
on your traffic on these contents on the rest of it.
So the days where you would simply set up a container manually,
shove it into VM or into a cloud or on that metal simply gone,
especially if you're talking about real production moments that carry real workloads.
Indeed.
Okay, so this is where you're going to have some examples of orchestration frameworks.
Well, I think it comes tomorrow.
No, it's one of these hipster things that I have been pushed severely of every search engine company called Google.
And you introduced here.
Most of these people now work for VMware by the way.
I think it's bold.
Acceleration Martin because I think because I think Google is to a hundred thousand employees strong.
Maybe maybe six years.
Well, that's not not the good.
Keep powering.
I'm sorry.
I thought maybe in general.
Okay.
Well, carbon needs.
How is Google doing?
It's this seem to be required these days.
Well, the last quarter was apparently wasn't that great, but this is just you know,
this is just your ordinary that I reckon.
In the cloud, everybody's going back to your own premise.
You say so much.
Well, actually, a lot of people haven't left yet.
But you see, carbon needs as many other frameworks as open source.
So I'm not to show where the contributors come from.
GitHub probably will cat will be able to tell you.
But anybody can contribute to good.
Yeah, no.
Stop talking about the original founders of Kubernetes.
Okay.
Craig, we're lucky.
And they want to get there.
Why did it?
It's because we are on the biggest contributors to community.
So see.
Of course.
Not for VMware.
It's.
It's a.
Yeah.
But anyway, we're not just talking about VMware Redis.
We're talking about container orchestration.
We know exactly exactly.
Before we move on to Kubernetes,
what other orchestration.
Options are there for people.
Well, there's there's a couple of obsolete ones.
Okay.
Sorry, docker swarm was.
Well, docker.
I mean, I came across one company that actually uses docker.
Still use docker swarm these days.
But they have been the docker shops for at least six, seven years, maybe eight.
And invested heavily into the technology.
But all the other companies that I that I know that used to use swarm,
they essentially migrated to Kubernetes.
I mean, the approaches are pretty much the same.
Hmm.
Cool.
You're looking at frameworks that can set up a cluster.
Can scale the requirements up and down.
Can manage containers.
Well, it's also the disservice access on what kind of stuff and.
Exactly.
And the notions on top.
Yeah.
That configuration aspects things comparable to kind of classical configuration management database,
the CMDBs.
It's security.
I mean, aspects like like.
Yeah.
I got vacation uses exactly.
So the things that you find in swarm that you find in resource that you find in data center.
But also carbon it is those words saying.
But it's probably fair to say that carbon it is the most popular one at the moment.
Hmm.
Which is interesting because carbon it is strives heavily on strives family rather.
To to set it as things.
You can see this actually.
If you take a look at what's happening under the hood.
Because carbon it is, for example, as probably quite a few listeners,
nowhere flipped out that technology.
It's container technology agnostic.
Meaning you can use any OCI compliant as an open container initiative.
OCI compliant container framework.
Yes.
The default one is, of course, Docker.
Well, it was.
But I see a lot of people moving over to contain the dinner.
Sorry.
If you.
My mistake.
If you use any any quick start thing.
Like mini cube.
But we're going to go into that in a minute.
Thank you.
Or.
As a company.
It's been in production.
Hey, I'm in it.
Let's go.
Sorry, Martin.
I must have missed on quick start at easy entries to cover.
Normally use Docker as the go to default.
Container.
Yeah.
Yeah.
Okay.
So I was talking about production deployments.
But still.
I know.
I mean, I don't know that many people that that run very different technologies.
I mean, a cryo.
It's becoming more and more than norm.
In contrast to Docker, but cryo essentially is a strict on version.
The decision to do taken.
Of a previous dark version.
As an adjust the staff that you need.
In order to.
To create containers to manage containers.
Thank you.
Well, it's it's.
I mean, most of the time.
That's as a runtime.
The most people seem to.
What I've seen is is moving to contain a dinner.
But.
There is a.
We're talking about orchestration at most.
Yeah, but it's also our complaint too.
You can use any OCI complaint, container runtime.
Yes, for container runtime, something wouldn't surprise me.
That would be sensible.
Yeah, so where will it be anyway?
You were just going to explain what Kubernetes is,
and where the other frameworks have fallen into.
Ah, yeah, so I mean, I used to use Docker as a fair bit,
which is quite nice, but that's just purely the deployment part,
so it allows you to set up your cluster of multiple containers
and do the networking and all that kind of stuff.
But that's not enough right.
You want scaling and port failover and you want
a balancing and all this kind of stuff.
Which was Kubernetes gives you the one annoying thing
as a side note about Kubernetes is there
about a frequent release cycle, but in my opinion,
there's probably something to do with the product maturity as well.
Mr. Bissar, Mr. Bissar, Mr. Bissar.
Yeah, it is.
We put it up on the SD's and cover it with the drawings.
Most people would consider it to be a dick and cover me just no.
No, no, of course it's every six months.
Okay, I think that every quarter or something like this,
yeah, it's very, you're right.
It's, it's, I mean, take, you know, 122, right?
That was the least.
Say a month ago, yeah, a month ago.
No, currently because that was 123.
Sorry, the latest.
Okay, let's say the latest 122.
So 122.8 was released in the 16th of March.
It's end of life in October.
That's probably just a bug fix up there because I think the last version
and we're recording this later on was I think 123,
but maybe I'm completely off here.
Oh, yeah, the latest one is 123, which
released in March to, I think, if I'm completely mistaken.
Yeah, so the 1231 was no, no, no, 1331 was
end of 2021.
So that's seeing that year.
So the package is something that's probably something
called as or comparable to long term support release.
Isn't LTS?
It's like a year, right?
Jeremy, our favorite, our favorite health is coming from canonical,
which is just been released a couple of days ago, actually.
Yeah, if you want to update your LTS box now, it's the time.
No, actually, you have to wait if you're still running 2104.
You have to wait until 2022.1 drops, which is probably around August.
Okay, I can wait.
That's right.
But this is not you.
This is not the Ubuntu podcast.
No, no, no, no, no, no, actually, it lost exactly.
Yeah, so going back, going back to Carbonitas, what are
these orchestration frameworks for containers?
I mean, what are probably the most prominent
challenges with running these millions of containers in production?
It's mainly having to deal with Yamol in my opinion.
It's not chasing, no, it's not saying Yamol down, it's not far tolerance, it's not high
but everybody is in that kind of way. The most annoying part is Yamol.
You can't hear, you can't. You're chasing and you're choosing to do so, it doesn't happen.
Some minor inconveniences of Kubernetes about.
For the two Listiers who are not familiar with Kubernetes is what this joke was all about.
Is there kind of gals also as in people that are too old to use.
Yeah, if you are in Kubernetes, there are two approaches.
You can tell either Kubernetes on the command time what to do.
Or you can, and this is the imperative mode, I was confusing them.
And there's another, exactly, this is called the imperative mode.
And there's another approach to configuring containers.
As Intelli Kubernetes wants to do, and that's called the declarative mode, which uses manifest files.
And these manifest files are as modern ones.
They are in Yamol.
Exactly.
Almost the written in Yamol.
And of course, it's manifest as retail.
Kubernetes, how to start a container, where to get the image from, what to do once it has started a container,
how many replicas there should be a full container or rest of it.
And this is a mark before you move on to replicas.
Yeah.
Yes.
What does that stand for?
One yet another mark up, which is something?
Sounds about right.
Yeah.
That sounds right.
Anyway, before we move on to Yamol.
Yeah.
Okay.
Running a container as a single object or runtime is fine.
But when you are running in production, you may want to run this on multiple machines.
So Kubernetes has the concept of worker nodes where so-called pods can be deployed, giving you scalability.
And in some cases, that's our availability of applications.
I couldn't have put it better, Martin.
I mean, the whole idea of containers, especially these are these are the change the frameworks.
This is essentially you're looking at a throwaway unit.
Because if a container dies.
Yes.
Yes and no way.
Sorry.
You want to finish that sentence?
Well, we just go ahead.
So a container is born and then dies.
And what happens then, Martin?
Then, um,
Yeah.
Kubernetes will start up another one somewhere else.
If it is then he on it's it's Yamol configuration.
That was the original concept behind it, right?
It's throwaway.
It's also term it's.
It's cattle instead of pets, isn't it, right?
So it's, um, you can have as many as you want to.
And when you don't need them anymore, you see them in the head kind of scenario or something.
That's the that was the idea behind Kubernetes.
But then people wanted to also run databases in there, which shall we see?
It wasn't bad.
I'm beginning.
It was kind of contrary to the concept of the whole thing.
But this is a personal person.
I know jokes aside, I mean, the problem starts, of course, with, for example,
if you have containers that want to talk to each other.
So why don't, why don't we go through a very high-level description of Kubernetes?
To give some ideas of who we're looking at.
The whole thing that Martin has just kind of already alluded to.
Well, containers live in parts.
So a part is essentially a collection of containers.
The important thing to remember about a part in Kubernetes is that a part is
only confined to a cluster node.
You can have more than one node in a cluster.
You probably need this.
But yeah, they're called workers in Kubernetes only.
Correct.
Yes.
It's not a physical.
It's not a physical machine.
You could have multiple Kubernetes workers on a single machine as well.
Anyway, yeah.
Yeah, exactly.
And of course, that's also a master, which is typically the first node that you set up in a
web user's cluster.
And of course, the beauty is that you can roll your own.
There's something called the quick start things called mini cube, q8 AM and some other
and some other approaches that give you basically a cluster out of the box with either
a couple of AMs or a single node cluster can be set up with something called mini cube
pretty quickly because it's all that mini cube does.
It is on your machine.
It is also hypervisor.
It is already present.
And then it downloads a couple of containers that make up a single node,
carbon disaster, and that's all.
So going back to these pods, the things of course, containers want to talk to each other.
You have an issue because if a container can disappear randomly,
and that's exactly what these orchestration frameworks look after.
Among other things, these containers are the other containers remaining one shouldn't
be necessarily aware of this.
So one of the first things that actually come to mind when you think of it is also a network
abstraction there that is typically known as service in companies because that adds network
functionality on top of pods.
That allows you to access pods in the cluster on different,
maybe also on different nodes, but also very importantly,
these pods can be then accessed via services from the outside of the cluster.
It's actually important if you're running applications outside your cover,
you need this deployment.
Well, hang on a minute.
You're running applications outside your community deployment.
Yes.
So it doesn't have a whole idea to put them all into communities.
Well, that depends.
I mean, if you have the general ledger that has been running on a mainframe for the last.
You don't want to put that into communities.
No, but for some reason that the general ledger has to talk to some fancy
hipster marketing application framework for whatever reason that runs in the container.
Yes, of course, you would need access to this container stack
to this container basic rather running in carbon you just from the outside.
And that's exactly where things like service is coming to play.
Yes.
Regarding storage because as the listeners of the previous episode on operating system
visualization will recall containers are formal,
meaning you start up a container and unless you have taken explicit provisions.
All the memory that the container contains is gone once you destroy the container.
Yeah.
That's the reason why typically modern container farmers such as Docker allow you to
model to, for example, to mount volumes from the outside.
If you start a Docker container and then you tell it to mount the volume,
that the application or the processes running in that container then have access
to the local file system of the supporting operating system,
meaning that any data can be stored outside the container.
If this is stored on the mounted volume path.
So Cabinitas has something called persistent volumes that exactly look after this
persistent storage.
And in that notion on that context, there is a so called persistent volume,
persistent volume claim PVC that actually tells Cabinitas now.
I need some storage on ADVise.
Simplify.
So they have a question for you.
Why is it called a claim?
Why are we claiming storage?
Because claims can be denied.
Okay.
They shouldn't.
It's a bit kind of inconvenience if you need it.
Indeed.
The reason why it's called the claim is that you can parameterize the whole thing.
In terms of you are not bound to a particular volume because PVC refers
to an existing ideally persistent volume.
And then that persistent volume tells Cabinitas where to find the storage,
what notes to involve in all the rest of it.
This is the idea behind separating claim from an extra persistent volume message.
Yeah.
There's another kind of main concept with Kubernetes.
It's really every request is a state change request, isn't it?
It's not a, let's say I
accelerate your volume claim.
You're asking for it for Kubernetes to do a state change.
So it's all asynchronous.
And we'll come back when it's changed that state basically.
Yes.
There's something very important, exactly,
where one is referring to is a state change on the so-called control plane of Cabinitas.
The control plane is essentially an API server that keeps the state of the
cluster consistent at all times, or at least tries to.
And that control plane is supported by two entities on the worker notes called
Acuplet and Acuploxy.
Acuplet essentially controls all of the things going on on a cluster node,
like creating whatever it is.
Did you explain what acuplet is?
Yes, I was just about to.
Okay.
That's checking.
So acuplet basically, imagine the, imagine the creation of a,
of a, of a so-called deployment essentially a deployment tells Cabinitas what
containers to use or what containers in application consists of.
And how these containers should be scheduled.
Hence the notion of a deployment that corresponds to replica set to parts
of it is essentially it's, it's a combination of, of a couple of parts as
and containers as a network as in service and some other things.
Like replica sets that allow you to scale parts accordingly,
while they're running by the way.
So essentially when Cabinitas is accepting the deployment,
what happens in the background is the control plane will accept this request,
will then go out to the worker notes,
will create the containers that make up the parts.
And then we create the services, the replica sets to all the rest of it until
it has reached the state that is defined in the, in the deployment and then
it considers the deployment to be created.
And for this, you need something called acuplet running on each and every cluster node.
That for example, takes care of the local creation of the containers by talking to
the container runtime, whether it's cryo, whether it's, whether it's docker,
whether it's rancher, because all of these container runtimes,
as long as the OCI compliant are, as I'm sorry, the open container initiative,
that's the standardization body behind this, behind this, behind this interface,
can, that were conformed to these OCI things.
So essentially cube, the cube that then knows how to spin the containers.
The cube that also knows how to talk to the local operating system running on the
nodes, in order to, for example, create services.
Because under the hood, essentially what it does, it creates no space within
collaboration with container, with container runtime.
And then, in the case of Linux based containers, for example, it takes care of creating
the network entities by, for example, using laptops.
So it creates a couple of virtual network layers on top of the existing operating
system, visible network.
And then you have fabric controllers like flannel and so forth,
also adding another layer of abstraction on the existing network stuff,
in order to address name spaces.
A name space in Kubernetes is essentially a collection of abstractions like deployments,
like persistent volumes, persistent volume claims,
pods, services, you name it, and some other entities that are separated from other
name spaces, that allow you to rather easily segregate applications from one
another.
There are a couple of default name spaces in Kubernetes when you set up a company,
a company's cluster, you have at least two default name spaces, one for any of
core default, yes.
And the other one is called CUBE system.
And this CUBE system namespace, hosts all the infrastructures,
finally love alter running in containers, that Kubernetes needs internally to
control cluster nodes, control the control plane, make the controller work,
and also take care of the APIs of it.
If you set up a company's cluster, if you simply take a look at CUBE system,
this is your Kubernetes system running on the master node and all of the worker nodes.
Funny enough, if Kubernetes doesn't start up properly,
the first thing I normally do, I take a look at the entities in CUBE system
to make sure that, for example, all of the containers that make up Kubernetes
smarts in CUBE system up and running, because little bit technically though,
are you also running your own Kubernetes?
Just for fun.
Oh, sorry, Mark, because I can.
Just checking.
You could just go to Amazon or Google, and it's not one of the Kubernetes
distribution.
But either cost money, and I have the hardware already.
So why buy a hardware scanner?
And fully store the people.
Martin is the hands off type of the two of us.
I'm more the hands on type.
Martin likes to think simple.
Exactly.
Martin likes to talk about PowerPoint slides.
And that doesn't sound very hopeless.
Sorry, sorry.
Martin likes to impress people with impressed slides.
We're getting somewhere.
Exactly.
So Martin also likes to hand out PDFs to the people listening to him.
These PDFs contain glossy marketing oriented content aimed at business people
and other interests and other people having.
I can't describe in describing your own job.
No, my job is actually to make things to make things happen basically
that people like you promised.
I'm the opposite.
So you give you from the environment like a virtual machine I make things happen.
So.
Hasn't really changed.
No jokes aside people.
I'm setting up a company to deployment, especially if you want to start.
If you want to get going on that technology is straightforward.
That already I kind of already mentioned mini cube.
Mini cube, as I said, is a five minute job.
And then you have your single.
And then you have your single cluster single load cluster.
Sorry of companies run up and running on your Mac book pro on your Linux machine.
I think even on Windows is a completely completely mistaken.
So what I did recently in order to staff my playground, if you will, in terms of.
You let my background.
Just to have a couple of class to notes, essentially, because I have nothing better to do.
I took one of the laptops.
That that actually was running.
I think you went to a debut and put two VMs on it or actually three VMs with KVM,
which comes natively with a kernel as a kernel virtual machine.
There's a candy tool set called.
It's running on the.
There's a there's a handy abstraction.
They are called lip word that takes care of the of the of the command line in the face into KVM and other and upper and other hypervisors.
The event basically I had a set of three VMs and then are you simply cube ADM and.
Links will be the show notes essentially the way you do it.
You create using the first VM.
You download the software to the first VM.
You create the cluster that makes the that first VM the cluster master.
And that basically gives you a single node covered is cluster.
As part of this cube ADM installation, you get something called a secret.
You go to the remaining two nodes or I want to the remaining two VMs and executed QBM there.
Simply giving that secret to the the installer and then pointing cube ADM at the existing first node and within about 20 minutes.
I had my three notes.
Cover me to the cluster up and running on one of my laptops.
It's not that difficult.
And then I have a three note.
So I'm assuming on this given its cluster.
Anything.
Okay.
No, I mean, I just needed eight.
I just needed a playground for a couple of things.
But rather than going to a Harper scalar like Google like like Azure or like like the book shop and paying money for this because I had the Harper sitting in a on a shelf doing nothing.
Anyway, I simply did it on a laptop.
Okay. Well, you have to say first you don't need fancy how to run this one communities on your.
Exactly. If you if it's in if a single cluster, no, if a single node cluster is sufficient, just use mini cube.
I mean, mini cube does it all for you.
And get this up and running as I said, is a far from the job.
Okay.
Any other container frameworks you'd like to discuss?
Human orchestration frameworks.
I mean, it's it's really all.
But should we touch on OpenShift actually?
Well, in that case, we might as well explain operators in handcharts.
Joking.
No, what is OpenShift Martin?
I mean, you're the right hand fanboy, right?
Of the two of us.
No.
You know, I thought you were.
I don't know, but that has any band boys here.
If you are a fanboy, right to us.
Yeah.
Exactly.
At redhead. Yeah, sorry, OpenShift.
The idea behind OpenShift essentially is to package and correct my partner from wrong because I haven't used OpenShift in ages to package.
Certain functionality on top of the native carbon-heated deployment and sell this as a shrink wrap product.
And that's exactly what we're trying to use to the anyway.
OpenShift is also an open source project, right?
So yes, obviously there's the redhead version, but there's also the open sort of open shift project.
And yes, it uses Kubernetes underneath there.
Yes.
I mean, what's the difference then being behind this fancy web UI that you get with OpenShift?
And the different commands on interface, which is mostly compatible to native carbon-heated from completely mistaken.
Yeah.
I think it's more a higher level abstraction again, where you can define application templates and things are that right.
So if you remember in.
In the latest days.
Yes.
For example, you could have, you know, sing single on redheads as a template or a three in a three pod medis with a cherry, etc.
It's different templates.
Rather than for as we previously mentioned, people having to write a bunch of YAML to decide what kind of redis cluster they want to.
And they just pick the template and click a button.
So it's more.
It's not me.
Let's say more, more user friendly than a bear.
Yeah.
Which is not too far from something called a hand chart.
If current law is anything to go because exactly that's more or less what a hand chart gives you a hand chart.
Like OpenShift.
It's.
I would compare it to a distribution is split this way because a hand chart is essentially a package manager for carbon eaters.
You pointed to a repo.
That repo has.
Well, yes, templates probably would come would come close and help in a home.
They're called M charts.
But these hand charts essentially tell a carbon eaters.
How to instantiate.
Save for example a database instance.
How many replicas this has?
What the deployment looks like?
How availability is configured?
How the volumes are are configured.
That's exactly a home shot.
That's exactly a home chart.
In addition to this.
Carbon eaters as far as I know since version 1612.
Maybe I'm a complete wrong.
Has the notion of an operator.
Hmm.
Indeed.
Where an operator in comparison to a native home chart has much more life cycle functional functionality built into it.
For example, comes in handy.
Yes.
Yes.
What is an operator?
An operator is essentially it's a package.
It's a package and deployment descriptions.
It's a package definition.
Yeah, it's sorry.
Yes.
It's a bit of code.
Her chart is more language normally.
And.
Mark, I've never written operator.
So you tell me probably something fancy.
Like it's.
It's actually go.
That's that's go.
Okay.
That's that's go.
Okay.
Let's go.
The native Kubernetes language.
Right.
And you've read this on a on one of the impress lights.
No, no, no, no, we built many operators over here.
Yeah, as a matter of fact, you can.
If you want to go to the next level, right?
You're an operator for your own application.
You can.
Of course, you can write operators in any language as long as you need to.
To arrest this API because it's that that's exactly what the.
I need to implement.
So as long as you have something that can talk rest.
Operators are not too far off because essentially at the very bottom.
Of the definition operator is just an SDK.
That allows.
Life cycle aspects to be implemented.
Yeah.
Yeah.
Mark, of course, this agrees.
It's fine.
Yes, we can stick to the SDK.
Yeah.
Martin, you're more than you're more than welcome to contribute any.
Any any further technical details to the show notes.
OK.
So that people can do their own app operator implementation.
Yes.
No jokes jokes aside.
Martin is of course right when he says it's it's a little bit more than just a home chart.
Because for example, billing is baked right into the operator definition, which comes in handy.
If you're a scaler because at the end of the day, you want to build your customers for any
problem that you run on you on your infrastructure.
You just say also if you are a service organization.
Within the company, you probably want to build your lines of business for the services that you supply.
And one of the ways to do this if a lot of business wants to deploy.
Say in the application that consists of a couple of of parts and has networks.
A service is running on top of that north of it.
So they basically tell the others people then to write an operator definition that basically takes care of implementing this service.
And then also has billing baked into it so that the that the operational organization essentially can charge for this deployment.
Being part of the lifecycle aspects of this operator issue, SDK definition.
So you'll find most.
Most many commercial pieces of software will have developed operator to deal with.
The type of squares or reddys or.
Ravitam queue, whatever is right. It's the.
The best way to lifecycle those kind of products on.
On a unit is cluster indeed.
And needless to say, you can get pre-authored operators on places like GitHub or in places like GitHub too.
I mean, for example, I can record at least one British operator.
For carbon it is being on GitHub. I think it's either from a medias or some other company.
Where they simply open source there, the operator deployment.
Yeah, you find many many.
Yes.
And potential postgresive for.
Ravitam queue, but it's.
But it's, yeah, so.
Typical things that an operator needs to do is, you know, all the standard things like provision databases and back them up.
And all those kind of things that absolutely come with these types of software.
So yeah, operates on the spoke to the type of.
Application that they are built for.
And I see else we should talk about.
Anything else to talk about?
It's I think so.
The road.
Yeah.
The road forward.
The road forward.
What's installed for container orchestration frameworks?
Well, it's a question.
Well, do anything that I see is that everybody is busy.
Let's say refining their operators.
A community itself.
They have cracked most of the problems.
Around.
You know, the stateless, the stateful sets and replica sets and things like that.
Is that if you look at the road, my brother, and I was on the road.
Well, not in the in the right level of technical leader.
I was referring to the big picture.
Of course, I mean, it's probably.
Some people say that.
Cabinitas and friends.
This similar to things like open stack won't go away anytime soon.
That's probably a fair assumption.
So did you mention open stack?
I did indeed.
What did you say about open stack?
It's not going away in time soon.
You know, it didn't seem like an open stack because.
Ah, this similar.
Okay.
This similar.
Yes.
I'm like.
I have no customer.
They was running open stack.
Yes.
You will find if you can take us here in that.
They should not open stack.
But in general, open stack has more than more often than not disappeared.
As I said, isolated environments like like telcos, sometimes.
Relations services institutions do run open stack.
But funny enough, when they talk about these internally, they're more often used to term magazine.
They're not.
And there's a reason.
Yeah.
So it's fair to say, yeah, Cabinitas is the way ahead.
What you will see more and more.
Also, it's also the proliferation from cover of of Cabinitas to something called the edge.
In terms of Cabinitas is making its way into embedded systems more and more.
Why?
Because containers are lightweight.
Yes, but.
Okay, and like.
Martin, of course, doesn't agree.
No, I mean, the idea is the idea is to extend the realm.
Of say a deployment beyond the bricks and mortar walls of your local data center.
Or a hydro scale in general.
It's an interesting idea.
I guess on your embedded.
It's happening.
It's happening right now.
Is it people are moving away from heavy virtual machines in embedded computing?
Actually, something called Cabinitas.
Yes, okay.
Running containers is fine, but actually running.
Oh, it's cluster on embedded device seems a bit of kill.
Well, a Raspberry Pi sets it back, I think.
$40.30 or something like this.
Yeah, but it's okay.
So fine.
You run Kubernetes on embedded device.
And then you're embedded device fields.
So how are you going to fail over?
It doesn't really make any sense.
It's a cluster deployment after all.
Why would you run the whole single piece of embedded hardware?
No, you don't run a single piece.
You run on a couple of cluster nodes.
Yeah, okay.
Which is which is made up for embedded.
Yes.
Yes, exactly.
Yes.
Sorry.
Yes, it took.
It took some time.
But yes, that's exactly what I meant.
Okay.
And you see this happening as you speak.
Okay.
If you take a look at an hotel call, especially mobile operators,
the lights are for rise in the US.
Yeah.
Yeah.
If we're talking to better devices here,
we're talking about some reasonable size room in a cell tower.
Not not.
No, not the Raspberry Pi.
No, we're talking.
We're talking.
We're talking about computers running on transceivers.
We're talking about computers running as part of a fleet management deployment.
That's a lot of.
Enough.
And more and more, you actually see.
I need this base container deployments in this embedded space.
Because of scalability,
5G is helping a lot, of course,
like powerful mobile networks.
Indeed, indeed.
Yeah.
Another thing that.
I see in more day to day around communities is that.
People are running more and more separate communities,
which rather than just one big one.
True.
So yeah, rather than.
Kind of as a.
Which makes sense because.
At the end of the day, hybrid deployments,
as in hybrid, of course,
meaning that portions of your workload is running in a public cloud infrastructure,
or private virtual,
which a private cloud infrastructure.
And the rest is probably running on premises for whatever reason.
Compliance comes to mind now.
The rest of it.
In that case, carbon eaters as multiple carbon eaters from comes.
It comes in a common handy.
Because essentially you put them.
You put your separate deployments into separate namespaces.
Or even separate clusters.
But because of the standard approach that the company just brings to the table,
they can still talk to each other.
Because we're looking at standard IPRs.
That are highly interoperable.
And of course, the things that carbon eaters native will bring to the table.
High availability.
High availability.
And fail.
And what's what I'm looking for?
And not fail over about.
Yeah.
Documentary.
I do know.
No.
High availability.
And for a tolerance.
That was what I was looking for.
So any parting remarks before we go into feedback and some other stuff.
Yeah.
I have some parting remarks.
It's slightly on a marketing note.
But it's quite.
It's also eventually.
Because I didn't know this.
Didn't I know this?
No, no.
I didn't know these things either before I joined the embassies.
So they have something called Kubernetes grid, which manages multiple
Kubernetes clusters as well as.
And if Kubernetes deployment in these sphere.
That makes the move for adoption by your system and administrators slightly easier
than having to install all from some scratch if they're not Christmas.
And uses it on that one.
But it's.
I'm using these for you.
Okay.
Oh, yes.
Yeah.
Many people.
I was surprised for sure.
Interesting.
If you're out there.
If you're using these for you.
Even if you're using the emotion.
If you if you consider yourself a VMware fan voyage.
A fan.
Please write to us.
We would love to hear about you, especially Mark.
Yeah.
Not really.
I see.
Yeah.
It is surprising how many people still.
I mean, this is general related to the Kubernetes story.
It's the number of people that are running this enlarge amounts in production are still in the minority.
I would say.
But yes, you will come.
Welcome.
Any party thoughts?
Oh, we have feedback feedback.
Yeah.
Sorry.
Yes.
I think I shed.
I'm live on my side of the story in terms of where I see companies going.
Okay.
Yeah.
Exactly.
Yes.
I'm usually about.
Anyway, it doesn't matter.
Going forward.
Feedback.
Yes.
Yes.
So I have one here that's specifically addressed to you.
From someone called the USB trader.
Thank you for requesting a quote.
You have 400 messages from Evon.
Read now.
La la la.
Thanks.
So this is.
Yeah.
I think I think you're confusing that with you with your spam mail.
No, it's it's addressed that feedback.
Maybe my spam made it.
My spam.
That's it.
Someone already.
Okay.
Not to your more serious feedback.
Indeed, Martin.
Indeed.
Do you want to do the next one?
Yes.
A guy called.
I don't know which one you're winning.
I'm referring to the one that we got.
45.
Sorry.
A guy called bitten or a lady posted on the public radio.
On April 11th.
More Europe centric here in Europe.
We have.
E.
D.
R.
I.
Exactly.
And in Sweden and DRI for example, that's.
More European variants of EFF.
And of course, she's referring to the.
Georgia.
I live for electronic.
Frontier.
Episodes.
Yeah.
Yeah.
Yeah.
And of course, you actually write the thing, but that.
Episodes was here towards a more yes based audience.
No, jokes aside.
Absolutely.
I mean, what we didn't mention in that episode.
And of course, your spot on.
Is that there are many, many, many similar organizations.
Here in Europe as well.
And elsewhere.
As you will find with other.
Organization centered on civil rights.
Liberty.
Civil liberties.
Freedom of speech.
You see this.
You see this.
Actually also in the software world.
The free software foundation has a has a European account.
A part called the European free software foundation.
Funnily enough.
So yes, the EFF is by no means.
As in the electronic foundation is by no means what exclusive.
Okay.
You want to read the next one?
Sure.
One on non-profits.
Not the rest one.
No, the third of us one last.
Actually, that's not feedback anyway.
No profits.
Yes.
So this is on episode 52.
Comment by.
Black.
Lucky.
Black.
Lucky.
Yes.
Okay.
He says the nitty gritty of U.S. non-profits.
So this was the ZIG episodes.
Indeed.
We've always crowed our friends.
Indeed.
Well, crow says in the episode that a 501c6 can not accept donations.
It can.
But unlike a 501c3, the donation to a 6 is not tax deductible as a cheerful donation.
More important difference is that a 501c3 is required by law to work with a
public good where the 501c6 is about to work with the good of his members.
Then he has a follow-up one.
More in-depth discussion about the differences between public charities.
501c3 and trade negotiations.
501c6.
By Bradley Cune.
Cune.
Cune.
Cune.
Cune.
So for freedom.
Exactly.
So for the consumer.
Yes.
Yes.
Yes.
So.
Yes.
It's been.
That reminds me.
This is now the.
69.
It's funny that we got that this is the 69th comment that we got on 501c's and 6's.
So we should probably do an episode on U.S. non-profits.
Okay.
I might be otherwise engaged on that day.
Feel free to go.
This is of course name excuse.
Lucky.
If you listen.
If you want to come on the show.
So make it to feedback.
So that you can't study for Martin.
If you can't make it up that day.
No, just a side Martin.
What we should actually do is.
And this is quite serious.
Now we should probably spend an episode actually on U.S. non-profits because.
Some of the stuff also applies to European.
Organizations and the locations.
Yeah.
That's for you.
Tax laws have.
On any serious non-profits, especially in the world of so in the world of software freedom.
So right now.
Right.
So that.
Yeah.
No.
That's good.
And we also got a post on feedback on episode 45.
And that was.
Which one.
That was me.
That of course is an ancient episode.
Yes, that is the exactly that is that was the big Christmas New Year bash with the graph.
Peas.
I love it.
Yeah.
Yes.
Yes.
How are the comments?
And the thing.
Yes.
Good question.
And haven't.
Yeah, haven't heard.
Haven't heard from them in a while.
Okay.
Okay.
Anyway.
The comment reads like this.
Love the show.
Reminds me a little bit of U.S.
The U.S.
Friend broadcast.
This one had a lot of laughs.
You.
You guys are my friends for now.
Thank you.
Mine.
Well now.
Now.
Well now.
Okay.
Yeah.
Better.
Better for now.
Live.
Sure.
Yeah.
Okay.
And that is of course from our friend the operator.
Also, if I could you please take a freaking contribute to take a public radio.
I've been a host.
Yes.
Yes.
Holidays are hard.
And no, I'm caught again.
Holidays are hard for some.
Most people shooting the shit and ranting.
My armor.
Fair.
Podcast.
Apps.
Take care of yourselves.
You have for the older people amongst us.
Yes.
Operator, thank you for your lovely feedback.
We do appreciate that.
And yes.
Keep them coming.
Now, it's probably time for some.
Boxers.
Yeah.
Do we.
No, we don't need to talk about the rest of.
Good.
Okay.
No.
Boxes.
Yes.
My box would be a heck of a public radio episode.
Okay.
Let's listen to this.
Martin.
Which one?
What are we talking about now?
This is episode.
A heck of a public radio episode.
3577.
Links, of course, will show notes.
Okay.
A lady called Sarah.
Explain how she got into computing.
And this is the most hard thing I haven't listened to.
Sarah.
It's the most.
It was flag as explicit for a reason.
People.
People.
People.
If there's anything you want to listen to in terms of hardcore.
Yes.
Apart from another show.
Marked as explicit, namely, also known as the Lindsay last.
This is the episode you should listen to.
This is really hardcore.
Sarah speaks about how she got into computing.
And some other, rather, Gore or bloody things that I can't
you talk about on the show.
Links will be the show notes.
Sarah, if you're listening, I love this episode.
And I'm sure that once Martin has had the chance to listen to it.
He loves it too.
So if you want to come on the show, hosting an episode with us,
you're more than welcome to please send a short email to feedback
and then also to you.
Martin, what's your box, then?
As a pick of the week.
Ah, yes.
Yeah.
Good question.
Pick of the week.
You don't have any.
I do.
I do.
I'm trying to remember the name of it now.
You mentioned Zelensky.
Yes.
Why would we?
I mean, I get the idea behind the box.
Yes.
I mean, if we're talking about the same Zelensky.
We're only trying to rescue the free world.
Yes.
I think that it was well.
It's well.
It's well.
So you want to share some more.
Or should we leave it at that?
I think most people probably.
No, enough about this.
Links.
Links will be the show notes.
Yes.
He's, of course.
Just watch the news instead.
What's he is?
He's what he's the president or he's the prime minister or all
into one.
Prime minister.
No.
President.
Yes.
Yes.
Yes.
He runs a country called the Ukraine at the moment.
I think.
What's left of it here?
So.
What's his first name?
The baby?
What's his name?
The baby?
What's his name?
The baby?
What's his name?
The baby?
What's his name?
The baby?
What's his name?
The baby?
What's his name?
The baby?
The baby?
What's his name?
The baby?
Mom.
See?
Mommy?
Mommy.
Mommy.
Mommy!
We can remember him.
Mommy.
Mommy.
Mommy.
So be cautious.
vey.
Mommy.
Mommy.
Mommy.
Mommy.
I know, Lucy.
Logan.
Mommy.
I'm told you now that you're proud of your son.
Oh.
Mommy.
delivered with you. Our guest doesn't come from Russia. Are you sure? Yeah, it comes from
Scotland. We'll add from the notes. There you go. So in that case, Martin, word of advice,
do not annoy the Scots. Because if they cut you off, you will be able to take showers.
Yes, yes. Well, I'm more importantly, we won't be able to get there with skiing all
of Russia. True, true, true, very true, yes. And with that, as usual, I'd like to thank
again, Catherine and the good people at HacMapley Radio for boosting us. Thank you very much.
And I'm looking forward and thanks for listening and looking forward to the next episodes.
This is the Linux Enloss. You come for the knowledge, but stay for the madness. Thank
you for listening. This podcast is licensed under the latest version of the creative
comments license type attribution share like credits for the intro music go to blue zero
stars for the song solid market to twin flames for their peace called the flow used for
the second intros. And finally to the lesser ground for the songs we just use by the dark
side, you find these and other details licensed under cc hmando or website dedicated to liberate
the music industry from choking copyright legislation and other crap concepts.
And we will have you on the show. And we will have you on the show in no time.
You have been listening to HacMapley Radio as HacMapley Radio does work. Today's show was
contributed by a HBR listener like yourself. If you ever thought of recording a podcast,
you click on our contribute link to find out how easy it really is. Hosting for HBR has
been kindly provided by an honesthost.com, the internet archive and our sings.net. On the
Sadois status, today's show is released under creative comments attribution 4.0 international
