Episode: 3163
Title: HPR3163: Linux Inlaws S01E13: The road to communism and freedom
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3163/hpr3163.mp3
Transcribed: 2025-10-24 18:05:42

---

This is Hacker Public Radio Episode 3163 for Wednesday 16 September 2020. Today's show is entitled,
Linux in Laws Season 1 Episode 13, The Road to Communism and Freedom,
and is part of the series, Linux in Laws, It is hosted by Monochromec,
and is about 64 minutes long, and carries an explicit flag. The summary is,
our old heroes discuss their legacy and how they arrived at open source software and communism.
This episode of HBR is brought to you by an honesthost.com,
get 15% discount on all shared hosting with the offer code,
HBR-15, that's HBR-15. Better web hosting that's honest and fair at an honesthost.com.
This is Linux in Laws, a podcast on topics around free and open source software,
any associated contraband, communism, the revolution in general,
and whatever else, fans is vertical. Please note that this and other episodes
may contain strong language, offensive humor, and other certainly not politically correct language.
You have been warned. Our parents insisted on this disclaimer. Happy mum?
That's the content is not suitable for consumption in the workplace,
especially when played back on a speaker in an open plan office or similar environments.
Any miners under the age of 35, or any pets including fluffy little killer bunnies,
you trusted guide dog unless on speed, and qt-rexes or other associated dinosaurs.
This is Linux in Laws, season 1, episode 13, the way to communism and freedom.
Button, how are things?
Hey Chris, things are great if slightly warm.
How come?
Unlike the usual UK summer, the weather has decided to do something odd, which is called heat,
which we don't see very often here, but it is, yeah, slightly melting.
Okay, fair enough.
Same here, actually, we are looking about 40 degrees, I suppose, on a good day,
on a bad day, it's more like 30 something, but that's okay, I suppose,
given the current climate change we're experiencing, nevermind, the pandemic.
But let's not talk about this.
Before we come to our main subject, which is the road to communism and freedom in general,
and yes, we, of course, we are talking about open source.
Let's do some use.
What do we have in store, Martin?
Well, I have a news item, which is first related to our topic, in fact,
which is that, have I been informed, is going open source as well?
Correct.
Yes.
So, I mean, this is obviously something that a number of companies have done,
mainly, for example, in my history being, there was all, which,
when was formed, open source, all there, we were products, like Gemfire,
and Greenblum, et cetera, et cetera.
So, yeah, it looks like many people are seeing the benefits of this model.
I reckon in this particular case, basically, it boiled down to the fact that
he tried to think about monitorizing this, as in kind of putting a business model
around this, but failed to do so, and finally came to the conclusion that,
because apparently he was close to burn or something, at least that is my perception
reading bits and pieces about it.
At least he came to the conclusion that he cannot do this load anymore,
and this is the more or less the primary reason that split this way.
Why he decided to go public with this in terms of open sourcing it?
Yeah, this BDFL model seems to be unadopted for a number of projects
in the recent history, isn't it?
So, I don't know if he could add a response to mind?
Yes, yes.
Our friend, our great friend, Salvador, has also done the same.
And for those few remaining listeners who do not know what we're talking about,
full disclosure, we use, we both use to work for run slabs.
I'm still working there, Martin has decided to defect to a closed source company.
I hope Martin can live with a pain, but that's okay.
It's an open source component.
Exactly.
So essentially what they do is, I can say this, right Martin?
We can still cut it out later, maybe not.
Apparently what they do is, which is, I think, when I look at the website,
the text text seems to be pretty cool.
They are taking open source components and wrapping this in proprietary software package.
Essentially, the idea is to put parts of a postgres engine onto a GPU architecture,
which is way cool, I'm not at, and probably the way to go forward with regards to
beating the last bit of performance out of a database architecture.
The trouble is basically, it's a closed source company, but hey, this is it.
Maybe Richard and friends will come finally to terms with that,
and kind of open source the whole company.
And I'm sure that right a slabs or some other company will be more than game to make an offer.
Maybe not.
Full disclosure, this is pure.
If you believe this has no commercial background, this is pure speculation.
I'll give you a quote from today, specifically relevant to this topic.
Only what you kind of close Martin.
In a new database, it's going to be obsolete in the near future.
People of the emphasis are maybe not will be.
There's a difference.
So let's see.
Anyway, okay.
Do I have anything of your news?
Yes, I don't have any, apart from the heatwave.
Not the de-wave.
Not de-wave, just heatwave.
And of course, yes, EMAX 27 point something will have improved from support.
Okay.
Yes.
That is just an EMAX.
Yesterday?
Exactly.
Exactly, exactly.
And of course, half bus, which is the underlying library,
will only really shine on GUI systems as a graphical user interface.
Of course, hardcore EMAX users don't use graphical user interfaces,
because they are diehards living by the command line.
So this is a bit of a contradiction in terms, I suppose.
For the hipses out there, fair enough.
With version 27, you can look forward to improve the front support,
but to the rest of us, oldies and kind of old people.
But this way, there's no point in denying this.
It will be business as usual, with regard to this particular front support.
Yes.
It's actually, yes.
Green on black or black on white or amber on black if your soul inclined.
Who needs colors, eh?
Indeed.
Who needs colors?
There's a recent, I kind of call coming across a recent survey about what,
a couple of months ago, that apparently X points something percent
of the male IT population as in people doing IT,
for living, like programmers, architects and so forth.
A color blend anyway.
So it doesn't make a difference.
So it doesn't make any difference.
Well.
Are they calling line before?
Is that the idea?
Yes.
Color blindness, as we probably all know,
is more or less a hereditary disease.
So there's no real choice in the matter.
There's some certain statistical manipulation going on here.
Nothing that can be fixed, that can't be fixed Martin.
Okay.
Okay.
If we're done with the news, let's move on to our main topic,
which is of course the road to communism.
And let me shut some more light on this.
Oh, wait.
Yes.
Sorry, yes.
Sorry, yes.
This is that we are on Google Podcasts.
Yes.
Martin, thank you.
The most important.
Okay.
We are recording this on the 11th of December 20th,
37 or something.
Yes.
After about a delay of about what, 20 years,
make that actually, sorry, 17 years,
Google has finally decided to accept us into the podcast room.
No jokes aside.
If Google, if you're listening very enough,
it took some time, but you finally got around.
I appreciate the great effort you're crawling,
bots that put into this.
For the appreciator that kept me wrong.
It only took so much time to put up a proper RSS feed
and a small hint.
You mean little time, surely.
Sorry, little time.
Yes, small time, whatever.
Long day.
And Google, if you are listening to this,
there's certainly room for improvement on your website,
but more on this during the box of the week.
Excellent.
Another teaser.
Yes.
Okay.
Back to communism and the road to it.
The following six hours, 30 minutes and seven seconds,
will be spent on two OAPs,
and of course, OAP is standing for old age pensioners,
or old age pensioners, whatever they call them, do you get it?
Well, I don't know about you,
but I'm still working for a living, so definitely not pensioner.
You probably have to do that for the rest of your life, no?
Maybe not.
Anyway, sorry.
Yes, we are digressing.
Yes, the idea is better to shut something up.
No terminology.
The idea is better to explain a little bit about how we arrived,
not just at open source,
but maybe also to some extent,
explaining what we do this podcast,
for what offer better explanation of this.
So Martin, why don't you get us started?
Yes.
Okay, sure.
So the road to open source.
Now, road to open source for me was really purely coincidental,
as in a non-conscious decision like yourself I expect,
since my background has been in source for many, many, many years.
Full disclosure, Martin used to work for Oracle.
Only very briefly, when it was still a nice company.
Are you working there for two months?
Excellent.
It's not normal.
Where does it is this way back in broad 1990, even before that?
Too long ago.
In fact, but yes.
It was still a nice company back then.
And in fact, I should have bought some shares at the time.
I didn't.
So these things.
Yes.
Okay.
So close source find.
And for me, the road to open source was really around,
obviously everybody started to use Linux in more anger,
as it's a main open source component.
I was probably the first thing that most people in IT came in
to contact with in terms of open source.
For myself, obviously, being in the, particularly in a database arena,
that was my introduction to open source.
And that was around 1992?
No.
Now, frankly enough, the organizations of the world were all very happy
buying source software, mainly because of its status, reliability,
support, et cetera, where people in San los that wrote a few lines of code
in their basements were frowned upon in those days.
So when did you first use EMAX?
And don't say yesterday, because that doesn't count?
I think that would be never a longstanding VI user.
Okay.
Given the fact that VI is open source as well,
when did you first use that?
What's the call?
Again, it's not an editor.
It's something, it's something more...
It's many great things, yeah.
What's what I'm looking for?
I'm sorry.
No.
Those stream editors taken by ICD birds.
Yeah, let's put it this way.
Yeah.
When did you start to use ED's successor called VI?
Yes.
You had to switch the editor in those days, indeed.
Because the default editor was ED.
It's excellent.
I'm just wondering, was there any paper tab involved?
No, no, no, sorry, surely VI's post-paper tab.
You straight went to TTYs, as in teletypes.
No, no, no.
At university I always say I use paper, but that was more deck.
You use paper?
I thought you were younger than I am.
Well, I guess my university was a little bit underfunded,
so I think I can afford too many terminals.
You use paper tab at uni?
Are you serious?
Yeah.
I mean, anyway, that's good learning experience.
Come on, you went to uni work late 80s, early 90s.
Yes, no, no, no, yeah, late 80s or mid 80s.
And that was in Africa or still in the Netherlands?
In the Netherlands.
Sorry, yes.
Footstoucher Martin went to a university in a Dutch colony in Africa.
We just bought this house.
Let me think.
I don't think we have any African colonies.
Are you sure?
All these in the Indies and in South America.
There's still this kind of hidden gem in Africa that nobody talks about,
because let's not talk about this.
But you went to university in the Netherlands to a Dutch university.
Can you disclose the name?
Yeah, well, in the past 20 or so.
20 newspaper tapes in the late 80s.
Are you joking me?
Yeah, this could have been the museum,
but it may have just been a quick exercise.
So for our lab work, we used to use the paper terminals instead.
Did it lapse in the museum?
No, no, no, this was a cold data center here.
In the museum?
With lots of space in it as well,
which is considering today's data center.
20 had a data lab in the museum.
Okay, please elaborate.
Well, it's, um, anyway, sorry, let's go back to my fun fact before.
I can't be talking about this.
Considered an OAP.
Yeah, so fun fact is that, um,
I think we started with 150 students the first year.
And I think after the first semester,
yes, yes, yes, yes.
Anyway, after the first term,
there were about less than half left and after the first year.
That was probably around 25 of us.
Which was kind of curious.
Late 80s computers and then the Netherlands, okay?
Yes.
Yes.
Given the fact that Amsterdam now has to be considered a digital hub of Europe,
I'm just running where this came from.
Yes, no, it's so,
I mean, this is all about the fundamentals of computer science,
right?
You don't have to have all the latest technology to become a computer scientist.
That's all zeros and ones at the end of the day.
Well, fun fact for you.
Fun fact, Martin.
Unless you're using a quantum computer of course.
They even have those in those days.
There's at least two big exchanges in Europe,
as an internet exchanges, as in peering points, as in major peering points.
One of them is about ten,
sorry, make that actually four miles south of where I'm living in Frankfurt.
And the other one is in the Netherlands.
And you're talking terabits of data here.
Never mind these cool hipsters in Amsterdam
that have been telling me for the last 20 years what to do
in terms of the next digital wave.
So the Netherlands certainly has a reputation for being quite digital.
Maybe that just developed in the 90s.
But...
Well, we are quite an advanced country.
You know, to learn something,
it's quite useful to understand all the basics, right?
Rather than...
I see.
Sorry, I didn't...
Pull this down.
I didn't want to put Martin on the spot now,
or don't get me wrong.
But I'm curious.
No, you haven't succeeded anyway.
Yeah, so...
I mean, to be fair,
this university is right next to the German border.
So that may have something to do with it, I suppose.
I can recall 20 to be quite an advanced school
in terms of natural sciences.
And never mind computer science.
Of course, computer science is not a natural science.
It goes without saying.
Well, it had a...
Okay, so in the Netherlands,
there are three technical universities.
There is Herringen, Delft, and there's 20.
And...
What about Amsterdam?
That's not a technical university.
Turnbombed, you taught there?
Yeah, but as a university as such,
it's more known for its other subjects than...
So, you know, the likes of the 20 Delta.
Herringen, they specialize in maths, in science...
Sorry, in math, in physics, in...
computer science, they had one...
this study study.
And that was it, right?
It's all focused on that.
Where you see it, your Amsterdam,
you'll get psychology, philosophy,
languages, all the kind of nonsense.
And that's what those universities are better known for.
Where are your technical universities either?
Okay.
Specifically on those topics.
So you get a lot of news together, basically.
I see.
Interesting.
What about your own university experience?
It's been a while.
Okay, to cut a long story short,
I went to...
I don't think all this regional technique college.
It's not a university, it's rather...
more practically oriented school.
Yeah.
It'd be called a polytechnic.
Polytechnics, yes, in the UK.
Because at the time, I had the impression
I wouldn't survive a couple of semesters at uni.
So I went to that polytechnic straight away
with the idea of maybe doing a master's
after my bachelor, if I felt like it.
So the school I went to in American terms,
of course, the polytechnic is called Fulda.
And this is basically where I got my first exposure to open source.
Well, not necessarily.
Well, to some extent, let's put this way.
But also, much more importantly,
to something called Unix.
And we are going back around 35 years, Givote,
because I managed to hold on the first system
administrative job around 86.
And then it all went downhill afterwards.
The school decided to buy something
called an RTPC-6150,
which was the first 6150 in Germany.
Sorry, it's been a while.
The 6150 used to be the first commercially available
risk architecture on a PC platform from IBM,
running AIX, of sorts.
Yes.
And I was the assistant administrator
of the first German import on that machine.
So me and Unix go back about 35 years, Givote.
And even when I was at university,
I always kind of did jobs that involved Unix
or some related operating systems in one fashion
or another.
For example, I did a cup of stints at companies,
including Phillips,
probably known for the bulbs,
being a Dutch company,
and Phillips communication industries,
all the rage before they were bought
by Elkatella thing in the late 80s,
had a major subsidiary down in Nuremberg.
And this is basically where I did a stint,
programming,
it wasn't the ISD device,
it was communication board device,
it was for Linux kernels.
And funny enough,
that was my first major exposure to open source
in terms of running open source
on the proprietary Linux system
and the proprietary Unix system rather,
which was the labris.
Then a spin of BSD,
and I was looking for some sort of editor,
and in 87,
I came across something called Emacs.
So I put down the source code to my amazement,
it then compiled on Solaris.
I can't even remember the version that it was,
probably more like four wonders, something, I don't know,
which was close to a BSD system.
It compiled out of the box,
I didn't have to do much tweaking,
and then I had a version of Emacs running in my account,
I compiled with the proprietary to see compiler,
but it worked out of the box models.
What was the editor of choice on Solaris in those days?
I can't even remember,
it was probably VI or something, I don't know.
Obviously it's complicated, then.
Is that the reason for Emacs?
Probably, yeah.
You see, yes VI has advantages,
let's put this way,
but it's just a better approach and energy in text.
VI has a small footprint agreed,
but even Vim and Friends are okay, let's put it this way.
I mean, I know my way around VI,
but at the time I was looking for something much more powerful.
Hence, I came across the Emacs,
and given the fact that VI was part of the Solaris distribution,
Emacs wasn't as far as I can recall,
I simply put on the source code,
ran the install script, more or less,
and given the fact that there wasn't an internet around
as we know it back in the days.
Yeah, many people, the source code.
I think it was you and that or something,
I can't even recall.
It all basically worked out of the box,
without much tweaking to be done with this way.
The next thing, of course,
then I decided to do a Ph.D.
After completing my master's here at the University of Born,
for this I went to a school called Trinity College.
It's in Dublin, it's in Dublin, Ireland,
where we developed an experimental micro-curnal,
similar to L3 and other gadgets
at that area,
and that was the time when we came across something called Linux.
We're talking about 93, 94, 95, 96.
I can recall installing a kernel version 0.9 something
on an Intel PC, 386,
with I think 64,
maybe memory of some flat,
maybe it might have been more,
but I was even then thoroughly impressed
about the ease of insulation.
I never mind the power you had at your disposal,
even with the command line.
I'm not talking about the GUI now,
like no more X-winter in general,
that's a lot of things.
Exactly, it's an operating system,
but the one thing I discovered,
you do need Internet access for Linux,
because otherwise you'll be just...
I mean, guys, listen,
we are talking about the days before Slackware.
The first distributions were just emerging,
configuring X-11 was still a pain in the butt
because you had to...
You had to fill in with motelines and stuff,
not pleasant.
But I finally got it to work
on an ancient 386 machine.
I was pretty impressed.
386 was, I think, my first Linux installation
with the door,
I couldn't tell you what,
yeah, that was...
It took a number of CD,
I don't know.
As a matter of fact,
we set up a shop.
Yes, of course.
When we set up a shop
that was the first, I think,
our Internet-based marketing agency in Dublin
at the time around 95,
I made a point of
importing the first Slackware CD,
apparently, according to law,
into Ireland.
So that was my first commercial broth
with Linux,
and I've been using Linux ever since
running capacities.
Linux now drives around
100% of my ARM cores,
which there are quite a few rounds,
and the ones that are
not using Android
are using something called Alarm,
which is, of course,
Arch Linux for ARM.
I'm an ArchPackageMentainer.
I
helped to establish
a group in Frankfurt around
2011.
The luck itself in Frankfurt
does back to late 90s,
but it was only
instantiated as a formula
association in, kind of,
2010-2011.
Sorry, before Martin
keeps complaining, I mean,
2010, of course, means 2010.
Oh, remember, thank you.
Just in case, everybody,
and anybody is, kind of,
including the Brits and stuff,
I don't know. But anyway,
it doesn't matter.
Yes, so that's my way
to open source and nutshell.
Funny enough,
when I was doing the PhD,
okay, my PhD was about
operating systems.
We're talking about,
as I said, about 25 years back.
Are you sure about this?
Positive.
Positive mentions something about
that was before the PhD.
Oh, okay.
And that wasn't on a professional
basis.
And Martin, as I
also said in the dialogue,
this is subject.
No, I'm not.
This is also subject to non-disclosure,
as I need to know.
I'm sure on this one.
And
if you,
some editing to be done.
Anyway.
What's the one I'm talking about here?
Martin is a potential candidate
for my designated author
of my autobiography.
And before he has
assigned this agreement,
there won't be any disclosure
about these facts.
Very important.
Does it matter?
It does, yes.
Well, I think it's published after
a long time.
So Martin is already
working on the contract,
which is going to be put on my head
for shortly.
By the sound of it.
Nice one.
Killed by your co-host.
Excellent.
The way we like it.
Beats wise.
Authors by miles.
Killed by your co-host.
Excellent.
Next.
Law enforcement.
If you're listening to this.
If I'm not around
in the cup of his time,
you know who to go after.
His name is Martin Visher
and yes, he does live in the UK.
I'm sure I can make
up an autobi with some fake recall.
Excellent.
Back to my pH.
The idea at the time was
essentially to
do an operating system kernel.
In contrast to the budding windows
and to units that had been around
at the time for quite some time.
If you take a look at the kernel
architecture of the time,
you have mac kernels
and yet modernolithic kernels.
There's a beautiful
argument discussion.
Backle, if you will,
between a guy called Andrew Tannenbaum
and a guy called Linus Torvalds
using that in the late 90s.
Discussing the various merits
of both approaches.
Okay.
Fun fact.
Apparently, according to law,
Linux, as in the operating system,
started out as a
terminal emulator for something called Minix.
And Minix, of course, being the macro kernel
developed by Andrew Tannenbaum and Team.
So, yeah, sorry.
Before you go into that detail
for those listeners
amongst this,
would you like to expand
a sentence on the difference between
monolithic and micro kernels?
Yes. No problem.
Monolithic kernels have been around since the dawn of time.
You're talking about
a very big code base without
a code. I'm trying to say much structure
in terms of
not
more or less independent entities
working together to achieve a goal
but rather something
monolithic in terms of
not broken down into
individual functionalities.
In contrast to this,
micro kernel operating systems
like the one
called Windows these days
is something called
Mac OS
because it's underneath the hood
is Mac OS is essentially
a
freeBSD person.
Exactly. Next step
and next step.
It wouldn't come as
surprised. No. Next step
as well as Mac OS needs to say
is a freeBSD
underneath the hood.
It's a freeBSD personality
and Mac Mac
kernel and Mac
being of course
the CMU development
going back to the early 90s
as in Russia
regression in France
and
for the listeners
interested in the details
there's a previous episode
about next steps
and next step in France
detailing
of this approach
but suffice to say
monolithic kernels
the usual suspects
like Unix
MVS for those who care to
remember it.
Yes exactly.
And
BS2000 from CMNs.
Mac kernels on the other hand
iOS, Mac OS
Windows
but also something called
digital
because they've caught
in France and apparently
the first
commercially available
micro kernel architecture
in the market.
Going back I think
to the late 80s or something.
Let me put this in the show notes
because there's certainly
a Wikipedia page on this.
But the idea is basically
working along. So for example
you typically would have
a hardware
abstraction level
that would take care of
abstracting the hardware.
On top of this you would have
processors looking after file systems
scheduling
and so forth.
In a monolithic code base
these functionalities
are put into one code base
executing as one unified kernel.
There's the main difference
between micro kernel
and monolithic architectures.
And the idea behind
TIGA and France which was the name
of the experimental micro kernel that we did
at Trinity at the time
was essentially to
construct a micro kernel
that was able to
adapt to application instructions
or behavior at runtime.
If you take your typical
operating system
application what the
operating system offers you.
So some operating systems
are for hard real time behavior.
Some of them are for a
soft real time behavior.
Some of them offer
multiple processes running at one time.
Some of them do not do this.
The early window
versions come to mind where
you were only able to execute a
program at a given time.
Nevermind the
system as issue for Microsoft
late 80s early 90s.
That's a routine.
We would simply have a
command line
processor that was
not.
Sorry, Microsoft does.
As an MS does.
Goes back to the mid 80s I think.
No, no, no, no, no, no, no.
I remember installing
the bunch of properties
that does 1.0 when I was
working on it.
Yeah, so.
I think full disclosure,
Microsoft ripped this off
from a different company.
They marked this off as
QDoS quick and durable rating
system.
So like some other projects
that Microsoft
commercialized.
Let's put it this way.
IBM was looking for some software
they turned to Microsoft.
Microsoft didn't have anything in stock.
The founders of CPM.
This is my recollection.
I'm also.
The details may be shady.
The the developers of CPM.
Prevailing operating system at the time.
Neglected or declined rather.
Declan to stand in the NDA.
So IBM turned to Microsoft
and the rest is history.
Microsoft was in darn
need for an operating system to be
running.
Microsoft on ATX ADX.
In terms of either 8 or 16
bit process coming from Intel.
The likes that IBM was just
incorporating this into something
called the PC slash
in brackets XT,
which was all the rage in office
environments kind of early 80s.
But they were lacking software.
So they turned to Microsoft.
Microsoft didn't have anything in stock.
Microsoft was just trying to
find it and
so MS-DOS came into existence
to cut along story short.
Negless to say,
Degener research as in DR
copped onto the fact later on that this is a market.
Issued something called concurrency
PM, which was
never mind the market share,
a great operating system from
Biody MS-DOS because with CPM
you were able to run concurrency sessions
all onto one computer.
So multi-tasking,
multi-processing on the command line,
then and there.
Trouble is, it was a commercial success.
Yeah.
Was it OS 2?
That was much later,
because then
something called graphical user interfaces
for all the rage.
Microsoft came up with
Windows 1.0,
which essentially was a clumsy GUI
on top of Microsoft.
On top of MS-DOS.
And not multi-tasking,
capable, clumsy
buckling to some extent,
let's put it this way.
Whereas IBM did something
from the ground up
from a technology perspective
much more superior
in brackets,
full disclosure,
my perspective on things
made general.
Full disclosure,
true multi-tasking,
and Windows didn't even come
close at the time,
mighty threading in the mid to
late 80s,
out of the box.
You could, of course,
structure your application running on top of OS 2
with multiple threads.
Something that Windows wasn't even dreaming of
at the time.
Unfortunately, although
the commercial success was
somewhat limited,
OS 2 died a painful death
during the 90s
because nobody used it anymore.
Microsoft contributes
to some of the codebase
as far as I can recall,
at least the kernel.
Because the kernel essentially was
something that came later into existence
as something that Microsoft
called new technology.
Essentially what they did is
they brought in Kotler and friends
to do a real operating system.
Let's put it this way.
So protected address spaces,
multi-processing,
and all the rest of it
running on an inter-architecture.
Kotler at the time
already had
much experiences having developed VMS.
And also some people
of the original Mark III team
joined Microsoft.
Really probably being the best example.
He let the Mark III team at CMU
and he was simply,
I wouldn't say poach,
but convinced to join Microsoft,
moved then on to greater things
but he brought with him quite a few
engineering folks
who under the technical supervision
or guidance, let's put it this way,
of Kotler devolved
something that would turn later
on to Microsoft 1.
Which was the first commercially
available version of Windows NT.
And we were talking early
90s, mid 90s here.
Give or take.
Yeah. Now before we
move on too far,
one peach in our
room really well from
the VMS, which
has never been
replicated in other
books was the
file history, which was
damn handy when you
when you needed it. Absolutely.
As far as I can recall,
you had certain VMS exchange,
M-V-S exchange, sorry,
not VMS, but VMS supported this
at the time out of the box, yes.
Other than that,
basically, you had to rely on version
systems on top of everybody's systems.
That's correct, yes.
But coming back to,
we conclude this discussion.
Yes, that was something. Yes,
Martin, that was D.
Okay, so the idea was
basically you take
in a secured way,
the operating system offers you
certain tools,
no tools, the wrong word,
certain mechanisms that you
can then deploy being an
application. So for example,
a real-time application
just playing back
in audio data stream has certain
scheduling requirements in terms of
real-time, sorry,
in terms of a hard real-time
requirement. So if you miss a
couple of milliseconds, you
will hear it actually in the audio stream.
If you're changing to video,
and I'm not talking about a container
format now that has video
audio just embedded in, but I'm just
talking about a video data stream,
it doesn't make much of a difference
if you miss a frame or two, because
so your scheduling and
synchronization policies can be
relaxed. This is just an example,
but I'm
Tigger and Friends, that was the name
of the of the experimental micro
architecture, offer
essentially these
mechanisms. And it did so
using a mechanism called
reflection in terms of
you go
from your base level
to a meta level, and then
make a decision and then you go
back to the base level and
continue executing things.
Something
like small talk introduced
kind of early mid-80s in terms
of how you would allocate
memory, for example, for
a class. Small talk at the
time already supported something called
meta classes.
That would allow you to
modify
class behavior before you
even instantiate an object.
That was pretty advanced.
There were a couple of research
teams in Japan who did
something called, I think, a
pertus. If I can find the links you
find in the show notes.
This is the first time I heard
small talk mentioned.
Yes, it is.
The
aspects of the
fundamentals go back to the
come of early 80s.
As what are facts,
even early-lisp dialects include
something similar to a meta class.
It's a memory source correct,
and you're talking about 60-70s
that sort of thing.
But then this
wasn't probably exactly well
now and outside certain circles.
Because these days every
EMAX user of course knows what
lisp is.
And rightly so.
Anyway, it doesn't matter.
And with Tigger, as in
with a PhD, I wasn't
charge of
designing and be implementing the meta level architecture.
Funny enough,
and James Gosling, if you're listening
to this, no hard feelings.
But
if I ever should come across you again,
you owe me a beer or two.
If not more.
Because what Java
and James probably would be
the prime culprit here,
what Java did when they
defined something of the reflection
API as part of the
JDK 105.
They took certain aspects
more or less right away from the thesis
and implemented this.
And you're talking about time spent
two or three years
give or take.
I published a
similar book on the subject
in 96 and it appeared
in the JDK, I think, around
98, 99, 97
some sort of this.
If I would have
patented the IPs
and there we go back to
Oracle, I probably would be
sitting on a Caribbean island
of Oracle.
Given the history, unfortunately,
I didn't, one of a few,
one of a few mistakes in my life
that I made for enough,
but James, if you listen to this,
no hard feelings,
what on the bridge for enough?
If I, I think I met the guy
at a conference, I can't remember where,
but anyway, it doesn't matter.
If we meet again,
never mind pandemi or not, do you owe me a beer?
If not more.
I'm going to use the
look and chart and that was
my first kind of
exposure in a bigger way
than just compiling e-max
using this as part of a
project because we use Linux
as the base operation system
to develop and to QA the kernel
as a test it,
but also use many open source projects
on top of Linux to drive this.
Initially, we looked at Pearl
for much of the QA framework,
but then we decided on something
called Python,
which at the time
had just been developed by
a guy called
Gidu von Russen.
If I understand this correctly,
now an avid Russ
contributor for enough Gidu,
we all have to move on.
That's okay, no worries.
Never mind pep
72 or something,
I can't remember.
Doesn't matter.
I think we should mention this to him.
Maybe he'll come on this.
Gidu, if you're worrying about
the details, if you're looking for the details,
just check out the two
bumper episodes that we did on Python.
The details are there.
Anyway, it doesn't matter.
That was my first brush
with Python and I've stuck
with the language small as ever since.
Russ or not.
As much of fact,
in laws,
the bits you don't see
when you go to the website,
are written in Python.
But in other fact,
the whole concept then
and it still does to me today,
still depends to me,
but early 90s
or midnight is rather,
the ecosystem was much less developed
because we're talking about Python version 1.
Instead of version 2 and version 3,
as in Python,
it wasn't even on the rise in them.
But still, I found the language
still powerful enough
to drive this and to support us
in that endeavor.
In terms of getting
an experimental micro-coronal architecture up and running,
full disclosure,
that wasn't EU-funded project.
Quite a few companies
were part of the consortium.
For example, there were a couple
of German
game companies
that were looking
at the micro-coronal to deploy
this as part of their
gaming infrastructure.
I'm not sure what came out of it
because I left Unity in 96.
So maybe
if you buy a German game
from the likes of
what's in them?
What's in them?
What's in them?
They're like a cryo-engine.
Yeah, maybe underneath.
They're still a micro-coron-running
dumb functionality.
I don't know, simply.
Or maybe cryo has done their own engine
and I'm just doing injustice to them.
Anyway, long story short.
If
I'm
game, I may put in some
pointers to research papers
that are published
but given the fact that this is
a Zimmerman show is in terms of
I have to keep my vanity in check.
I just may decide on not doing this.
That's okay.
But for those of you who cannot sleep at night,
let me put the link
to that
Seminal textbook in the show notes.
So if you're still up at
1am, just read it
and you'll be asleep in no time.
No words.
Would you like to expand
the well-known
of the sub-projects had this net aims?
Yeah.
I think of being the
method of architecture that I did
implement it.
There was an acronym for something.
No, it's not.
No.
I don't want to look at that.
No.
And Disney, if you're listening,
it never made it into commercial
fruition as the corrector.
So don't even get the noise on the case.
There's no point.
We're talking about 24 years back.
Do your numbers.
Very good.
But if you're so inclined,
Martin is still looking for a Disney plus subscription.
So,
if you're a game, just send in the access code.
If you feel free, feel free.
I'm sure that kids will appreciate it.
Eighties.
Okay.
Given the fact that this was meant to be about 20 minutes.
Yes.
We are now kind of touching about 50 minutes.
I think this is time to wrap this up, right?
Yeah.
Otherwise, we're going to...
This is only halfway really, really.
So, that was our road to open source, I think.
It was?
Yeah.
It was, yes.
So, that needs to be done.
Still is the feedback.
Do we have some feedback?
Yes.
Sorry, Martin, you were saying?
We have feedback from Brian Anderson.
Yes.
Anuka.
Ahuka, sorry. Ahuka.
I always put you in the name.
So, let's go through Ahuka first.
You want to read this, Martin?
Sure.
So, comment by Ahuka on episode number 12.
Excellent interview.
I really enjoyed the interview with Randall Swartz.
More of this would be great.
Okay.
Actually, Ahuka are from Hacker Public Radio.
That does all these wonderful Gimp episodes.
I'm sure, Martin, you have listened to them, right?
I am.
Not all of them, but yes.
Excellent, handy, handy, a bit of intro to Gimp.
Yes.
I especially like the episode on the time warp operator.
Sorry, plug-in, plug-in, yes, sorry.
Episode on the t-shirt making activity.
Ah, yes.
Ahuka, I really like this because apparently it allows you to draw an image in Gimp in the past.
That's excellent.
Anyway, let's not get distracted by this.
Ahuka, sorry.
Yeah, we do deserve the right.
Sorry, we do reserve the right.
Not deserve, but reserve the right to make fun at certain feedback.
That doesn't mean that we don't draw a feedback, just basically a matter of making the show a little bit lively.
Ahuka, of course.
Your feedback is welcome.
And yes, we do appreciate the work on Gimp.
Welcome and appreciate this feedback.
Yes, indeed.
So, another chap wrote in called Brian.
Let me read this out.
Subject is Merden.
And the feedback is why did you not ask Render for those of your audience that don't participate in Twitter?
Could you summarize what happened last weekly?
And what looked like a host I'll take over of the show.
That's the quote in the feedback.
And of quote, you missed an opportunity because Dan Lynch won't talk.
I emailed him.
And I can't find his blog Twitter post that explains Lee was showing Render the door.
If there is a link to this, please put it in the show notes.
From Brian in Ohio.
Brian, first of all, thank you very much for the comment.
But you are maybe right that the perception may be a different one from the outside.
Render, in preparation of the show, Render and the two of us spoke with what we should basically cover and what we shouldn't cover.
And Render was quite, I wouldn't say clear, but Render said that the separation between him and Twitter was mutual.
And was also done in a friendly way.
You can actually see this if you take a look at a post that Leo put on the Twitter on the Twitter blog.
You'll find the link, of course, in the show notes.
Yes, where actually thanks Render for I think 10 years of service or something like this.
So clearly, it's not a host I'll take over off-doxers running flots weekly.
It's just a matter of changing hosts and that's exactly what happened.
But as I said, the departure was quite frankly, at least according to that blog post that Leo did.
Dan Lynch, I don't know, he's still active.
I spoke to him a while back.
Well, we, as in the in-laws, have learned a grateful lot of the outlaws because this is basically, of course, as most of our listeners may or may not know,
Dan Lynch and Fabstertial were the original hosts of something called Linus Outlaws that we simply took as an inspiration for this show, as in the Linus Outlaws,
by saying that we are more than happy to continue the legacy only slightly tweaked.
Only a little bit.
Only a little bit, yeah.
And before I forget, yes, that was the feedback.
So yes, feedback is welcome.
You can send us feedback by simply mailing to feedback.
Of course.
Commenting on the...
Yes, I was just about...
HPR feed.
Yes, always two options.
The options...
Yeah.
The main address for feedback is feedback at linuxelos.eu.
And you simply can enter a comment on the corresponding episode in the Hacker Public Radio, goes without saying.
Yeah, one thing Martin, accounts got in touch before I forget something a little bit on the internal side of linux in-laws.
Evelyn from accounts got in touch.
And she wasn't happy that apparently you tried to expense an escot service once again.
Well, it's not my job to keep accounts happy.
Martin, we spoke about this, right?
You cannot expense escot services.
Ah, I see. I was taking an example from your nurses episode.
There is no nurses episode.
This is just make-believe, right?
This is to be continued, Dylan.
I'm just looking at the receipt here, Martin, that you filed with the expense claim.
And it spoke...
I mean, 500 quits for special services?
Are you joking me?
Was it worth it?
Yes, well, the SAS.
They obviously required for certain duties.
No, I'm talking about the escot bill.
I need escorting through the airports, yeah.
For my personal safety.
Hang on, there's a QR code on this.
Let me go to the website because they only speak about special services.
Martin, 500 quits? Great.
Obviously, because although this podcast is explicit,
I cannot really read out loud what's on the web page that I'm looking at.
Okay, Martin, for future reference,
we do have a corporate account at an escort service called Rainbow Escorts.
It may not be as fancy as the one you used.
But...
This is the one you set up.
Just use...
Just use Rainbow Services.
They have a corporate account with us.
Oh, sorry, we have a corporate account with a private account.
Is that current level?
Just basically use Rainbow Escorts that will do the trick nicely, Martin.
Don't try to expense other escort services,
because in that case, it's official,
because you have to put it through claims,
whereas you simply go to Rainbow Escorts,
making a bomb on the website,
and then we do it differently.
Okay?
See, I see.
Perfect.
I'll consider this.
Talking about bank accounts.
Apparently, the rest project needs a bank account as well.
Do they? Why?
Because they want to start a foundation?
Indeed.
Okay.
Fundations need bank accounts.
So, people, if you have surplus money, sit around,
and there's so far something,
check out the blog post on rust-lang.org.
Yes.
There are the employees,
the core community,
in collaboration, I think, with the Mozilla Foundation
or what's left of it.
One, two, start a rust-lang foundation as a foundation,
looking after the development,
and maybe author marketing of a programming language,
called Rust.
More on that in the next episode.
Indeed.
Or the one after, depending.
That was the next one, first of September.
Yes.
But this is not 15, but rather 16.
Sorry.
This is 15, not 14.
This is episode 13, Martin.
Yes.
Next one will be...
Well, worse than Python and Co.
No, that would be 15,
because 14 will be about IT security,
where Martin will explain to us,
all these wonderful IT security things.
No, no, no, no, no, no, no, incorrect, incorrect.
Why?
No, no, this is 13.
14 is because September, Rust, Python thing.
Then we have IT security,
and then we have Next Lab.
Aha.
I thought we would do it the other way around.
Anyway.
For the upcoming episodes of People,
we will cover, yes.
We will cover the great battle between Rust,
C++, maybe, and of course, Python.
We may post this as an episode 14.
It will be an episode of Asia.
Yes, after that, we have lined up a show on IT security,
where Martin will basically show us how to
not file expense claims for Escort Services,
but rather do it in a different way.
And of course, also we have lined up Frank Harley Check
and other guys.
Frank Harley Check, of course, of Next Cloud Fame.
So it's going to be a little bit of a bumper
autumn fall-ins in loss.
And of course, we plan to do a Halloween special,
meaning we're going to answer all your questions that you have.
As long as they're scary.
We're not going to answer any scary questions, right?
So if you send us questions, please ensure that they
at least sound scary.
Whether they have to be or not is a different story,
but just make it sound like they are scary.
So instead of saying, now look,
what happens if I assign zero to variable
and then use that variable as a point of four,
variable access, as in I'm trying to get a value
from adversarial with that normally results in a
segmentation fault.
And then it's just say, why did the world stop
because my app was crashing because of a certain
point of problem?
That will ensure that you get past the guards,
especially the ones called Martin Visser.
Okay, guys, that's all for episode Martin.
What episode is it?
Currently on 13.
Excellent.
Next one, only 14.
Yes, that's all for episode 13.
As usual, you can find us an X public radio.
Yes.
And of course, we do have a Google podcast feed now.
Yes, we do.
You do.
Martin, you want to talk about this before we wrap up the show.
Yes.
Our SS feed is up and we are on Google podcast.
Yes.
So she cannot find hack-bubbing radio.
And thanks to Martin for writing the pricing code
behind the RSS magic.
Was it a bit...
This was some existing bits of code unique from somewhere.
Perfect.
This is, of course, the great philosophy behind open source.
You just steal somebody else's code and just hope it works.
Well, probably fix it.
Anyway, now you find us on Google podcast.
We are also in the app, simply type in letters and laws.
And then you can subscribe to the show.
We are on hack-bubbing radio and will be for the time being.
Should we change this?
You'll be the first to know on this particular show here.
As we will announce it here first.
But until such time, we would like to thank hack-bubbing radio.
Can and friends, you're doing an extra job
and continue and keep up with work.
And that's all for episode 13.
13.
Bye, people.
Bye, bye.
This podcast is licensed under the latest version
of the creative commons license type attribution share like.
Credits for the intro music go to blue zero sisters
for the songs of the market,
to twin flames for their piece called the flow used
for the second intros,
and finally to celestial ground for the songs we just is used
by the dark side.
You find these and other details licensed under CC HMando,
or website dedicated to liberate the music industry
from choking copyright legislation and other crap concepts.
You've been listening to hack-bubbing radio at hack-bubbingradio.org.
We are a community podcast network that releases shows
every weekday Monday through Friday.
Today's show, like all our shows,
was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast,
then click on our contributing to find out how easy it really is.
Hack-bubbingradio was founded by the digital dog pound
and the infonomicon computer club,
and it's part of the binary revolution at binwave.com.
If you have comments on today's show,
please email the host directly,
leave a comment on the website,
or record a follow-up episode yourself.
Unless otherwise stated,
today's show is released on the creative commons,
attribution, share like,
3.0 license.
Thanks for watching.
