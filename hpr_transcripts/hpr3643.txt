Episode: 3643
Title: HPR3643: My computing history and the software I use
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3643/hpr3643.mp3
Transcribed: 2025-10-25 02:43:02

---

This is Hacker Public Radio Episode 3643 for Wednesday the 20th of July 2022.
Today's show is entitled, My Computing History and the Software I Use.
It is the first show by New Hostbin or C and is about 56 minutes long.
It carries an explicit flag. The summary is, rambling about My Computing History and Tech Stack.
Okay, so this is the rerecord. I previously recorded this. In my car, I've been my voice recording
application crashed. The idea behind recording in the car was that it's easier to noise reduce
constant road noise than the hypothetical dog barking and birds chirping. But hopefully I'll be able
to normalize this a little bit better. I had two audio record. Actually the first time I recorded
the episode, the quality of the content wasn't there because I was very tired.
But I have very long drives home. I'll try not to peak the mic and kind of cause audio problems
because I will try to normalize it in the end. So basically in this show I want to talk
about my computing history. I might have to pause halfway through and get a drink because I just
finished recording and I kind of held bent on getting this episode uploaded. And I will attempt to
speak more clearly because I don't have road noise right into my actual microphone, not just
microphone that plugs into the three and a half millimeter audio jack on my phone.
So let's see how I got started in computing. The first time I remember touching a computer,
my mother had purchased a Dell Dimension. It's right next to me. I'd have to pull it out and
make a lot of noise to look at. I think it's 2600 or 4600. But that's what it was. Dell Dimension.
I think you probably paid way too much money for it. You are remembering growing up. You've got
mail sound because your mom had a whole bunch of AOL CDs, right? The free trial AOL CDs.
It was a Windows XP machine. I remember playing Space Pinball on it and kid picks. I really liked
kid picks because you know, all the cool ways of making art that mom wouldn't let you touch
in real life because it was too messy. You know, the spray paint one or the rainbow one.
Kid picks was a very fun game. I need to see if I can find a kid picks CD somewhere.
See if I can get it to run through wine or something. It's old enough. I bet she'd just work.
I think that was the earliest memory. I still have that tower. It doesn't, it doesn't actually run
The tower is non-functional. The motherboard just rusted out. It got left inside of a garage for many years.
And as you know, heat and humidity changes are drastic temperature and humidity changes will cause
your computer to fail. I haven't checked. It's in a box somewhere. I actually know exactly where it is.
But I'm not going to pull it out. It doesn't work. I don't know why I still hold onto it. It's garbage.
I've salvaged all the functional parts from it. But it's still here somewhere.
And then I think the next thing, the next computing memory I have is sort of the American memory that
most of us share what we might call the Microsoft indoctrination classes.
Indoctrination because you know, the Church of Emax and the evil Church of Bill Gates, Microsoft
indoctrination classes in school. But that's really what it is and was. Microsoft would give schools
free Windows licensing, free Microsoft program licenses in order to teach students how to use
Microsoft specific tooling. And I didn't particularly enjoy these classes because
you don't actually learn how the computer works. It's almost click the button to do the thing.
The only skill they teach you is how to navigate the seven circles of context menu hell.
And there's not really much theory behind it. Like I said, it's just click the button to do the thing.
And it's not very enjoyable. An enjoyable way of using computers. Really even all that productive way.
A way that's all that productive of using computers.
I think the next computing memory I have, the next big one, is sometime in high school I took a
so the state that I live in the education systems kind of strange. So not only do school districts
have classes where you can take like online specific classes. But there is there are classes
that the state puts on. So you know, state of whatever game development class. So in high school,
it was a game development class in air quotes. It was more so a game theory class.
You know, the theory behind video games and sort of that type of thing. I don't remember very much
about it because the other boys in the class and I, it was a small class. It was an elective
sort of shoehorned in. The media had like a supervisor. She didn't teach the class because it was
online. And supervisors are the wrong word. But that's the only word I can think of because she
supervised up supervised us in order to make sure we're actually doing work and not just watching
YouTube videos in class in that class time. So we finished the coursework quite quickly.
That was kind of one of the things about the online classes. This is very easy to finish them
because you just sit down and work and you just get it done, especially if it's intuitive stuff.
You can kind of cut out the middleman for your, I finished the class credit by doing it online.
And you learn just about as much which is not a whole lot. But we finished really so the supervisor,
that's the wrong word, but I'm going to keep using it. The supervisor for the class, she said,
hey, why don't you guys learn something about web development because you still have a
half a trimester of this, this hour of class left and you can't just do nothing. So she set us
on to W3 schools, I think is the one where she sent us. I don't like, currently I don't like W3
schools and very quickly I learned to dislike it because it's not very useful
compared to the Mozilla developer documentation. The Mozilla docs are much more thorough
and they tell you what is and is not standards compliant, what is and is not deprecated,
what is and is not best practice. Although I disagree with the Mozilla documentation,
when they suggest people use non-free text editors and sort of non-unixy text editors or I
guess traditional text editors, use an IDE, it's like you don't need an IDE for web development,
it's just mark down. That's what the M and HTML stands for is markup, you don't need an IDE
to do any heavy lifting for you. Well, so ever, even with CSS or PHP or JavaScript, you know,
just just learn how it works and you don't need to use whatever IDE Mozilla tells you.
But that's kind of a tangent, something tangentially related to web development is the
Mozilla documentation telling instructing people to go and pay for a visual studio,
which is sort of counterintuitive to their entire open source mission. Go use this proprietary
editor that's based on our Google Chrome, that's our enemy. It doesn't make a whole lot of sense
that they would even recommend that editor when there are a million free editors to choose from.
That are quite frankly more practical and more functional and more usable, right?
Stay out of your way. That's my end goal in an editor or something that stays out of the way,
but I can talk about editors later. I'm talking about computing history. So shortly after that,
that web development class or that's sort of nothing burger of a game dev class turning into a
web dev class, my mother had bought me a HP net book. And for anyone who's ever had to use an
HP net book, I think you'll resonate with me that trying to get anything done, trying to do any
work whatsoever on an HP net book, it's an exercise in futility and it's a penance in itself,
right? A penance for the sins of the fathers. The fathers who thought it was a good idea to build this
darn thing, you know, this net book crap. But let me talk about this net book. I think it made
it kind of forged me into a better Unix user, more systems administrator, e-type person,
because it was so painful to use. Okay, so the hardware specs on this thing,
20, I think it was 25 or 32 gigabytes of internal storage. That storage is EMMC, I think, is the
acronym. What, what, what type of storage it is, right? In layman's terms, it's basically an SD card
welded to, or soldered to the motherboard. Weld is the wrong word here. It's basically an SD card
soldered to the motherboard, which means the more you use it, the more unreliable it becomes, right?
Each time your laptop dies, which laptops do, the power goes at red. As a battery, each time the
laptop dies, it becomes, you know, you're taking a gamble on whether or not it'll turn back on or
even boot. I think it had four gigabytes of RAM. So enough to get things done, not using Windows 10,
though, right? That's what it came pre-insolved with those Windows 10. You know, four gigabytes of
RAM and 32 gigabytes of disk space. That's about the minimum that Windows 10 operating system can run
on without any programs, without any external programs whatsoever. And you know, that 32 gigabytes
of disk space, that's a bare bones Windows 10 installation and you can't even run updates.
So what happens in Windows 10 is, you know, you get the Microsoft gun put to your head update now
or else you can't use your computer anymore, you know, sort of that scary message that, you know,
forced updates that we all suffered through. I think I have to sell around to you, but that's almost
inconsequential. Windows 10 doesn't work if you don't have four cores, right? You sell around
single core two threads. It's very underpowered for the garbage, the garbage fire, the big dumpster
fire that is Windows 10. But it was unusable, right? Windows 10 is entirely unusable on every
piece of hardware. What that means is, you can't even try to get by on something as minimal as an
netbook. So I asked around and a friend told me that I should install Linux because Linux just
works. I think that was his worst rate. Just works trademark trademark Unicode character,
which is kind of funny because that's what I tell people now. Why are you using Windows? Linux
just works trademark Unicode character, kind of a funny thing. So I said, okay, so I looked what
Linux was and I was like, there's a lot of these. What should I install? He said, you can pick a
bunch, but it's kind of big. It's kind of heavy for that little netbook and sometimes a bunch
of can be a pain when it breaks. So he said, the latest, you know, babies first Linux distribution,
the popular one right now, the scanning traction, you know, the traction is useful because you have
other people asking the same questions, you know, Googling the same things, asking the same things on
stack, stack overflow, specifically with the distribution name in the title. This distribution
was Linux Mint. So I went to their website and I said, hey, there's a lot of different downloads
here. What one should I pick? And he said, those are basically just different desktop environments,
different usage paradigms. He says, kind of like iPhone versus Android, how you use them a little
bit differently, even though under the hood, it's pretty much the same thing. Under the hood,
they're both Unic systems, both non-Ganoo Unic systems, albeit slightly different, but the higher
level abstracted interface paradigm. So he said, there's three of them. There's one called Cinnamon,
one called Mate and one called XFCE. And he said, Cinnamon's a bit heavy for something that
has only two threads and four gigabytes of RAM. It won't be a very fun experience.
Mate is like Old Ganom too. I didn't know what a Ganom was at the time, but I, you know,
Mate is pretty Windows-like. It'll be familiar to you. And then XFCE is very lightweight,
but sometimes you have to do the heavy lifting as the end user. There's not a whole lot of
people publishing their own XFCE, I guess, applet. The thing that sits in your system tray.
There's not a whole lot of people building those types of things and then publishing them and
making them easy to find. So he said, just go with Mate. So that's what I did. I installed Linux Mint
Mate version. And the interesting thing that you told me at this time is it doesn't matter which
kind you choose because you don't have to reinstall. You can just install another thing,
hypothetically, if you had enough disk space, you could install all three of the desktops and then
pick between them and you can always change at a later date. It's not a permanent decision
picking a desktop. So that's what I did. I installed Linux Mint on this netbook. And I used it
for about two or three months. It must have only been two months. No, it was shorter than that.
It was only one month that I ran Linux Mint. The reason being, I had apt problems. The package
manager is sort of an exercise in futility. And I'm going to keep using these words exercise
in futility and penance. The penance being bearing the burden of the sins of the fathers who made
this bad decision, this bad computing decision. So I'm very quickly started writing HTML again. There
was a brief gap in time when I had stopped doing any any web dev type stuff. And I started up
again. It's like writing a bike. Mark down languages are like writing a bike. You don't ever forget
because it's just so simple. HTML is not a real programming language. You have to read
documentation for programming language after you learn it for various function calls and system
calls. But for a markup language, which is what the MNHTML stands for, like I previously stated.
Once you learn it, you don't forget it. Sometimes you just have to double check when something is
behaving strangely. And I think other things I did, I someone said, hey, you should write C++.
And in retrospect, I think they were pranking me because C++ is the worst possible programming
language to tell someone who's never programmed anything outside of CSS selector logic.
That wasn't very fun. I spent a lot of time learning the unique shell. I think it was actually
bash at the time because the idea behind bash is someone's told me, all of those commands you're
learning, you can write a thing called a shell script that pretty much just runs those commands.
So I learned a lot about bash scripting specifically, which I almost regret. And now I instruct people
and I lead them not astray, but towards posics because bashisms give me a headache,
and I don't want to help them troubleshoot bashisms when posics shell does everything you
needed to do. And when it doesn't, you should be writing, you should be using a real programming
language instead of trying to do it all in shell. I want to be a law tech at the time. I don't
write much law tech anymore. Now if I need law tech, I will. Sometimes I write our markdown.
I don't use our very much, but sometimes I write our markdown and then build it to law tech,
or I'll use markdown and then use paddock to sort of build a PDF or what I do mostly if people
care about presentation, and people think law tech is ugly. I don't. I think it's quite charming,
but now what I do for document preparation is I will write it in markdown, render it to HTML,
and then print the web page in Firefox because some of these people, they don't understand that
things can look not like a web page. So they're a little bit confused when you bring them,
a serif font document with wide margins and page numberings, and you know, there's official
looking thing. They don't really like that. Or at least in my anecdotal experience, they don't
really like that. Let's see what else. What else did I learn how to do? I started learning VIM.
You know, when you first get into Linux and Unix, you sort of become aware of this subculture
in the editor work, right? So people are like saying, VIM is better. No, EMAX is better. You know,
you see all the different memes where it's like average VIM user, and it's like a diagram of
the different parts of the brain. You know, one of those t-shirts, you see little kids wearing
where it's like, it's a diagram of a brain. It's like video games, and you know, so, you know,
bike writing, right? They'll put different things to the parts of the brain. But the VIM user
one is like VIM key bindings, and that's the entire brain. That's that's the joke. And then the EMAX
user version, it's like an octopus on a keyboard, because you need, you need, you know, octopus hands,
or the EMAX foot pedal meme. I can't remember who, which person it was or which website, but
someone, someone out there actually has like a USB foot pedal they use in order to be able to use
EMAX. So I started learning VIM. I've used EMAX here and there. I think the longest stretch was
about six months, but I had to stop using it, pushing the control and alt keys a lot. It gave me
RSI in my hands. So I had to stop doing that. VIM, although sometimes I get tired of pressing the
escape key. I don't press it as often, as often anymore, as when I first started using VIM.
But I learned started learning VIM at the time. Sort of a concept of mobile, not mobile,
motel, modal editing. And I think this was about the point after I installed a bunch of
latex stuff and was running latex in VIM. Something about apt broke on this Linux Mint system,
and it was probably something I could troubles you now, like a D-package error, or sort of an
apt cache broke type thing. But in the time, I even tried searching the error message and asking
on Linux Mint IRC, and none of the answers they told me fixed it. So then on a forum post, I saw
the people posting in different distributions with the neo-fetch thread, sort of a cringe program,
but my distribution is cool. This is my identity, this logo. This cool logo in the terminal.
Someone posted a Fedora one and I said, that looks like a cool logo, and I looked at Fedora,
and the same guy who told me to use Linux Mint, he said, either that or buy a Red Hat license,
because Red Hat just works. So I just installed Fedora because, you know, it's a Red Hat derivative,
or I guess, that's the wrong term, because Fedora is a further up the pipe than Red Hat, but it's
a derivative of Red Hat in a sense. That's what I'm recording this on now, is Fedora inside of
Audacity, because my cell phone recorder failed. It crashed. After about 40 minutes, and I didn't
realize it until I had finished, but it's probably for the better, because hopefully this audio quality
will be better after I remove the CPU fan in my desktop. That's running. It's currently running.
It's been booted for a long time, or not booted. It's been powered on for a long time, but I haven't
entered the disk key, so it's just been idling. You know, that passphrase sent a colon space,
a blanky underscore to get the thing to boot. I should probably unplug it, because it's not being used
right now, but, you know, tangent's tangent. But after Fedora, after I installed Fedora,
I still use it. I like it. Fedora is the just works. Just works. Unicode trademark symbol.
Just works trademark distribution. Zero headache. It only breaks if you break it. It's very reliable.
I only wish the update cadence was slightly slower. But after Fedora, I became curious about
other distributions. You know, I thought, well, maybe Linux Mint was unreliable and unstable and
apt broke, because Mint is a distribution based on the distribution based on the distribution.
Mint is based on Ubuntu, which is based on Debian. And that's a large chain of failure, if you will.
So I tried Debian and, you know, just to find out that no, apt is actually a very unreliable.
And now my opinion is when someone tells me they run a Debian, or I say, I'm sorry, I'm sorry
for your suffering, because apt apt is such a pain to use sometimes. You know, it's not very
reliable compared to other package management systems, because it just seems to break randomly,
even though you don't do anything to it. But you know, that's all in good fun. I don't actually,
I don't actually hate apt. It's mostly just to jab, you know, like RPM versus
Deb packaging. You know, they're both tarballs. The metadata is slightly different. The way
they get installed is slightly different. But fundamentally, I'm not super concerned about what
you use, as long as you use something that works and you're okay with its drawbacks. Let's see,
all of the distributions I've tried, Arch Linux, I don't like it, OpenSusa. It's okay, I don't like
yes, though. I much prefer a red hat way of managing things, which is by the command line almost
strictly and not, not trying to use this sort of graphical utility that doesn't really work
all that well. Let's see, other distributions. I've tried a bun two. I don't really like a bun two.
The fact that apt pulls in snap packages is enough to make me write it off entirely as a
distribution, not worth using. Because sort of the idea of I know what I'm doing, I am the systems
administrative, I own this computer, I choose what is installed on it and how it is installed.
And if I wanted a program installed inside of a container, I would have used that command,
not the one that says install this program outside of a container on my operating system directly.
That's kind of my grievance with a bun two. Let's see what other distributions I've tried,
CentOS or CentOS. I call it CentOS because it's funny. And I also say MacOS instead of MacOS,
because people don't like when you say MacOS. They don't understand what you're saying and it's
kind of funny to say things sort of phonetically, although I've never used MacOS and I don't
ever intend to, because it's really just sort of a botched BSD if you will. At least in theory,
that's what it is. With various GNU component, ancient GNU components that cause people
headache when trying to do anything on the system. Other distributions, other Linuxes, let's see,
Gen2. I don't know how I miss Gen2. I really, really enjoyed running Gen2. I ran Gen2 for about
two and a half years and I stopped running Gen2. My desktop computer was in storage for a very
long time. When I brought it back out, I ran a portage upgrade or a build job or a sink or anything
for a very long time. Anyone who knows about Gen2, who's ever used it, if you don't update
at least once a month, if you go for about nine months to 10 months without updating,
it becomes a very, very large headache in order to solve. What that means is resolving portage
conflicts by hand and modifying use files by hand and unmerging things just to reemerge them,
sort of a multi-step dependency resolution. I think I had a breaking change with
or some sort of unresovable conflict with, I genuinely tried, but some sort of unresovable
conflict with, it was either Genome or System D. I think it might have been something with System D
because if it was Genome, I would have just removed that, that e-build, I think is what it's called.
I can't remember. I would have removed that atom and chose something else, but it must have
been lower in the stack, something I didn't want to bother with. And now I don't have a whole lot of
time to run Gen 2, but I really do enjoy Gen 2. It's one of my favorites, Linux distributions,
because you learn so much and it really, really shows the modularity aspect and the configurability
aspect when you can build the system entirely without GTK components or entirely without
Qt components or without any sort of pulse audio whatsoever. You can just black out that line
and it just builds just fine. It just kind of shows the modularity of it.
At some point, I discovered what BSD was. I think now I would probably consider myself more of
a BSD guy than a Linux guy. And that's almost purely for POSIX reasons and portability reasons.
And also because BSD lets me sleep at night and Linux is kind of a pain sometimes.
But I tried FreeBSD. I installed it on my laptop. I brought that laptop to class with FreeBSD on it.
And it works just fine. Occasionally, there are at least I've noticed,
sometimes the graphics kernel module would be a little buggy. That's not a thing anymore, really.
I haven't noticed those graphics bugs in a long time. Sometimes audio is buggy,
but I haven't noticed that in a long time. This was kind of years ago, probably about five
years ago. So there's a lot of improvements in the operating system since then. I also played
with OpenBSD quite a bit and that's currently what I run on my web servers. All of my servers run BSD.
I haven't touched net BSD. Oh, that much. I mean, I've done an installation. I think I set up
an IRC bouncer and then I never used it. I'm not on IRC much. I generally like to be
I generally like to be left alone and I don't generally like to argue about things with people
in an environment where your distribution is so tied to your identity that when someone points out
a demerit of your distribution, you feel as if it's a personal attack because you're sort of
you know, you sort of constructed your world around this identitarian paradigm. I generally don't
like those types of environments. Identitarian is meaning you're not what you think you are. You
know, a man is a sum of his actions, not not not as some of his imaginary attributes, right?
So sort of the intangible things. There's my gripe with the internet anyway. Lots of gripes.
Let's see. What else have I used? I mean, I think we've all played with alumas once or twice.
Plan nine. I ran plan nine on a laptop that I didn't take anywhere for just long enough to
write a couple of Plan nine C programs. I know that laptop runs free BSD because I needed to test
some shell scripts and C programs against free BSD and also because when writing C,
debug ability is important, right? So open BSD is somewhat difficult to debug user-land programs
and that's because they do ASLR and it's in a way that the genuity bugger doesn't really like
and for a BSD slightly more debuggable than open BSD and then Linux, GDB works quite well on Linux.
The debugger hooks into more parts of the system to tell you what line of your source code
things are on and also what's the program called the file grind, VALG RIND. That program seems to
be a little bit more verbose on Linux, although this could be purely anecdotal in pure superstition
on my part. But that's why that laptop no longer runs plan nine. It now runs free BSD.
I think that's pretty much my software stack. I currently run Linux on my laptop, right,
Fedora. Open BSD on all of my web servers. Open BSD on one of the desktops in my house.
I think technically I run Debbie and I have a Raspberry Pi plugged into the network
that does DNS for me, some like DNS blocking stuff. Although it's kind of interesting because
sometimes the router won't give, you know, the cable provided router won't give the correct
DNS server address. Instead, it gives the second one a race instead of sending the local DNS server
as the primary. It will send, I think, as a cloud nine or cloud nine. I think that's my upstream
DNS. I can't remember which one I said it to. But yeah, let's see. Programming, oh, I guess
devices. Let's finish devices before programming languages. I have a Google Pixel phone.
The reason I bought a Google Pixel is for the sole purpose of running Linux and iOS.
What happened was I wanted to de-google an Android phone. For my job, I need a cell phone. It's
unnecessary evil. At least for me, something that helps me sleep at night with a little less paranoia
is knowing that most of the operating system and the components required to make the device
function and not just be a hunk of the glass and plastic and rocks. As a silicon, as you
rock we tricked into thinking, rock we tricked into doing that. I didn't want like a flip phone because
a lot of those are some people might think simpler, but not as free. So on my Google Pixel phone,
I run Graphene OS. Graphene OS is a hardened and de-google ROM. No Google services at all.
I get apps from F-Troid. Pretty much it functions as a cell phone and an MP3 player and a pod
catcher. But an MP3 player is the incorrect word because I encode all my music into open formats
like like AUG. That's the container, right? Because LibVorpus is everywhere. But an MP3 codex,
you know, the royalties and whatnot. It doesn't say it right with me. So everything's an opus,
I don't know, opus, whatever. It's in one of the free formats. Not flat because that's too large
to put on the phone, but, you know, this is something the variable bit rate. It doesn't really matter
because you're not going to get high fidelity audio out of a cell phone no matter how hard you try,
especially if it's going over Bluetooth through for, you know, you're oxidized,
but a 3.5 millimeter audio jack. It's been oxidized and filled with dirt, right? The port's full
of dirt and it's oxidized, you're not going to get good audio out of it. That's pretty much my
tech stock. I can't have programming languages. My web language wise HTML is not a real programming
language. CSS isn't a real programming language. PHP, I like PHP. I think it's the only good
server side programming language, specifically because when you write PHP and you include libraries,
you're only including things that have been audited by your distribution maintainer. Where when
you run something like Rails or Django or what are the other ones, right? I think they're
another Python one, but how the infrastructure for those sort of, I guess, server side programs
is download a bunch of random stuff from GitHub. And you know what makes me not sleep well at night?
Knowing that my web server is entirely dependent, right? The security of my web server is entirely
dependent on a bunch of people on GitHub, you know, trusting people on GitHub without sort of a
third party auditor, but that is the package maintainer. And those people on GitHub trusting other
people on GitHub to sort of do their due diligence and audit their code, right? I don't sleep very
well at night. Or I guess I don't know how other people sleep very well at night. When their website
runs on random things they downloaded from GitHub without even reading the source code, you know,
sort of the include someone else's program and then execute the someone else's program function,
that's also not a very satisfying way to build something. But PHP, that's my web language of choice,
everything else is kind of not, I mean PHP is incorrect, right? It's not a, I don't like it,
but it's the least battle web language we have, especially if you're not running WordPress,
if you write your own it's actually pretty secure. Systems programming, I like the C programming
language, strictly POSIX compliance C, I don't like GNU C because it's too big and convoluted
and it doesn't make a lot of sense. And I really, really do not like reading GNU info pages.
Whatever page or whatever page or old installment shows, he probably could have just chose
the existing page, but you know, nope, GNU has to be different, right? Different for the sake of
being different. I don't like reading info pages, they seem less, less complete than man pages
in my opinion. And a lot of the ways to, you know, the new man pages are incomplete because they
want you to read the info pages, but the info pages are incomplete because no one wants to write
an info page, because everyone knows how to write a man page, right? What was the starting thought?
I lost it, because I got distracted about info pages. Something about GNU, POSIX seed, right?
I like POSIX seed because it's portable. And it's portable across architectures and operating
systems. I also POSIX shell for a similar idea. Great, if you need to write something quick,
write it in shell, if shell becomes too limiting, if you can't accomplish what you want to do in
shell, it's probably time to write a small C utility to fill that spot in the pipe,
in the pipe of UNIX commands. Let's see what else. Sometimes R, I don't write a lot of R anymore.
I mean, I did an R course in college, and I don't know, it was a statistics course in college.
And I'm very, very, very thankful that the professor was an R guy,
because I'm not going to pay for a SAS license. And God forbid, I have to use Excel for anything.
That's kind of my opinion on Excel is that spreadsheets are the worst possible tool for every possible
job, because if you think you need Excel or a spreadsheet, I say Excel specifically because
a lot of people are circling back to the sort of Microsoft indoctrination classes,
the giving schools free Microsoft licenses. A lot of people don't know what a spreadsheet is,
because they didn't learn the higher level concept. They only know what an Excel is.
So, you know, oh yeah, I'll email you that Excel sheet. It's like, this is Excel, what?
It confuses me. But I always tell people Excel is the worst possible tool for every job.
If you think you need Excel, what you actually need is pen and paper. And if you know you need
Excel, what you actually need is a database. That's kind of my opinion on things.
For statistical analysis, R is the best choice. It's free, it's open source. It's a Unix tool,
you know, it's based on the S language, and it's an ancient Unix tool. They made open source.
And for anyone curious about R, install RStudio. I think RStudio is open source. They don't
ship it in Fedora because of whatever weird licensing. But RStudio is an IDE. And that's kind
of the one exception I make for IDE's. When I'm using R, the purpose is to visualize data.
And that is the one context wherein IDE is useful. Because when you plot your distribution and you
compare it to a normal distribution, it's easier to visually see that and visually identify what
your distribution looks like. Then reading various values spit out by a function that you don't
quite understand. Because really, at the end of the day, you're just among key punching numbers
into a computer to tell management that their process is broken. Right? Thankfully, I don't have
that job anymore. I've recently got a new job and it's entirely different, but I'm enjoying it.
Not having to touch Windows. Not having to, you know, let's see, only time will touch Windows
if someone's paying me to do it. Not having to fight spreadsheets all day, that type of thing.
You already said editor's been. I think that's about it for programming languages.
Yes, I think that's my intro to computer show with some opinions sprinkled throughout.
I think future episode ideas I have, I want to do one on why Unix is sublime. I think that would
be an interesting episode. Second idea, why plazix is sublime. That might actually be part of
the Unix episode. I still have to think about that more. Another idea I had, YC is sublime,
sort of a sublimality, not subliminality. It's kind of a hard word to say, sublimality.
Right, words are strange sometimes. Something about C, specifically posit C,
and the reasons, I guess, discussing the merits of purely posit C and sort of why I like that
programming language and sort of paradigm. Another idea I had was discussing the security
mitigations in open BSD. That's an episode I'll have to do a little bit more research on.
You know, those things leave my head. The things that are sort of permanently in my brain are not
necessarily, you know, the specifics on open BSD security mitigation, security mitigations,
sort of the idea that it is secure for various reasons, right? It's not necessarily a security
theater, although critics will call it a security theater. But sort of the fact that their
web server runs in a charute, right? That's enough to make me trust that these guys know what they're
doing, and so on and so forth. You know, the fact that you don't need a rude access to start
an accession, right? That type of stuff makes me trust them, even without memorizing the specifics.
Another idea I think I mentioned Plan 9 in this show, and I'm about to mention again at the
very close of the show. An episode about Plan 9. Plan 9 from Bell Labs was a research operating
system. It's like Unix, but way more Unix-y. It's pretty much vaporware, right? There's not a
whole lot that ever came of it, except for the 9P file system. 9P file system is everywhere.
All the Microsoft virtualization stuff uses 9P, sort of the Microsoft, you know, don't install
Linux. Guys, they have Windows. Please stay on Windows. We have Linux on Windows too, right? They're
Linux virtual machine stack thing. That all runs on 9P, all the file transfer stuff.
So some parts of Plan 9, right? Like private namespaces that made it to Linux. I can talk about
Plan 9 more, but that's going to require, you know, same thing with OpenBSD, Research
Analyst. I think I also want to do an episode on sort of the virtues of the BSDs, and when you
want, when you're BSD curious, almost, almost. I think a lot of Linux guys are, especially
people who have been burned by System D1 or 2 times. They're curious about what a more
peer or I guess pedigree Unix system could look like and how you could use it. So that's something
I might make an episode on that is sort of which BSD is right for you, and sort of, you know,
why BSD is not Linux. Even though the more historically correct approach is why Linux is not Unix,
and why BSD is Unix. There were a couple other ideas somewhere or somewhere strewn throughout
there. But if any of these ideas sounded appealing, reach out and say something and sort of
instruct me on which one to do next. As with all things, feedback is encouragement.
So this hits any year drums out there, you know, which one of these ideas that I've presented
or I guess potential shows I've presented is most interesting to you.
And which one should I do an episode on? Because I'm really impartial, right? I'm going to talk
about this stuff regardless. But if there is an order of preference or maybe sort of advice on like,
hey, maybe we should do the Unix episode before the Plan 9 episode that way, that way there's sort
of a through line as a people understand. Or I don't know, I can't assume that the audience is,
expert level on Unix philosophy, Unix ideas. I don't even think I'm an expert at sort of these
Unix ideas. But that might be something to cover before other things. I'm not sure. So any advice
there. It's been almost an hour. I think I'm going to end the show here. So yeah, yeah, comment
or whatever it is however you want to reach out and say, hey, do this next. I want to hear
about this more than that. Or even present me some ideas based on what I've said. And I don't know,
I feel like I might have been a little bit negative in this episode, a little bit of an emotional
response. But don't take that to heart. I think a little bit of banter is okay. And you have to
remember, you know, I am not my tools. You know, as a sale you want, you know, BSD is bad or whatever,
your BSD is ill. Okay, whatever you say. But you know, you are more than the tools that you use,
right? Tools get the job done. Not necessarily. They don't define who you are. Right, just because
you don't like, or I guess just because I don't like a specific way of programming doesn't mean I'm
not, you know, a computer user. Right, right. And man is his actions and other tools. I don't like
this programming language. But in the end, we're both programmers, right? That's that's the common
thing. We're programmers, but with different approaches. Similarly, Linux users, I guess Unix
users, but with different approaches to how to use a unique system. Maybe I'll try it. That's
something I have to think about, right? Maybe less emotional response to these types of things that
I dislike. But maybe sometimes the sort of overexaggerated emotional response can be humorous.
Let me know either way. I'm sort of just feeling the waters. What types of things are enjoyed.
And I do appreciate humorous content a little bit more than, you know, maybe humorous content,
that sort of edges close to a line. Align that you don't necessarily want to cross.
I almost appreciate that more than sort of like dry, cut and paste content. That's why I've sort of
used these exaggerated words like, you know, penance and, you know, context seven circles of context
menu help and sort of exercise and futility, right? Because it's exaggerating quite a bit, but the
exaggeration is kind of how you feel in that moment of frustration. So I think I'll end it here.
Ways to contact me on my website. That's really the only internet presence I have
is ox19.org. That's 0x19.org. I was kind of surprised the domain name wasn't taken. So I got
up the domain name and then and then when I went to make an account on getlab.com, I said,
hey, I'll just use my domain name. I guess what? It didn't work out. So because someone else,
everyone wants to be an op code. Everyone wants to be, you know, 0 and 0x19 or 0x19 or
or into 19, 18 or 19, 18 or everyone wants to be a cool op code. That's what they want their
handle to be. So I chose a plan nine reference instead because nobody knows what plan nine is.
So my getlab account, there's some projects there, some source code. I don't know if any of it
will be useful, but there's some trinkets in there. You know, just basically toy programs. I'm not
a programmer by trade. I just think it's fun. My job doesn't have hardly any computers involved.
My new job, which is, you know, almost, it almost makes computing at home more enjoyable.
But my getlab account, you can find that it's getlab.com slash bin RC. That's BIN RC. That's a plan nine
reference. On my website, I think there's a contact page. I have PGP keys there. I haven't tested
them at all. So if you have the ability or if you know what PGP is, send me a PGP message.
I'm curious to see if I set it up, right? I used to run a mail server, but now I'm going through.
I just pay proton mail for me because I got sick of all of my mail to Google servers being
bounced. And you know, it's really hard to run a mail server. Really, really hard to run a
mail server when all of the other big mailing companies don't like you. Don't like that you're
trying to run your mail server because they want to make sure they can read your messages, right?
So what are that privacy thing? I guess one last idea before I end the show is
Graphino S episode, right? Graphino S mitigation. Maybe something on Android.
But but anyway, thank you for listening. I'm going to try to edit this audio a little bit.
See how it turned out. So yeah, visit, visit my website. Let me know how I did provide criticisms.
I don't know if I really gave any hard opinions, mostly just like
almost exaggerated hyperbole in sort of a sense of sarcasm and maybe in
satirical irony at points. But you give me feedback. Anyway, thanks for listening.
Hope you enjoyed. If not, tell me and I'll stop recording shows. If it is that bad, right?
You have been listening to Hacker Public Radio at HackerPublicRadio.org.
Today's show was contributed by a HBR listener like yourself. If you ever thought of recording
or cast, then click on our contribute link to find out how easy it really is.
Hosting for HBR has been kindly provided by an honesthost.com, the internet archive,
and rsync.net. On this otherwise status, today's show is released on our Creative Commons
Attribution 4.0 International License.
