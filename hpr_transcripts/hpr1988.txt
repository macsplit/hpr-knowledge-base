Episode: 1988
Title: HPR1988: Linux from Scratch
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1988/hpr1988.mp3
Transcribed: 2025-10-18 12:54:19

---

This is HPR Episode 1888 entitled Linux from Crash.
It is hosted by first-time ghost Brian in Ohio and in about 7 minutes long.
The summary is my experience of installing Linux from source.
This episode of HPR is brought to you by AnanasThost.com.
Get 15% discount on all shared hosting with the offer code HPR15.
That's HPR15.
Better web hosting that's honest and fair at AnanasThost.com.
Hello HackerPuppetGradio, Brian in Ohio here, long time HPR listener, first-time host.
At that time I talked to you about my experience of building a GNU Linux system from source
using the Linux from scratch distro.
My first attempt at building a Linux system from source was PocketLinux.
PocketLinux is a guide found at the Linux documentation project.
It walks you through the process of building a Linux system from source onto three and
a half inch floppy's, hence the name.
The guide is still available and can be found at TLDP.org, a link is in the show notes.
PocketLinux is a fun project.
There's nothing like hearing linus say linux on a system you've built from source.
In the end, PocketLinux is very limited.
It's limited in its size and it's limited what one can do.
It's not able to replicate itself.
That's where a Linux from scratch comes in.
If PocketLinux is fun, Linux from scratch is serious.
A number of years passed after PocketLinux in which I moved from being a Ubuntu user
to being a dedicated Slackware user.
I love Slackware and I can't see any reason to move away from it as my daily drive.
Slackware lets you install compact Linux systems.
It gives you good control over what programs are installed on your system.
But a full Slackware install does add many programs that you may never use or understand
or want.
This led me to thinking about doing Linux from scratch.
Building from source guarantees that only what you want is on your computer.
The Linux from scratch distros a book that can be found at linuxfromscratch.org.
The latest stable release can be found there and will guide you through the process of
putting your system together.
I won't bore you with the details.
I'll just give you my overall impression and things I learned along the way.
And if you're looking for an install ISO, you need not apply.
If you decide to tackle Linux from scratch, you'll need a few things to get the job done.
You have to have a functioning computer with a Linux system installed.
I'm biased and think Slackware is the best place to start.
If you can install a Slackware system, you have got most of the skills needed to build
Linux from scratch.
If using F-DIS or seeing N-Cursor screens makes it queasy, you might want to hold off
on Linux from scratch.
As far as the computer goes, it doesn't have to be the newest and shinest.
But if you have a Linux running on it, it is a candidate for rebirth.
In my case, I used an IBM T30 laptop.
It's solid hardware with a few interesting features like sliding carts for CD-ROMs and
floppy drives.
It has a legacy parallel port and a legacy serial port as well as USB.
And most importantly, it was cheap.
Well, now that you've gathered the tools, you might ask, what skills do I need to build
LFS?
Do I need to be some kind of command line guru?
Here's what I think.
First and foremost, you need to be able to read and follow directions.
The LFS book is well written, and I think anyone can get through the process.
But you do need to read and follow directions.
Take your time.
Read and read, read the steps at the beginning of each section.
Getting those foundational steps done right will save you heartbreak later.
I can attest.
After re-entering the cheat route environment in the middle of the build incorrectly, I was
left with a subtly broken system that wasn't discovered until deep into the build process.
This led to a trail of tears.
As far as the actual command line goes, if you can move around the Linux file system,
make files and folders, understand things like permissions, create users, you're well on
the way to being able to build Linux from scratch.
If confronted with a problem, your first answer is SUDU app get install.
You might need to brush up something.
Luckily, Hacker Public Radio has many episodes on using the command line.
One utility and skill that I found essential to building Linux from scratch is the general
purpose mouse.
The first time I ever encountered this utility was installing Slackware.
Near the end of a Slackware install, you're confronted with a question that says something
like, do you want console mouse support on boot up?
I really didn't know what it meant.
And it wasn't until I built an LFS system that I really began to appreciate the power
of cut and paste in the console.
The first time I tried building LFS ended in a complete failure.
Trying to type in a long picket fence SUD command ended in frustration and brought the
whole project to an end.
Cutting and pasting between consoles made Linux from scratch possible for me.
It's not hard to use the console mouse, but it's different than a GUI mouse, and it takes
a little practice to get used to it, and I think it's essential to an LFS build.
So in the end, after you take your time, read, and not consume too many adult beverages
while you're building from source, you too can build a Linux system from scratch.
Ours of dot slash config, make test, and make install will get you there.
And as an added bonus, watching GCC output beats anything on TV these days.
So what are you left with on your first boot up?
You're left with a very minimal system.
Even the maintainers admit that.
Beyond Linux from scratch, also at linuxfromscratch.org, we'll take you to the next level.
BLFS guided me into adding enough programs to be able to record and upload this podcast.
My system is growing, but at a measured rate.
When every program takes time to build, it makes you think more about what to add and why.
And I think it's a good mindset.
It's so easy to get into the install the newest app, use it a couple of times, and forget
about it, way of doing things.
Linux from scratch will cleanse you of this habit.
LFS also helps you to appreciate when the virtues of open source software, the source
code.
I'll admit, the first time through LFS, you're not looking at source code.
You have one and only one thing on your mind, getting or done.
But now, as I've expanded my system, I do take the time to read the readmes and the
install notes of these programs we hold so dear.
So what's in the feature for my LFS system?
I'd like to learn more about package management, and I'd like to try to learn about automating
the build process.
I think it'd be really cool to start a script and come back a couple of days later to a
shiny new command prompt.
In conclusion, I know LFS isn't for everyone, but the book is worth reading no matter what.
It gives details to how Linux space systems work and are held together that any Linux
user can benefit from.
Thanks for listening, and I know the lady in the outro will say, email me if you have
a comment, but I say, record a podcast.
It's fun.
Brian and Ohio is signing out.
You've been listening to Hacker Public Radio at Hacker Public Radio dot org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out
how easy it really is.
Hacker Public Radio was founded by the digital dog pound and the infonomicon computer club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly, leave a comment on
the website, or record a follow-up episode yourself.
Unless otherwise status, today's show is released under Creative Commons, Attribution,
