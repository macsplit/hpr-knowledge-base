Episode: 3952
Title: HPR3952: Making the Case for Markdown
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3952/hpr3952.mp3
Transcribed: 2025-10-25 17:49:44

---

This is Hacker Public Radio Episode 3952 for Tuesday the 26th of September 2023.
Today's show is entitled, Making the Case for Mark Down.
It is hosted by Keith Murray and is about seven minutes long.
It carries a clean flag.
The summary is, Keith discusses the background and applications for Mark Down.
The more things change, the more they stay the same.
As technology and computing has evolved over the last 50 years, something has remained
pretty constant.
Like the guiding light of a lighthouse through the fog, one format of data file has remained
pretty much a beacon of simplicity, instability, no matter what the platform, no matter what
the era, the plain text file, ever thus.
One evolution of plain text that has gained a lot of traction, with bloggers, developers
and non-technical users alike, is Mark Down.
So I'm here to make the case for Mark Down.
One example of this would be a lab stack solution like WordPress, which launched in mid-2003.
And yes, you did the math correctly, that means WordPress is 20 years old now, it snuck
up on me too.
You would manage all of your blog posts as data in a database and really didn't need to
know anything about the website design at all to get something that looked pretty good.
In other cases, it would be more manual.
You would hand at it relatively basic HTML and use that to sort of mark up your text and
images and then drop that into a template, an existing template of some kind.
This latter case is what during Fireball's John Gruber was able to leverage when he
pulled together some Pertlescripts and introduced Mark Down in December of 2004.
Mark Down was born out of necessity.
For a lightweight markup language that simplifies text formatting for the web, Gruber's vision
was to design a syntax that produced clean, legible plain text while being effortlessly
able to convert it into HTML.
This was a vision that ultimately gave birth to Mark Down.
In his own words, the overriding design goal for Mark Down's formatting syntax is to make
it as readable as possible.
The idea is that a Mark Down formatted document should be publishable as is, as plain
text, without looking like it's been marked up with tags or formatting instructions.
Alright, so what does it do?
Mark Down has one purpose to allow you to write in a plain text format with some visual
cues for different types of markup while keeping the plain text version of the file comfortable
and readable.
The syntax of Mark Down is simple and user friendly, providing the ability to add formatting
to text without taking away from the text itself.
The formatting cues are simple and unobtrusive, and they'll allow for a document to remain
very readable without the markdown having to be rendered into visual styles.
When it comes to rendering, there are a ton of options.
Many desktop and web editors have the ability to show both Mark Down and rendered versions
in their applications.
There's also lots of scripts and command line tools for rendering Mark Down to other formats.
The majority of the applications and scripts are also platform independent, so they're
going to work well on Linux, on Windows, on Mac OS, or as web-based tools.
All you need is something that can edit text.
Alright, so all that said, let's highlight a couple of examples for everyday scenarios
where Mark Down really shines.
These are far from the only possible use cases, but they should be enough to trigger some
imagination.
Alright, so the no-brainer example is blogging, for sure.
This is where Mark Down got its origin story.
Mark Down is the preferred choice for many bloggers when writing and formatting blog posts,
and a ton of popular platforms like WordPress and Jekyll offer Mark Down support either natively,
or with easy to add plugins.
This allows you to focus on the writing, rather than having to wrestle with HTML tags for
headings, lists, links, and emphasis.
In much the same vein as blogging, Mark Down is well-suited.
Different kinds of technical writing and documentation.
When writing up documentation, the requirements are often relatively light in terms of really
complex formatting.
The big thing is keeping it consistent and easy to read.
The plain text nature of Mark Down also allows multiple people to edit across different platforms
and collaborate on the same documents with it the need for any kind of expensive tooling.
One caveat here is that Mark Down isn't always well-suited to writing up complex, scientific,
or mathematical formulas or equations.
They can be included easily enough as images, but to put complex formulas in its text can
get a little challenging.
Notaking is definitely one of the places Mark Downs expanded the most in the last few years.
Applications like Notion, Joplin, Obsidian, all support Mark Down natively, enabling
you to structure your notes effectively and efficiently while using that lovely plain
text format for platform independence.
Whether you're a student or a professional or a researcher or a developer, you can use
Mark Down to keep your ideas or your notes or lists or tasks management.
Pretty much anything you could put in a plain text file works well in one of these note-taking
systems.
I've done the vast majority of my note-taking and draft writing in Obsidian over the past
year or so.
While Mark Down is a versatile and user-friendly tool, it does have a few potential pitfalls.
These aren't necessarily deal-breakers, but there are definitely things you might want
to keep in mind.
As I mentioned earlier, with regards to complex scientific formulas, there are definitely
some limitations in the complexity of layouts.
Mark Down was originally designed for text, blog posts specifically, and it really does excel
in that area.
If you need to format things in a more complex way, it may make more sense to write the draft
of your text in Mark Down, render it HTML, and do complex formatting there after the fact.
Mark Down will support tables, but it is a little bit clunky and definitely takes away
from some of the readability in many cases.
There is also a little bit of a learning curve for Mark Down.
It's not a long one, it's not difficult, and I think most people grasp the basics for
their use case pretty quickly.
But as a newcomer to the format, if you see a giant Mark Down file with that syntax in
there, it might be a little off-putting just at first.
But I think compared to more complex Mark Up languages, Mark Down's learning curve is
pretty gentle and accessible for most people.
As a popularity of Mark Down has grown, the other thing to keep in mind is there are flavors
of Mark Down syntax.
While they're all more or less adhered to the original Daring Fireball version, they
do add their own additional capabilities, which aren't always interchangeable.
If you are writing in a particular platform or for a particular system, and it has its
own flavor of Mark Down, GitHub, and it's a good example of this, it would be a good idea
to check over that syntax guide to make sure there aren't any particular pitfalls that
are going to get you into trouble in your writing project.
So go forth and write, Mark Down remains an invaluable asset for content creators offering
simple, reliable, and easily portable option for writing formatted text.
The wide variety of use cases underscore the universal appeal, and the next time you
have a writing project to do, or you're in the market for a new note-taking tool, keep
Mark Down in mind to help you get your ideas written up with a minimum of thoughts.
This is Keith Murray for Hacker Public Radio, thanks for listening.
You have been listening to Hacker Public Radio, and Hacker Public Radio does work.
Today's show was contributed by a HBR listener like yourself.
If you ever thought of recording podcasts, you click on our contribute link to find out
how easy it really is.
Hosting for HBR has been kindly provided by Anonsthost.com, the Internet Archive, and
our Sing.net.
On the Sadois stages, today's show is released under Creative Commons, Attribution, 4.0
International License.
