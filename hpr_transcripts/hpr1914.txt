Episode: 1914
Title: HPR1914: Waking up
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr1914/hpr1914.mp3
Transcribed: 2025-10-18 11:04:45

---

This is HPR episode 1914 entitled Waking Up.
It is hosted by Genre and in about 8 minutes long.
The summary is a follow-up episode in response to Windigo episode about waking up.
This episode of HPR is brought to you by Ananasthost.com.
Get 15% discount on all shared hosting with the offer code HPR15.
That's HPR15.
Better web hosting that's honest and fair at Ananasthost.com.
Windigo, your flag is killing me man.
In episode 1838 waking up with Windigo, by Windigo, Windigo explained how he uses
computers to wake himself up in the morning.
I found his method to be rather abrasive, if you will.
With that in mind, hello HPR listeners.
My name is Jezra and today I'm going to talk to you about how I use computers to wake
up in the morning.
There are four computers that I use for waking up in the morning.
There is a media player, there is a computer that controls the lights, and there is a computer
that sends commands to the media player to play a certain audio and sends command to the
computer that controls the lights to control the lights.
The fourth computer is either my phone or my tablet or my laptop connected to my network
with which I connect to computer number three, so computer number three can send commands
to computer number one and computer number two.
And those computers work a bit like this.
Computer number one, the media playing machine is Wind.
Wind is running Mutton Chop and Mutton Chop is a media playing piece of software that
has a API and is accessible over my home network.
Computer number two, huh, number two, is Shitbird.
Shitbird is mounted on the ceiling of my home and Shitbird controls a chain of 180 RGB LEDs.
Shitbird is running Glimmer, G-L-M-R, the Glimmer light manipulator, regulator, thingy
or something.
Yeah, Glimmer is a network accessible software that has an API, fancy that.
If I want to change the lights, I could pick up my phone or my tablet, connect directly
to Shitbird through its web interface and basically set the lights, change the lights,
not because it has an API, I can also send commands to it using curl or W get to adjust
and change the lights.
The exact same is true with the media playing machine.
Computer number three is Chronos.
Chronos hangs on the wall and runs RWA, Ruby Web Alarm, which is software written in Ruby
that can be accessible over the network because it has a web server and it runs alarms.
It doesn't really run alarms, what it does is run scripts at a specific time.
For example, right now I've just pulled my mobile phone out of my pocket, I've opened
the web browser and pointed it to Chronos.
I am going to select a new alarm, this one that I'm getting, what do we got?
This one is called Classical Wind, wonderful.
Classical wind sends a command to wind to stream classical music from a internet radio station
in Austin, Texas.
I would like to take this moment to thank John Culp for recommending KMFA out of Austin
as a streaming classical music station.
Thanks buddy.
Where was I?
Oh yes, Classical Wind.
I'm selecting Classical Wind, I'm setting the time for 6.45 and saying Oki-Doki-Doki.
So tomorrow morning at 6.45 AM, my media playing machine will start streaming classical music.
I'm now setting a second alarm to take place at 7.15, that would be a half hour later.
And this alarm is actually going to run two scripts.
The first script is called Fade Classical.
And Fade Classical will request through the API every single piece of music on my media
playing machine that is classical music.
Fade Classical will then set the volume of the media player to zero, start playing one
of those classical music pieces at random and then slowly increase the volume.
At the exact same time, another script will be running called Lights Morning.
And Lights Morning is a one line curl script that sends a command to Shitbird to slowly
fade the LEDs on over a 30 second period.
So tomorrow morning at 6.45, my stereo will start streaming classical music.
A half hour later, oh, I'll be lying in bed and just relaxing, oh so nice, a half hour
later, the lights fade on, oh so majestic.
And then a random piece of classical music starts playing, oh and it's time to get out
of bed, yay!
As soon as that piece of classical music is finished playing, wind will start playing
something random from my collection.
And it's at that point that, oh yeah, it's time to get up, lights are on, punk rocks
playing, maybe it's some death metal in country, you never really know, you never really
know.
Oh, speaking of network accessible APIs, Ruby Web Alarm running on Chronos also has a network
accessible API, because I really like network accessible APIs for my devices, regardless
of what they are.
What this means is that it's possible for me to write a script on my laptop called Weekday
Alarm and Weekday Alarm would then send the commands to Chronos to set the alarms for
wind and shit bird so that the music plays and lights come on when I like them all the
time.
I could also have another script for the weekend or special occasions.
And if I have a single script that can send those commands, I can then use Blather to run
that command, which means in a nutshell, I can pick up a microphone and say set alarm
for tomorrow, at which point Chronos will set an alarm to turn on the stereo in the morning
and turn on the lights, because I like things automated because I'm fucking lazy.
And that my friends is how I wake up in the morning.
Thanks for listening and I'll catch you on the flip side.
You've been listening to Hacker Public Radio at HackerPublicRadio.org.
We are a community podcast network that releases shows every weekday, Monday through Friday.
Today's show, like all our shows, was contributed by an HBR listener like yourself.
If you ever thought of recording a podcast, then click on our contribute link to find
out how easy it really is.
HackerPublic Radio was founded by the Digital Dove Pound and the Infonomicon Computer Club
and is part of the binary revolution at binwreff.com.
If you have comments on today's show, please email the host directly, leave a comment
on the website or record a follow-up episode yourself.
On this otherwise stated, today's show is released on the earth, Creative Commons,
Attribution, Share a Like, 3.0 license.
