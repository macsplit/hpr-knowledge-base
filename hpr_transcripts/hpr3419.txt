Episode: 3419
Title: HPR3419: Linux Inlaws S01E38: Tiny kernels
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3419/hpr3419.mp3
Transcribed: 2025-10-24 23:04:31

---

This is hacker public radio episode 3,419 for Thursday, 9 September 2021.
To its show is entitled, Linux in laws S0138.
Tiny kernels and is part of the series Linux in laws it is hosted by Monochromic and is about 62 minutes long
and carries an explicit flag. The summary is all you ever wanted to hear and more about micro kernels
and other operating system war stories.
This episode of HPR is brought to you by an honesthost.com.
Get 15% discount on all shared hosting with the offer code HPR15.
That's HPR15.
Better web hosting that's honest and fair at An Honesthost.com
This is Linux in laws, a podcast on topics around free and open source software
and associated contraband, communism, the revolution in general and whatever fences your tickle.
Please note that this and other episodes may contain strong language, offensive humor
and other certainly not politically correct language you have been warned.
Our parents insisted on this disclaimer.
Happy mum. Thus the content is not suitable for consumption in the workplace,
especially when played back in an open plan office or similar environments,
any minors under the age of 35 or any pets including fluffy little killer bunnies,
you trust the guide dog, a lesson speed and QT Rex's or other associated dinosaurs.
What's our box then? Welcome to Linux in laws, smart and how are things?
Oh, things are not bad, not bad, apart from England is in the way that you are European.
So it wasn't expected of course.
Was it who told one actually Netherlands?
No Italy. Italy.
The amateurs, I guess yours?
I spent quite a lot of money on football in Italy.
Well, you see, I mean, fair enough as we all know, the fortune of the championships is
decided in cities. So when couple of old folks talk about this and then decide on the outcome,
so it's not about kind of 22 people running around in a stadium or something like this,
no, it's in some old people, it's just written the whole thing, so it just makes sense,
except it's the win and fall change.
There have done in the past. I'm surely more frequent under the name, and that's for sure.
You see Martin, that would imply that I know that I know soccer.
No.
Which fortunately or unfortunately depends on the point of view I don't.
It can be pretty boring, so.
Yes, indeed.
But this is not a soccer foot of podcasts.
A football player?
A football player?
A football player, yes.
How are you anyway?
Yeah, I can't complain actually.
No complaints about the beer temperature, do they?
No, it's not change, not no.
Okay.
It's just enjoying it, yes.
Martin marketing sent you the memo, right?
But actually, I'm...
I think we have marketing again.
What happened?
Yes, because I...
I mean, as a matter of fact.
No, you see, one of their first actions actually after this started on the 1st of July.
Apparently, H.F. didn't send the memo.
Anyway, it doesn't matter.
This episode was supposed to be about micro-curtles,
but I think it has this brilliant idea of to change this to behind glass painting.
I had a charcoal with them yesterday.
I hope it's open-source glass painting.
That's exactly it.
So, that's specifically the question that I asked him.
What is open-source, what is behind glass painting?
I have to be open with open-source.
A question that they couldn't answer, but insisted anyway,
until you get the subject regardless.
Okay.
But it's just for the conundrum, actually.
Either to talk about the subject that we don't know what's going on about.
We're back open-source or micro-curtles.
I mean, I'd like to pay you, which we know what not about.
What was the other way around?
I can't remember.
Yeah.
Well, I don't know about you, but I certainly never painted any glass.
We're not on purpose anymore, and it may be...
I'm talking behind glass painting.
As in, you have to move your hand, or you have to paint the glass.
I don't know, or the other way around.
I can't remember.
And my mother taught me about what, 40 years ago,
it's all talked about on the drain by now.
It's involved as the bridge.
Because I'm talking to other people.
I don't practice it every second day, for some reason.
So, why don't we do the following?
Just let's fight.
And then we're there.
Well, you said...
Well, you say this, but I bet there's never been a glass painting episode
on how probably radio before.
So, I don't know, or as much of that.
Can, if you're listening, please,
feedback and little say, love story, you just can't...
Please, make a glass painting episode, please.
So, we might as well actually fly under the radar of marketing,
and do this micro-current episode regardless,
or operating system episode, whatever,
especially with the open source focus.
And if they act upmark and just fire them again,
that's okay.
The war is, as you have done many times before,
when I asked...
Yeah.
Okay.
So, this episode is all about micro...
or operating systems, let's put it this way.
But it's a special focus on micro-currentals.
Full disclosure, I did a PhD on...
reflecting on for running the system architectures.
So, you are expert.
It's a bit of a home run.
Yeah, let's put it this way.
Cool.
So, if we invite Mr. Tannenbaum next time,
then you'll be happy to.
So, who's this, Mr. Tannenbaum, you keep talking about?
He wrote many books.
Oh, about business.
Yes, yes.
I can't recall...
Oh, I can't recall anything.
Okay, actually, I can't recall only one.
That's a matter of fact.
Oh, yes, what's this called then?
Motion operating systems is something.
I can't remember the entire goal.
Like, he's hiding my copy regardless, I think.
That's nice, right?
And that was the last time I saw him about what?
30 years ago.
Okay.
Well, there you go.
And so, any authors are there.
Don't sign your book to Chris,
because you'll never be seen again.
Full disclosure, I co-wrote the first
journal book on Mark III,
which was a more popular record program at the time.
And that got me to a
just-used conference where actually I ran into
Sadness at Handbaum for the first time in my life.
And we have a motion.
Yes.
That was in 1993 in other cooking in Mexico.
It's an age ago.
Yeah.
Well, I mean, you didn't use that, didn't I?
Sorry, you snick, sorry.
That's how you snick, you snick,
as in the, I would use, as in the
Unix, whatever, association.
Oh, you snick, sorry.
I use now, which you snick.
Sorry, you snick, smartness page.
Okay, no, that's all right.
That was 93 years.
It was the, I think, if I recall correctly,
that was the annual
Youth Snick Systems Conference or something like this.
People look it up.
This is what the country network is for.
And this is basically where I ran into, into Andy.
And that was prior actually to-
Did you say it's not my book?
Yes.
And that was prior actually to the Youth Snicks Wars,
which we will cover to the Youth Network.
Sorry, a long day.
To the Youth Networks,
on Bennett's version,
was it when it's going to get a cover in a minute, as those?
I think we should, yeah.
So, why don't we do a short resort of correct up,
which we will take us about what, about 12 hours?
So, if you want to skip it, just pause for a little bit.
No, before we start on the history bit,
why don't you tell us why this,
okay, why did microchranals came about?
Well, that was part of it.
I thought that was part of the history session.
As a part of the session, sorry.
Yeah, but then you kind of setting the scene,
for a listener's might, is this?
Sorry, microchranals came about,
because somebody had a brilliant idea of do more compartment,
compartment, mentalisation,
on a operating system level.
Simple.
And why did they decide this?
Some crap about portability,
lower the technical depth and all the rest of it,
read it out people.
It's all out there.
Yeah.
I thought you would actually do it.
Okay, Martin, does the concept bring,
does the concept of fashion bring about fashion?
Fashion, if it doesn't just take a look at your wife
or girlfriend or both.
They'll be more than happy to feel you in about that concept.
So, fashion for the other initiated,
if these are trends, especially in the parallel,
that come and go,
there are old books written on the side,
there are a lot of books written on the subject,
there are endless TV shows covering the whole thing.
And funny enough,
fashion's also have a certain impact on something called
technology, believe it or not.
Uh-huh.
So, what you're saying is that there is no benefits to a microchannel.
We're getting there in a moment.
Martin, if you wouldn't keep interrupting me,
no, let's start at the very beginning.
Okay.
Martin, you must record it where it's mid-60s.
IBM has just...
No, no, no, you can't.
Of why?
I thought you were laughing.
No, I wasn't.
Right.
I don't help you anyway.
Anyway, it doesn't matter.
It's mid-60s.
IBM, a company called IBM has just revised.
There are some things that five computers would do to penalize me.
And I seriously get into this computer game.
Uh-huh.
What started out as a mechanical endeavor,
could be turned into, especially after the invention of something called
transistor, turned into much more
and electronic approaches.
Let's put it this way.
And with the high integration of set computers,
they need for a more.
Let's put it this way, structured approach to writing software came about.
Hence the notion of operating systems
that would clearly separate applications
from the underlying hardware.
You were...
You missed the phase, though, anyway.
Martin, I didn't mean it.
Between the mechanical and the transistor were the bulbs, right?
Yes.
In the interest of time, I skipped this because otherwise we wouldn't
brought...
We wouldn't be talking about two of us, but rather four.
Okay.
That's your episode, Dennis.
Yes.
Fast forward to something called 1972,
when IBM had not only copped onto the fact that the operating systems are great,
but you would be because the computers at the time,
and factory-buster company,
were very powerful machines,
exhibiting about four kilobytes of main memory,
and a couple of megabytes of hardware storage.
Of course, the idea at the time was to make use of set hardware
for not only one application, but for multiple applications.
So a few of us at the time, did you?
Okay.
Yes.
Or tape, right?
I don't think...
The first disc was, I think it was,
of course, invented kind of a couple of late sixties.
Of course, they had tapes and...
That's just one of the main tapes.
My uni, which was well-part like the two of us,
but it doesn't mean that they're hard to send the gist.
But then you went to uni about late sixties.
But then you went to uni about late fifties, right?
No, this was, um, what was that?
Fifty-six-one?
Eighties-six?
Yeah, not in late sixties.
Yeah, yeah, yeah.
But you did add an education, okay?
As in, kind of, after you first job or something,
I see.
Oh.
Anyway, so...
Oh, it was you were saying, you were saying?
Yes.
1972, yes.
1972.
I mean, I even went something called the virtual machine.
And the rest is history.
As usual in history, ten things tend to repeat themselves.
Now, the shopping news, things may look different,
but at the end of the day, they're still the same.
So technology has just progressed a little bit
over the last what?
Fifty years?
So, yes, of course, integrated talking time,
we can have become much more compact.
We're talking about, um,
nano meters, technology, none, all the rest of it.
But at the end of the day,
operating systems have had a few breakthroughs,
but at the end of the day, it's still kind of
software running between applications and hardware, simple.
And with that, we are moving into the picks.
Sorry, the poxies.
Yeah.
The other isn't the picks of the week, no joke to say.
Okay.
It's 1972, IBM has come to the conclusion that
because of the number of operating systems
that they had running on their kids,
they would need a destruction layer
to allow a set of operating systems run concurrently
on the single machine.
Because as today,
or comparable today, I mean, I'm more still obsessed with making a lot of money.
So at the time,
they sold their mediocre hardware,
especially in today's terms for a lot of money.
So instead of companies or universities buy quite a few of them,
they only could afford one.
So that's the reason actually why they put
if there's something called a virtual machine on the machine,
on that hardware,
allowing them to run multiple operating systems
concurrently.
So even then, you had the precursor to something called MBS,
you had something called the disk operating system,
hence name, disks,
and all the rest of it.
So that was the first kind of
intonation of, if you will, of a virtual concept,
like abstracting away from the hardware
and allowing or simulating from the view
of a guest operating system,
virtual as hardware,
let's put it this way.
What happened simultaneously
in terms of concurrent developments,
quite a few people,
late 60s early 70s got together
and developed an operating system independently
and as an outside of IBM called Maltix.
Let's say again, what was called?
Maltix.
One of the first kind of
small to mainframe time-sharing operating systems,
IBM already had the notion of something called
TSO time-sharing operating system,
which I think they brand and subsequently,
the idea was on your typical MBS,
and since you would have time-sharing as an enterprise,
so you would have potentially thousands of users
accessing one single to MBS instance.
Quite a few companies came up with similar concepts.
Maltix was one of them.
I think Maltix actually was the University of Development.
Details may be in the showdowns,
but Maltix had one trade.
It served as a blueprint for something called Unix,
which was developed by AT&T in early 70s.
And Unix.
Running initially on things like
a PDP 11, something called VACS was one of the
popular mini-computer multi-user operating system at the time.
Well, you can run Linux on a VAC system, okay?
Yes, okay, of course.
Digital market ecosystem is altrux.
Yeah, let's go.
Yes, yes, yes.
And of course, they had a competing off-course DMS logo,
which we would go into in a minute.
But first, let's cover Unix.
Unix and its friends had one important notion,
compared to one important trade,
compared to Maltix and all the rest of them.
They were monolithic kernels.
As in, it was essentially one big block
that on the one side,
abstracted away from the hardware,
and on the other side gave applications
an interface to talk to the hardware.
In addition to administering resources,
making sure that applications are executed in a fair way,
so that one application could hog out of the hardware,
but rather that each and every application
would get a slice of the available CPU capacity
and all the rest of it.
Set of vertices would also basically provide
something called a file system,
where you wouldn't have to access the blocks of this
or another storage medium sequentially or directly,
but rather could associate data with this
with a so-called directory entry.
This was a good idea.
Indeed.
Which, of course, other companies like Microsoft
RIP of completely,
when they did something,
or sorry, Microsoft didn't do, of course.
MMS does, because as probably we all know,
Microsoft simply bought something called QDoS
and just marketed it as Microsoft Discooperating System.
But that's not a story for another day.
Fast forward,
Berkeley did a re-imdumitation of set Unix,
which is now known as something called
the Microsoft Institution BSE.
But all of these operating systems had one thing in common,
and monolithic operating systems
becoming larger and larger,
not as the more functionalities you put into them.
Fast forward to the early 80s.
Digital has had just created
the success of something called the PDB,
called the Vax Vax.
I can't remember what it stands for.
But, well, which is something or other.
You find the details in the show notes, I hope.
But
wasn't exactly happy with the operating system
running on its predecessor called the PDB 11.
So, they've cut her.
Digital engineers sat down and architected something called
the Virtual Machine System, I think it's called VMS.
That was the first commercially imbricates available,
Markov Karnel.
The idea behind the Markov Karnel was
to have a thin layer
abstracting away from the hardware,
and then have compartmentalized subsystems running on this Markov Karnel.
On the thin layer of that, that simply abstracted the hardware away.
So, in contrast to the monolithic operating systems,
this thin layer would merely provide a hardware abstraction.
So, where you had different, say, for some draft technologies,
it would provide a common API towards the different subsystems running on top of it
that would make the discs pretty much look alike.
I'm simplifying, but essentially that was or that's really the way it works.
Same goes for other hardware like network connections,
or network interface cards, input systems, and all the rest of it.
So, that is the general idea behind the Markov Karnel.
The idea, of course, being that you could have not only one subsystem,
a subsystem running on top of the Markov Karnel, but having more than one.
So, that was the overall idea behind the Markov Karnel at that time.
Now, at some stage, they've called a defector called to a to a complicate Microsoft,
probably that probably rings a bell.
Who, at the time, had just progressed from this Q-dose thing,
from this Q-dose derived thing called MS-DOS to something called Windows,
or we're just about to let's put it this way.
We talked about early 80s.
Well, MS-DOS was essentially for instantiated to not be derived,
but thought up early 80s.
I mean, IBM was looking, okay, the full story,
and this is common internet law.
IBM was looking for an operating system for it's newly invented,
that's what I'm looking for, or was looking for the, for the, for its newly invented PC line.
As in an interchap, an interchap with a name of 80, 88.
As in a six-and-bit architecture, but AP bus, they checked with the digital research guys,
who manufactured CPM for the Zanogas at 80 at the time,
but the proprietor and its wife, so common law goes,
were threatened by the fact that IBM people showed up,
and the first that they put on the table was an understosure agreement.
That's get them away, a huge mistake, and it turns out later,
as an initial deal that IBM had in mind,
to put CPM on that, on that personal computer there,
didn't really check out.
Then there was this small company called Microsoft,
another crook in New Mexico, who got the window of the story,
and said, we can of course provide you with an operating system for a set PC line.
Fun fact, Bill Gates and friends never had the technology then and there,
but managed to convince IBM regardless.
Now, of course, they were looking for an operating system that they could put on the machine,
such Ty and Lohan came about, more than a prototype called HUDA's,
quick and dirty operating system, which funny enough could run on an Intel 88,
sorry, 88, and also 886.
They bought essentially the right, including the source code of the HUDA's,
and marked it as the markers of this operating system,
subsequently known as MS-DOS.
Now, what also happened during the course of the 80s where Microsoft did this,
companies like Apple, Xerox, and other visionaries, including Silicon Graphics,
about that, came up with the idea of putting a GUI as a graphic user face on top of their
unique systems. Sun also had to long, let's put it this way.
So Microsoft was, especially with regards to competition with Apple in DAI,
I need, of putting also a graphical user face on top of something called MS-DOS,
hence this whole notion of Windows 1.0 was born.
Yes, I remember it well. It was completely useless.
18s.
You better of this with playing DOS if you better.
Yes, and it became quite clear, actually, that given the fact that IBM put more and more resources
into this personal computer technology line of theirs, it would become quite clear that eventually
this whole cover-together technology stack wouldn't suffice.
So Microsoft made one smart move at the time. They asked DevCutler, the inventor of SAP VMS,
to join them.
That must have been our Reckon, early 80s, something like that. So what DevCutler did,
apart from hiring a few university people, people are also along,
is some of his exclusive digital teams. Among the university people,
he was a Rick Rashid from Carnegie Mell University. Rick Rashid was actually one of the
brainsheds behind something called Mark III, which was one of the research
market colonels at the time. We're talking still, they're kind of late 80s.
So DevCutler was commissioned with the task of developing something of the next big thing,
like a true operating system that wasn't based on QDOS, or subsequently known as Microsoft
DiscoPriotN system, with a graph computer, with a graph laser face on top,
but rather something that would look like a much more real operating system.
IBM also had this...
Yes, IBM also had this technology of called OS2, which was still a monolithic colonel,
but given the fact that IBM was, and to a certain extent, still is, under the impression that not
everything that they bought eventually checks out, and I hear that there still was it at IBM that
think the same of Red Hat, but of course it told you a different story.
And suffice it to say they put some money on the table and developed something called OS2
internally. Microsoft provided some of the stack to this, but not enough,
because most of the stuff was done internally. But IBM managed to,
because IBM eventually got wind of the fact that Microsoft was doing their own new operating system,
money enough called new technology, because if for IBM, sorry, for Microsoft, this whole
microchrome thing was new technology in terms of a proper operating system for a change.
They managed to wrangle the commission from Microsoft, that Microsoft in addition to a
windows personality, and we're going to get into what a personality is in a minute, managed to wrangle
the commission out of Microsoft, that in addition to the windows personality, there would also do
an OS2 personality running on top of a new technology operating system that Microsoft was just
doing as a left-cut internment. So that is the reason why you have, with early versions of Microsoft,
especially 351, you still have that OS2 personality running on top of the microchrome.
So what David cut the events we did, he did a, I'm awesome to say, a spin of VMS.
He constructed a microchrome that was just a thin layer on top of the existing PC hardware,
but provided an API to run certain so-called personalities on top of set microchore nodes.
And one of them was Windows, one of them actually, another one was OS2, and of course the third one
would be, it would be a poses compliance, CMD-like interface, like a pretty much like a term
in the emulation, you would have with the early dust versions. So this new thing called Windows,
new technology, short Windows NT was born, early 90s.
Did you know that the original NT name came from the target processor, which was the Intel i860
apparently? Interesting, because I thought and she was sending for new technology.
No, that was later sort of added as a marketing spin, but it makes sense because for Microsoft
it was new technology. The i860 apparently had a code name of N10, which is what it
is interesting. Yeah, because of very well known factspers handy. No, of course, yeah.
Very much so, not because originally they're targeting 8086 and to the lesser extent 8088
with that, because 8088 was simply more powerfully enough to drive set microchrome.
Now, what also happened actually on the other side of the galaxy attempt to say that
there was a company called Apple that did quite a few interesting things in the 80s.
Came up with graphical workstations called Lisa. Something to consider to be stillborn,
but also something called a Mac in Tosh, which of course, as we all know, wasn't a stillborn,
when it comes down to commercial success. No, as I said, if you compare it to IBM then it
wasn't really a success one. We're going to get a minute mark, don't worry about it.
Yes. Well, in the Apple ecosystem, these failed figures of something called Lisa
of small elements. Exactly. In comparison to the Mac, to the Mac in Tosh,
pale, let's put it this way. So, Lisa attacked and the Mac, and the Mac in Tosh had some,
let's put it this way, small success in comparison to the IBM PC and friends.
What on earth?
Of course, the fact that IBM, to some extent, opened up their system to allow cloneers
get in on the game, of course, helped a certain, well, had certainly, let's put it this way,
because you would get IBM PC clones and XC clones and AT clones as an vastness energy,
as an disaster of the original PC left right in center. Apple, in contrast, was a clone system.
Apple never opened up the IP, the interfaces to their system, so you couldn't clone them.
As a matter of fact, Apple, still is, by the way, is very peculiar about
third-party software running on the machines, nevermind opening up the specifications of
certain, of set Macbooks or of set Mac in Tosh or whatever. It's a closed system, even more so
with the recent addition, something called Apple Silicon, because this is really closed system,
but I'm digressing. Okay, back into the 80s. As Martin rightly observed in comparison to
the sales figures of IBM friends, Apple wasn't doing too well. As a matter of fact,
there are quite a few mistakes. One of them outsting a certain Steve Jobs from
the board of Apple computers, funny enough, a company he originally founded with a guy called Steve
was near, but we're talking 70s now. Steve Jobs went off to set up his own company called
Next Computers. The idea was to provide a high-spec high-value workstation to mostly the educational
markets. Trouble is the cute, as it was called, was quite a good machine for one feature
an operating system. Didn't they write them in? Well, no. They took things that already existed
and put some on top of it. So if you take a look at something called Lexus, which was essentially
the operating system running on set Next Computers, you're looking at a Mark Marker kernel,
a new user land, and a proprietary GUI, and that hasn't really changed since then.
Okay, in fact, the few people who didn't go from Carnegie Mellon University as in the Mark III project
who didn't go to Markersoft joined a company called Apple because Steve Jobs was quite convincing
for them to join set company after he sold Next Computers to Apple back again, late 80s.
Apple at the time saw this as a way out of the conundrum. Apple was tanking. Next had some initial
success with the computer, with a lot of education computers. So Mr. Scully thought it might be a
good idea to bring Steve Jobs back in back into the company. So essentially, he might Steve
offer he couldn't refuse. A few dollars changed hands. Never meant the fact that Steve Jobs was
offered the position as an interim CEO to run Apple once again, something that he couldn't refuse.
Hence, and this new thing called Macintosh was born once again, now running in contrast to something
called OS 9, a new operating system like an Adaptive Next OS called OS X, like OS X,
that had, in contrast to OS 9, true multitasking and some other benefits. Fast forward,
about 20 years later, Apple and Microsoft laid 10s.
Okay. Well, it actually made that 20 or 5, 20 or 4s like this, 2005, 2004.
Steve Jobs already had copped on to the fact that the desktop market is quite limited,
never meant the server market, if you are playing the league below IBM with their big art and
all the rest of it. Plus the fact that Apple, still at the time, was pretty expensive. So around,
early 2000s, I reckon, Jobs had this brilliant idea of turning a computer manufacturer in
something called a marketing front. And that was one of the jobs he excelled at. So the notion
of iPads, iPods and all the rest of these gadgets that Apple really kind of used to save the
company, that was a smart move by a certain Mr. Jobs to turn, and I'm always tempted to say in
aiding hardware manufacturer into a lifestyle company. Hence the new Apple was born.
Now, at the time, and I'm digressing here a little bit, but if we click into placing about
five hours, we'll have come to the conclusion of this episode, but I won't worry.
I think we're probably looking at a mini-series. At the time, a certain Andrew Rubinstein
had come up with the idea of putting a small computer into everybody's pockets.
Funny enough, he named this little computer and enjoyed.
Steve Jobs had pretty much the same vision. He mentioned that the phones that you could get at
the time, like the batteries and all the rest of them, had one feature missing. You could only
phone people with them. Maybe you could read me, but that was pretty much as far as it went.
The idea that both people had is why not put a very small computer that is able to run apps
as an application into everybody's pocket at a price. Andrew went down the route of adapting
something called Linux as the basis for his was Android operating system, whereas a certain Mr. Jobs
decided that they already had something called Mac OS, or also known as OX10, and simply
stripped down that version to something called OS, which was the basis for something called
the iPhone, which at the launch, I think it took 28 or something. Welcome.
The iPhone was essentially running the Mac micro kernel with a stripped down previous
deep personality, because that is exactly what the operating system, that the original
next to it, still possessed with the graphical user pace on top of it still is.
So if you're looking at an iPhone today, you're still looking at a tiny Mark III micro kernel,
simply abstracting away the hardware, then something called a previously personality,
also known as Daven in the Apple Dingo, and then some crappy proprietary GUI on top of that.
Mac OS is still the same, hasn't changed. So this is the reason why if you open a terminal on
any OS X machine, since for at least for the last 14 years, 13 years essentially you look at the
BSD system. Mac ports and homebrew are just BSD package managers, that's the beauty of it.
So kids, grandfather, start talking. I mean, this is the kind of, this is the history in
the nutshell. These are the two kind of common examples for two micro kernel technologies that
have survived time. Let's put it this way, because Windows NT is still around. Now called Windows 10,
or maybe even Windows 11, yes, current law is anything to go by. I mean, the last
the last DOS based version that Microsoft did was I think Windows ME around 1998 or something like this.
And then after that, you're looking at Windows NT successors, let's put it this way.
So if you boot up your Windows XP, if it's around, if you would have a Windows 7, 8, or 10,
essentially you're looking at the micro kernel architecture at a very successfully,
from a commercial perspective on that, micro kernel architecture, same goes for OS X.
So you're using micro kernel architectures if you're using any of these two systems.
What you're not using, sorry, the other way around, you're not using a micro kernel architecture
if you're running Linux, because Linux is still the monolithic operating system to some
incentives with this way, that Linux thought up about 20 plus years ago. Linux is now called
these days a hybrid operating system. Let's put it this way, because since early days you can
load something called current modules into the kernel. So you can extend the kernel, for example,
with entropy generators, with device drivers, all the rest of it, but essentially it's still a
monolithic kernel. In contrast, for example, to something called minix, so any time you're listening,
we should probably talk about minix now, shouldn't we?
I can do, can do.
Can't you enlighten us about these, about these that were smart?
Yeah, well, this was really given the fact that you're half Dutch origin anyway,
or 100% Dutch actually.
Well, no, I'm not on the patience, but that said, the story for another day.
So I just want to ask where the rest comes from.
Yeah, so about the time, yes.
Yeah, so I think it was Tannenbaum, who opened the so-called war,
or I would call it. He initially said that Linux is obsolete when he, first, it's from around
92, maybe.
Of course, yes.
When he came up with minix, right, and he said, now that we have vital kernel, so we have minix,
this Linux is obsolete.
Oh, you need to find that letter, I think, originally?
I think it was specifically saying Linux, because that's why the reply came from Linux himself,
right?
For some strange odd reason, yes.
Yeah, so that's for how it started, and then Linux replied about, you know,
all the shortcomings of minix, like multi-threading, lack of multi-threading, and whatever.
But yeah, that's how it started, and that worried.
So Tannenbaum's original argument around minix is that it was able to run on
much cheaper, smaller CPUs, right?
Then, I'm on a lithoconal, which is clearly these days not such an issue, but
back in the day, memory and CPU processing power came at a significantly higher cost than they do now.
So that was his argument, with the macro kernel, you can run it on much smaller footprint systems.
True, and I mean, the argument, of course, doesn't hold, because if you take a look at Linux,
these days, from the operating system, that can be plot on the most varied hardware
that is on the planet.
ARM support ended the kernel in 95, that was a very early small move on that.
So since the mid-90s, you could run Linux on an ARM architecture.
Of course, Linux, when he devised Linux, had this interprocessor in mind, called 386,
because at the time that was basically the hardware that he had, but given the fact that quite a
few people re-architected this monolithic kernel, essentially, if you take a look at the structure
of the source code, although it's still a monolithic kernel, there's only a small set
of hardware abstractions encapsulated and the rest is portable C.
So although, from an architecture perspective, it's not a macro kernel,
the hardware dependencies, like a macro kernel, have been pretty much encapsulated.
Yeah.
You can see this if you take a look at, for example, the Wi-Fi device drive architecture.
There is a thin layer that encapsulates the hardware specifics of a Wi-Fi mic,
and after that, it's generic, able to 11 stack, independent of any device features.
I'm just a beauty. Of course, there is a little known fact that when it comes down to
deployment figures, Linux has actually won the war, because as common law goes,
Intel took a very close look at something called Linux, when they architected something called
the trusted platform module. For those listeners who run a family with the TPM, if you power up
any Intel processor of what? The last 10, 15 years of like this, maybe even longer,
essentially below the operating system runs another operating system
on a different portion of the CPU die called the TPM, the trusted platform module,
which is in charge of crypto things, some persistent storage, maybe a web server.
Unfortunately, Intel only opens so much of this GPU, so the rest is actually speculation,
but the law goes that the TPM is just much more than just a hardware module.
The details with the initial notes, but fun fact, Tannenbaum was approached
with some specific questions about the Linux code base. He answered these questions,
but then radio silence. Some people, way later in history, took a close look and in terms of
reverse-engineering portions of the TPM code and came to the conclusion that this is something
very close to something called Linux. So in the terms of deployment numbers,
Linux has clearly won the war in comparison to Linux, because if you take all of the
Intel-based CPUs on the planet into account, you're looking at slightly more CPUs than something
called Android that is never what it's pockets is using, or running on set devices.
As an ARM architectures, running inside your smart token.
Okay. Still awake Martin, excellent. I have some questions.
We'll get to those in some time. Yes, yes, for all means.
Maybe next episode.
So what questions are there, Mr. Visor?
Well, okay. So the different between
monolithic and my panels are quite clear. Now, what are the
characteristics, the benefits of one of the other in certain circumstances,
like performance, security, any thoughts on these subjects?
How many times do I have another two hours?
No, to summarize. Of course, you do pay an overhead with lots of performance. I mean,
this is what you clearly see. And Microsoft made quite a few mistakes here.
If you take a look at something called Windows NT version 3.1, where actually the video
device driver was separate from the micro kernel implementation, you could actually see
the window content refreshing and getting a cup of tea.
Because it only, it took so long because of the, for example, of the context, which is
between the different subsystems. Something they corrected, I think, with 351 or 4,
because they moved the device, I was back onto the micro kernel plane, which
of course meant lesser context switches and much improved performance.
As usual, security and performance are always straight off. Hasn't changed, so the more
secured system is, the lower probably the performance is. This is what you see, again,
when you take a close look at the different versions of the NT, you'll say if you move the
video driver closer to the micro kernel, but in any video driver could compromise the micro
itself or the personality where it's moved into, depending on how you put it.
So this is your typical kind of trade off bargain. What do you want to have? Do you want to have
improved security where you isolate as many components as you can? Or do you want to have
performance system where you basically trade insecurity to some extent? Needless to say,
MM use in the early days and something called security and clouds in modern systems do
have that matter. And I reckon with the accent of more and more virtualization, even in your
smartphone, things like security and clays become more and more important. I'm sorry,
and for the people who don't know what security and clases technology developed, I think,
originally by three of us. Yes, I think it was the first company to commercialize it anyway.
Imagine an address space that is further subdivided into so-called enclaves.
These enclaves can only be accessed by certain portions of the code, which had the necessary rights.
In contrast to MM use, when application, once it has acquired the address space, can do pretty much
whatever, whatever it wants with it. So picture and more secure system powered by additional
hardware features, let's put it this way. So you get more security without the additional cost,
let's put it this way. The research, the corresponding research goes back to the
I think late 80s, early 90s, when people have already thought about putting more intelligence
into something called memory management units, MM use. Okay, so going back to the kernel debate,
which one is the most secure? I reckon many of us would win the war here, because if you
load a Linux kernel module into the kernel, it has free reign of the kernel. In its kernel
rest space, so a point of problem can, of course, corrupt kernel data structures. If you corrupt
kernel data structures, you might as well call it power down the machine. In contrast to this,
personalities typically run in their own address space. So the connecting medium is actually the
the queuing systems or any other interprocess communication that the micro kernel offers.
So it's more secure at a price, because you do pay for example the context switch on overhead.
Yeah, so yeah, but covers the problem as well. Yeah, very good.
It's something of course that will be alleviated with quantum with the around of quantum computing.
But that's another story for another day children. And with that Andrew now,
discuss as Mr. as Mr. Vista, we take us into the boxings. What's your box, Martin?
Oh, dummy. What was it? Why don't you go first after the mic?
Let me let me just look one more. No, really, but what has changed?
Camera cans is the membership because you didn't pay your dues.
What's your box then? Yes, of course. A movie called The Sleepover?
I think it's from 2020 or something like this. As in typically family comedy,
if you're listening to bars credits, because I fully, fully disclosure, Python in it mentioned this
on one of the episodes about a year ago or something and I simply checked it out and
twice the spot on it's very, it's very funny. Essentially, it's about a family that
invites neighboring or other kids over for a sleepover. What they don't know is actually that the
mum of the family is a secret agent being recruited on her very last mission. And the husband
is a, let's put it this way, was for what of a better expression? Was? Was, yes.
What? And was like some protestants? Oh, not not applying animals. Sorry. And it's just drawn
into the whole adventure. Very funny. Don't miss it if you enter that sort of family entertainment.
It's clean. It's fun. It's hilarious to watch with with with kids if you have any.
Okay. What's your box? Well, I haven't really watched anything
for a week. Well, if you mention a book, if you want to, well, I can mention a paper
because I was quite impressed by it. A paper? Like a newspaper, like the like a son or something.
You heard me the first people? No, but they don't because that's reason why it's one of the biggest
views ever in the UK. People simply don't read it. So no more about it.
Have people still make physical newspapers? They do, yes. Okay. Okay.
Um, well, I certainly haven't. Oh, well, yes. What I used to go on a train two years ago.
I used to have those free, free news papers called the Metro. Yeah, very true, very true.
Yes. Oh, yeah, I remember this. So you read a newspaper and you were thoroughly
I didn't know. It says a research paper. A research, you read research papers. Why?
Yes, me. Well, to learn about stuff.
I have to find out what the current research is on certain things.
If you start to study once again, okay.
Well, you get in her first people, model spectrum unity.
Hopefully studying something worthwhile this time.
Well, not Michael. I think I think that that law has been so fantastic.
You were saying you said you read a research paper.
May I inquire about the subject? Oh, yes, of course, of course.
Um, it's called pal algorithms for real time.
Uh, which of the, uh, really not which optimization. Yeah.
It's none of this. Maybe scheduling. Yeah, yeah. That's not. Um, what's it?
For real time, real way, we scheduling.
Cameron, if you're listening, get in touch with Mr. Bissor.
Inside your music. What's it got to do with there?
I don't know. I didn't know camera were into real ways.
Sorry, Cameron. Cameron. Yes, yes. Yes. Indeed.
Anyway, um, well, what about them? Well, it's bad.
I agree with this for real.
It's a real melody.
You should be excited.
So.
There it is.
It's rather well done.
Which is why I mentioned it.
I mean, there's obviously many people
write research papers about lots of different things.
Hang on, hang on, hang on Martin.
Let me put this in the perspective.
I mean, train spotting was quite a cool movie.
Granted, but the only thing it's funny is quite different.
I'm literally.
So I reckon
that this algorithm paper is pretty much the next step, though.
Actually, it'll put you to sleep instantly
rather than after two minutes.
It's only 180 pages.
A research paper, okay.
It's actually putting together lots of other research involved.
From that point of view, it's what I mentioned.
It's really interesting.
It's what I mentioned.
It's really.
It's ripping off kind of research, okay.
It's combining previous research and adding to it.
Indeed.
But yeah, so if you're like ripping off, okay.
I get it.
That's open source for you.
Absolutely.
Fair enough.
As long as you code it, nothing wrong with it.
Indeed.
So, I guess, if you want to have some research,
you'll be able to tell tales.
He tells me to show you.
I don't know.
If you're something from insomnia,
that is the place to go to.
Just in case.
In case you made it to this end of the episode.
It is.
If you're still alive,
can't you sleep?
Take a look at this research paper.
I have a handy tip for you.
Insomnia.
It's a good tip.
It's a good tip for you.
It's a good tip for you.
It's a good tip for you.
It's a good tip for you.
And with that people,
thank you for listening.
And of course, is usual.
Oh, before I forget the answer.
Of course, we don't have feedback.
But we like to think about the radio for us.
Indeed.
Almost 1.5 years.
Thank you very much.
And of course, if you want to send feedback,
I'm sorry, I think it's in last video.
If you want to...
Just in touch.
If you want to episode on last painting,
like last video.
Yes, if you want to keep modern happy,
just send an M1 to use the text.
We want to have to share the details.
Just send a message to Sponsor and Linux in last video.
Thank you.
Thanks for listening.
And looking forward to having you around for the next episode.
This is the Linux in-laws.
You come for the knowledge.
But stay for the madness.
Thank you very much.
Thank you for listening.
This podcast is licensed under the latest version
of the Creative Commons license.
Tap attribution share like.
Credits for the entry music go to bluesy roosters.
For the song Salut Margot.
To twin flames.
For their peace call the flow.
And finally to the lesser ground.
For their songs we just this.
Used by the dark side.
You find these and other ditties license
under Creative Commons at your Mendo.
The website dedicated to liberate the music industry.
From choking corporate legislation.
And other crap concepts.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
For the music industry.
Yeah.
Yeah.
Yeah.
I'm need to sort out my audio as well.
Yeah.
Yeah.
venture to the dark side like so many others, my favorite operating systems.
Mark, if I do this, this whole liquid professional will become lukewarm and that's the pleasant
side. I mean, of course you wouldn't know because you drink a lukewarm all the time.
It depends what you call the quality. You want to do the intro?
No, well, you have to start recording first.
Oh, that's a kind of recording.
Yes, it would come in handy.
Oh, that would be annoying.
Let's spend the whole episode on recording.
If you would have bothered to take a look at the camera, it would have said behind glass painting episode.
Ah, okay.
I'm not sure. I'm actually enough to go back to my components anyway. No worries.
It's about to hear it.
Mr. Tanmo, if you could do your magic and start recording, that would be quite appreciated.
Maybe you could run Linux instead of Linux.
I see.
Welcome.
Mr. Cutter, good evening.
My box of the week is a movie called Taking Lives.
Hi, did you have that last episode?
Sorry, we have to cut this out.
Oh, spotted, yes.
Okay.
I'm really getting old.
What's your box then?
I can't remember.
Yes, of course.
You've been listening to Hecker Public Radio at Hecker Public Radio.org.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by an HPR listener like yourself.
If you ever thought of recording a podcast, then click on our contributing to find out how easy it really is.
Hecker Public Radio was founded by the digital dog pound and the Infonomicon Computer Club,
and is part of the binary revolution at binrev.com.
If you have comments on today's show, please email the host directly,
leave a comment on the website or record a follow-up episode yourself.
Unless otherwise stated, today's show is released on the create of comments,
attribution, share a like, 3.0 license.
