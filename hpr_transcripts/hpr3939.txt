Episode: 3939
Title: HPR3939: How I got into tech and hacking
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr3939/hpr3939.mp3
Transcribed: 2025-10-25 17:40:36

---

This is Hacker Public Radio Episode 3939 for Thursday the 7th of September 2023.
Today's show is entitled How I Got Into Tech and Hacking.
It is part of the series How I Got Into Tech.
It is hosted by Trickster and is about 21 minutes long.
It carries a clean flag.
The summary is getting interested in tech and start in both the odd and familiar places.
This is Trickster's Story.
Hey everyone.
This is Trickster.
If the name rings a bell, you might know me as the co-founder of MobyGames.com.
I'm also a demo-scene coder for many, many years.
I have a few first place productions under my belt.
On these days, I'm the showrunner of a yearly vintage computing festival.
As a hacktivist, I was also involved in the birth of the Abandoned Ware movement in 1997.
I'm also one of the curators of a DOS game archival effort that has been going on for
slightly over 25 years.
While I don't use the term to describe myself, I do consider myself a hacker.
And I thought, since Hacker Public Radio is running a little low on shows, it might
be time to record an emergency episode following the most common topic that people pick how
I got into tech.
I got into tech via intellectual curiosity and also the need to control my environment
a little bit.
I was an unabashed nerd as a kid and unfortunately, all throughout middle school, I was bullied
and in many cases beaten weekly.
So these two impulses needing to control my environment because of that and just simply
being curious naturally led to hacking.
So I'm going to go ahead and describe my timeline in those terms because how I got into tech
and how I got into hacking to me are synonymous.
So let's go all the way back to 1977.
Little Trickster is six years old and his father is working for teletype corporation, which
used to make machines that would sit on either end of a phone line and someone would type
on one end and it would output, be type written on the other end.
Obviously, these machines are gone, having been supplemented by everything from facts
to the internet.
But at the time, in 1977, it was necessary to analyze serial lines and so my father brought
home a serial line analyzer.
And it's my very first memory of sitting in front of anything with a display and a keyboard.
You would connect serial to both ends and set the board rate and what have you and then
you would be able to inspect the traffic going back and forth, but you could also inject
traffic.
So you would type on the keyboard and it would show up on this tiny one line vacuum
fluorescent display.
And I suppose that's where it all began, really.
Go forward two more years to 1977 and now I am in second grade and looking at an Apple
2.
At the time, I'm too interested in arcade games and console gaming with the Atari 2600
to notice really that the Apple 2 was not just an educational instrument.
It was actually a computer running software.
But that changed a year later in 1980 when a neighbor's mother who used to work for
AT&T brought home an Osborne, which is a portable or really luggable computer that runs
CPM and has two five and a quarter inch floppy drives.
And one of the discets that she brought home, and I'm not even sure she knew she brought
at home, was Colossal Cave Adventure.
My friend and I would, I don't know how, but we figured out how to start it up and we
spent hours trying to solve Colossal Cave Adventure, just exploring everything and typing
all the verbs we could think of, naughty and nice.
And that was pretty much it.
That's so the seed for, hey, this is an instrument.
This is a machine that does what I tell it and I've never really shaken that off.
Let's go forward three more years and end up in 1983.
I'm at a friend's house.
They have an IBM PCXT and that friend, actually the friend of a friend, their father worked
for AT&T and as such, had free long distance back in the 80s and some of the 90s long distance
cost extra money for those two young to remember.
You would pay something like 10 or 15 cents a minute.
If you called overseas, it was dollars per minute.
Thankfully, we don't have that problem anymore.
But when you had free phone calls and a computer and a modem, you could imagine that hilarity
would ensue.
We would connect to CompuServe, but we wouldn't do it to download files because we weren't
quite aware of that yet.
We would join these online games where lots of real people could all participate in the
same game, think like a trivia game or something like that.
And we joined them not because we wanted to play the games, but because we wanted to
just simply hang out in the game lobbies and talk to people.
And it was astonishing that there were people from all across the continental United States,
all typing to each other.
It was fascinating.
Also in 1983, I was fortunate enough to go to a middle school that had really good funding.
They had a lab of Apple II pluses and I discovered Apple writer.
And Apple writer let me type up my messy papers instead of handwriting them and constantly
racing and so on.
I would get half a letter grade more improvement than my classmate simply because I would hand
in typewritten things, not typewritten.
Of course, they would be printed out in a dot matrix printer, but you get the idea.
And of course, I love the idea that the computer could help me fix my mistakes before I exposed
them to others.
I really wanted a computer at that point, but unfortunately, we could not afford one.
But my father was very forward thinking.
And instead of purchasing a computer, he bought a computer magazine subscription.
Orders was family computing.
So every month, a computer magazine would arrive and I would just consume it, cover to cover.
And it wasn't as good as having a computer, but it definitely prepared me because this
magazine, like all 80s computer magazines, had it all.
It had coverage of the 8-bit micros, the newly emerging 16-bit systems.
It had basic programs you could type in and it even had those basic programs with slight
modifications for other systems.
So the base program was AppleSoftBasic.
But then here's the section to change for the PC and it would be like 10 lines you would
change.
And here's the section for Commodore and so on.
And reading that kind of taught me a little bit of computer programming without actually
having the computer.
In 1984, my middle school was teaching languages to 7th graders.
And I was taught basic and I was also taught logo.
For those who don't know, logo is a graphical programming language where you enter simple
commands like put the pen down on the paper, move forward 10 pixels, turn right 90 degrees,
move forward another 10 pixels and so on.
You could draw simple pictures with it.
It was designed as a teaching language.
But that is where the light bulb went on with programming for me, not necessarily basic.
I don't know why.
But in logo, you could define procedures.
These procedures could take arguments and you could name the procedures whatever you
wanted.
So this light bulb of, oh, if I'm doing a lot of repetitive actions and the only thing
that changes about them is this one thing, which is of course a variable, then I can kind
of put it all in, you know, a macro, it wasn't a macro.
But you know what I mean?
You could bundle it all up in a little package and give it its own name.
And all you had to do was change the argument and then all the code would run with that
different argument.
Light bulb completely went on.
I really loved programming.
At that point, I was excelling in the two programming classes that I was in.
And myself and a few other students were similarly gifted and the school was forward thinking
enough that they created a special seventh grade class just for gifted computer students.
This was amazing.
Think of it like a Montessori class almost.
It was not directed.
Now unfortunately, that means of course we ended up playing and copying a lot of games
in there.
But they arranged to have presentations from local computer people come in.
I grew up in the Chicago land area and Gottlieb was there.
Gottlieb was an arcade game manufacturer.
They created Cubert.
They created the LaserDisc Game Mach 3 and someone from Gottlieb dragged those arcade
games in for one of our classes and gave us an overview and a demonstration of the arcade
games and how they were created.
Satisfying and yet expanding my intellectual curiosity.
Finally in Christmas of 1984, we finally did receive a system.
My father worked for AT&T at the time and he got a corporate discount on their clone,
their PC clone at the time, the AT&T 6300.
And finally we had a computer and the first thing I did, I went bonkers entering in all
of the magazine type ends from the family computing magazine subscription we had previously.
And typing them in just indirectly teaches you programming, teaches you better programming,
teaches you structured programming.
Moving on a little bit more into high school, that's pretty much where intellectual curiosity
went rampant.
I was also interested in music and I was trying to get better music out of the computer
we owned.
But an IBM PC doesn't have a sound chip, so you figured out how to work within your limitations.
I started out writing basic programs that would play music.
I then figured out chords by playing arpeggios fast.
It's a single output PC speaker, can only play one note at a time, but if you can quickly
rapidly rotate through different notes, it sounds a little bit like a chord.
Later I saved up and purchased music construction set for the PC, which sounded very much like
you were trying to murder a buzzer, but it did try to approximate four voices, and that
was fantastic.
Later I got Bank Street Music Writer, which came with a piece of hardware that outputs
six real voices, and that further fueled my passion for trying to compose and playback
music on the PC.
Obviously, being a teenager during this time, I was copying more and more games, but I
was a little different than my friends.
I wasn't copying games based on how fun they were.
I was copying games based on how well they were programmed.
I tended to grab the simulators, the flight simulators, or maybe a racing game or something
that had particularly fast graphics, that kind of thing.
Certainly arcade games, arcade ports, not all of them were terrible for the PC.
Unfortunately, for me in high school, I was not particularly good at math.
Maybe I was, but I wasn't a particularly good student, and as such, I did not qualify
for the AP programming classes, where they were teaching all sorts of fun stuff, like advanced
algorithms, and they were using this new language I'd never heard of past scale.
I ended up ditching one of my classes to audit the programming class.
It was probably social studies or history, something that of course fascinates me now,
but didn't in high school.
No idea why funny how life works out.
But I really wanted to learn to robust scale, because it ran so much faster than basic
once it was compiled.
And a lot of my friends were in there, including Brian Hurt, who I later co-founded Moby Games
with.
When I wasn't trying to figure out how to hack my classes at school, I was back at
home trying to figure out how to hack the hardware.
Our computer did not have a hard drive, so trying to deal with a single floppy and then
later two floppy system required a little bit of hacking, especially if you wanted to
play games that required two floppies, or a hard drive, or so on.
One trick I learned was whenever a program exits, it has to reload command.com, this is
a PC running DOS, but there were situations where I couldn't have the DOS disk in the
drive, so I learned how to create a RAM drive, copy command.com to it, and then set the
COM spec environment variable to point to the RAM drive, and that saved quite a bit of
disk swapping.
Also little things like figuring out that burning up another 36 kilobytes of RAM was worth
loading a small disk cache just to get the force to read ahead caching.
So some disk caches, you know, you tell them to read one sector, and then they'll go ahead
and read all the sectors on that track anyway, just in case you need the next one, the next
sector, and a very small cache could go ahead and do that, and that made slow games load
from floppy disk, gosh, three times faster probably.
My journey in tech continued throughout high school, pirating games, joining pirate groups,
working for software stores and becoming a courier because I could grab the games from
the software stores, copy them, throw them up onto a BBS and return the game the next
day.
Let's jump forward to New Year's Eve 1990.
I've already told you that I was kind of trying to force non-musical computers to do
better music, and I delighted in well-programmed games versus like adventures and stuff.
I loved pirating games, so it's no wonder that when I discovered the demo scene, I really
took to it.
I had been aware of the demo scene indirectly by watching crack troze and other animated
messages the show up before you play a game showing, you know, who cracked it, shout-outs
to their friends, bragging that kind of stuff.
But I grabbed my first real pure demo, the space pigs mega demo off of a BBS on New
Year's Eve 1990, and I watched it, and just everything clicked.
It was like, there's a group of people out there who hack the computer for fun.
Make it do stuff that the designers never intended, and that was it, I just, that's all I wanted
to do.
And ever since that time period, I have been involved in the demo scene, often on, in
one way or another.
Let's continue on throughout the 90s, my hacking journey continues.
My first Unix was Harris UX on a Harris Mini computer at DePaul University.
Then later, I was working for a Unix company.
I worked for Mark Williams Company.
This is before Linux existed.
Mark Williams Company created a home-brew clone of System 5 R4, called Coherent, and it
was, actually, it wasn't even System 5 R4, it was before that.
It was really like a clone of System 7, so it was kind of limited.
But it was a Unix that you could run on a 286 or higher, and it cost $99 and came with
a huge gigantic manual.
And working for them, first as technical sales, and then later in the technical support
department, of course, I learned all sorts of fun hacking.
My very first email address that delivered email directly to my house was hacked up via
UUCP.
In fact, you can search and try to find my original email address, which is, get ready for
this, mwcbangutrixbangmwcbbsbangtrxhomebangtrxtrxter at uunet.u.net.
That was a real email, and it got all the way to my house.
Later, I left Mark Williams Company and no longer ran Coherent on my home system, although
there was another good reason for that, but that's a story for another day.
So I ended up running Slackware on my 38640 MHz system in 1994, connecting to the internet
via Slip serial line IP.
This is before PPP existed.
During this crazy new thing called the World Wide Web, hacking knowledge continued by finding
out that you could, by discovering that you could view the source of any web page you
were looking at.
So that's how I taught myself HTML.
Also around this time, I was doing some demo scene coding.
I preferred Pascal, having learned it from that AP course I was crashing, but the thing
that made it usable for demo coding and for anything performance related is that at some
point TurboPestScal, I think it was six and later, added the ability to have inline assembler.
And that was fantastic.
You could just simply inline assembler to replace a series of statements that were very slow
or that the compiler couldn't optimize.
Then something curious happened.
In the late 90s, I had children.
I was married in 94 and we had children in 97 and 99 and as a default activity, hacking
mostly stopped.
I'm not mad.
This is nobody's fault.
It's just life.
And I thought at the time that, well, this is the next phase of my life, I have children
now.
I have a family.
I need to pay attention to them and I need to provide for them.
What ended up happening is that all that prior hacking experience I just described, all
those skills ended up translating into good job skills and job performance.
I became skilled at troubleshooting poorly documented systems and removing bottlenecks.
I worked for a cyber security forum for five years troubleshooting, crazy stuff like
quadrupling knatted firewalls.
And I was called the smartest kid in the room for most of the 2000s.
These days, I am not called the smartest kid in the room.
And most of the time, I'm not and that's actually good because that means everyone is smarter
than me, which means I must be in a really great work environment.
Hacking does continue, but only sparsely and really on my terms.
For example, I was always annoyed that the original PC could have been programmed better.
So eventually, my demo scene activity focused on it.
I've had a crew, so to speak, since, let's say, 2013.
And my crew and I won the old school compose at revision 2015 and evoke 2022.
And we received scene.org awards and meteorical awards for those productions.
Those awards are kind of like the Oscars for the demo scene just for lack of a better term.
So I still hack.
It's just changed in scope.
You know, here's another scope change.
As previously mentioned, I help run a vintage computer festival every year, a vintage computer
festival Midwest.
And we have to put on a show that serves over 2000 people with only six of volunteers and
hardly any money or equipment.
We also don't charge for the show.
So we kind of have to make do with donations and donated equipment and spur the moment,
grabbing somebody for manpower and things like that, trying to put on a vintage computer
festival that serves over 2000 people with only six guys has to be hacking in some form.
It's just got to be.
You know, hacking has served me really well for half a century.
I guess I'm happy to be that old, but I guess I'm also happy that hacking has enriched
my life for that long.
You know, hacking isn't limited to just personal enjoyment of tech.
It's helped me in my career and it's also helped me socially.
When you meet another hacker, you've both immediately got this shared vocabulary and interests.
And you can use that to speak in a sort of shorthand to communicate quicker and more effectively.
When I go to a demo party, you know, I like to say that I can crack a shade Bob joke
and someone somewhere will get it.
And that's a really great feeling.
That has been my journey thus far.
I hope it continues and I hope that if you are a budding young hacker and you are trying
to hack your life, your situation, your tools, your utilities, your relationships for better,
I hope you have the intellectual curiosity to discover what works for you and carry
through.
Thanks for listening.
You have been listening to Hacker Public Radio at HackerPublicRadio.org.
Today's show was contributed by a HBR listener like yourself.
If you ever thought of recording podcasts, you click on our contribute link to find out
how easy it really is.
Hosting for HBR has been kindly provided by an honesthost.com, the internet archive and
rsync.net.
On the Sadois status, today's show is released under Creative Commons, Attribution 4.0 International
License.
