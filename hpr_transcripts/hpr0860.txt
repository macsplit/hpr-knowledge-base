Episode: 860
Title: HPR0860: Kaizendo, GNU Parallel and some more FSCONS
Source: https://hub.hackerpublicradio.org/ccdn.php?filename=/eps/hpr0860/hpr0860.mp3
Transcribed: 2025-10-08 03:42:32

---

You're listening to Hacker Public Radio.
Today's topics will be FSconz 2011, Kaizendo and GNU Parallel.
Hello everyone, you might know me as CT or perhaps Kenneth from All in IT Radio.
Today we'll talk a bit about FSconz this year.
You remember in a past episode of Hacker Public Radio, I mentioned a bit about the conference
in general, but I thought I would mention a few of the topics we will have a privilege
of hearing this year.
Among other speakers, we will hear Jeremiah Foster again, you've already heard an interview
with him.
He will talk about embedded free software, open source in your car, which is right up
his alley.
We will hear a talk about accessibility for Qt and KDE.
Of course, there will be a talk about Bitcoin.
We will hear a talk by Johan Theline about Necessitas Qt on Android.
That's quite interesting.
If you're not in the KDE camp, we will hear a talk named The Design of Nome 3
by a man called Andreas Nilsson.
We'll hear the topic, Erlang Embedded Simulation, how to run successful contributor sprints.
That's in the free desktop environment category for some reason.
The keynote the first day, no, the second day, sorry, Saturday, will be held by none other
than the famous Richard Stolman, and it is not one of his ordinary titles because this
talk isn't titled dialogue with Richard Stolman.
That'd be something to look forward to.
We'll hear some coverage of the Open Risk project, theming GDK plus applications with CSS.
That sounds interesting.
We'll hear, catch them early, free software in education by Guido Arnold.
We'll hear a talk about Arduino, and we'll have some workshops, of course.
We'll hear some coverage of WikiLeaks, and there'll be some people talking about all
these self-building machines.
It's a man called you Ancerter Bayer who will talk under the theme of reproducing machines,
reproducing economic relations.
We'll hear the theme, the revolution will not be televised, but will it be on YouTube.
And Sunday's keynote will be under the theme Hackers for Social Justice by Christina Haralanova.
And there are another talk at Sunday afternoon, which I will catch named Steed, Sadler for
Instant Encryption.
It's about male encryption, it seems very interesting.
There are also some Python talk, and there will be another Python event in association
with FSconz, which I don't remember at the moment, where it was, but it's somewhere
in Gothenburg.
You can probably look that up for yourselves.
Anyway, I'm looking forward to FSconz this year, although this show will probably be
aired after FSconz has taken place.
I hope to get some good interviews this year as well.
From last year I have a few other tidbits, a few other golden nuggets for you.
We will start off with a man from Norway.
His name is Salver J. Nielsen, and he had a talk named Kaizendo, customizable schoolbooks.
He is active in the local free software communities in Oslo, Norway.
He is an organizer of several conferences.
He's a Pearl Hacker, and currently he works on Kaizendo.org, which is a tool for creating
customizable textbooks.
If you have a look at that web page, it says, imagine a schoolbook where the pupil and
a teacher can choose the topic death, clarity of text, and homework difficulty as needed
and necessary.
Ad alternatives for teachers, supporting different instructional methods, teaching styles,
schools, variations in shabby content based on time constraints and policy, and parents,
having a topic summary to read before helping with homework.
This is what we mean with customizable textbooks.
It's a very interesting concept, but I started off with asking him the age-old question,
why are you here?
I gave a talk first at 10 o'clock yesterday about my project, and it's both that and
the mid-peat bull and look what's going on, and look at the, it's a nice feeling to this
whole conference, it's my second time, and it's in general just, I have to go to this
one every year now, so it's a cool place to be.
Oh, it is.
I heard your presentation, it was very nice, tell me a little bit about it.
Alright, I'm trying to make a piece of software together with a bunch of people, free software
license, a GPL, where we want to create a tool that you can use to write textbooks that
can be individually customized to suit the needs of the reader.
That's the basic problem we're trying to solve.
We want to have textbooks for school kids that can be customized in such a way that they
spend, it's more interesting for them to read that they spend less time, or if they have
some physical problems like dyslexia or something like that, then it takes, the book also
helps, to manage this and still keep up the learning rate as the rest of the class.
That's an idea here.
How old is the project?
It's been mulling around in my brain for like ten years.
I started it properly just about a year ago when I quit my old job and said,
alright, I want to try and do this and see if I can make it.
We've had code working since May, quite a few of the preparations we've been doing.
I have a partner in crime called Sain Sensen, and we've also been trying to look at not only
how to solve this problem and how to make use of all kinds of interesting things, but also
seeing if we can make business out of this too.
We want to make a free software-based business in order to make sure that what we do has
a viable life cycle around it so that it doesn't just disappear if some of us get hit
by the bus basically.
Right.
I work as a teacher in secondary education here in Sweden, and well, I would like to use
what you're talking about.
I would like the result, but there aren't any real results.
There aren't any books to use yet.
Or?
No, the cool thing here is that there are books today, quite a few of them.
I'm not entirely sure about the Swedish state of the world, but in Norway where I come
from, we have something called the National Digital Learning Arena.
We're basically 18 out of 19 counties have decided to pull their money to build, not
to buy the complete rights for a bunch of schoolbooks.
I think they have 19 topics now, and then build, basically, by time of teachers and enthusiasts
so they can gradually improve the text in those books so that they fit better towards
needed in the classroom.
Those books are creative comments share like a non-commercial license, and they also tend
to remove the non-commercial bits, so it's even possible to create business around
that.
So this is the situation in Norway.
If you just look around for open educational research, web pages, like the OERGRAVE
line, or if you look at wiki books, plenty of other books that are a good basis to start
improving them.
So that's what I'm trying to do.
I can't give a book to anyone yet, but I would like at least to have that there's a tool
so we can make those books.
And we just need to start with one book, really, that is the good olds, one story, beginning
middle end type, and then add the customizations to it that's needed for the different types
of people and their problems.
All right.
But isn't doing a book for a dyslactic or for any kid or for other special needs, isn't
that writing three, four, five different books, essentially?
Yes.
It is.
And probably more even, like if you have a book that's for talented kids, like the kids
that learned early how to read very quickly and basically they have bored in the classroom.
Maybe you want more information.
But who knows, maybe some of them are interested in a specific topic.
So they would like to have more information around it, or on that topic, in that chapter,
or they have a week where they figure out that they don't have time.
Or if you have all the combinations of issues that you want to solve somebody who is both
interested in the information of some historical fact and is a dyslactic.
So the combination, there is a danger of a combination of combinatorial expression
basically and how much you have to write.
So there is basically only one way of doing that.
And that's first of all, see what's needed.
And then secondly, most importantly, is make sure that those people who have a need get
the opportunity to add to the text.
So it's basically has to be written in public in some way.
But at the same time, you want it to be one coherent story that's being told.
So you can actually use it as a kind of a guideline for what's going on in the classroom
and when you bring a book home to do your homework.
So you still need the language to be consistent.
The pacing of the story has just about the same thing.
Maybe some versions of the text don't give as much background information.
So it's less to read.
But still, it's kind of the same story.
However you write it, so you can take one version of the book and put it next to
the other one and check is the story, right?
Each point raised throughout the text are they in the correct order?
Is the tone of the language the same?
You can't do comparisons like that and still manage to make it not too difficult to write
this.
It's still a hell of a lot of work, but you can't make it anywhere because we have liked
the way.
We know that writing immensely large, hugely complicated texts, is quite possible today,
which is look at some Linux kernel, that's text too.
Yes, and basically what we're trying to do is make that way of writing texts available
to regular authors who want to write schoolbooks.
But what you're talking about, and of course that's your idea, is the tool to create it.
How will you display it?
Is your idea to print the different versions of the book or any of the media?
No, not multimedia.
Right now, I'm basically thinking, let's just make a web page with the content.
And I'm focusing on what's needed for the textual content and supporting images.
But the thing here is, in order to make this happen, it must be easy to pop in, change,
update.
And if we put multimedia in there, say a flash animation or a visualization of some chemical
process or whatever, and somebody selects that animation and says, oh, by the way, I don't
understand this.
Could you do this in this in order to improve how this point is raised?
Then there's no trivial way of making an update to that specific aspect of that specific
animation.
So it's kind of, we can't touch that.
There's already hundreds of projects out there who do the interactive thing.
But let's try and do something with the text thing, the basics, basically.
That's what I'm trying to do here.
And when it comes to publishing, well, we have great form with HTML right now.
So putting it in the web page and using that is simple.
Making it readable on handle devices is a matter of tweaking the CSS file, basically.
And converting that into something you can send to the print shop for your own custom
book is a doable problem.
That's something that was solved in a very pleasing manner like five years ago.
And I can point out the book that actually did that.
Well, yeah, you're correct.
The problem is creating the text.
Yes, it is.
So that's the really difficult bit.
And well, a nice tool that you can use for cooperation and give gain feedback and using
the feedback for writing the next revision of that text and having some way of basically
saying, this text is now good enough.
So we make a book version 1.2 available if you want to use that one in your classroom.
Just use it.
And so it's think about treating textbooks like free software projects.
It's the same thing, but instead of having one edition every two years, you have one
every two weeks if you want to.
Very exciting.
One last question.
Yes.
What should I do?
As I said, I'm a teacher.
I really want to pursue, and I don't produce that much.
But what should I do?
How can I?
Right now we're trying to set up a project.
We have a project.
We have people hacking on the code.
We're trying to make it prototype right now.
We have running code that doesn't do much yet, but we have a very clear idea of what we want
to do.
We still need feedback, and we need on the usage eventually.
We're planning on doing something that makes the code available for people to basically
browse the website and give feedback.
Might take a few months before we are there.
This is kind of, we're doing this on our spare time.
None of us is paid to do this, even if I have, hopefully, some kind of viable commercial
and future in there somewhere.
So if you want to help, go to kaisendo.org.
That's a wiki with some basic information.
See if there's something that interests you, log on there, fix the text there.
If you have questions, we have an RC channel on three nodes called kaisendo.
And if you want to get a picture of what's going on, slow progression, or even have some
questions or discussions, we have a mailing list.
It's all on the wiki.
It's kaisendo.org.
Wonderful.
Splendid.
Thank you very much.
You're welcome.
So is that cool or what?
In Norway, they buy textbooks and release them under creative comments.
I just have to say, way to go Norway.
As a teacher, I really like the sound of this.
To be able to adapt a text to pupils who read way ahead, or need more time to take in
the material, to actually be able to give them what they need through the material that
you have.
You don't have to think on your feet all the time.
It sounds great.
Next in line to be interviewed was a man from Denmark, our other neighboring country up
here in the cold north.
His name was Ule Tanghe, and he gave a talk about GNU parallel.
He also had a terrible cold this day, so we were happy he actually showed up at all.
And you could hear on his voice that he wasn't actually feeling that well all the time.
But it was a trooper, and we're glad he came.
He runs the large sequencing computers at the Bioinformatics Center in Copenhagen, Denmark.
And if you read about GNU parallel at the GNU.org website, you find that it says GNU parallel
is a shell tool for executing jobs in parallel using one or more computers.
A job can be a single command or a small script that has to be run for each of the lines
in the input.
The typical input is a list of files, a list of hosts, a list of users, a list of URLs
or a list of tables.
A job can also be a command that reads from a pipe.
GNU parallel can then split the input and pipe it into commands in parallel.
In TREG yet, well here he is, the man behind the program.
And I started out by asking him what he thought about the whole situation at FSCon's and
his talk.
So I was quite happy that people were quite understood what I was talking about, because
that's always the problem when you're talking to an audience that you don't always know
what level you can go at.
And clearly this audience already knew what we were talking about, and it was the right
audience.
And they knew XRX and when you're newly XRX, new parallels sort of comes in ultimately.
So it was good to be around a few ideas while talking to them.
So in the next version of new parallel, you will see some extra features.
I heard a few comments that well they thought there weren't enough technical talks and
presentations here.
So you fell well in with that crowd.
That's good.
Neil, on the other hand, I'm not quite that technical.
Of course, I live on the command line to some extent, but I can't really think of when
would I use parallel.
Well, you would use parallel since you're making audio, right?
So let's assume that you have all these audio files and you want to convert the audio
files from MP3 to ARC, right?
You have 1,000 of those files and you have a computer with four cores, right?
So you want to run four jobs in parallel.
You don't want 1,000 to run in parallel, but you want four in parallel.
And that's where the new parallel re-shines because you simply go to the directory and then
you type the command you want to run, you put parallel in front of, you do three columns
and your arguments afterwards and you're done.
And in my head, that translates as, all right, should I actually learn to use parallel
or should I just leave the computer over the night?
Yeah, well, the learning curve is really, really, really, really small.
If you're already know how to use your encoder and basically what you're just, instead of
putting the word nice in front of the name, you put the word parallel in front of the
name and instead of giving the arguments, you do three columns and then you give the
arguments, for instance, the star or star.mp3 and then you're done.
But that is fairly simple, right?
And yeah, they're way more fancy features, but most users, they stop by just doing that
and evenly as the author.
That is the command I use all the time.
In my daily life, oh, I just need to do this on 1000 files or 1000 uses and just do that.
The three columns thing really, really easy and it gets the job done and it gets the job
faster than doing it overnight.
I heard one question that was in the afterwards, if you would like, well, let's say you have
a couple of dozen servers and you want to do something, you want to do an update, perhaps
a security update, something on all of them.
Is this possible for parallel or is it the wrong use case?
That is exactly the wrong use case.
But you're not the first one to make that assumption and it's the same.
So should new parallel does not run the same commands on a lot of servers?
No, all right.
It runs different commands on a lot of servers with different arguments and then get
what you're looking for is document it in new parallel's main page because I have made
that assumption.
So of course in the main page it will say, well, there are some alternative tools that
does more or less the same and the one you're looking for is probably something like cluster
SSH, which would then open a window to each of your servers and then have a master window.
You type in the master window, it goes to all the servers and then you move your mouse
to another one of the windows and it only does that server and that is made for that.
You can force new parallel to be a performance version of that because you can give a list
of servers and say, wrong this command and your argument would then be the host name.
But there are tools that it's actually made for it, new parallel is not made for that.
When did parallel become new parallel?
Very recently it did this spring or parallel has been in development for quite a few years
and it didn't become new before I felt that it was stable enough.
Oh, all right.
Was that the reason why you waited?
Not quite, but that's a good excuse, right?
All right.
Is it included in any Linux distribution today?
To be honest, I'm not good at keeping track of that because I can see there are packages
turning up here and there and I'm not sure if they include in the main branch or only
an experimental branch.
But I know there are packages for Debian, there are packages for centers, there are packages
for Susie, there's packages for previously, there's packages for Solaris, there's packages
for, yeah, really a lot of the distributions, but I don't know if they made it into the
branch.
No, okay.
And still it's basically just a parallel script, you can't download the file and just run it.
Yes.
And not just basically, it is.
All right.
So it's also the only parallel script and even the main page is generated from the parallel
script.
So it really is only that parallel script.
Why parallel?
Because that was the language I knew better.
All right.
I'm going to find a lot of users now, there are going to be VI users that I'm going to
think.
Indeed.
All right.
So Emax it is.
Yeah.
Interesting.
Well, I almost understood that when you on your slide, you showed Emax first, then VI.
As an I have to thought.
But it was sensitive of you.
All right.
Thank you.
You're welcome.
So if you didn't have GNU parallel in your arsenal of tools, have a look at it.
And that's all for today, folks.
We've had two really nice interviews and two really nice projects you can have a look
at.
Of course, you will find all the relevant links and the links to both Salvas and Uleus
talks at FSconz in the show notes.
They are both on Vimeo.
If you are interested, and I will leave the links for the respective projects homepage
as well.
Thank you for listening to Hacker Public Radio.
Live long and podcast.
You have been listening to Hacker Public Radio at Hacker Public Radio.
We are a community podcast network that releases shows every weekday Monday through Friday.
Today's show, like all our shows, was contributed by a HBR listener by yourself.
If you ever consider recording a podcast, then visit our website to find out how easy
it really is.
Hacker Public Radio was founded by the Digital Dark Pound and the Empanomical and Computer
Club.
HBR is funded by the Binary Revolution at binref.com.
All binref projects are crowd-responsive by Lina Pages.
From shared hosting to custom private clouds, go to LinaPages.com for all your hosting
needs.
Unless otherwise stasis, today's show is released under a creative commons, attribution, share
a like, free those own license.
